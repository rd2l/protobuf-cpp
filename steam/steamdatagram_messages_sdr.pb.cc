// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_sdr.proto

#include "steamdatagram_messages_sdr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramClientPingSampleReply_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramDataCenterState_Server_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramP2PRoutes_RelayCluster_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramP2PRoutes_Route_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramRouterHealth_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramRouterPingReply_RouteException_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramConnectionClosed_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramDataCenterState_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramConnectOK_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramConnectRequest_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramP2PRoutes_steamdatagram_5fmessages_5fsdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
namespace proto {
namespace steam {
class CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRouterPingReply_RouteException> _instance;
} _CMsgSteamDatagramRouterPingReply_RouteException_default_instance_;
class CMsgSteamDatagramRouterPingReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRouterPingReply> _instance;
} _CMsgSteamDatagramRouterPingReply_default_instance_;
class CMsgSteamDatagramGameserverPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramGameserverPing> _instance;
} _CMsgSteamDatagramGameserverPing_default_instance_;
class CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramNoSessionRelayToClient> _instance;
} _CMsgSteamDatagramNoSessionRelayToClient_default_instance_;
class CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramNoSessionRelayToPeer> _instance;
} _CMsgSteamDatagramNoSessionRelayToPeer_default_instance_;
class CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientPingSampleRequest> _instance;
} _CMsgSteamDatagramClientPingSampleRequest_default_instance_;
class CMsgSteamDatagramClientPingSampleReply_RoutingClusterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientPingSampleReply_RoutingCluster> _instance;
} _CMsgSteamDatagramClientPingSampleReply_RoutingCluster_default_instance_;
class CMsgSteamDatagramClientPingSampleReply_DataCenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientPingSampleReply_DataCenter> _instance;
} _CMsgSteamDatagramClientPingSampleReply_DataCenter_default_instance_;
class CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientPingSampleReply> _instance;
} _CMsgSteamDatagramClientPingSampleReply_default_instance_;
class CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality> _instance;
} _CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_;
class CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientSwitchedPrimary> _instance;
} _CMsgSteamDatagramClientSwitchedPrimary_default_instance_;
class CMsgSteamDatagramConnectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectRequest> _instance;
} _CMsgSteamDatagramConnectRequest_default_instance_;
class CMsgSteamDatagramConnectOKDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectOK> _instance;
} _CMsgSteamDatagramConnectOK_default_instance_;
class CMsgSteamDatagramConnectionClosedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionClosed> _instance;
} _CMsgSteamDatagramConnectionClosed_default_instance_;
class CMsgSteamDatagramNoConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramNoConnection> _instance;
} _CMsgSteamDatagramNoConnection_default_instance_;
class CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramGameserverSessionRequest> _instance;
} _CMsgSteamDatagramGameserverSessionRequest_default_instance_;
class CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramGameserverSessionEstablished> _instance;
} _CMsgSteamDatagramGameserverSessionEstablished_default_instance_;
class CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsClientToRouter> _instance;
} _CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_;
class CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsRouterToClient> _instance;
} _CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_;
class CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsRouterToServer> _instance;
} _CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_;
class CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsServerToRouter> _instance;
} _CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_;
class CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramP2PSessionRequestBody> _instance;
} _CMsgSteamDatagramP2PSessionRequestBody_default_instance_;
class CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramP2PSessionRequest> _instance;
} _CMsgSteamDatagramP2PSessionRequest_default_instance_;
class CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramP2PSessionEstablished> _instance;
} _CMsgSteamDatagramP2PSessionEstablished_default_instance_;
class CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramP2PRoutes_RelayCluster> _instance;
} _CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_;
class CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramP2PRoutes_Route> _instance;
} _CMsgSteamDatagramP2PRoutes_Route_default_instance_;
class CMsgSteamDatagramP2PRoutesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramP2PRoutes> _instance;
} _CMsgSteamDatagramP2PRoutes_default_instance_;
class CMsgSteamDatagramP2PRendezvousDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramP2PRendezvous> _instance;
} _CMsgSteamDatagramP2PRendezvous_default_instance_;
class CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsP2PClientToRouter> _instance;
} _CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_;
class CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsP2PRouterToClient> _instance;
} _CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_;
class CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramP2PBadRouteRouterToClient> _instance;
} _CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_;
class CMsgSteamDatagramRelayToRelayPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRelayToRelayPing> _instance;
} _CMsgSteamDatagramRelayToRelayPing_default_instance_;
class CMsgSteamDatagramDataCenterState_ServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramDataCenterState_Server> _instance;
} _CMsgSteamDatagramDataCenterState_Server_default_instance_;
class CMsgSteamDatagramDataCenterState_DataCenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramDataCenterState_DataCenter> _instance;
} _CMsgSteamDatagramDataCenterState_DataCenter_default_instance_;
class CMsgSteamDatagramDataCenterStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramDataCenterState> _instance;
} _CMsgSteamDatagramDataCenterState_default_instance_;
class CMsgSteamDatagramRouterHealth_DataCenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRouterHealth_DataCenter> _instance;
} _CMsgSteamDatagramRouterHealth_DataCenter_default_instance_;
class CMsgSteamDatagramRouterHealthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRouterHealth> _instance;
} _CMsgSteamDatagramRouterHealth_default_instance_;
class CMsgSteamDatagramConnectionStatsP2PRouterToRouterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsP2PRouterToRouter> _instance;
} _CMsgSteamDatagramConnectionStatsP2PRouterToRouter_default_instance_;
class CMsgSteamDatagramP2PBadRouteRouterToRouterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramP2PBadRouteRouterToRouter> _instance;
} _CMsgSteamDatagramP2PBadRouteRouterToRouter_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgSteamDatagramRouterPingReply_RouteException_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramRouterPingReply_RouteException_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramRouterPingReply_RouteException_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramRouterPingReply_RouteException_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramRouterPingReply_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramRouterPingReply_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramRouterPingReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramRouterPingReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramRouterPingReply_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramRouterPingReply_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramRouterPingReply_RouteException_steamdatagram_5fmessages_5fsdr_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramGameserverPing_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramGameserverPing_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramGameserverPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramGameserverPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramGameserverPing_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramGameserverPing_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramNoSessionRelayToClient_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramNoSessionRelayToClient_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramNoSessionRelayToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramNoSessionRelayToClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramNoSessionRelayToClient_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramNoSessionRelayToClient_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramNoSessionRelayToPeer_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramNoSessionRelayToPeer_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramNoSessionRelayToPeer_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramNoSessionRelayToPeer_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramClientPingSampleRequest_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramClientPingSampleRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramClientPingSampleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramClientPingSampleRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramClientPingSampleRequest_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramClientPingSampleRequest_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramClientPingSampleReply_RoutingCluster_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramClientPingSampleReply_RoutingCluster_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramClientPingSampleReply_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramClientPingSampleReply_DataCenter_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramClientPingSampleReply_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramClientPingSampleReply_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramClientPingSampleReply_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramClientPingSampleReply_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramClientPingSampleReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramClientPingSampleReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramClientPingSampleReply_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgSteamDatagramClientPingSampleReply_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_steamdatagram_5fmessages_5fsdr_2eproto.base,
      &scc_info_CMsgSteamDatagramClientPingSampleReply_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_RouterQuality_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_RouterQuality_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramClientSwitchedPrimary_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_steamdatagram_5fmessages_5fsdr_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramConnectRequest_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramConnectRequest_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgSteamDatagramConnectRequest_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramConnectOK_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectOK_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectOK();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectOK::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramConnectOK_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgSteamDatagramConnectOK_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramSessionCryptInfoSigned_steamnetworkingsockets_5fmessages_2eproto.base,
      &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramConnectionClosed_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectionClosed_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectionClosed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectionClosed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramConnectionClosed_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramConnectionClosed_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramNoConnection_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramNoConnection_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramNoConnection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramNoConnection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramNoConnection_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramNoConnection_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramGameserverSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramGameserverSessionRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramGameserverSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramGameserverSessionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramGameserverSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramGameserverSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramGameserverSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramGameserverSessionEstablished_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramGameserverSessionEstablished();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramGameserverSessionEstablished::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramGameserverSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramGameserverSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramConnectionStatsClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramConnectionStatsClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramConnectionStatsClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramConnectionStatsRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramConnectionStatsRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramConnectionStatsRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramConnectionStatsRouterToServer_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramConnectionStatsRouterToServer_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramConnectionStatsRouterToServer_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramConnectionStatsServerToRouter_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramConnectionStatsServerToRouter_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramConnectionStatsServerToRouter_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramP2PSessionRequestBody_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramP2PSessionRequestBody_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramP2PSessionRequestBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramP2PSessionRequestBody::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramP2PSessionRequestBody_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramP2PSessionRequestBody_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramP2PSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramP2PSessionRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramP2PSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramP2PSessionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramP2PSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramP2PSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramP2PSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramP2PSessionEstablished_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramP2PSessionEstablished();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramP2PSessionEstablished::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramP2PSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramP2PSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramP2PRoutes_RelayCluster_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramP2PRoutes_RelayCluster_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramP2PRoutes_RelayCluster_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramP2PRoutes_Route_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramP2PRoutes_Route_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramP2PRoutes_Route();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramP2PRoutes_Route::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramP2PRoutes_Route_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramP2PRoutes_Route_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramP2PRoutes_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramP2PRoutes_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramP2PRoutes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramP2PRoutes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSteamDatagramP2PRoutes_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgSteamDatagramP2PRoutes_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramP2PRoutes_RelayCluster_steamdatagram_5fmessages_5fsdr_2eproto.base,
      &scc_info_CMsgSteamDatagramP2PRoutes_Route_steamdatagram_5fmessages_5fsdr_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramP2PRendezvous_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramP2PRendezvous_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramP2PRendezvous();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramP2PRendezvous::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CMsgSteamDatagramP2PRendezvous_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCMsgSteamDatagramP2PRendezvous_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramP2PRoutes_steamdatagram_5fmessages_5fsdr_2eproto.base,
      &scc_info_CMsgSteamDatagramConnectRequest_steamdatagram_5fmessages_5fsdr_2eproto.base,
      &scc_info_CMsgSteamDatagramConnectOK_steamdatagram_5fmessages_5fsdr_2eproto.base,
      &scc_info_CMsgSteamDatagramConnectionClosed_steamdatagram_5fmessages_5fsdr_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramConnectionStatsP2PClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramConnectionStatsP2PClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramConnectionStatsP2PClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramConnectionStatsP2PRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramConnectionStatsP2PRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramConnectionStatsP2PRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramP2PBadRouteRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramP2PBadRouteRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramP2PBadRouteRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramRelayToRelayPing_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramRelayToRelayPing_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramRelayToRelayPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramRelayToRelayPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramRelayToRelayPing_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramRelayToRelayPing_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramDataCenterState_Server_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramDataCenterState_Server_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramDataCenterState_Server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramDataCenterState_Server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramDataCenterState_Server_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramDataCenterState_Server_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramDataCenterState_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramDataCenterState_DataCenter_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramDataCenterState_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramDataCenterState_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramDataCenterState_Server_steamdatagram_5fmessages_5fsdr_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramDataCenterState_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramDataCenterState_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramDataCenterState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramDataCenterState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramDataCenterState_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramDataCenterState_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramDataCenterState_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramRouterHealth_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramRouterHealth_DataCenter_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramRouterHealth_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramRouterHealth_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramRouterHealth_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramRouterHealth_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramRouterHealth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramRouterHealth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramRouterHealth_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramRouterHealth_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramRouterHealth_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramConnectionStatsP2PRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramConnectionStatsP2PRouterToRouter_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramConnectionStatsP2PRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramConnectionStatsP2PRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto}, {
      &scc_info_CMsgSteamDatagramConnectionQuality_steamnetworkingsockets_5fmessages_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramP2PBadRouteRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramP2PBadRouteRouterToRouter_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramP2PBadRouteRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramP2PBadRouteRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto}, {}};

void InitDefaults_steamdatagram_5fmessages_5fsdr_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramRouterPingReply_RouteException_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramRouterPingReply_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramGameserverPing_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramNoSessionRelayToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramNoSessionRelayToPeer_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramClientPingSampleRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramClientPingSampleReply_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramClientPingSampleReply_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramClientSwitchedPrimary_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectOK_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionClosed_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramNoConnection_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramGameserverSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramGameserverSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionStatsClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionStatsRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionStatsRouterToServer_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionStatsServerToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramP2PSessionRequestBody_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramP2PSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramP2PSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramP2PRoutes_RelayCluster_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramP2PRoutes_Route_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramP2PRoutes_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramP2PRendezvous_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionStatsP2PClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionStatsP2PRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramP2PBadRouteRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramRelayToRelayPing_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramDataCenterState_Server_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramDataCenterState_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramDataCenterState_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramRouterHealth_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramRouterHealth_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramConnectionStatsP2PRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramP2PBadRouteRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[39];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[9];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steamdatagram_5fmessages_5fsdr_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steamdatagram_5fmessages_5fsdr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException, data_center_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException, penalty_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, client_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, latency_datacenter_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, latency_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, your_public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, server_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, challenge_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, client_cookie_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, scoring_penalty_relay_cluster_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterPingReply, route_exceptions_),
  0,
  ~0u,
  ~0u,
  1,
  3,
  2,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverPing, router_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverPing, dummy_pad_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToClient, connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToClient, your_public_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToClient, server_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToClient, challenge_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToClient, seconds_until_shutdown_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer, legacy_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer, from_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer, from_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer, kludge_pad_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleRequest, connection_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, front_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, e2e_ping_ms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter, data_center_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter, via_relay_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter, e2e_ping_ms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply, connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply, routing_clusters_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientPingSampleReply, data_centers_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, score_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, front_ping_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, back_ping_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, seconds_until_down_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, from_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, from_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, from_router_cluster_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, from_active_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, from_active_packets_recv_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, from_dropped_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, gap_ms_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, from_quality_now_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, to_quality_now_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, from_quality_then_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary, to_quality_then_),
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  11,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, my_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, ping_est_ms_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, virtual_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, gameserver_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, crypt_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, cert_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectRequest, legacy_client_steam_id_),
  2,
  5,
  6,
  7,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectOK, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectOK, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectOK, server_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectOK, your_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectOK, delay_time_usec_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectOK, gameserver_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectOK, crypt_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectOK, cert_),
  2,
  6,
  4,
  5,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, to_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, from_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, from_identity_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, legacy_from_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, legacy_gameserver_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, to_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, from_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, forward_target_relay_routing_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, forward_target_revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, relay_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, debug_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionClosed, reason_code_),
  7,
  8,
  2,
  3,
  4,
  9,
  10,
  1,
  11,
  5,
  0,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, to_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, from_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, legacy_gameserver_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, to_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, from_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, from_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, end_to_end_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramNoConnection, dummy_pad_),
  3,
  4,
  1,
  6,
  7,
  0,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionRequest, ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionRequest, challenge_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionRequest, challenge_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionRequest, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionRequest, server_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionRequest, network_config_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionRequest, protocol_version_),
  0,
  2,
  1,
  3,
  6,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionEstablished, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionEstablished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionEstablished, connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionEstablished, gameserver_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionEstablished, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramGameserverSessionEstablished, seq_num_r2c_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_c2r_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_c2s_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, scoring_penalty_relay_cluster_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_r2c_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_s2c_),
  0,
  1,
  2,
  6,
  7,
  8,
  ~0u,
  ~0u,
  9,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_r2s_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_c2s_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, client_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer, server_connection_id_),
  0,
  1,
  ~0u,
  ~0u,
  7,
  2,
  3,
  4,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_s2r_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_s2c_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, client_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter, server_connection_id_),
  0,
  1,
  ~0u,
  ~0u,
  7,
  2,
  3,
  4,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, challenge_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, challenge_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, client_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, peer_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, peer_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, network_config_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody, public_ip_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequest, cert_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequest, body_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionRequest, signature_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionEstablished, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionEstablished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionEstablished, connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionEstablished, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionEstablished, relay_routing_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PSessionEstablished, seq_num_r2c_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster, pop_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster, ping_ms_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster, score_penalty_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster, session_relay_routing_token_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_Route, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_Route, my_pop_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_Route, your_pop_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes_Route, score_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes, relay_clusters_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes, routes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRoutes, revision_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRendezvous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRendezvous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRendezvous, to_connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRendezvous, routes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRendezvous, ack_peer_routes_revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRendezvous, connect_request_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRendezvous, connect_ok_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRendezvous, connection_closed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PRendezvous, failed_relay_routing_token_),
  5,
  1,
  6,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, forward_target_relay_routing_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, forward_target_revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, routes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, ack_peer_routes_revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, seq_num_c2r_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter, seq_num_e2e_),
  2,
  3,
  ~0u,
  ~0u,
  4,
  0,
  5,
  1,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, migrate_request_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, migrate_request_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, scoring_penalty_relay_cluster_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, ack_forward_target_revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, routes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, ack_peer_routes_revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, seq_num_r2c_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient, seq_num_e2e_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  7,
  8,
  0,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient, connection_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient, failed_relay_routing_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient, ack_forward_target_revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient, kludge_pad_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayToRelayPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayToRelayPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayToRelayPing, request_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayToRelayPing, request_date_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayToRelayPing, my_pop_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayToRelayPing, your_pop_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRelayToRelayPing, checksum_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState_Server, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState_Server, address_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState_Server, ping_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter, code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter, server_sample_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter, relay_sample_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramDataCenterState, data_centers_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter, datacenter_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, cpu_load_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, active_sessions_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, data_pkts_sec_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, other_pkts_sec_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, seconds_until_shutdown_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, cpu_cost_per_user_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, cpu_cost_per_packet_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, data_centers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramRouterHealth, magic_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, quality_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, quality_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, ack_relay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, legacy_ack_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, ack_forward_target_revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, routes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, ack_peer_routes_revision_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, seq_num_r2r_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, seq_num_e2e_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, from_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter, to_relay_session_id_),
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  0,
  6,
  9,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter, from_relay_session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter, kludge_pad_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException)},
  { 11, 26, sizeof(::proto::steam::CMsgSteamDatagramRouterPingReply)},
  { 36, 43, sizeof(::proto::steam::CMsgSteamDatagramGameserverPing)},
  { 45, 55, sizeof(::proto::steam::CMsgSteamDatagramNoSessionRelayToClient)},
  { 60, 69, sizeof(::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer)},
  { 73, 79, sizeof(::proto::steam::CMsgSteamDatagramClientPingSampleRequest)},
  { 80, 88, sizeof(::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster)},
  { 91, 99, sizeof(::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter)},
  { 102, 110, sizeof(::proto::steam::CMsgSteamDatagramClientPingSampleReply)},
  { 113, 122, sizeof(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality)},
  { 126, 143, sizeof(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary)},
  { 155, 168, sizeof(::proto::steam::CMsgSteamDatagramConnectRequest)},
  { 176, 188, sizeof(::proto::steam::CMsgSteamDatagramConnectOK)},
  { 195, 212, sizeof(::proto::steam::CMsgSteamDatagramConnectionClosed)},
  { 224, 237, sizeof(::proto::steam::CMsgSteamDatagramNoConnection)},
  { 245, 257, sizeof(::proto::steam::CMsgSteamDatagramGameserverSessionRequest)},
  { 264, 273, sizeof(::proto::steam::CMsgSteamDatagramGameserverSessionEstablished)},
  { 277, 290, sizeof(::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter)},
  { 298, 315, sizeof(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient)},
  { 327, 343, sizeof(::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer)},
  { 354, 370, sizeof(::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter)},
  { 381, 394, sizeof(::proto::steam::CMsgSteamDatagramP2PSessionRequestBody)},
  { 402, 410, sizeof(::proto::steam::CMsgSteamDatagramP2PSessionRequest)},
  { 413, 422, sizeof(::proto::steam::CMsgSteamDatagramP2PSessionEstablished)},
  { 426, 435, sizeof(::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster)},
  { 439, 447, sizeof(::proto::steam::CMsgSteamDatagramP2PRoutes_Route)},
  { 450, 458, sizeof(::proto::steam::CMsgSteamDatagramP2PRoutes)},
  { 461, 473, sizeof(::proto::steam::CMsgSteamDatagramP2PRendezvous)},
  { 480, 497, sizeof(::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter)},
  { 509, 529, sizeof(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient)},
  { 544, 553, sizeof(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient)},
  { 557, 567, sizeof(::proto::steam::CMsgSteamDatagramRelayToRelayPing)},
  { 572, 579, sizeof(::proto::steam::CMsgSteamDatagramDataCenterState_Server)},
  { 581, 589, sizeof(::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter)},
  { 592, 598, sizeof(::proto::steam::CMsgSteamDatagramDataCenterState)},
  { 599, 606, sizeof(::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter)},
  { 608, 622, sizeof(::proto::steam::CMsgSteamDatagramRouterHealth)},
  { 631, 648, sizeof(::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter)},
  { 660, 667, sizeof(::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramRouterPingReply_RouteException_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramRouterPingReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramGameserverPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramNoSessionRelayToClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramNoSessionRelayToPeer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramClientPingSampleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramClientPingSampleReply_DataCenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramClientPingSampleReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectOK_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectionClosed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramNoConnection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramGameserverSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramGameserverSessionEstablished_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramP2PSessionRequestBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramP2PSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramP2PSessionEstablished_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramP2PRoutes_Route_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramP2PRoutes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramP2PRendezvous_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramRelayToRelayPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramDataCenterState_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramDataCenterState_DataCenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramDataCenterState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramRouterHealth_DataCenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramRouterHealth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramConnectionStatsP2PRouterToRouter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramP2PBadRouteRouterToRouter_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto = {
  {}, AddDescriptors_steamdatagram_5fmessages_5fsdr_2eproto, "steamdatagram_messages_sdr.proto", schemas,
  file_default_instances, TableStruct_steamdatagram_5fmessages_5fsdr_2eproto::offsets,
  file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto, 39, file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto, file_level_service_descriptors_steamdatagram_5fmessages_5fsdr_2eproto,
};

const char descriptor_table_protodef_steamdatagram_5fmessages_5fsdr_2eproto[] =
  "\n steamdatagram_messages_sdr.proto\022\013prot"
  "o.steam\032+steamnetworkingsockets_messages"
  "_certs.proto\032%steamnetworkingsockets_mes"
  "sages.proto\"\275\003\n CMsgSteamDatagramRouterP"
  "ingReply\022\030\n\020client_timestamp\030\001 \001(\007\022\"\n\026la"
  "tency_datacenter_ids\030\002 \003(\007B\002\020\001\022\033\n\017latenc"
  "y_ping_ms\030\003 \003(\rB\002\020\001\022\026\n\016your_public_ip\030\004 "
  "\001(\007\022\023\n\013server_time\030\005 \001(\007\022\021\n\tchallenge\030\006 "
  "\001(\006\022\036\n\026seconds_until_shutdown\030\007 \001(\r\022\025\n\rc"
  "lient_cookie\030\010 \001(\007\022%\n\035scoring_penalty_re"
  "lay_cluster\030\t \001(\r\022V\n\020route_exceptions\030\n "
  "\003(\0132<.proto.steam.CMsgSteamDatagramRoute"
  "rPingReply.RouteException\032H\n\016RouteExcept"
  "ion\022\026\n\016data_center_id\030\001 \001(\007\022\r\n\005flags\030\002 \001"
  "(\r\022\017\n\007penalty\030\003 \001(\r\"N\n\037CMsgSteamDatagram"
  "GameserverPing\022\030\n\020router_timestamp\030\004 \001(\007"
  "\022\021\n\tdummy_pad\030c \001(\006\"\240\001\n\'CMsgSteamDatagra"
  "mNoSessionRelayToClient\022\025\n\rconnection_id"
  "\030\007 \001(\007\022\026\n\016your_public_ip\030\002 \001(\007\022\023\n\013server"
  "_time\030\003 \001(\007\022\021\n\tchallenge\030\004 \001(\006\022\036\n\026second"
  "s_until_shutdown\030\005 \001(\r\"\227\001\n%CMsgSteamData"
  "gramNoSessionRelayToPeer\022\037\n\027legacy_relay"
  "_session_id\030\001 \001(\r\022\035\n\025from_relay_session_"
  "id\030\002 \001(\007\022\032\n\022from_connection_id\030\007 \001(\007\022\022\n\n"
  "kludge_pad\030c \001(\006\"A\n(CMsgSteamDatagramCli"
  "entPingSampleRequest\022\025\n\rconnection_id\030\001 "
  "\001(\007\"\216\003\n&CMsgSteamDatagramClientPingSampl"
  "eReply\022\025\n\rconnection_id\030\001 \001(\007\022\\\n\020routing"
  "_clusters\030\002 \003(\0132B.proto.steam.CMsgSteamD"
  "atagramClientPingSampleReply.RoutingClus"
  "ter\022T\n\014data_centers\030\003 \003(\0132>.proto.steam."
  "CMsgSteamDatagramClientPingSampleReply.D"
  "ataCenter\032H\n\016RoutingCluster\022\n\n\002id\030\001 \001(\007\022"
  "\025\n\rfront_ping_ms\030\002 \001(\r\022\023\n\013e2e_ping_ms\030\003 "
  "\001(\r\032O\n\nDataCenter\022\026\n\016data_center_id\030\001 \001("
  "\007\022\024\n\014via_relay_id\030\002 \001(\007\022\023\n\013e2e_ping_ms\030\003"
  " \001(\r\"\276\005\n&CMsgSteamDatagramClientSwitched"
  "Primary\022\025\n\rconnection_id\030\001 \001(\007\022\017\n\007from_i"
  "p\030\002 \001(\007\022\021\n\tfrom_port\030\003 \001(\r\022\033\n\023from_route"
  "r_cluster\030\004 \001(\007\022\030\n\020from_active_time\030\005 \001("
  "\r\022 \n\030from_active_packets_recv\030\006 \001(\r\022\033\n\023f"
  "rom_dropped_reason\030\007 \001(\t\022\016\n\006gap_ms\030\010 \001(\r"
  "\022[\n\020from_quality_now\030\t \001(\0132A.proto.steam"
  ".CMsgSteamDatagramClientSwitchedPrimary."
  "RouterQuality\022Y\n\016to_quality_now\030\n \001(\0132A."
  "proto.steam.CMsgSteamDatagramClientSwitc"
  "hedPrimary.RouterQuality\022\\\n\021from_quality"
  "_then\030\013 \001(\0132A.proto.steam.CMsgSteamDatag"
  "ramClientSwitchedPrimary.RouterQuality\022Z"
  "\n\017to_quality_then\030\014 \001(\0132A.proto.steam.CM"
  "sgSteamDatagramClientSwitchedPrimary.Rou"
  "terQuality\032a\n\rRouterQuality\022\r\n\005score\030\001 \001"
  "(\r\022\022\n\nfront_ping\030\002 \001(\r\022\021\n\tback_ping\030\003 \001("
  "\r\022\032\n\022seconds_until_down\030\004 \001(\r\"\302\002\n\037CMsgSt"
  "eamDatagramConnectRequest\022\025\n\rconnection_"
  "id\030\001 \001(\007\022\024\n\014my_timestamp\030\004 \001(\006\022\023\n\013ping_e"
  "st_ms\030\005 \001(\r\022\024\n\014virtual_port\030\t \001(\r\022#\n\033gam"
  "eserver_relay_session_id\030\002 \001(\r\022C\n\005crypt\030"
  "\006 \001(\01324.proto.steam.CMsgSteamDatagramSes"
  "sionCryptInfoSigned\022=\n\004cert\030\007 \001(\0132/.prot"
  "o.steam.CMsgSteamDatagramCertificateSign"
  "ed\022\036\n\026legacy_client_steam_id\030\003 \001(\006\"\262\002\n\032C"
  "MsgSteamDatagramConnectOK\022\034\n\024client_conn"
  "ection_id\030\001 \001(\007\022\034\n\024server_connection_id\030"
  "\007 \001(\007\022\026\n\016your_timestamp\030\003 \001(\006\022\027\n\017delay_t"
  "ime_usec\030\004 \001(\r\022#\n\033gameserver_relay_sessi"
  "on_id\030\002 \001(\r\022C\n\005crypt\030\005 \001(\01324.proto.steam"
  ".CMsgSteamDatagramSessionCryptInfoSigned"
  "\022=\n\004cert\030\006 \001(\0132/.proto.steam.CMsgSteamDa"
  "tagramCertificateSigned\"\236\004\n!CMsgSteamDat"
  "agramConnectionClosed\022\030\n\020to_connection_i"
  "d\030\007 \001(\007\022\032\n\022from_connection_id\030\010 \001(\007\022\?\n\rf"
  "rom_identity\030\r \001(\0132(.proto.steam.CMsgSte"
  "amNetworkingIdentity\022\034\n\024legacy_from_stea"
  "m_id\030\003 \001(\006\022*\n\"legacy_gameserver_relay_se"
  "ssion_id\030\002 \001(\r\022\033\n\023to_relay_session_id\030\t "
  "\001(\007\022\035\n\025from_relay_session_id\030\n \001(\007\022*\n\"fo"
  "rward_target_relay_routing_token\030\013 \001(\014\022\037"
  "\n\027forward_target_revision\030\014 \001(\r\022S\n\nrelay"
  "_mode\030\004 \001(\01629.proto.steam.CMsgSteamDatag"
  "ramConnectionClosed.ERelayMode:\004None\022\r\n\005"
  "debug\030\005 \001(\t\022\023\n\013reason_code\030\006 \001(\r\"6\n\nERel"
  "ayMode\022\010\n\004None\020\000\022\014\n\010EndToEnd\020\001\022\020\n\014Closed"
  "ByPeer\020\002\"\374\001\n\035CMsgSteamDatagramNoConnecti"
  "on\022\030\n\020to_connection_id\030\005 \001(\007\022\032\n\022from_con"
  "nection_id\030\006 \001(\007\022*\n\"legacy_gameserver_re"
  "lay_session_id\030\002 \001(\r\022\033\n\023to_relay_session"
  "_id\030\t \001(\007\022\035\n\025from_relay_session_id\030\n \001(\007"
  "\022\025\n\rfrom_steam_id\030\003 \001(\006\022\022\n\nend_to_end\030\004 "
  "\001(\010\022\022\n\tdummy_pad\030\377\007 \001(\007\"\334\001\n)CMsgSteamDat"
  "agramGameserverSessionRequest\022\016\n\006ticket\030"
  "\001 \001(\014\022\026\n\016challenge_time\030\003 \001(\007\022\021\n\tchallen"
  "ge\030\004 \001(\006\022\034\n\024client_connection_id\030\005 \001(\007\022\034"
  "\n\024server_connection_id\030\010 \001(\007\022\036\n\026network_"
  "config_version\030\006 \001(\r\022\030\n\020protocol_version"
  "\030\007 \001(\r\"\230\001\n-CMsgSteamDatagramGameserverSe"
  "ssionEstablished\022\025\n\rconnection_id\030\001 \001(\007\022"
  "\033\n\023gameserver_steam_id\030\003 \001(\006\022\036\n\026seconds_"
  "until_shutdown\030\004 \001(\r\022\023\n\013seq_num_r2c\030\006 \001("
  "\r\"\220\003\n.CMsgSteamDatagramConnectionStatsCl"
  "ientToRouter\022F\n\rquality_relay\030\001 \001(\0132/.pr"
  "oto.steam.CMsgSteamDatagramConnectionQua"
  "lity\022D\n\013quality_e2e\030\002 \001(\0132/.proto.steam."
  "CMsgSteamDatagramConnectionQuality\022\021\n\tac"
  "k_relay\030\004 \003(\007\022\026\n\016legacy_ack_e2e\030\005 \003(\007\022\r\n"
  "\005flags\030\006 \001(\r\022\034\n\024client_connection_id\030\010 \001"
  "(\007\022\023\n\013seq_num_c2r\030\t \001(\r\022\023\n\013seq_num_c2s\030\n"
  " \001(\r\"N\n\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017"
  "ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIA"
  "TE\020\004\"\221\004\n.CMsgSteamDatagramConnectionStat"
  "sRouterToClient\022F\n\rquality_relay\030\001 \001(\0132/"
  ".proto.steam.CMsgSteamDatagramConnection"
  "Quality\022D\n\013quality_e2e\030\002 \001(\0132/.proto.ste"
  "am.CMsgSteamDatagramConnectionQuality\022\036\n"
  "\026seconds_until_shutdown\030\006 \001(\r\022\032\n\022migrate"
  "_request_ip\030\n \001(\007\022\034\n\024migrate_request_por"
  "t\030\013 \001(\r\022%\n\035scoring_penalty_relay_cluster"
  "\030\014 \001(\r\022\021\n\tack_relay\030\r \003(\007\022\026\n\016legacy_ack_"
  "e2e\030\016 \003(\007\022\r\n\005flags\030\017 \001(\r\022\034\n\024client_conne"
  "ction_id\030\007 \001(\007\022\023\n\013seq_num_r2c\030\010 \001(\r\022\023\n\013s"
  "eq_num_s2c\030\t \001(\r\"N\n\005Flags\022\025\n\021ACK_REQUEST"
  "_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQ"
  "UEST_IMMEDIATE\020\004\"\341\003\n.CMsgSteamDatagramCo"
  "nnectionStatsRouterToServer\022F\n\rquality_r"
  "elay\030\001 \001(\0132/.proto.steam.CMsgSteamDatagr"
  "amConnectionQuality\022D\n\013quality_e2e\030\002 \001(\013"
  "2/.proto.steam.CMsgSteamDatagramConnecti"
  "onQuality\022\021\n\tack_relay\030\n \003(\007\022\026\n\016legacy_a"
  "ck_e2e\030\013 \003(\007\022\r\n\005flags\030\014 \001(\r\022\023\n\013seq_num_r"
  "2s\030\005 \001(\r\022\023\n\013seq_num_c2s\030\006 \001(\r\022\027\n\017client_"
  "steam_id\030\007 \001(\006\022\030\n\020relay_session_id\030\010 \001(\r"
  "\022\034\n\024client_connection_id\030\t \001(\007\022\034\n\024server"
  "_connection_id\030\r \001(\007\"N\n\005Flags\022\025\n\021ACK_REQ"
  "UEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK"
  "_REQUEST_IMMEDIATE\020\004\"\341\003\n.CMsgSteamDatagr"
  "amConnectionStatsServerToRouter\022F\n\rquali"
  "ty_relay\030\001 \001(\0132/.proto.steam.CMsgSteamDa"
  "tagramConnectionQuality\022D\n\013quality_e2e\030\002"
  " \001(\0132/.proto.steam.CMsgSteamDatagramConn"
  "ectionQuality\022\021\n\tack_relay\030\010 \003(\007\022\026\n\016lega"
  "cy_ack_e2e\030\t \003(\007\022\r\n\005flags\030\n \001(\r\022\023\n\013seq_n"
  "um_s2r\030\003 \001(\r\022\023\n\013seq_num_s2c\030\004 \001(\r\022\027\n\017cli"
  "ent_steam_id\030\005 \001(\006\022\030\n\020relay_session_id\030\006"
  " \001(\r\022\034\n\024client_connection_id\030\007 \001(\007\022\034\n\024se"
  "rver_connection_id\030\013 \001(\007\"N\n\005Flags\022\025\n\021ACK"
  "_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n"
  "\025ACK_REQUEST_IMMEDIATE\020\004\"\361\001\n&CMsgSteamDa"
  "tagramP2PSessionRequestBody\022\026\n\016challenge"
  "_time\030\001 \001(\007\022\021\n\tchallenge\030\002 \001(\006\022\034\n\024client"
  "_connection_id\030\003 \001(\007\022\025\n\rpeer_steam_id\030\004 "
  "\001(\006\022\032\n\022peer_connection_id\030\005 \001(\007\022\030\n\020proto"
  "col_version\030\010 \001(\r\022\036\n\026network_config_vers"
  "ion\030\t \001(\r\022\021\n\tpublic_ip\030\n \001(\007\"\204\001\n\"CMsgSte"
  "amDatagramP2PSessionRequest\022=\n\004cert\030\001 \001("
  "\0132/.proto.steam.CMsgSteamDatagramCertifi"
  "cateSigned\022\014\n\004body\030\002 \001(\014\022\021\n\tsignature\030\003 "
  "\001(\014\"\221\001\n&CMsgSteamDatagramP2PSessionEstab"
  "lished\022\025\n\rconnection_id\030\001 \001(\007\022\036\n\026seconds"
  "_until_shutdown\030\003 \001(\r\022\033\n\023relay_routing_t"
  "oken\030\004 \001(\014\022\023\n\013seq_num_r2c\030\005 \001(\r\"\350\002\n\032CMsg"
  "SteamDatagramP2PRoutes\022L\n\016relay_clusters"
  "\030\001 \003(\01324.proto.steam.CMsgSteamDatagramP2"
  "PRoutes.RelayCluster\022=\n\006routes\030\002 \003(\0132-.p"
  "roto.steam.CMsgSteamDatagramP2PRoutes.Ro"
  "ute\022\020\n\010revision\030\003 \001(\r\032k\n\014RelayCluster\022\016\n"
  "\006pop_id\030\001 \001(\007\022\017\n\007ping_ms\030\002 \001(\r\022\025\n\rscore_"
  "penalty\030\003 \001(\r\022#\n\033session_relay_routing_t"
  "oken\030\004 \001(\014\032>\n\005Route\022\021\n\tmy_pop_id\030\001 \001(\007\022\023"
  "\n\013your_pop_id\030\002 \001(\007\022\r\n\005score\030\003 \001(\r\"\210\003\n\036C"
  "MsgSteamDatagramP2PRendezvous\022\030\n\020to_conn"
  "ection_id\030\001 \001(\007\0227\n\006routes\030\002 \001(\0132\'.proto."
  "steam.CMsgSteamDatagramP2PRoutes\022 \n\030ack_"
  "peer_routes_revision\030\003 \001(\r\022E\n\017connect_re"
  "quest\030\004 \001(\0132,.proto.steam.CMsgSteamDatag"
  "ramConnectRequest\022;\n\nconnect_ok\030\005 \001(\0132\'."
  "proto.steam.CMsgSteamDatagramConnectOK\022I"
  "\n\021connection_closed\030\006 \001(\0132..proto.steam."
  "CMsgSteamDatagramConnectionClosed\022\"\n\032fai"
  "led_relay_routing_token\030\007 \001(\014\"\213\004\n1CMsgSt"
  "eamDatagramConnectionStatsP2PClientToRou"
  "ter\022F\n\rquality_relay\030\001 \001(\0132/.proto.steam"
  ".CMsgSteamDatagramConnectionQuality\022D\n\013q"
  "uality_e2e\030\002 \001(\0132/.proto.steam.CMsgSteam"
  "DatagramConnectionQuality\022\021\n\tack_relay\030\003"
  " \003(\007\022\026\n\016legacy_ack_e2e\030\004 \003(\007\022\r\n\005flags\030\005 "
  "\001(\r\022*\n\"forward_target_relay_routing_toke"
  "n\030\006 \001(\014\022\037\n\027forward_target_revision\030\007 \001(\r"
  "\022\016\n\006routes\030\010 \001(\014\022 \n\030ack_peer_routes_revi"
  "sion\030\t \001(\r\022\025\n\rconnection_id\030\n \001(\007\022\023\n\013seq"
  "_num_c2r\030\013 \001(\r\022\023\n\013seq_num_e2e\030\014 \001(\r\"N\n\005F"
  "lags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUE"
  "ST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\"\344\004\n1"
  "CMsgSteamDatagramConnectionStatsP2PRoute"
  "rToClient\022F\n\rquality_relay\030\001 \001(\0132/.proto"
  ".steam.CMsgSteamDatagramConnectionQualit"
  "y\022D\n\013quality_e2e\030\002 \001(\0132/.proto.steam.CMs"
  "gSteamDatagramConnectionQuality\022\036\n\026secon"
  "ds_until_shutdown\030\003 \001(\r\022\032\n\022migrate_reque"
  "st_ip\030\004 \001(\007\022\034\n\024migrate_request_port\030\005 \001("
  "\r\022%\n\035scoring_penalty_relay_cluster\030\006 \001(\r"
  "\022\021\n\tack_relay\030\007 \003(\007\022\026\n\016legacy_ack_e2e\030\010 "
  "\003(\007\022\r\n\005flags\030\t \001(\r\022#\n\033ack_forward_target"
  "_revision\030\n \001(\r\022\016\n\006routes\030\013 \001(\014\022 \n\030ack_p"
  "eer_routes_revision\030\014 \001(\r\022\025\n\rconnection_"
  "id\030\r \001(\007\022\023\n\013seq_num_r2c\030\016 \001(\r\022\023\n\013seq_num"
  "_e2e\030\017 \001(\r\"N\n\005Flags\022\025\n\021ACK_REQUEST_RELAY"
  "\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_I"
  "MMEDIATE\020\004\"\240\001\n*CMsgSteamDatagramP2PBadRo"
  "uteRouterToClient\022\025\n\rconnection_id\030\001 \001(\007"
  "\022\"\n\032failed_relay_routing_token\030\002 \001(\014\022#\n\033"
  "ack_forward_target_revision\030\003 \001(\r\022\022\n\nklu"
  "dge_pad\030c \001(\006\"\216\001\n!CMsgSteamDatagramRelay"
  "ToRelayPing\022\031\n\021request_timestamp\030\001 \001(\007\022\024"
  "\n\014request_date\030\002 \001(\007\022\021\n\tmy_pop_id\030\003 \001(\007\022"
  "\023\n\013your_pop_id\030\004 \001(\007\022\020\n\010checksum\030\005 \001(\007\"\324"
  "\002\n CMsgSteamDatagramDataCenterState\022N\n\014d"
  "ata_centers\030\001 \003(\01328.proto.steam.CMsgStea"
  "mDatagramDataCenterState.DataCenter\032*\n\006S"
  "erver\022\017\n\007address\030\001 \001(\t\022\017\n\007ping_ms\030\002 \001(\r\032"
  "\263\001\n\nDataCenter\022\014\n\004code\030\001 \001(\t\022K\n\rserver_s"
  "ample\030\002 \003(\01324.proto.steam.CMsgSteamDatag"
  "ramDataCenterState.Server\022J\n\014relay_sampl"
  "e\030\003 \003(\01324.proto.steam.CMsgSteamDatagramD"
  "ataCenterState.Server\"\341\002\n\035CMsgSteamDatag"
  "ramRouterHealth\022\020\n\010cpu_load\030\001 \001(\002\022\027\n\017act"
  "ive_sessions\030\002 \001(\r\022\025\n\rdata_pkts_sec\030\003 \001("
  "\r\022\026\n\016other_pkts_sec\030\004 \001(\r\022\036\n\026seconds_unt"
  "il_shutdown\030\005 \001(\r\022\031\n\021cpu_cost_per_user\030\010"
  " \001(\002\022\033\n\023cpu_cost_per_packet\030\t \001(\002\022K\n\014dat"
  "a_centers\030\006 \003(\01325.proto.steam.CMsgSteamD"
  "atagramRouterHealth.DataCenter\022\r\n\005magic\030"
  "\007 \001(\006\0322\n\nDataCenter\022\025\n\rdatacenter_id\030\001 \001"
  "(\007\022\r\n\005state\030\002 \001(\r\"\210\004\n1CMsgSteamDatagramC"
  "onnectionStatsP2PRouterToRouter\022F\n\rquali"
  "ty_relay\030\001 \001(\0132/.proto.steam.CMsgSteamDa"
  "tagramConnectionQuality\022D\n\013quality_e2e\030\002"
  " \001(\0132/.proto.steam.CMsgSteamDatagramConn"
  "ectionQuality\022\021\n\tack_relay\030\003 \003(\007\022\026\n\016lega"
  "cy_ack_e2e\030\004 \003(\007\022\r\n\005flags\030\005 \001(\r\022#\n\033ack_f"
  "orward_target_revision\030\006 \001(\r\022\016\n\006routes\030\007"
  " \001(\014\022 \n\030ack_peer_routes_revision\030\010 \001(\r\022\023"
  "\n\013seq_num_r2r\030\032 \001(\r\022\023\n\013seq_num_e2e\030\033 \001(\r"
  "\022\035\n\025from_relay_session_id\030\026 \001(\007\022\033\n\023to_re"
  "lay_session_id\030\031 \001(\007\"N\n\005Flags\022\025\n\021ACK_REQ"
  "UEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK"
  "_REQUEST_IMMEDIATE\020\004\"_\n*CMsgSteamDatagra"
  "mP2PBadRouteRouterToRouter\022\035\n\025from_relay"
  "_session_id\030\001 \001(\007\022\022\n\nkludge_pad\030c \001(\006*\351\t"
  "\n\023ESteamDatagramMsgID\022\037\n\033k_ESteamDatagra"
  "mMsg_Invalid\020\000\022)\n%k_ESteamDatagramMsg_Ro"
  "uterPingRequest\020\001\022\'\n#k_ESteamDatagramMsg"
  "_RouterPingReply\020\002\022-\n)k_ESteamDatagramMs"
  "g_GameserverPingRequest\020\003\022+\n\'k_ESteamDat"
  "agramMsg_GameserverPingReply\020\004\0220\n,k_ESte"
  "amDatagramMsg_GameserverSessionRequest\020\005"
  "\0224\n0k_ESteamDatagramMsg_GameserverSessio"
  "nEstablished\020\006\022!\n\035k_ESteamDatagramMsg_No"
  "Session\020\007\022\"\n\036k_ESteamDatagramMsg_Diagnos"
  "tic\020\010\022*\n&k_ESteamDatagramMsg_DataClientT"
  "oRouter\020\t\022*\n&k_ESteamDatagramMsg_DataRou"
  "terToServer\020\n\022*\n&k_ESteamDatagramMsg_Dat"
  "aServerToRouter\020\013\022*\n&k_ESteamDatagramMsg"
  "_DataRouterToClient\020\014\022\035\n\031k_ESteamDatagra"
  "mMsg_Stats\020\r\022/\n+k_ESteamDatagramMsg_Clie"
  "ntPingSampleRequest\020\016\022-\n)k_ESteamDatagra"
  "mMsg_ClientPingSampleReply\020\017\0225\n1k_ESteam"
  "DatagramMsg_ClientToRouterSwitchedPrimar"
  "y\020\020\022#\n\037k_ESteamDatagramMsg_RelayHealth\020\021"
  "\022&\n\"k_ESteamDatagramMsg_ConnectRequest\020\022"
  "\022!\n\035k_ESteamDatagramMsg_ConnectOK\020\023\022(\n$k"
  "_ESteamDatagramMsg_ConnectionClosed\020\024\022$\n"
  " k_ESteamDatagramMsg_NoConnection\020\025\022/\n+k"
  "_ESteamDatagramMsg_RelayToRelayPingReque"
  "st\020\026\022-\n)k_ESteamDatagramMsg_RelayToRelay"
  "PingReply\020\027\022)\n%k_ESteamDatagramMsg_P2PSe"
  "ssionRequest\020\030\022-\n)k_ESteamDatagramMsg_P2"
  "PSessionEstablished\020\031\022&\n\"k_ESteamDatagra"
  "mMsg_P2PStatsClient\020\032\022%\n!k_ESteamDatagra"
  "mMsg_P2PStatsRelay\020\033\022#\n\037k_ESteamDatagram"
  "Msg_P2PBadRoute\020\034B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto = {
  false, InitDefaults_steamdatagram_5fmessages_5fsdr_2eproto, 
  descriptor_table_protodef_steamdatagram_5fmessages_5fsdr_2eproto,
  "steamdatagram_messages_sdr.proto", &assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto, 11184,
};

void AddDescriptors_steamdatagram_5fmessages_5fsdr_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
    ::AddDescriptors_steamnetworkingsockets_5fmessages_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steamdatagram_5fmessages_5fsdr_2eproto = []() { AddDescriptors_steamdatagram_5fmessages_5fsdr_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[0];
}
bool CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::None;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::EndToEnd;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ClosedByPeer;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ERelayMode_MIN;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ERelayMode_MAX;
const int CMsgSteamDatagramConnectionClosed::ERelayMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[1];
}
bool CMsgSteamDatagramConnectionStatsClientToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::Flags_MIN;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsClientToRouter::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[2];
}
bool CMsgSteamDatagramConnectionStatsRouterToClient_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::Flags_MIN;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsRouterToClient::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[3];
}
bool CMsgSteamDatagramConnectionStatsRouterToServer_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::Flags_MIN;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsRouterToServer::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[4];
}
bool CMsgSteamDatagramConnectionStatsServerToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::Flags_MIN;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsServerToRouter::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[5];
}
bool CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_MIN;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[6];
}
bool CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_MIN;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[7];
}
bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Flags_MIN;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ESteamDatagramMsgID_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[8];
}
bool ESteamDatagramMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgSteamDatagramRouterPingReply_RouteException::InitAsDefaultInstance() {
}
class CMsgSteamDatagramRouterPingReply_RouteException::HasBitSetters {
 public:
  static void set_has_data_center_id(CMsgSteamDatagramRouterPingReply_RouteException* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_flags(CMsgSteamDatagramRouterPingReply_RouteException* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_penalty(CMsgSteamDatagramRouterPingReply_RouteException* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRouterPingReply_RouteException::kDataCenterIdFieldNumber;
const int CMsgSteamDatagramRouterPingReply_RouteException::kFlagsFieldNumber;
const int CMsgSteamDatagramRouterPingReply_RouteException::kPenaltyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
}
CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(const CMsgSteamDatagramRouterPingReply_RouteException& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_center_id_, &from.data_center_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&penalty_) -
    reinterpret_cast<char*>(&data_center_id_)) + sizeof(penalty_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
}

void CMsgSteamDatagramRouterPingReply_RouteException::SharedCtor() {
  ::memset(&data_center_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&penalty_) -
      reinterpret_cast<char*>(&data_center_id_)) + sizeof(penalty_));
}

CMsgSteamDatagramRouterPingReply_RouteException::~CMsgSteamDatagramRouterPingReply_RouteException() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  SharedDtor();
}

void CMsgSteamDatagramRouterPingReply_RouteException::SharedDtor() {
}

void CMsgSteamDatagramRouterPingReply_RouteException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramRouterPingReply_RouteException& CMsgSteamDatagramRouterPingReply_RouteException::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramRouterPingReply_RouteException_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramRouterPingReply_RouteException::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&data_center_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penalty_) -
        reinterpret_cast<char*>(&data_center_id_)) + sizeof(penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramRouterPingReply_RouteException::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramRouterPingReply_RouteException*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_data_center_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 flags = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 penalty = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_penalty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramRouterPingReply_RouteException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_data_center_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_center_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramRouterPingReply_RouteException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->data_center_id(), output);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional uint32 penalty = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->penalty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
}

::google::protobuf::uint8* CMsgSteamDatagramRouterPingReply_RouteException::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->data_center_id(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // optional uint32 penalty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->penalty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  return target;
}

size_t CMsgSteamDatagramRouterPingReply_RouteException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 data_center_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 penalty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRouterPingReply_RouteException::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterPingReply_RouteException* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramRouterPingReply_RouteException>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterPingReply_RouteException::MergeFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_center_id_ = from.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      penalty_ = from.penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRouterPingReply_RouteException::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply_RouteException::CopyFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterPingReply_RouteException::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterPingReply_RouteException::Swap(CMsgSteamDatagramRouterPingReply_RouteException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRouterPingReply_RouteException::InternalSwap(CMsgSteamDatagramRouterPingReply_RouteException* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_center_id_, other->data_center_id_);
  swap(flags_, other->flags_);
  swap(penalty_, other->penalty_);
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply_RouteException::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramRouterPingReply::InitAsDefaultInstance() {
}
class CMsgSteamDatagramRouterPingReply::HasBitSetters {
 public:
  static void set_has_client_timestamp(CMsgSteamDatagramRouterPingReply* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_your_public_ip(CMsgSteamDatagramRouterPingReply* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_server_time(CMsgSteamDatagramRouterPingReply* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_challenge(CMsgSteamDatagramRouterPingReply* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_seconds_until_shutdown(CMsgSteamDatagramRouterPingReply* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_client_cookie(CMsgSteamDatagramRouterPingReply* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_scoring_penalty_relay_cluster(CMsgSteamDatagramRouterPingReply* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRouterPingReply::kClientTimestampFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kLatencyDatacenterIdsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kLatencyPingMsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kYourPublicIpFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kServerTimeFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kChallengeFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kClientCookieFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kRouteExceptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramRouterPingReply)
}
CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(const CMsgSteamDatagramRouterPingReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      latency_datacenter_ids_(from.latency_datacenter_ids_),
      latency_ping_ms_(from.latency_ping_ms_),
      route_exceptions_(from.route_exceptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_timestamp_, &from.client_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&scoring_penalty_relay_cluster_) -
    reinterpret_cast<char*>(&client_timestamp_)) + sizeof(scoring_penalty_relay_cluster_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramRouterPingReply)
}

void CMsgSteamDatagramRouterPingReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramRouterPingReply_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::memset(&client_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scoring_penalty_relay_cluster_) -
      reinterpret_cast<char*>(&client_timestamp_)) + sizeof(scoring_penalty_relay_cluster_));
}

CMsgSteamDatagramRouterPingReply::~CMsgSteamDatagramRouterPingReply() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramRouterPingReply)
  SharedDtor();
}

void CMsgSteamDatagramRouterPingReply::SharedDtor() {
}

void CMsgSteamDatagramRouterPingReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramRouterPingReply& CMsgSteamDatagramRouterPingReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramRouterPingReply_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramRouterPingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramRouterPingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latency_datacenter_ids_.Clear();
  latency_ping_ms_.Clear();
  route_exceptions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&client_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scoring_penalty_relay_cluster_) -
        reinterpret_cast<char*>(&client_timestamp_)) + sizeof(scoring_penalty_relay_cluster_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramRouterPingReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramRouterPingReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 client_timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_client_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
          object = msg->mutable_latency_datacenter_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        do {
          msg->add_latency_datacenter_ids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
          ptr += sizeof(::google::protobuf::uint32);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 21 && (ptr += 1));
        break;
      }
      // repeated uint32 latency_ping_ms = 3 [packed = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_latency_ping_ms();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_latency_ping_ms(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // optional fixed32 your_public_ip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_your_public_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 server_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_server_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 challenge = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_challenge(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 seconds_until_shutdown = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_seconds_until_shutdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 client_cookie = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_client_cookie(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 scoring_penalty_relay_cluster = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_scoring_penalty_relay_cluster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException::_InternalParse;
          object = msg->add_route_exceptions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramRouterPingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramRouterPingReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_client_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_latency_datacenter_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 18u, input, this->mutable_latency_datacenter_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 latency_ping_ms = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_latency_ping_ms())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_latency_ping_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 your_public_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_your_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_server_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 challenge = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_challenge(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_seconds_until_shutdown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_cookie = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_client_cookie(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_scoring_penalty_relay_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_route_exceptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramRouterPingReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramRouterPingReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramRouterPingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramRouterPingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_timestamp(), output);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->latency_datacenter_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latency_datacenter_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->latency_datacenter_ids().data(), this->latency_datacenter_ids_size(), output);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  if (this->latency_ping_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latency_ping_ms_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->latency_ping_ms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->latency_ping_ms(i), output);
  }

  // optional fixed32 your_public_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->your_public_ip(), output);
  }

  // optional fixed32 server_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->server_time(), output);
  }

  // optional fixed64 challenge = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->challenge(), output);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_cookie = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->client_cookie(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scoring_penalty_relay_cluster(), output);
  }

  // repeated .proto.steam.CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_exceptions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->route_exceptions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramRouterPingReply)
}

::google::protobuf::uint8* CMsgSteamDatagramRouterPingReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramRouterPingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_timestamp(), target);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->latency_datacenter_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _latency_datacenter_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->latency_datacenter_ids_, target);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  if (this->latency_ping_ms_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _latency_ping_ms_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->latency_ping_ms_, target);
  }

  // optional fixed32 your_public_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->your_public_ip(), target);
  }

  // optional fixed32 server_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->server_time(), target);
  }

  // optional fixed64 challenge = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->client_cookie(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scoring_penalty_relay_cluster(), target);
  }

  // repeated .proto.steam.CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_exceptions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->route_exceptions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramRouterPingReply)
  return target;
}

size_t CMsgSteamDatagramRouterPingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramRouterPingReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->latency_datacenter_ids_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _latency_datacenter_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->latency_ping_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _latency_ping_ms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .proto.steam.CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->route_exceptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->route_exceptions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional fixed32 client_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_public_ip = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 server_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 seconds_until_shutdown = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 client_cookie = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 scoring_penalty_relay_cluster = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramRouterPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterPingReply* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramRouterPingReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramRouterPingReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramRouterPingReply)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const CMsgSteamDatagramRouterPingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramRouterPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latency_datacenter_ids_.MergeFrom(from.latency_datacenter_ids_);
  latency_ping_ms_.MergeFrom(from.latency_ping_ms_);
  route_exceptions_.MergeFrom(from.route_exceptions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      client_timestamp_ = from.client_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      your_public_ip_ = from.your_public_ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_cookie_ = from.client_cookie_;
    }
    if (cached_has_bits & 0x00000040u) {
      scoring_penalty_relay_cluster_ = from.scoring_penalty_relay_cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramRouterPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const CMsgSteamDatagramRouterPingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramRouterPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterPingReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterPingReply::Swap(CMsgSteamDatagramRouterPingReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRouterPingReply::InternalSwap(CMsgSteamDatagramRouterPingReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  latency_datacenter_ids_.InternalSwap(&other->latency_datacenter_ids_);
  latency_ping_ms_.InternalSwap(&other->latency_ping_ms_);
  CastToBase(&route_exceptions_)->InternalSwap(CastToBase(&other->route_exceptions_));
  swap(client_timestamp_, other->client_timestamp_);
  swap(your_public_ip_, other->your_public_ip_);
  swap(challenge_, other->challenge_);
  swap(server_time_, other->server_time_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(client_cookie_, other->client_cookie_);
  swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramGameserverPing::InitAsDefaultInstance() {
}
class CMsgSteamDatagramGameserverPing::HasBitSetters {
 public:
  static void set_has_router_timestamp(CMsgSteamDatagramGameserverPing* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_dummy_pad(CMsgSteamDatagramGameserverPing* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramGameserverPing::kRouterTimestampFieldNumber;
const int CMsgSteamDatagramGameserverPing::kDummyPadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramGameserverPing::CMsgSteamDatagramGameserverPing()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramGameserverPing)
}
CMsgSteamDatagramGameserverPing::CMsgSteamDatagramGameserverPing(const CMsgSteamDatagramGameserverPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&router_timestamp_, &from.router_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&dummy_pad_) -
    reinterpret_cast<char*>(&router_timestamp_)) + sizeof(dummy_pad_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramGameserverPing)
}

void CMsgSteamDatagramGameserverPing::SharedCtor() {
  ::memset(&router_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dummy_pad_) -
      reinterpret_cast<char*>(&router_timestamp_)) + sizeof(dummy_pad_));
}

CMsgSteamDatagramGameserverPing::~CMsgSteamDatagramGameserverPing() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramGameserverPing)
  SharedDtor();
}

void CMsgSteamDatagramGameserverPing::SharedDtor() {
}

void CMsgSteamDatagramGameserverPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramGameserverPing& CMsgSteamDatagramGameserverPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramGameserverPing_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramGameserverPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramGameserverPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&router_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy_pad_) -
        reinterpret_cast<char*>(&router_timestamp_)) + sizeof(dummy_pad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramGameserverPing::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramGameserverPing*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 router_timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_router_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 dummy_pad = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_dummy_pad(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramGameserverPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramGameserverPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 router_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_router_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &router_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 dummy_pad = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (793 & 0xFF)) {
          HasBitSetters::set_has_dummy_pad(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dummy_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramGameserverPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramGameserverPing)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramGameserverPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramGameserverPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 router_timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->router_timestamp(), output);
  }

  // optional fixed64 dummy_pad = 99;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->dummy_pad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramGameserverPing)
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverPing::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramGameserverPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 router_timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->router_timestamp(), target);
  }

  // optional fixed64 dummy_pad = 99;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->dummy_pad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramGameserverPing)
  return target;
}

size_t CMsgSteamDatagramGameserverPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramGameserverPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 router_timestamp = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed64 dummy_pad = 99;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramGameserverPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramGameserverPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverPing* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramGameserverPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramGameserverPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramGameserverPing)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverPing::MergeFrom(const CMsgSteamDatagramGameserverPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramGameserverPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      router_timestamp_ = from.router_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      dummy_pad_ = from.dummy_pad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameserverPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramGameserverPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverPing::CopyFrom(const CMsgSteamDatagramGameserverPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramGameserverPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverPing::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverPing::Swap(CMsgSteamDatagramGameserverPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramGameserverPing::InternalSwap(CMsgSteamDatagramGameserverPing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(router_timestamp_, other->router_timestamp_);
  swap(dummy_pad_, other->dummy_pad_);
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPing::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramNoSessionRelayToClient::InitAsDefaultInstance() {
}
class CMsgSteamDatagramNoSessionRelayToClient::HasBitSetters {
 public:
  static void set_has_connection_id(CMsgSteamDatagramNoSessionRelayToClient* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_your_public_ip(CMsgSteamDatagramNoSessionRelayToClient* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_server_time(CMsgSteamDatagramNoSessionRelayToClient* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_challenge(CMsgSteamDatagramNoSessionRelayToClient* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_seconds_until_shutdown(CMsgSteamDatagramNoSessionRelayToClient* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramNoSessionRelayToClient::kConnectionIdFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToClient::kYourPublicIpFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToClient::kServerTimeFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToClient::kChallengeFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToClient::kSecondsUntilShutdownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
}
CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(const CMsgSteamDatagramNoSessionRelayToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&your_public_ip_, &from.your_public_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&connection_id_) -
    reinterpret_cast<char*>(&your_public_ip_)) + sizeof(connection_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
}

void CMsgSteamDatagramNoSessionRelayToClient::SharedCtor() {
  ::memset(&your_public_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_id_) -
      reinterpret_cast<char*>(&your_public_ip_)) + sizeof(connection_id_));
}

CMsgSteamDatagramNoSessionRelayToClient::~CMsgSteamDatagramNoSessionRelayToClient() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  SharedDtor();
}

void CMsgSteamDatagramNoSessionRelayToClient::SharedDtor() {
}

void CMsgSteamDatagramNoSessionRelayToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramNoSessionRelayToClient& CMsgSteamDatagramNoSessionRelayToClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramNoSessionRelayToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramNoSessionRelayToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&your_public_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connection_id_) -
        reinterpret_cast<char*>(&your_public_ip_)) + sizeof(connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramNoSessionRelayToClient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramNoSessionRelayToClient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 your_public_ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_your_public_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 server_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_server_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 challenge = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_challenge(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_seconds_until_shutdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 connection_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramNoSessionRelayToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 your_public_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_your_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_server_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 challenge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_challenge(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_seconds_until_shutdown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 connection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramNoSessionRelayToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 your_public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->your_public_ip(), output);
  }

  // optional fixed32 server_time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->server_time(), output);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->challenge(), output);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 connection_id = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
}

::google::protobuf::uint8* CMsgSteamDatagramNoSessionRelayToClient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 your_public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->your_public_ip(), target);
  }

  // optional fixed32 server_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->server_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 connection_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  return target;
}

size_t CMsgSteamDatagramNoSessionRelayToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed32 your_public_ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 connection_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramNoSessionRelayToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramNoSessionRelayToClient* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramNoSessionRelayToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoSessionRelayToClient::MergeFrom(const CMsgSteamDatagramNoSessionRelayToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      your_public_ip_ = from.your_public_ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000010u) {
      connection_id_ = from.connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramNoSessionRelayToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSessionRelayToClient::CopyFrom(const CMsgSteamDatagramNoSessionRelayToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoSessionRelayToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoSessionRelayToClient::Swap(CMsgSteamDatagramNoSessionRelayToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramNoSessionRelayToClient::InternalSwap(CMsgSteamDatagramNoSessionRelayToClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(your_public_ip_, other->your_public_ip_);
  swap(server_time_, other->server_time_);
  swap(challenge_, other->challenge_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(connection_id_, other->connection_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramNoSessionRelayToClient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramNoSessionRelayToPeer::InitAsDefaultInstance() {
}
class CMsgSteamDatagramNoSessionRelayToPeer::HasBitSetters {
 public:
  static void set_has_legacy_relay_session_id(CMsgSteamDatagramNoSessionRelayToPeer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_from_relay_session_id(CMsgSteamDatagramNoSessionRelayToPeer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_from_connection_id(CMsgSteamDatagramNoSessionRelayToPeer* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kludge_pad(CMsgSteamDatagramNoSessionRelayToPeer* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramNoSessionRelayToPeer::kLegacyRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToPeer::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToPeer::kFromConnectionIdFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToPeer::kKludgePadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
}
CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(const CMsgSteamDatagramNoSessionRelayToPeer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&legacy_relay_session_id_, &from.legacy_relay_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kludge_pad_) -
    reinterpret_cast<char*>(&legacy_relay_session_id_)) + sizeof(kludge_pad_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
}

void CMsgSteamDatagramNoSessionRelayToPeer::SharedCtor() {
  ::memset(&legacy_relay_session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kludge_pad_) -
      reinterpret_cast<char*>(&legacy_relay_session_id_)) + sizeof(kludge_pad_));
}

CMsgSteamDatagramNoSessionRelayToPeer::~CMsgSteamDatagramNoSessionRelayToPeer() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  SharedDtor();
}

void CMsgSteamDatagramNoSessionRelayToPeer::SharedDtor() {
}

void CMsgSteamDatagramNoSessionRelayToPeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramNoSessionRelayToPeer& CMsgSteamDatagramNoSessionRelayToPeer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramNoSessionRelayToPeer_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramNoSessionRelayToPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&legacy_relay_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kludge_pad_) -
        reinterpret_cast<char*>(&legacy_relay_session_id_)) + sizeof(kludge_pad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramNoSessionRelayToPeer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramNoSessionRelayToPeer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_relay_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_legacy_relay_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 from_relay_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_from_relay_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 from_connection_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_from_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 kludge_pad = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_kludge_pad(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramNoSessionRelayToPeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_relay_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_legacy_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_relay_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_from_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_connection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_from_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 kludge_pad = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (793 & 0xFF)) {
          HasBitSetters::set_has_kludge_pad(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &kludge_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramNoSessionRelayToPeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_relay_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_relay_session_id(), output);
  }

  // optional fixed32 from_relay_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_relay_session_id(), output);
  }

  // optional fixed32 from_connection_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->from_connection_id(), output);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->kludge_pad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
}

::google::protobuf::uint8* CMsgSteamDatagramNoSessionRelayToPeer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_relay_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_relay_session_id(), target);
  }

  // optional fixed32 from_connection_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->from_connection_id(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->kludge_pad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  return target;
}

size_t CMsgSteamDatagramNoSessionRelayToPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 legacy_relay_session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_relay_session_id());
    }

    // optional fixed32 from_relay_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed64 kludge_pad = 99;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramNoSessionRelayToPeer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramNoSessionRelayToPeer* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramNoSessionRelayToPeer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoSessionRelayToPeer::MergeFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      legacy_relay_session_id_ = from.legacy_relay_session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      from_relay_session_id_ = from.from_relay_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_connection_id_ = from.from_connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      kludge_pad_ = from.kludge_pad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramNoSessionRelayToPeer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSessionRelayToPeer::CopyFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoSessionRelayToPeer::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoSessionRelayToPeer::Swap(CMsgSteamDatagramNoSessionRelayToPeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramNoSessionRelayToPeer::InternalSwap(CMsgSteamDatagramNoSessionRelayToPeer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(legacy_relay_session_id_, other->legacy_relay_session_id_);
  swap(from_relay_session_id_, other->from_relay_session_id_);
  swap(from_connection_id_, other->from_connection_id_);
  swap(kludge_pad_, other->kludge_pad_);
}

::google::protobuf::Metadata CMsgSteamDatagramNoSessionRelayToPeer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientPingSampleRequest::InitAsDefaultInstance() {
}
class CMsgSteamDatagramClientPingSampleRequest::HasBitSetters {
 public:
  static void set_has_connection_id(CMsgSteamDatagramClientPingSampleRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientPingSampleRequest::kConnectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
}
CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(const CMsgSteamDatagramClientPingSampleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_id_ = from.connection_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
}

void CMsgSteamDatagramClientPingSampleRequest::SharedCtor() {
  connection_id_ = 0u;
}

CMsgSteamDatagramClientPingSampleRequest::~CMsgSteamDatagramClientPingSampleRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleRequest::SharedDtor() {
}

void CMsgSteamDatagramClientPingSampleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramClientPingSampleRequest& CMsgSteamDatagramClientPingSampleRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramClientPingSampleRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramClientPingSampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramClientPingSampleRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramClientPingSampleRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramClientPingSampleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramClientPingSampleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed32 connection_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramClientPingSampleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection_id()) {
    set_connection_id(from.connection_id());
  }
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleRequest::Swap(CMsgSteamDatagramClientPingSampleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientPingSampleRequest::InternalSwap(CMsgSteamDatagramClientPingSampleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(connection_id_, other->connection_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InitAsDefaultInstance() {
}
class CMsgSteamDatagramClientPingSampleReply_RoutingCluster::HasBitSetters {
 public:
  static void set_has_id(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_front_ping_ms(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_e2e_ping_ms(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kFrontPingMsFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kE2EPingMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CMsgSteamDatagramClientPingSampleReply_RoutingCluster()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
}
CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CMsgSteamDatagramClientPingSampleReply_RoutingCluster(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&e2e_ping_ms_) -
    reinterpret_cast<char*>(&id_)) + sizeof(e2e_ping_ms_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e2e_ping_ms_) -
      reinterpret_cast<char*>(&id_)) + sizeof(e2e_ping_ms_));
}

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::~CMsgSteamDatagramClientPingSampleReply_RoutingCluster() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SharedDtor() {
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&e2e_ping_ms_) -
        reinterpret_cast<char*>(&id_)) + sizeof(e2e_ping_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramClientPingSampleReply_RoutingCluster*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 front_ping_ms = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_front_ping_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_e2e_ping_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 front_ping_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_front_ping_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_e2e_ping_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e2e_ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // optional uint32 front_ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->front_ping_ms(), output);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e2e_ping_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // optional uint32 front_ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->front_ping_ms(), target);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e2e_ping_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply_RoutingCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 front_ping_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_ping_ms());
    }

    // optional uint32 e2e_ping_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e2e_ping_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_RoutingCluster* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramClientPingSampleReply_RoutingCluster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_ping_ms_ = from.front_ping_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      e2e_ping_ms_ = from.e2e_ping_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::Swap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InternalSwap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(front_ping_ms_, other->front_ping_ms_);
  swap(e2e_ping_ms_, other->e2e_ping_ms_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_RoutingCluster::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientPingSampleReply_DataCenter::InitAsDefaultInstance() {
}
class CMsgSteamDatagramClientPingSampleReply_DataCenter::HasBitSetters {
 public:
  static void set_has_data_center_id(CMsgSteamDatagramClientPingSampleReply_DataCenter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_via_relay_id(CMsgSteamDatagramClientPingSampleReply_DataCenter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_e2e_ping_ms(CMsgSteamDatagramClientPingSampleReply_DataCenter* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kDataCenterIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kViaRelayIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kE2EPingMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientPingSampleReply_DataCenter::CMsgSteamDatagramClientPingSampleReply_DataCenter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
}
CMsgSteamDatagramClientPingSampleReply_DataCenter::CMsgSteamDatagramClientPingSampleReply_DataCenter(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_center_id_, &from.data_center_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&e2e_ping_ms_) -
    reinterpret_cast<char*>(&data_center_id_)) + sizeof(e2e_ping_ms_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SharedCtor() {
  ::memset(&data_center_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e2e_ping_ms_) -
      reinterpret_cast<char*>(&data_center_id_)) + sizeof(e2e_ping_ms_));
}

CMsgSteamDatagramClientPingSampleReply_DataCenter::~CMsgSteamDatagramClientPingSampleReply_DataCenter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SharedDtor() {
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramClientPingSampleReply_DataCenter& CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramClientPingSampleReply_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramClientPingSampleReply_DataCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&data_center_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&e2e_ping_ms_) -
        reinterpret_cast<char*>(&data_center_id_)) + sizeof(e2e_ping_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramClientPingSampleReply_DataCenter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramClientPingSampleReply_DataCenter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_data_center_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 via_relay_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_via_relay_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_e2e_ping_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramClientPingSampleReply_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_data_center_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_center_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 via_relay_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_via_relay_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &via_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_e2e_ping_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e2e_ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->data_center_id(), output);
  }

  // optional fixed32 via_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->via_relay_id(), output);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e2e_ping_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply_DataCenter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->data_center_id(), target);
  }

  // optional fixed32 via_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->via_relay_id(), target);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e2e_ping_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply_DataCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 data_center_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 via_relay_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 e2e_ping_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e2e_ping_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_DataCenter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramClientPingSampleReply_DataCenter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_center_id_ = from.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      via_relay_id_ = from.via_relay_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      e2e_ping_ms_ = from.e2e_ping_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_DataCenter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::Swap(CMsgSteamDatagramClientPingSampleReply_DataCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientPingSampleReply_DataCenter::InternalSwap(CMsgSteamDatagramClientPingSampleReply_DataCenter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_center_id_, other->data_center_id_);
  swap(via_relay_id_, other->via_relay_id_);
  swap(e2e_ping_ms_, other->e2e_ping_ms_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_DataCenter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientPingSampleReply::InitAsDefaultInstance() {
}
class CMsgSteamDatagramClientPingSampleReply::HasBitSetters {
 public:
  static void set_has_connection_id(CMsgSteamDatagramClientPingSampleReply* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientPingSampleReply::kConnectionIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply::kRoutingClustersFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply::kDataCentersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramClientPingSampleReply)
}
CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(const CMsgSteamDatagramClientPingSampleReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      routing_clusters_(from.routing_clusters_),
      data_centers_(from.data_centers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_id_ = from.connection_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramClientPingSampleReply)
}

void CMsgSteamDatagramClientPingSampleReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramClientPingSampleReply_steamdatagram_5fmessages_5fsdr_2eproto.base);
  connection_id_ = 0u;
}

CMsgSteamDatagramClientPingSampleReply::~CMsgSteamDatagramClientPingSampleReply() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply::SharedDtor() {
}

void CMsgSteamDatagramClientPingSampleReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramClientPingSampleReply& CMsgSteamDatagramClientPingSampleReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramClientPingSampleReply_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramClientPingSampleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routing_clusters_.Clear();
  data_centers_.Clear();
  connection_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramClientPingSampleReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramClientPingSampleReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster::_InternalParse;
          object = msg->add_routing_clusters();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter::_InternalParse;
          object = msg->add_data_centers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramClientPingSampleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_routing_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data_centers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramClientPingSampleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routing_clusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->routing_clusters(static_cast<int>(i)),
      output);
  }

  // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->data_centers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramClientPingSampleReply)
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routing_clusters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->routing_clusters(static_cast<int>(i)), target);
  }

  // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->data_centers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->routing_clusters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->routing_clusters(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->data_centers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_centers(static_cast<int>(i)));
    }
  }

  // optional fixed32 connection_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramClientPingSampleReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramClientPingSampleReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramClientPingSampleReply)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routing_clusters_.MergeFrom(from.routing_clusters_);
  data_centers_.MergeFrom(from.data_centers_);
  if (from.has_connection_id()) {
    set_connection_id(from.connection_id());
  }
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramClientPingSampleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply::Swap(CMsgSteamDatagramClientPingSampleReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientPingSampleReply::InternalSwap(CMsgSteamDatagramClientPingSampleReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&routing_clusters_)->InternalSwap(CastToBase(&other->routing_clusters_));
  CastToBase(&data_centers_)->InternalSwap(CastToBase(&other->data_centers_));
  swap(connection_id_, other->connection_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InitAsDefaultInstance() {
}
class CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::HasBitSetters {
 public:
  static void set_has_score(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_front_ping(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_back_ping(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_seconds_until_down(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kScoreFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kFrontPingFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kBackPingFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kSecondsUntilDownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}
CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_until_down_) -
    reinterpret_cast<char*>(&score_)) + sizeof(seconds_until_down_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedCtor() {
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_until_down_) -
      reinterpret_cast<char*>(&score_)) + sizeof(seconds_until_down_));
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::~CMsgSteamDatagramClientSwitchedPrimary_RouterQuality() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  SharedDtor();
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedDtor() {
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_until_down_) -
        reinterpret_cast<char*>(&score_)) + sizeof(seconds_until_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 score = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 front_ping = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_front_ping(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 back_ping = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_back_ping(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seconds_until_down = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_seconds_until_down(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 front_ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_front_ping(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 back_ping = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_back_ping(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_down = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_seconds_until_down(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional uint32 front_ping = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->front_ping(), output);
  }

  // optional uint32 back_ping = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->back_ping(), output);
  }

  // optional uint32 seconds_until_down = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_until_down(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}

::google::protobuf::uint8* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // optional uint32 front_ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->front_ping(), target);
  }

  // optional uint32 back_ping = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->back_ping(), target);
  }

  // optional uint32 seconds_until_down = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_until_down(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  return target;
}

size_t CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 score = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 front_ping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_ping());
    }

    // optional uint32 back_ping = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back_ping());
    }

    // optional uint32 seconds_until_down = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_down());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_ping_ = from.front_ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      back_ping_ = from.back_ping_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_until_down_ = from.seconds_until_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Swap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(score_, other->score_);
  swap(front_ping_, other->front_ping_);
  swap(back_ping_, other->back_ping_);
  swap(seconds_until_down_, other->seconds_until_down_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientSwitchedPrimary::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance.get_mutable()->from_quality_now_ = const_cast< ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance.get_mutable()->to_quality_now_ = const_cast< ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance.get_mutable()->from_quality_then_ = const_cast< ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance.get_mutable()->to_quality_then_ = const_cast< ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::internal_default_instance());
}
class CMsgSteamDatagramClientSwitchedPrimary::HasBitSetters {
 public:
  static void set_has_connection_id(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_from_ip(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_from_port(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_from_router_cluster(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_from_active_time(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_from_active_packets_recv(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_from_dropped_reason(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gap_ms(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_from_quality_now(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_to_quality_now(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_from_quality_then(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg);
  static void set_has_to_quality_then(CMsgSteamDatagramClientSwitchedPrimary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&
CMsgSteamDatagramClientSwitchedPrimary::HasBitSetters::from_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->from_quality_now_;
}
const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&
CMsgSteamDatagramClientSwitchedPrimary::HasBitSetters::to_quality_now(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->to_quality_now_;
}
const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&
CMsgSteamDatagramClientSwitchedPrimary::HasBitSetters::from_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->from_quality_then_;
}
const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&
CMsgSteamDatagramClientSwitchedPrimary::HasBitSetters::to_quality_then(const CMsgSteamDatagramClientSwitchedPrimary* msg) {
  return *msg->to_quality_then_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientSwitchedPrimary::kConnectionIdFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromIpFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromPortFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromRouterClusterFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromActiveTimeFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromActivePacketsRecvFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromDroppedReasonFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kGapMsFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromQualityNowFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kToQualityNowFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromQualityThenFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kToQualityThenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
}
CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(const CMsgSteamDatagramClientSwitchedPrimary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_dropped_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_dropped_reason()) {
    from_dropped_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_dropped_reason_);
  }
  if (from.has_from_quality_now()) {
    from_quality_now_ = new ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.from_quality_now_);
  } else {
    from_quality_now_ = nullptr;
  }
  if (from.has_to_quality_now()) {
    to_quality_now_ = new ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.to_quality_now_);
  } else {
    to_quality_now_ = nullptr;
  }
  if (from.has_from_quality_then()) {
    from_quality_then_ = new ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.from_quality_then_);
  } else {
    from_quality_then_ = nullptr;
  }
  if (from.has_to_quality_then()) {
    to_quality_then_ = new ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.to_quality_then_);
  } else {
    to_quality_then_ = nullptr;
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gap_ms_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(gap_ms_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramClientSwitchedPrimary_steamdatagram_5fmessages_5fsdr_2eproto.base);
  from_dropped_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_quality_now_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gap_ms_) -
      reinterpret_cast<char*>(&from_quality_now_)) + sizeof(gap_ms_));
}

CMsgSteamDatagramClientSwitchedPrimary::~CMsgSteamDatagramClientSwitchedPrimary() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  SharedDtor();
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedDtor() {
  from_dropped_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_quality_now_;
  if (this != internal_default_instance()) delete to_quality_now_;
  if (this != internal_default_instance()) delete from_quality_then_;
  if (this != internal_default_instance()) delete to_quality_then_;
}

void CMsgSteamDatagramClientSwitchedPrimary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramClientSwitchedPrimary& CMsgSteamDatagramClientSwitchedPrimary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramClientSwitchedPrimary_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramClientSwitchedPrimary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      from_dropped_reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(from_quality_now_ != nullptr);
      from_quality_now_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(to_quality_now_ != nullptr);
      to_quality_now_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(from_quality_then_ != nullptr);
      from_quality_then_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(to_quality_then_ != nullptr);
      to_quality_then_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_port_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(from_port_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&from_router_cluster_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gap_ms_) -
        reinterpret_cast<char*>(&from_router_cluster_)) + sizeof(gap_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramClientSwitchedPrimary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramClientSwitchedPrimary*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 from_ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_from_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 from_port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_from_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 from_router_cluster = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_from_router_cluster(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 from_active_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_from_active_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 from_active_packets_recv = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_from_active_packets_recv(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string from_dropped_reason = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
        object = msg->mutable_from_dropped_reason();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 gap_ms = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_gap_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalParse;
        object = msg->mutable_from_quality_now();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalParse;
        object = msg->mutable_to_quality_now();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalParse;
        object = msg->mutable_from_quality_then();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalParse;
        object = msg->mutable_to_quality_then();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramClientSwitchedPrimary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_from_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_from_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_router_cluster = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_from_router_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_router_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_active_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_from_active_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_active_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_active_packets_recv = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_from_active_packets_recv(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_active_packets_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_dropped_reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_dropped_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_dropped_reason().data(), static_cast<int>(this->from_dropped_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gap_ms = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_gap_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gap_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_quality_now()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_quality_now()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_quality_then()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_quality_then()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramClientSwitchedPrimary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional fixed32 from_ip = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_ip(), output);
  }

  // optional uint32 from_port = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_port(), output);
  }

  // optional fixed32 from_router_cluster = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->from_router_cluster(), output);
  }

  // optional uint32 from_active_time = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_active_time(), output);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->from_active_packets_recv(), output);
  }

  // optional string from_dropped_reason = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_dropped_reason().data(), static_cast<int>(this->from_dropped_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->from_dropped_reason(), output);
  }

  // optional uint32 gap_ms = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gap_ms(), output);
  }

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::from_quality_now(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::to_quality_now(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::from_quality_then(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::to_quality_then(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
}

::google::protobuf::uint8* CMsgSteamDatagramClientSwitchedPrimary::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional fixed32 from_ip = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_ip(), target);
  }

  // optional uint32 from_port = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_port(), target);
  }

  // optional fixed32 from_router_cluster = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->from_router_cluster(), target);
  }

  // optional uint32 from_active_time = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->from_active_time(), target);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->from_active_packets_recv(), target);
  }

  // optional string from_dropped_reason = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_dropped_reason().data(), static_cast<int>(this->from_dropped_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->from_dropped_reason(), target);
  }

  // optional uint32 gap_ms = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gap_ms(), target);
  }

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::from_quality_now(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::to_quality_now(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::from_quality_then(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::to_quality_then(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  return target;
}

size_t CMsgSteamDatagramClientSwitchedPrimary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string from_dropped_reason = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_dropped_reason());
    }

    // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *from_quality_now_);
    }

    // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *to_quality_now_);
    }

    // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *from_quality_then_);
    }

    // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *to_quality_then_);
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_ip = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 from_port = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_port());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed32 from_router_cluster = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 from_active_time = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_active_time());
    }

    // optional uint32 from_active_packets_recv = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_active_packets_recv());
    }

    // optional uint32 gap_ms = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gap_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramClientSwitchedPrimary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      from_dropped_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_dropped_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_from_quality_now()->::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.from_quality_now());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_to_quality_now()->::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.to_quality_now());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_from_quality_then()->::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.from_quality_then());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_to_quality_then()->::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.to_quality_then());
    }
    if (cached_has_bits & 0x00000020u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      from_ip_ = from.from_ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_port_ = from.from_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      from_router_cluster_ = from.from_router_cluster_;
    }
    if (cached_has_bits & 0x00000200u) {
      from_active_time_ = from.from_active_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      from_active_packets_recv_ = from.from_active_packets_recv_;
    }
    if (cached_has_bits & 0x00000800u) {
      gap_ms_ = from.gap_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary::Swap(CMsgSteamDatagramClientSwitchedPrimary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientSwitchedPrimary::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_dropped_reason_.Swap(&other->from_dropped_reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_quality_now_, other->from_quality_now_);
  swap(to_quality_now_, other->to_quality_now_);
  swap(from_quality_then_, other->from_quality_then_);
  swap(to_quality_then_, other->to_quality_then_);
  swap(connection_id_, other->connection_id_);
  swap(from_ip_, other->from_ip_);
  swap(from_port_, other->from_port_);
  swap(from_router_cluster_, other->from_router_cluster_);
  swap(from_active_time_, other->from_active_time_);
  swap(from_active_packets_recv_, other->from_active_packets_recv_);
  swap(gap_ms_, other->gap_ms_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectRequest::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectRequest_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectRequest_default_instance_._instance.get_mutable()->cert_ = const_cast< ::proto::steam::CMsgSteamDatagramCertificateSigned*>(
      ::proto::steam::CMsgSteamDatagramCertificateSigned::internal_default_instance());
}
class CMsgSteamDatagramConnectRequest::HasBitSetters {
 public:
  static void set_has_connection_id(CMsgSteamDatagramConnectRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_my_timestamp(CMsgSteamDatagramConnectRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_ping_est_ms(CMsgSteamDatagramConnectRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_virtual_port(CMsgSteamDatagramConnectRequest* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_gameserver_relay_session_id(CMsgSteamDatagramConnectRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamDatagramConnectRequest* msg);
  static void set_has_crypt(CMsgSteamDatagramConnectRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramConnectRequest* msg);
  static void set_has_cert(CMsgSteamDatagramConnectRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_legacy_client_steam_id(CMsgSteamDatagramConnectRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned&
CMsgSteamDatagramConnectRequest::HasBitSetters::crypt(const CMsgSteamDatagramConnectRequest* msg) {
  return *msg->crypt_;
}
const ::proto::steam::CMsgSteamDatagramCertificateSigned&
CMsgSteamDatagramConnectRequest::HasBitSetters::cert(const CMsgSteamDatagramConnectRequest* msg) {
  return *msg->cert_;
}
void CMsgSteamDatagramConnectRequest::clear_crypt() {
  if (crypt_ != nullptr) crypt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectRequest::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectRequest::kConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectRequest::kMyTimestampFieldNumber;
const int CMsgSteamDatagramConnectRequest::kPingEstMsFieldNumber;
const int CMsgSteamDatagramConnectRequest::kVirtualPortFieldNumber;
const int CMsgSteamDatagramConnectRequest::kGameserverRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectRequest::kCryptFieldNumber;
const int CMsgSteamDatagramConnectRequest::kCertFieldNumber;
const int CMsgSteamDatagramConnectRequest::kLegacyClientSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectRequest)
}
CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(const CMsgSteamDatagramConnectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crypt()) {
    crypt_ = new ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = nullptr;
  }
  if (from.has_cert()) {
    cert_ = new ::proto::steam::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_port_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(virtual_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectRequest)
}

void CMsgSteamDatagramConnectRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::memset(&crypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_port_) -
      reinterpret_cast<char*>(&crypt_)) + sizeof(virtual_port_));
}

CMsgSteamDatagramConnectRequest::~CMsgSteamDatagramConnectRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectRequest)
  SharedDtor();
}

void CMsgSteamDatagramConnectRequest::SharedDtor() {
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamDatagramConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectRequest& CMsgSteamDatagramConnectRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(crypt_ != nullptr);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_port_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(virtual_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 gameserver_relay_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gameserver_relay_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 legacy_client_steam_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_legacy_client_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 my_timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_my_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 ping_est_ms = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ping_est_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned::_InternalParse;
        object = msg->mutable_crypt();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramCertificateSigned::_InternalParse;
        object = msg->mutable_cert();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 virtual_port = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_virtual_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameserver_relay_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gameserver_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameserver_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_client_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_legacy_client_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_client_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 my_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_my_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &my_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_est_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ping_est_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_est_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 virtual_port = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_virtual_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameserver_relay_session_id(), output);
  }

  // optional fixed64 legacy_client_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->legacy_client_steam_id(), output);
  }

  // optional fixed64 my_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->my_timestamp(), output);
  }

  // optional uint32 ping_est_ms = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ping_est_ms(), output);
  }

  // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::crypt(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::cert(this), output);
  }

  // optional uint32 virtual_port = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->virtual_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectRequest)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_client_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->legacy_client_steam_id(), target);
  }

  // optional fixed64 my_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->my_timestamp(), target);
  }

  // optional uint32 ping_est_ms = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ping_est_ms(), target);
  }

  // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::crypt(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::cert(this), target);
  }

  // optional uint32 virtual_port = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->virtual_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectRequest)
  return target;
}

size_t CMsgSteamDatagramConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cert_);
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameserver_relay_session_id());
    }

    // optional fixed64 legacy_client_steam_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 my_timestamp = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 ping_est_ms = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_est_ms());
    }

    // optional uint32 virtual_port = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectRequest::MergeFrom(const CMsgSteamDatagramConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_crypt()->::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cert()->::proto::steam::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (cached_has_bits & 0x00000004u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      gameserver_relay_session_id_ = from.gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_client_steam_id_ = from.legacy_client_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      my_timestamp_ = from.my_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      ping_est_ms_ = from.ping_est_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      virtual_port_ = from.virtual_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectRequest::CopyFrom(const CMsgSteamDatagramConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectRequest::Swap(CMsgSteamDatagramConnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectRequest::InternalSwap(CMsgSteamDatagramConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(crypt_, other->crypt_);
  swap(cert_, other->cert_);
  swap(connection_id_, other->connection_id_);
  swap(gameserver_relay_session_id_, other->gameserver_relay_session_id_);
  swap(legacy_client_steam_id_, other->legacy_client_steam_id_);
  swap(my_timestamp_, other->my_timestamp_);
  swap(ping_est_ms_, other->ping_est_ms_);
  swap(virtual_port_, other->virtual_port_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectOK::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectOK_default_instance_._instance.get_mutable()->crypt_ = const_cast< ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned*>(
      ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectOK_default_instance_._instance.get_mutable()->cert_ = const_cast< ::proto::steam::CMsgSteamDatagramCertificateSigned*>(
      ::proto::steam::CMsgSteamDatagramCertificateSigned::internal_default_instance());
}
class CMsgSteamDatagramConnectOK::HasBitSetters {
 public:
  static void set_has_client_connection_id(CMsgSteamDatagramConnectOK* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_server_connection_id(CMsgSteamDatagramConnectOK* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_your_timestamp(CMsgSteamDatagramConnectOK* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_delay_time_usec(CMsgSteamDatagramConnectOK* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_gameserver_relay_session_id(CMsgSteamDatagramConnectOK* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned& crypt(const CMsgSteamDatagramConnectOK* msg);
  static void set_has_crypt(CMsgSteamDatagramConnectOK* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramConnectOK* msg);
  static void set_has_cert(CMsgSteamDatagramConnectOK* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned&
CMsgSteamDatagramConnectOK::HasBitSetters::crypt(const CMsgSteamDatagramConnectOK* msg) {
  return *msg->crypt_;
}
const ::proto::steam::CMsgSteamDatagramCertificateSigned&
CMsgSteamDatagramConnectOK::HasBitSetters::cert(const CMsgSteamDatagramConnectOK* msg) {
  return *msg->cert_;
}
void CMsgSteamDatagramConnectOK::clear_crypt() {
  if (crypt_ != nullptr) crypt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectOK::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectOK::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectOK::kServerConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectOK::kYourTimestampFieldNumber;
const int CMsgSteamDatagramConnectOK::kDelayTimeUsecFieldNumber;
const int CMsgSteamDatagramConnectOK::kGameserverRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectOK::kCryptFieldNumber;
const int CMsgSteamDatagramConnectOK::kCertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectOK)
}
CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(const CMsgSteamDatagramConnectOK& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crypt()) {
    crypt_ = new ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned(*from.crypt_);
  } else {
    crypt_ = nullptr;
  }
  if (from.has_cert()) {
    cert_ = new ::proto::steam::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  ::memcpy(&client_connection_id_, &from.client_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&client_connection_id_)) + sizeof(server_connection_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectOK)
}

void CMsgSteamDatagramConnectOK::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectOK_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::memset(&crypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_connection_id_) -
      reinterpret_cast<char*>(&crypt_)) + sizeof(server_connection_id_));
}

CMsgSteamDatagramConnectOK::~CMsgSteamDatagramConnectOK() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectOK)
  SharedDtor();
}

void CMsgSteamDatagramConnectOK::SharedDtor() {
  if (this != internal_default_instance()) delete crypt_;
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamDatagramConnectOK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectOK& CMsgSteamDatagramConnectOK::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectOK_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectOK::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(crypt_ != nullptr);
      crypt_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&client_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_connection_id_) -
        reinterpret_cast<char*>(&client_connection_id_)) + sizeof(server_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectOK::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectOK*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 client_connection_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_client_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 gameserver_relay_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gameserver_relay_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 your_timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_your_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 delay_time_usec = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_delay_time_usec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned::_InternalParse;
        object = msg->mutable_crypt();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramCertificateSigned::_InternalParse;
        object = msg->mutable_cert();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional fixed32 server_connection_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_server_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectOK)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_client_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameserver_relay_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gameserver_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameserver_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 your_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_your_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &your_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay_time_usec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_delay_time_usec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_connection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_server_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectOK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectOK)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_connection_id(), output);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameserver_relay_session_id(), output);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->your_timestamp(), output);
  }

  // optional uint32 delay_time_usec = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delay_time_usec(), output);
  }

  // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::crypt(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::cert(this), output);
  }

  // optional fixed32 server_connection_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->server_connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectOK)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectOK::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectOK)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameserver_relay_session_id(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->your_timestamp(), target);
  }

  // optional uint32 delay_time_usec = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delay_time_usec(), target);
  }

  // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::crypt(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::cert(this), target);
  }

  // optional fixed32 server_connection_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->server_connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectOK)
  return target;
}

size_t CMsgSteamDatagramConnectOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectOK)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *crypt_);
    }

    // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cert_);
    }

    // optional fixed32 client_connection_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameserver_relay_session_id());
    }

    // optional fixed64 your_timestamp = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 delay_time_usec = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time_usec());
    }

    // optional fixed32 server_connection_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectOK::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectOK* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectOK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectOK)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectOK)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectOK::MergeFrom(const CMsgSteamDatagramConnectOK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectOK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_crypt()->::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cert()->::proto::steam::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (cached_has_bits & 0x00000004u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      gameserver_relay_session_id_ = from.gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      your_timestamp_ = from.your_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      delay_time_usec_ = from.delay_time_usec_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_connection_id_ = from.server_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectOK::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectOK::CopyFrom(const CMsgSteamDatagramConnectOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectOK::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectOK::Swap(CMsgSteamDatagramConnectOK* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectOK::InternalSwap(CMsgSteamDatagramConnectOK* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(crypt_, other->crypt_);
  swap(cert_, other->cert_);
  swap(client_connection_id_, other->client_connection_id_);
  swap(gameserver_relay_session_id_, other->gameserver_relay_session_id_);
  swap(your_timestamp_, other->your_timestamp_);
  swap(delay_time_usec_, other->delay_time_usec_);
  swap(server_connection_id_, other->server_connection_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectOK::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionClosed::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectionClosed_default_instance_._instance.get_mutable()->from_identity_ = const_cast< ::proto::steam::CMsgSteamNetworkingIdentity*>(
      ::proto::steam::CMsgSteamNetworkingIdentity::internal_default_instance());
}
class CMsgSteamDatagramConnectionClosed::HasBitSetters {
 public:
  static void set_has_to_connection_id(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_from_connection_id(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::proto::steam::CMsgSteamNetworkingIdentity& from_identity(const CMsgSteamDatagramConnectionClosed* msg);
  static void set_has_from_identity(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_legacy_from_steam_id(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_legacy_gameserver_relay_session_id(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_to_relay_session_id(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_from_relay_session_id(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_forward_target_relay_routing_token(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_forward_target_revision(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_relay_mode(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_debug(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_reason_code(CMsgSteamDatagramConnectionClosed* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

const ::proto::steam::CMsgSteamNetworkingIdentity&
CMsgSteamDatagramConnectionClosed::HasBitSetters::from_identity(const CMsgSteamDatagramConnectionClosed* msg) {
  return *msg->from_identity_;
}
void CMsgSteamDatagramConnectionClosed::clear_from_identity() {
  if (from_identity_ != nullptr) from_identity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionClosed::kToConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kFromConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kFromIdentityFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kLegacyFromSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kLegacyGameserverRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kToRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kForwardTargetRelayRoutingTokenFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kRelayModeFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kDebugFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kReasonCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectionClosed)
}
CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(const CMsgSteamDatagramConnectionClosed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug()) {
    debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
  }
  forward_target_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_forward_target_relay_routing_token()) {
    forward_target_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forward_target_relay_routing_token_);
  }
  if (from.has_from_identity()) {
    from_identity_ = new ::proto::steam::CMsgSteamNetworkingIdentity(*from.from_identity_);
  } else {
    from_identity_ = nullptr;
  }
  ::memcpy(&legacy_from_steam_id_, &from.legacy_from_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&forward_target_revision_) -
    reinterpret_cast<char*>(&legacy_from_steam_id_)) + sizeof(forward_target_revision_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectionClosed)
}

void CMsgSteamDatagramConnectionClosed::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectionClosed_steamdatagram_5fmessages_5fsdr_2eproto.base);
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forward_target_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_target_revision_) -
      reinterpret_cast<char*>(&from_identity_)) + sizeof(forward_target_revision_));
}

CMsgSteamDatagramConnectionClosed::~CMsgSteamDatagramConnectionClosed() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectionClosed)
  SharedDtor();
}

void CMsgSteamDatagramConnectionClosed::SharedDtor() {
  debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forward_target_relay_routing_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_identity_;
}

void CMsgSteamDatagramConnectionClosed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionClosed& CMsgSteamDatagramConnectionClosed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionClosed_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectionClosed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      debug_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      forward_target_relay_routing_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(from_identity_ != nullptr);
      from_identity_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&legacy_from_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_connection_id_) -
        reinterpret_cast<char*>(&legacy_from_steam_id_)) + sizeof(to_connection_id_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&from_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&forward_target_revision_) -
        reinterpret_cast<char*>(&from_connection_id_)) + sizeof(forward_target_revision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectionClosed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectionClosed*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_gameserver_relay_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_legacy_gameserver_relay_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 legacy_from_steam_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_legacy_from_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_relay_mode(static_cast<::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string debug = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSteamDatagramConnectionClosed.debug");
        object = msg->mutable_debug();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 reason_code = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_reason_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 to_connection_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_to_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 from_connection_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_from_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 to_relay_session_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_to_relay_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 from_relay_session_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_from_relay_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bytes forward_target_relay_routing_token = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_forward_target_relay_routing_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 forward_target_revision = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_forward_target_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgSteamNetworkingIdentity from_identity = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamNetworkingIdentity::_InternalParse;
        object = msg->mutable_from_identity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectionClosed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectionClosed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_gameserver_relay_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_legacy_gameserver_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_gameserver_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_from_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_legacy_from_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_from_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(value)) {
            set_relay_mode(static_cast< ::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string debug = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug().data(), static_cast<int>(this->debug().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSteamDatagramConnectionClosed.debug");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_reason_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 to_connection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_to_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_connection_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_from_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 to_relay_session_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_to_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_relay_session_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_from_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes forward_target_relay_routing_token = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forward_target_relay_routing_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 forward_target_revision = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_forward_target_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_target_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamNetworkingIdentity from_identity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectionClosed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectionClosed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectionClosed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectionClosed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->legacy_gameserver_relay_session_id(), output);
  }

  // optional fixed64 legacy_from_steam_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->legacy_from_steam_id(), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->relay_mode(), output);
  }

  // optional string debug = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramConnectionClosed.debug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->debug(), output);
  }

  // optional uint32 reason_code = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reason_code(), output);
  }

  // optional fixed32 to_connection_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->to_connection_id(), output);
  }

  // optional fixed32 from_connection_id = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->from_connection_id(), output);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->to_relay_session_id(), output);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->from_relay_session_id(), output);
  }

  // optional bytes forward_target_relay_routing_token = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->forward_target_relay_routing_token(), output);
  }

  // optional uint32 forward_target_revision = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->forward_target_revision(), output);
  }

  // optional .proto.steam.CMsgSteamNetworkingIdentity from_identity = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::from_identity(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectionClosed)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionClosed::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectionClosed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_from_steam_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->legacy_from_steam_id(), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->relay_mode(), target);
  }

  // optional string debug = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramConnectionClosed.debug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug(), target);
  }

  // optional uint32 reason_code = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reason_code(), target);
  }

  // optional fixed32 to_connection_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->from_connection_id(), target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->from_relay_session_id(), target);
  }

  // optional bytes forward_target_relay_routing_token = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->forward_target_relay_routing_token(), target);
  }

  // optional uint32 forward_target_revision = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->forward_target_revision(), target);
  }

  // optional .proto.steam.CMsgSteamNetworkingIdentity from_identity = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::from_identity(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectionClosed)
  return target;
}

size_t CMsgSteamDatagramConnectionClosed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectionClosed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string debug = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug());
    }

    // optional bytes forward_target_relay_routing_token = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->forward_target_relay_routing_token());
    }

    // optional .proto.steam.CMsgSteamNetworkingIdentity from_identity = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *from_identity_);
    }

    // optional fixed64 legacy_from_steam_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_gameserver_relay_session_id());
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relay_mode());
    }

    // optional uint32 reason_code = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason_code());
    }

    // optional fixed32 to_connection_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional fixed32 from_connection_id = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional fixed32 to_relay_session_id = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_relay_session_id = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 forward_target_revision = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forward_target_revision());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionClosed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionClosed* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectionClosed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectionClosed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectionClosed)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionClosed::MergeFrom(const CMsgSteamDatagramConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      forward_target_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forward_target_relay_routing_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_from_identity()->::proto::steam::CMsgSteamNetworkingIdentity::MergeFrom(from.from_identity());
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_from_steam_id_ = from.legacy_from_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_gameserver_relay_session_id_ = from.legacy_gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      relay_mode_ = from.relay_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      reason_code_ = from.reason_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      to_connection_id_ = from.to_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      from_connection_id_ = from.from_connection_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      to_relay_session_id_ = from.to_relay_session_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      from_relay_session_id_ = from.from_relay_session_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      forward_target_revision_ = from.forward_target_revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionClosed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionClosed::CopyFrom(const CMsgSteamDatagramConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionClosed::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionClosed::Swap(CMsgSteamDatagramConnectionClosed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionClosed::InternalSwap(CMsgSteamDatagramConnectionClosed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  debug_.Swap(&other->debug_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  forward_target_relay_routing_token_.Swap(&other->forward_target_relay_routing_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_identity_, other->from_identity_);
  swap(legacy_from_steam_id_, other->legacy_from_steam_id_);
  swap(legacy_gameserver_relay_session_id_, other->legacy_gameserver_relay_session_id_);
  swap(relay_mode_, other->relay_mode_);
  swap(reason_code_, other->reason_code_);
  swap(to_connection_id_, other->to_connection_id_);
  swap(from_connection_id_, other->from_connection_id_);
  swap(to_relay_session_id_, other->to_relay_session_id_);
  swap(from_relay_session_id_, other->from_relay_session_id_);
  swap(forward_target_revision_, other->forward_target_revision_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionClosed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramNoConnection::InitAsDefaultInstance() {
}
class CMsgSteamDatagramNoConnection::HasBitSetters {
 public:
  static void set_has_to_connection_id(CMsgSteamDatagramNoConnection* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_from_connection_id(CMsgSteamDatagramNoConnection* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_legacy_gameserver_relay_session_id(CMsgSteamDatagramNoConnection* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_to_relay_session_id(CMsgSteamDatagramNoConnection* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_from_relay_session_id(CMsgSteamDatagramNoConnection* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_from_steam_id(CMsgSteamDatagramNoConnection* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_end_to_end(CMsgSteamDatagramNoConnection* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_dummy_pad(CMsgSteamDatagramNoConnection* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramNoConnection::kToConnectionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kFromConnectionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kLegacyGameserverRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kToRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kFromSteamIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kEndToEndFieldNumber;
const int CMsgSteamDatagramNoConnection::kDummyPadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramNoConnection)
}
CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(const CMsgSteamDatagramNoConnection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_steam_id_, &from.from_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_relay_session_id_) -
    reinterpret_cast<char*>(&from_steam_id_)) + sizeof(from_relay_session_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramNoConnection)
}

void CMsgSteamDatagramNoConnection::SharedCtor() {
  ::memset(&from_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_relay_session_id_) -
      reinterpret_cast<char*>(&from_steam_id_)) + sizeof(from_relay_session_id_));
}

CMsgSteamDatagramNoConnection::~CMsgSteamDatagramNoConnection() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramNoConnection)
  SharedDtor();
}

void CMsgSteamDatagramNoConnection::SharedDtor() {
}

void CMsgSteamDatagramNoConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramNoConnection& CMsgSteamDatagramNoConnection::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramNoConnection_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramNoConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramNoConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&from_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_relay_session_id_) -
        reinterpret_cast<char*>(&from_steam_id_)) + sizeof(from_relay_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramNoConnection::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramNoConnection*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 legacy_gameserver_relay_session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_legacy_gameserver_relay_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 from_steam_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_from_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool end_to_end = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_end_to_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 to_connection_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_to_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 from_connection_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_from_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 to_relay_session_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_to_relay_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 from_relay_session_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_from_relay_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 dummy_pad = 1023;
      case 1023: {
        if (static_cast<::google::protobuf::uint8>(tag) != 253) goto handle_unusual;
        msg->set_dummy_pad(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramNoConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramNoConnection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_gameserver_relay_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_legacy_gameserver_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_gameserver_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 from_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_from_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &from_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool end_to_end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_end_to_end(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_to_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 to_connection_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_to_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_connection_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_from_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 to_relay_session_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_to_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_relay_session_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_from_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 dummy_pad = 1023;
      case 1023: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8189 & 0xFF)) {
          HasBitSetters::set_has_dummy_pad(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dummy_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramNoConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramNoConnection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramNoConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramNoConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->legacy_gameserver_relay_session_id(), output);
  }

  // optional fixed64 from_steam_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->from_steam_id(), output);
  }

  // optional bool end_to_end = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->end_to_end(), output);
  }

  // optional fixed32 to_connection_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->to_connection_id(), output);
  }

  // optional fixed32 from_connection_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->from_connection_id(), output);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->to_relay_session_id(), output);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->from_relay_session_id(), output);
  }

  // optional fixed32 dummy_pad = 1023;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1023, this->dummy_pad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramNoConnection)
}

::google::protobuf::uint8* CMsgSteamDatagramNoConnection::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramNoConnection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 from_steam_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->from_steam_id(), target);
  }

  // optional bool end_to_end = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->end_to_end(), target);
  }

  // optional fixed32 to_connection_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->from_connection_id(), target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->from_relay_session_id(), target);
  }

  // optional fixed32 dummy_pad = 1023;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1023, this->dummy_pad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramNoConnection)
  return target;
}

size_t CMsgSteamDatagramNoConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramNoConnection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 from_steam_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_gameserver_relay_session_id());
    }

    // optional bool end_to_end = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional fixed32 to_connection_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 dummy_pad = 1023;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional fixed32 to_relay_session_id = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_relay_session_id = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramNoConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramNoConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramNoConnection* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramNoConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramNoConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramNoConnection)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoConnection::MergeFrom(const CMsgSteamDatagramNoConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramNoConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      from_steam_id_ = from.from_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      legacy_gameserver_relay_session_id_ = from.legacy_gameserver_relay_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_to_end_ = from.end_to_end_;
    }
    if (cached_has_bits & 0x00000008u) {
      to_connection_id_ = from.to_connection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_connection_id_ = from.from_connection_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      dummy_pad_ = from.dummy_pad_;
    }
    if (cached_has_bits & 0x00000040u) {
      to_relay_session_id_ = from.to_relay_session_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_relay_session_id_ = from.from_relay_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramNoConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramNoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoConnection::CopyFrom(const CMsgSteamDatagramNoConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramNoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoConnection::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoConnection::Swap(CMsgSteamDatagramNoConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramNoConnection::InternalSwap(CMsgSteamDatagramNoConnection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(from_steam_id_, other->from_steam_id_);
  swap(legacy_gameserver_relay_session_id_, other->legacy_gameserver_relay_session_id_);
  swap(end_to_end_, other->end_to_end_);
  swap(to_connection_id_, other->to_connection_id_);
  swap(from_connection_id_, other->from_connection_id_);
  swap(dummy_pad_, other->dummy_pad_);
  swap(to_relay_session_id_, other->to_relay_session_id_);
  swap(from_relay_session_id_, other->from_relay_session_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramNoConnection::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramGameserverSessionRequest::InitAsDefaultInstance() {
}
class CMsgSteamDatagramGameserverSessionRequest::HasBitSetters {
 public:
  static void set_has_ticket(CMsgSteamDatagramGameserverSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_challenge_time(CMsgSteamDatagramGameserverSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_challenge(CMsgSteamDatagramGameserverSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_connection_id(CMsgSteamDatagramGameserverSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_server_connection_id(CMsgSteamDatagramGameserverSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_network_config_version(CMsgSteamDatagramGameserverSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_protocol_version(CMsgSteamDatagramGameserverSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramGameserverSessionRequest::kTicketFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kChallengeTimeFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kChallengeFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kServerConnectionIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kNetworkConfigVersionFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kProtocolVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
}
CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(const CMsgSteamDatagramGameserverSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(server_connection_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
}

void CMsgSteamDatagramGameserverSessionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramGameserverSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&challenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_connection_id_) -
      reinterpret_cast<char*>(&challenge_)) + sizeof(server_connection_id_));
}

CMsgSteamDatagramGameserverSessionRequest::~CMsgSteamDatagramGameserverSessionRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  SharedDtor();
}

void CMsgSteamDatagramGameserverSessionRequest::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramGameserverSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramGameserverSessionRequest& CMsgSteamDatagramGameserverSessionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramGameserverSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramGameserverSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ticket_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_connection_id_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(server_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramGameserverSessionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramGameserverSessionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes ticket = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 challenge_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_challenge_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 challenge = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_challenge(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 client_connection_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_client_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 network_config_version = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_network_config_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 protocol_version = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_protocol_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 server_connection_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_server_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramGameserverSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 challenge_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_challenge_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &challenge_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 challenge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_challenge(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_connection_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_client_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 network_config_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_network_config_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_config_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_protocol_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_connection_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_server_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramGameserverSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ticket(), output);
  }

  // optional fixed32 challenge_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->challenge_time(), output);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->challenge(), output);
  }

  // optional fixed32 client_connection_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->client_connection_id(), output);
  }

  // optional uint32 network_config_version = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->network_config_version(), output);
  }

  // optional uint32 protocol_version = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->protocol_version(), output);
  }

  // optional fixed32 server_connection_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->server_connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverSessionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ticket(), target);
  }

  // optional fixed32 challenge_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->challenge_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->challenge(), target);
  }

  // optional fixed32 client_connection_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->client_connection_id(), target);
  }

  // optional uint32 network_config_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->network_config_version(), target);
  }

  // optional uint32 protocol_version = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->protocol_version(), target);
  }

  // optional fixed32 server_connection_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->server_connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  return target;
}

size_t CMsgSteamDatagramGameserverSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional fixed64 challenge = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed32 challenge_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_connection_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 network_config_version = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_config_version());
    }

    // optional uint32 protocol_version = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional fixed32 server_connection_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramGameserverSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_time_ = from.challenge_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      network_config_version_ = from.network_config_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_connection_id_ = from.server_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverSessionRequest::Swap(CMsgSteamDatagramGameserverSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramGameserverSessionRequest::InternalSwap(CMsgSteamDatagramGameserverSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_.Swap(&other->ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(challenge_, other->challenge_);
  swap(challenge_time_, other->challenge_time_);
  swap(client_connection_id_, other->client_connection_id_);
  swap(network_config_version_, other->network_config_version_);
  swap(protocol_version_, other->protocol_version_);
  swap(server_connection_id_, other->server_connection_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramGameserverSessionEstablished::InitAsDefaultInstance() {
}
class CMsgSteamDatagramGameserverSessionEstablished::HasBitSetters {
 public:
  static void set_has_connection_id(CMsgSteamDatagramGameserverSessionEstablished* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gameserver_steam_id(CMsgSteamDatagramGameserverSessionEstablished* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_seconds_until_shutdown(CMsgSteamDatagramGameserverSessionEstablished* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_seq_num_r2c(CMsgSteamDatagramGameserverSessionEstablished* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramGameserverSessionEstablished::kConnectionIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kGameserverSteamIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kSeqNumR2CFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
}
CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(const CMsgSteamDatagramGameserverSessionEstablished& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_r2c_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedCtor() {
  ::memset(&connection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_r2c_) -
      reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
}

CMsgSteamDatagramGameserverSessionEstablished::~CMsgSteamDatagramGameserverSessionEstablished() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  SharedDtor();
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedDtor() {
}

void CMsgSteamDatagramGameserverSessionEstablished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramGameserverSessionEstablished& CMsgSteamDatagramGameserverSessionEstablished::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramGameserverSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramGameserverSessionEstablished::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_r2c_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramGameserverSessionEstablished::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramGameserverSessionEstablished*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 gameserver_steam_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_gameserver_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 seconds_until_shutdown = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_seconds_until_shutdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seq_num_r2c = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_seq_num_r2c(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramGameserverSessionEstablished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameserver_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_gameserver_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_seconds_until_shutdown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_r2c = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_seq_num_r2c(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramGameserverSessionEstablished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->gameserver_steam_id(), output);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_until_shutdown(), output);
  }

  // optional uint32 seq_num_r2c = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seq_num_r2c(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverSessionEstablished::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->gameserver_steam_id(), target);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_until_shutdown(), target);
  }

  // optional uint32 seq_num_r2c = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq_num_r2c(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  return target;
}

size_t CMsgSteamDatagramGameserverSessionEstablished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 seconds_until_shutdown = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed64 gameserver_steam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 seq_num_r2c = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionEstablished* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramGameserverSessionEstablished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000004u) {
      gameserver_steam_id_ = from.gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_num_r2c_ = from.seq_num_r2c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionEstablished::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverSessionEstablished::Swap(CMsgSteamDatagramGameserverSessionEstablished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramGameserverSessionEstablished::InternalSwap(CMsgSteamDatagramGameserverSessionEstablished* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(connection_id_, other->connection_id_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(gameserver_steam_id_, other->gameserver_steam_id_);
  swap(seq_num_r2c_, other->seq_num_r2c_);
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionEstablished::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsClientToRouter::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_._instance.get_mutable()->quality_relay_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_._instance.get_mutable()->quality_e2e_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
class CMsgSteamDatagramConnectionStatsClientToRouter::HasBitSetters {
 public:
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsClientToRouter* msg);
  static void set_has_quality_relay(CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsClientToRouter* msg);
  static void set_has_quality_e2e(CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_flags(CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_client_connection_id(CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_seq_num_c2r(CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_seq_num_c2s(CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsClientToRouter::HasBitSetters::quality_relay(const CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
  return *msg->quality_relay_;
}
const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsClientToRouter::HasBitSetters::quality_e2e(const CMsgSteamDatagramConnectionStatsClientToRouter* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsClientToRouter::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kSeqNumC2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kSeqNumC2SFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
}
CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(const CMsgSteamDatagramConnectionStatsClientToRouter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_quality_relay()) {
    quality_relay_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from.has_quality_e2e()) {
    quality_e2e_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_c2s_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(seq_num_c2s_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectionStatsClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::memset(&quality_relay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_c2s_) -
      reinterpret_cast<char*>(&quality_relay_)) + sizeof(seq_num_c2s_));
}

CMsgSteamDatagramConnectionStatsClientToRouter::~CMsgSteamDatagramConnectionStatsClientToRouter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedDtor() {
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionStatsClientToRouter& CMsgSteamDatagramConnectionStatsClientToRouter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionStatsClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionStatsClientToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_c2s_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(seq_num_c2s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectionStatsClientToRouter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectionStatsClientToRouter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_relay();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated fixed32 ack_relay = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 37) {
          do {
            msg->add_ack_relay(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 37 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_ack_relay();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed32 legacy_ack_e2e = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 45) {
          do {
            msg->add_legacy_ack_e2e(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 45 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_legacy_ack_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 flags = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 client_connection_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_client_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 seq_num_c2r = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_seq_num_c2r(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seq_num_c2s = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_seq_num_c2s(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectionStatsClientToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_relay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_e2e()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 ack_relay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37u, input, this->mutable_ack_relay())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 45u, input, this->mutable_legacy_ack_e2e())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_connection_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_client_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_c2r = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_seq_num_c2r(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_c2s = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_seq_num_c2s(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectionStatsClientToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::quality_relay(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::quality_e2e(this), output);
  }

  // repeated fixed32 ack_relay = 4;
  for (int i = 0, n = this->ack_relay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 5;
  for (int i = 0, n = this->legacy_ack_e2e_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      5, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flags(), output);
  }

  // optional fixed32 client_connection_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->client_connection_id(), output);
  }

  // optional uint32 seq_num_c2r = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seq_num_c2r(), output);
  }

  // optional uint32 seq_num_c2s = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->seq_num_c2s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsClientToRouter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::quality_relay(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::quality_e2e(this), target);
  }

  // repeated fixed32 ack_relay = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(4, this->ack_relay_, target);

  // repeated fixed32 legacy_ack_e2e = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(5, this->legacy_ack_e2e_, target);

  // optional uint32 flags = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flags(), target);
  }

  // optional fixed32 client_connection_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->client_connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seq_num_c2r(), target);
  }

  // optional uint32 seq_num_c2s = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->seq_num_c2s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsClientToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 flags = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional fixed32 client_connection_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_c2r = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2r());
    }

    // optional uint32 seq_num_c2s = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2s());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsClientToRouter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsClientToRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_quality_relay()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_quality_e2e()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      seq_num_c2r_ = from.seq_num_c2r_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_num_c2s_ = from.seq_num_c2s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsClientToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::Swap(CMsgSteamDatagramConnectionStatsClientToRouter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsClientToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsClientToRouter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  swap(quality_relay_, other->quality_relay_);
  swap(quality_e2e_, other->quality_e2e_);
  swap(flags_, other->flags_);
  swap(client_connection_id_, other->client_connection_id_);
  swap(seq_num_c2r_, other->seq_num_c2r_);
  swap(seq_num_c2s_, other->seq_num_c2s_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsClientToRouter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsRouterToClient::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_._instance.get_mutable()->quality_relay_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_._instance.get_mutable()->quality_e2e_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
class CMsgSteamDatagramConnectionStatsRouterToClient::HasBitSetters {
 public:
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsRouterToClient* msg);
  static void set_has_quality_relay(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToClient* msg);
  static void set_has_quality_e2e(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_seconds_until_shutdown(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_migrate_request_ip(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_migrate_request_port(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_scoring_penalty_relay_cluster(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_flags(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_client_connection_id(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_seq_num_r2c(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_seq_num_s2c(CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsRouterToClient::HasBitSetters::quality_relay(const CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
  return *msg->quality_relay_;
}
const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsRouterToClient::HasBitSetters::quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToClient* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsRouterToClient::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kMigrateRequestIpFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kMigrateRequestPortFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSeqNumR2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSeqNumS2CFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
}
CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(const CMsgSteamDatagramConnectionStatsRouterToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_quality_relay()) {
    quality_relay_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from.has_quality_e2e()) {
    quality_e2e_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&seconds_until_shutdown_, &from.seconds_until_shutdown_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&seconds_until_shutdown_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectionStatsRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::memset(&quality_relay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&quality_relay_)) + sizeof(flags_));
}

CMsgSteamDatagramConnectionStatsRouterToClient::~CMsgSteamDatagramConnectionStatsRouterToClient() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedDtor() {
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionStatsRouterToClient& CMsgSteamDatagramConnectionStatsRouterToClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionStatsRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionStatsRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&seconds_until_shutdown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&migrate_request_port_) -
        reinterpret_cast<char*>(&seconds_until_shutdown_)) + sizeof(migrate_request_port_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&scoring_penalty_relay_cluster_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&scoring_penalty_relay_cluster_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectionStatsRouterToClient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectionStatsRouterToClient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_relay();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 seconds_until_shutdown = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_seconds_until_shutdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 client_connection_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_client_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 seq_num_r2c = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_seq_num_r2c(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seq_num_s2c = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_seq_num_s2c(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 migrate_request_ip = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_migrate_request_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 migrate_request_port = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_migrate_request_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scoring_penalty_relay_cluster = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_scoring_penalty_relay_cluster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated fixed32 ack_relay = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) == 109) {
          do {
            msg->add_ack_relay(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 109 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_ack_relay();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed32 legacy_ack_e2e = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) == 117) {
          do {
            msg->add_legacy_ack_e2e(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 117 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_legacy_ack_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 flags = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectionStatsRouterToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_relay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_e2e()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_seconds_until_shutdown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_connection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_client_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_r2c = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_seq_num_r2c(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_s2c = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_seq_num_s2c(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 migrate_request_ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_migrate_request_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &migrate_request_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 migrate_request_port = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_migrate_request_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &migrate_request_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_scoring_penalty_relay_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 ack_relay = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 109u, input, this->mutable_ack_relay())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 117u, input, this->mutable_legacy_ack_e2e())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectionStatsRouterToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::quality_relay(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::quality_e2e(this), output);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_connection_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->client_connection_id(), output);
  }

  // optional uint32 seq_num_r2c = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->seq_num_r2c(), output);
  }

  // optional uint32 seq_num_s2c = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seq_num_s2c(), output);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->migrate_request_ip(), output);
  }

  // optional uint32 migrate_request_port = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->migrate_request_port(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->scoring_penalty_relay_cluster(), output);
  }

  // repeated fixed32 ack_relay = 13;
  for (int i = 0, n = this->ack_relay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      13, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 14;
  for (int i = 0, n = this->legacy_ack_e2e_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      14, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsRouterToClient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::quality_relay(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::quality_e2e(this), target);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->client_connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->seq_num_r2c(), target);
  }

  // optional uint32 seq_num_s2c = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seq_num_s2c(), target);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(13, this->ack_relay_, target);

  // repeated fixed32 legacy_ack_e2e = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(14, this->legacy_ack_e2e_, target);

  // optional uint32 flags = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 seconds_until_shutdown = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 client_connection_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2c = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

    // optional uint32 seq_num_s2c = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2c());
    }

    // optional fixed32 migrate_request_ip = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 migrate_request_port = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->migrate_request_port());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 scoring_penalty_relay_cluster = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

    // optional uint32 flags = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToClient* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsRouterToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_quality_relay()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_quality_e2e()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      seq_num_r2c_ = from.seq_num_r2c_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_num_s2c_ = from.seq_num_s2c_;
    }
    if (cached_has_bits & 0x00000040u) {
      migrate_request_ip_ = from.migrate_request_ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      migrate_request_port_ = from.migrate_request_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      scoring_penalty_relay_cluster_ = from.scoring_penalty_relay_cluster_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::Swap(CMsgSteamDatagramConnectionStatsRouterToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsRouterToClient::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  swap(quality_relay_, other->quality_relay_);
  swap(quality_e2e_, other->quality_e2e_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(client_connection_id_, other->client_connection_id_);
  swap(seq_num_r2c_, other->seq_num_r2c_);
  swap(seq_num_s2c_, other->seq_num_s2c_);
  swap(migrate_request_ip_, other->migrate_request_ip_);
  swap(migrate_request_port_, other->migrate_request_port_);
  swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
  swap(flags_, other->flags_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToClient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsRouterToServer::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_._instance.get_mutable()->quality_relay_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_._instance.get_mutable()->quality_e2e_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
class CMsgSteamDatagramConnectionStatsRouterToServer::HasBitSetters {
 public:
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsRouterToServer* msg);
  static void set_has_quality_relay(CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToServer* msg);
  static void set_has_quality_e2e(CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_flags(CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_seq_num_r2s(CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_seq_num_c2s(CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_client_steam_id(CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_relay_session_id(CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_client_connection_id(CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_server_connection_id(CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsRouterToServer::HasBitSetters::quality_relay(const CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
  return *msg->quality_relay_;
}
const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsRouterToServer::HasBitSetters::quality_e2e(const CMsgSteamDatagramConnectionStatsRouterToServer* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsRouterToServer::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kSeqNumR2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kSeqNumC2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kServerConnectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
}
CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(const CMsgSteamDatagramConnectionStatsRouterToServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_quality_relay()) {
    quality_relay_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from.has_quality_e2e()) {
    quality_e2e_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&seq_num_r2s_, &from.seq_num_r2s_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&seq_num_r2s_)) + sizeof(server_connection_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectionStatsRouterToServer_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::memset(&quality_relay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_connection_id_) -
      reinterpret_cast<char*>(&quality_relay_)) + sizeof(server_connection_id_));
}

CMsgSteamDatagramConnectionStatsRouterToServer::~CMsgSteamDatagramConnectionStatsRouterToServer() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedDtor() {
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionStatsRouterToServer& CMsgSteamDatagramConnectionStatsRouterToServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionStatsRouterToServer_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionStatsRouterToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&seq_num_r2s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&seq_num_r2s_)) + sizeof(flags_));
  }
  server_connection_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectionStatsRouterToServer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectionStatsRouterToServer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_relay();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 seq_num_r2s = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_seq_num_r2s(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seq_num_c2s = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_seq_num_c2s(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 client_steam_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_client_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 relay_session_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_relay_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 client_connection_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_client_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated fixed32 ack_relay = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 85) {
          do {
            msg->add_ack_relay(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 85 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_ack_relay();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed32 legacy_ack_e2e = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) == 93) {
          do {
            msg->add_legacy_ack_e2e(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 93 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_legacy_ack_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 flags = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 server_connection_id = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_server_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectionStatsRouterToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_relay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_e2e()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_r2s = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_seq_num_r2s(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_c2s = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_seq_num_c2s(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_steam_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_client_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 relay_session_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_connection_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_client_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 ack_relay = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 85u, input, this->mutable_ack_relay())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 93u, input, this->mutable_legacy_ack_e2e())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_connection_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_server_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectionStatsRouterToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::quality_relay(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::quality_e2e(this), output);
  }

  // optional uint32 seq_num_r2s = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seq_num_r2s(), output);
  }

  // optional uint32 seq_num_c2s = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seq_num_c2s(), output);
  }

  // optional fixed64 client_steam_id = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->client_steam_id(), output);
  }

  // optional uint32 relay_session_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->relay_session_id(), output);
  }

  // optional fixed32 client_connection_id = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->client_connection_id(), output);
  }

  // repeated fixed32 ack_relay = 10;
  for (int i = 0, n = this->ack_relay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      10, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 11;
  for (int i = 0, n = this->legacy_ack_e2e_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      11, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->flags(), output);
  }

  // optional fixed32 server_connection_id = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->server_connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsRouterToServer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::quality_relay(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::quality_e2e(this), target);
  }

  // optional uint32 seq_num_r2s = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seq_num_r2s(), target);
  }

  // optional uint32 seq_num_c2s = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq_num_c2s(), target);
  }

  // optional fixed64 client_steam_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->client_steam_id(), target);
  }

  // optional uint32 relay_session_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(10, this->ack_relay_, target);

  // repeated fixed32 legacy_ack_e2e = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(11, this->legacy_ack_e2e_, target);

  // optional uint32 flags = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->flags(), target);
  }

  // optional fixed32 server_connection_id = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->server_connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsRouterToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 seq_num_r2s = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2s());
    }

    // optional uint32 seq_num_c2s = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2s());
    }

    // optional fixed64 client_steam_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 relay_session_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relay_session_id());
    }

    // optional fixed32 client_connection_id = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  // optional fixed32 server_connection_id = 13;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToServer* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsRouterToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_quality_relay()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_quality_e2e()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      seq_num_r2s_ = from.seq_num_r2s_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_num_c2s_ = from.seq_num_c2s_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_steam_id_ = from.client_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      relay_session_id_ = from.relay_session_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_server_connection_id(from.server_connection_id());
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToServer::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::Swap(CMsgSteamDatagramConnectionStatsRouterToServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsRouterToServer::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  swap(quality_relay_, other->quality_relay_);
  swap(quality_e2e_, other->quality_e2e_);
  swap(seq_num_r2s_, other->seq_num_r2s_);
  swap(seq_num_c2s_, other->seq_num_c2s_);
  swap(client_steam_id_, other->client_steam_id_);
  swap(relay_session_id_, other->relay_session_id_);
  swap(client_connection_id_, other->client_connection_id_);
  swap(flags_, other->flags_);
  swap(server_connection_id_, other->server_connection_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToServer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsServerToRouter::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_._instance.get_mutable()->quality_relay_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_._instance.get_mutable()->quality_e2e_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
class CMsgSteamDatagramConnectionStatsServerToRouter::HasBitSetters {
 public:
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsServerToRouter* msg);
  static void set_has_quality_relay(CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsServerToRouter* msg);
  static void set_has_quality_e2e(CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_flags(CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_seq_num_s2r(CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_seq_num_s2c(CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_client_steam_id(CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_relay_session_id(CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_client_connection_id(CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_server_connection_id(CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsServerToRouter::HasBitSetters::quality_relay(const CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
  return *msg->quality_relay_;
}
const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsServerToRouter::HasBitSetters::quality_e2e(const CMsgSteamDatagramConnectionStatsServerToRouter* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsServerToRouter::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kSeqNumS2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kSeqNumS2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kServerConnectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
}
CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(const CMsgSteamDatagramConnectionStatsServerToRouter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_quality_relay()) {
    quality_relay_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from.has_quality_e2e()) {
    quality_e2e_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&seq_num_s2r_, &from.seq_num_s2r_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_connection_id_) -
    reinterpret_cast<char*>(&seq_num_s2r_)) + sizeof(server_connection_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectionStatsServerToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::memset(&quality_relay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_connection_id_) -
      reinterpret_cast<char*>(&quality_relay_)) + sizeof(server_connection_id_));
}

CMsgSteamDatagramConnectionStatsServerToRouter::~CMsgSteamDatagramConnectionStatsServerToRouter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedDtor() {
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionStatsServerToRouter& CMsgSteamDatagramConnectionStatsServerToRouter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionStatsServerToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionStatsServerToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&seq_num_s2r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&seq_num_s2r_)) + sizeof(flags_));
  }
  server_connection_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectionStatsServerToRouter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectionStatsServerToRouter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_relay();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 seq_num_s2r = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_seq_num_s2r(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seq_num_s2c = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_seq_num_s2c(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 client_steam_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_client_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 relay_session_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_relay_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 client_connection_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_client_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // repeated fixed32 ack_relay = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 69) {
          do {
            msg->add_ack_relay(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 69 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_ack_relay();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed32 legacy_ack_e2e = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 77) {
          do {
            msg->add_legacy_ack_e2e(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 77 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_legacy_ack_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 flags = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 server_connection_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_server_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectionStatsServerToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_relay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_e2e()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_s2r = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_seq_num_s2r(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_s2c = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_seq_num_s2c(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_client_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 relay_session_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_connection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_client_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 ack_relay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 69u, input, this->mutable_ack_relay())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 77u, input, this->mutable_legacy_ack_e2e())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_connection_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_server_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectionStatsServerToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::quality_relay(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::quality_e2e(this), output);
  }

  // optional uint32 seq_num_s2r = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq_num_s2r(), output);
  }

  // optional uint32 seq_num_s2c = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq_num_s2c(), output);
  }

  // optional fixed64 client_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->client_steam_id(), output);
  }

  // optional uint32 relay_session_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relay_session_id(), output);
  }

  // optional fixed32 client_connection_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->client_connection_id(), output);
  }

  // repeated fixed32 ack_relay = 8;
  for (int i = 0, n = this->ack_relay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      8, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 9;
  for (int i = 0, n = this->legacy_ack_e2e_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      9, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->flags(), output);
  }

  // optional fixed32 server_connection_id = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->server_connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsServerToRouter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::quality_relay(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::quality_e2e(this), target);
  }

  // optional uint32 seq_num_s2r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq_num_s2r(), target);
  }

  // optional uint32 seq_num_s2c = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq_num_s2c(), target);
  }

  // optional fixed64 client_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->client_steam_id(), target);
  }

  // optional uint32 relay_session_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(8, this->ack_relay_, target);

  // repeated fixed32 legacy_ack_e2e = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(9, this->legacy_ack_e2e_, target);

  // optional uint32 flags = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->flags(), target);
  }

  // optional fixed32 server_connection_id = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->server_connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsServerToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 seq_num_s2r = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2r());
    }

    // optional uint32 seq_num_s2c = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2c());
    }

    // optional fixed64 client_steam_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 relay_session_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relay_session_id());
    }

    // optional fixed32 client_connection_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  // optional fixed32 server_connection_id = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsServerToRouter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsServerToRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_quality_relay()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_quality_e2e()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (cached_has_bits & 0x00000004u) {
      seq_num_s2r_ = from.seq_num_s2r_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_num_s2c_ = from.seq_num_s2c_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_steam_id_ = from.client_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      relay_session_id_ = from.relay_session_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_server_connection_id(from.server_connection_id());
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsServerToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::Swap(CMsgSteamDatagramConnectionStatsServerToRouter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsServerToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsServerToRouter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  swap(quality_relay_, other->quality_relay_);
  swap(quality_e2e_, other->quality_e2e_);
  swap(seq_num_s2r_, other->seq_num_s2r_);
  swap(seq_num_s2c_, other->seq_num_s2c_);
  swap(client_steam_id_, other->client_steam_id_);
  swap(relay_session_id_, other->relay_session_id_);
  swap(client_connection_id_, other->client_connection_id_);
  swap(flags_, other->flags_);
  swap(server_connection_id_, other->server_connection_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsServerToRouter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramP2PSessionRequestBody::InitAsDefaultInstance() {
}
class CMsgSteamDatagramP2PSessionRequestBody::HasBitSetters {
 public:
  static void set_has_challenge_time(CMsgSteamDatagramP2PSessionRequestBody* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_challenge(CMsgSteamDatagramP2PSessionRequestBody* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_connection_id(CMsgSteamDatagramP2PSessionRequestBody* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_peer_steam_id(CMsgSteamDatagramP2PSessionRequestBody* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_peer_connection_id(CMsgSteamDatagramP2PSessionRequestBody* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_protocol_version(CMsgSteamDatagramP2PSessionRequestBody* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_network_config_version(CMsgSteamDatagramP2PSessionRequestBody* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_public_ip(CMsgSteamDatagramP2PSessionRequestBody* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramP2PSessionRequestBody::kChallengeTimeFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kChallengeFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kPeerSteamIdFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kPeerConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kProtocolVersionFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kNetworkConfigVersionFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kPublicIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
}
CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(const CMsgSteamDatagramP2PSessionRequestBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
}

void CMsgSteamDatagramP2PSessionRequestBody::SharedCtor() {
  ::memset(&challenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&challenge_)) + sizeof(public_ip_));
}

CMsgSteamDatagramP2PSessionRequestBody::~CMsgSteamDatagramP2PSessionRequestBody() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  SharedDtor();
}

void CMsgSteamDatagramP2PSessionRequestBody::SharedDtor() {
}

void CMsgSteamDatagramP2PSessionRequestBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramP2PSessionRequestBody& CMsgSteamDatagramP2PSessionRequestBody::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramP2PSessionRequestBody_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramP2PSessionRequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_ip_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramP2PSessionRequestBody::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramP2PSessionRequestBody*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 challenge_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_challenge_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 challenge = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_challenge(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 client_connection_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_client_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 peer_steam_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_peer_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 peer_connection_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_peer_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 protocol_version = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_protocol_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 network_config_version = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_network_config_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 public_ip = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_public_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramP2PSessionRequestBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 challenge_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_challenge_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &challenge_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 challenge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_challenge(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_connection_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_client_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 peer_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_peer_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &peer_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 peer_connection_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_peer_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &peer_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protocol_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_protocol_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 network_config_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_network_config_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_config_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 public_ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_public_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramP2PSessionRequestBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 challenge_time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->challenge_time(), output);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->challenge(), output);
  }

  // optional fixed32 client_connection_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_connection_id(), output);
  }

  // optional fixed64 peer_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->peer_steam_id(), output);
  }

  // optional fixed32 peer_connection_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->peer_connection_id(), output);
  }

  // optional uint32 protocol_version = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protocol_version(), output);
  }

  // optional uint32 network_config_version = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->network_config_version(), output);
  }

  // optional fixed32 public_ip = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->public_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
}

::google::protobuf::uint8* CMsgSteamDatagramP2PSessionRequestBody::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 challenge_time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->challenge_time(), target);
  }

  // optional fixed64 challenge = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->challenge(), target);
  }

  // optional fixed32 client_connection_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_connection_id(), target);
  }

  // optional fixed64 peer_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->peer_steam_id(), target);
  }

  // optional fixed32 peer_connection_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->peer_connection_id(), target);
  }

  // optional uint32 protocol_version = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->protocol_version(), target);
  }

  // optional uint32 network_config_version = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->network_config_version(), target);
  }

  // optional fixed32 public_ip = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->public_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  return target;
}

size_t CMsgSteamDatagramP2PSessionRequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 challenge = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed32 challenge_time = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_connection_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed64 peer_steam_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed32 peer_connection_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 protocol_version = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional uint32 network_config_version = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_config_version());
    }

    // optional fixed32 public_ip = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PSessionRequestBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PSessionRequestBody* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramP2PSessionRequestBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PSessionRequestBody::MergeFrom(const CMsgSteamDatagramP2PSessionRequestBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_time_ = from.challenge_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_connection_id_ = from.client_connection_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      peer_steam_id_ = from.peer_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      peer_connection_id_ = from.peer_connection_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      network_config_version_ = from.network_config_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      public_ip_ = from.public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PSessionRequestBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionRequestBody::CopyFrom(const CMsgSteamDatagramP2PSessionRequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PSessionRequestBody::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionRequestBody::Swap(CMsgSteamDatagramP2PSessionRequestBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramP2PSessionRequestBody::InternalSwap(CMsgSteamDatagramP2PSessionRequestBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(challenge_, other->challenge_);
  swap(challenge_time_, other->challenge_time_);
  swap(client_connection_id_, other->client_connection_id_);
  swap(peer_steam_id_, other->peer_steam_id_);
  swap(peer_connection_id_, other->peer_connection_id_);
  swap(protocol_version_, other->protocol_version_);
  swap(network_config_version_, other->network_config_version_);
  swap(public_ip_, other->public_ip_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequestBody::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramP2PSessionRequest::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramP2PSessionRequest_default_instance_._instance.get_mutable()->cert_ = const_cast< ::proto::steam::CMsgSteamDatagramCertificateSigned*>(
      ::proto::steam::CMsgSteamDatagramCertificateSigned::internal_default_instance());
}
class CMsgSteamDatagramP2PSessionRequest::HasBitSetters {
 public:
  static const ::proto::steam::CMsgSteamDatagramCertificateSigned& cert(const CMsgSteamDatagramP2PSessionRequest* msg);
  static void set_has_cert(CMsgSteamDatagramP2PSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_body(CMsgSteamDatagramP2PSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_signature(CMsgSteamDatagramP2PSessionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::steam::CMsgSteamDatagramCertificateSigned&
CMsgSteamDatagramP2PSessionRequest::HasBitSetters::cert(const CMsgSteamDatagramP2PSessionRequest* msg) {
  return *msg->cert_;
}
void CMsgSteamDatagramP2PSessionRequest::clear_cert() {
  if (cert_ != nullptr) cert_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramP2PSessionRequest::kCertFieldNumber;
const int CMsgSteamDatagramP2PSessionRequest::kBodyFieldNumber;
const int CMsgSteamDatagramP2PSessionRequest::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramP2PSessionRequest)
}
CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(const CMsgSteamDatagramP2PSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_cert()) {
    cert_ = new ::proto::steam::CMsgSteamDatagramCertificateSigned(*from.cert_);
  } else {
    cert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramP2PSessionRequest)
}

void CMsgSteamDatagramP2PSessionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramP2PSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_ = nullptr;
}

CMsgSteamDatagramP2PSessionRequest::~CMsgSteamDatagramP2PSessionRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  SharedDtor();
}

void CMsgSteamDatagramP2PSessionRequest::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cert_;
}

void CMsgSteamDatagramP2PSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramP2PSessionRequest& CMsgSteamDatagramP2PSessionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramP2PSessionRequest_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramP2PSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      body_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cert_ != nullptr);
      cert_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramP2PSessionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramP2PSessionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramCertificateSigned::_InternalParse;
        object = msg->mutable_cert();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bytes body = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_body();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes signature = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramP2PSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramP2PSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cert(this), output);
  }

  // optional bytes body = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramP2PSessionRequest)
}

::google::protobuf::uint8* CMsgSteamDatagramP2PSessionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cert(this), target);
  }

  // optional bytes body = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  return target;
}

size_t CMsgSteamDatagramP2PSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes body = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional bytes signature = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cert_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PSessionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramP2PSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramP2PSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramP2PSessionRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PSessionRequest::MergeFrom(const CMsgSteamDatagramP2PSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cert()->::proto::steam::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
  }
}

void CMsgSteamDatagramP2PSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionRequest::CopyFrom(const CMsgSteamDatagramP2PSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramP2PSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PSessionRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionRequest::Swap(CMsgSteamDatagramP2PSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramP2PSessionRequest::InternalSwap(CMsgSteamDatagramP2PSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cert_, other->cert_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramP2PSessionEstablished::InitAsDefaultInstance() {
}
class CMsgSteamDatagramP2PSessionEstablished::HasBitSetters {
 public:
  static void set_has_connection_id(CMsgSteamDatagramP2PSessionEstablished* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_seconds_until_shutdown(CMsgSteamDatagramP2PSessionEstablished* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_relay_routing_token(CMsgSteamDatagramP2PSessionEstablished* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_seq_num_r2c(CMsgSteamDatagramP2PSessionEstablished* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramP2PSessionEstablished::kConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PSessionEstablished::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramP2PSessionEstablished::kRelayRoutingTokenFieldNumber;
const int CMsgSteamDatagramP2PSessionEstablished::kSeqNumR2CFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
}
CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(const CMsgSteamDatagramP2PSessionEstablished& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_relay_routing_token()) {
    relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relay_routing_token_);
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_r2c_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
}

void CMsgSteamDatagramP2PSessionEstablished::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramP2PSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto.base);
  relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_r2c_) -
      reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
}

CMsgSteamDatagramP2PSessionEstablished::~CMsgSteamDatagramP2PSessionEstablished() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  SharedDtor();
}

void CMsgSteamDatagramP2PSessionEstablished::SharedDtor() {
  relay_routing_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramP2PSessionEstablished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramP2PSessionEstablished& CMsgSteamDatagramP2PSessionEstablished::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramP2PSessionEstablished_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramP2PSessionEstablished::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    relay_routing_token_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_r2c_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(seq_num_r2c_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramP2PSessionEstablished::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramP2PSessionEstablished*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 seconds_until_shutdown = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_seconds_until_shutdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes relay_routing_token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_relay_routing_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 seq_num_r2c = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_seq_num_r2c(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramP2PSessionEstablished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_seconds_until_shutdown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes relay_routing_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_relay_routing_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_r2c = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_seq_num_r2c(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramP2PSessionEstablished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds_until_shutdown(), output);
  }

  // optional bytes relay_routing_token = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->relay_routing_token(), output);
  }

  // optional uint32 seq_num_r2c = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seq_num_r2c(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
}

::google::protobuf::uint8* CMsgSteamDatagramP2PSessionEstablished::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds_until_shutdown(), target);
  }

  // optional bytes relay_routing_token = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->relay_routing_token(), target);
  }

  // optional uint32 seq_num_r2c = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seq_num_r2c(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  return target;
}

size_t CMsgSteamDatagramP2PSessionEstablished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes relay_routing_token = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->relay_routing_token());
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 seconds_until_shutdown = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional uint32 seq_num_r2c = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PSessionEstablished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PSessionEstablished* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramP2PSessionEstablished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PSessionEstablished::MergeFrom(const CMsgSteamDatagramP2PSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relay_routing_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_num_r2c_ = from.seq_num_r2c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PSessionEstablished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionEstablished::CopyFrom(const CMsgSteamDatagramP2PSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PSessionEstablished::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PSessionEstablished::Swap(CMsgSteamDatagramP2PSessionEstablished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramP2PSessionEstablished::InternalSwap(CMsgSteamDatagramP2PSessionEstablished* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relay_routing_token_.Swap(&other->relay_routing_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connection_id_, other->connection_id_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(seq_num_r2c_, other->seq_num_r2c_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionEstablished::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramP2PRoutes_RelayCluster::InitAsDefaultInstance() {
}
class CMsgSteamDatagramP2PRoutes_RelayCluster::HasBitSetters {
 public:
  static void set_has_pop_id(CMsgSteamDatagramP2PRoutes_RelayCluster* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ping_ms(CMsgSteamDatagramP2PRoutes_RelayCluster* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_score_penalty(CMsgSteamDatagramP2PRoutes_RelayCluster* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_session_relay_routing_token(CMsgSteamDatagramP2PRoutes_RelayCluster* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramP2PRoutes_RelayCluster::kPopIdFieldNumber;
const int CMsgSteamDatagramP2PRoutes_RelayCluster::kPingMsFieldNumber;
const int CMsgSteamDatagramP2PRoutes_RelayCluster::kScorePenaltyFieldNumber;
const int CMsgSteamDatagramP2PRoutes_RelayCluster::kSessionRelayRoutingTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
}
CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(const CMsgSteamDatagramP2PRoutes_RelayCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_relay_routing_token()) {
    session_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_relay_routing_token_);
  }
  ::memcpy(&pop_id_, &from.pop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_penalty_) -
    reinterpret_cast<char*>(&pop_id_)) + sizeof(score_penalty_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramP2PRoutes_RelayCluster_steamdatagram_5fmessages_5fsdr_2eproto.base);
  session_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_penalty_) -
      reinterpret_cast<char*>(&pop_id_)) + sizeof(score_penalty_));
}

CMsgSteamDatagramP2PRoutes_RelayCluster::~CMsgSteamDatagramP2PRoutes_RelayCluster() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  SharedDtor();
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedDtor() {
  session_relay_routing_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramP2PRoutes_RelayCluster& CMsgSteamDatagramP2PRoutes_RelayCluster::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramP2PRoutes_RelayCluster_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramP2PRoutes_RelayCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_relay_routing_token_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&pop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_penalty_) -
        reinterpret_cast<char*>(&pop_id_)) + sizeof(score_penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramP2PRoutes_RelayCluster::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramP2PRoutes_RelayCluster*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 pop_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_pop_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 ping_ms = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ping_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 score_penalty = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_score_penalty(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes session_relay_routing_token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_session_relay_routing_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramP2PRoutes_RelayCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 pop_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_pop_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ping_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score_penalty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_score_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes session_relay_routing_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_relay_routing_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramP2PRoutes_RelayCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 pop_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->pop_id(), output);
  }

  // optional uint32 ping_ms = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping_ms(), output);
  }

  // optional uint32 score_penalty = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score_penalty(), output);
  }

  // optional bytes session_relay_routing_token = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->session_relay_routing_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
}

::google::protobuf::uint8* CMsgSteamDatagramP2PRoutes_RelayCluster::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 pop_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->pop_id(), target);
  }

  // optional uint32 ping_ms = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping_ms(), target);
  }

  // optional uint32 score_penalty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score_penalty(), target);
  }

  // optional bytes session_relay_routing_token = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->session_relay_routing_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  return target;
}

size_t CMsgSteamDatagramP2PRoutes_RelayCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes session_relay_routing_token = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_relay_routing_token());
    }

    // optional fixed32 pop_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 ping_ms = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

    // optional uint32 score_penalty = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_penalty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutes_RelayCluster* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramP2PRoutes_RelayCluster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::MergeFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_relay_routing_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      pop_id_ = from.pop_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ping_ms_ = from.ping_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_penalty_ = from.score_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::CopyFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutes_RelayCluster::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::Swap(CMsgSteamDatagramP2PRoutes_RelayCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramP2PRoutes_RelayCluster::InternalSwap(CMsgSteamDatagramP2PRoutes_RelayCluster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_relay_routing_token_.Swap(&other->session_relay_routing_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pop_id_, other->pop_id_);
  swap(ping_ms_, other->ping_ms_);
  swap(score_penalty_, other->score_penalty_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes_RelayCluster::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramP2PRoutes_Route::InitAsDefaultInstance() {
}
class CMsgSteamDatagramP2PRoutes_Route::HasBitSetters {
 public:
  static void set_has_my_pop_id(CMsgSteamDatagramP2PRoutes_Route* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_your_pop_id(CMsgSteamDatagramP2PRoutes_Route* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_score(CMsgSteamDatagramP2PRoutes_Route* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramP2PRoutes_Route::kMyPopIdFieldNumber;
const int CMsgSteamDatagramP2PRoutes_Route::kYourPopIdFieldNumber;
const int CMsgSteamDatagramP2PRoutes_Route::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
}
CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(const CMsgSteamDatagramP2PRoutes_Route& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&my_pop_id_, &from.my_pop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&my_pop_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
}

void CMsgSteamDatagramP2PRoutes_Route::SharedCtor() {
  ::memset(&my_pop_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&my_pop_id_)) + sizeof(score_));
}

CMsgSteamDatagramP2PRoutes_Route::~CMsgSteamDatagramP2PRoutes_Route() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  SharedDtor();
}

void CMsgSteamDatagramP2PRoutes_Route::SharedDtor() {
}

void CMsgSteamDatagramP2PRoutes_Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramP2PRoutes_Route& CMsgSteamDatagramP2PRoutes_Route::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramP2PRoutes_Route_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramP2PRoutes_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&my_pop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&my_pop_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramP2PRoutes_Route::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramP2PRoutes_Route*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 my_pop_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_my_pop_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 your_pop_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_your_pop_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 score = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramP2PRoutes_Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 my_pop_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_my_pop_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &my_pop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 your_pop_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_your_pop_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_pop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramP2PRoutes_Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 my_pop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->my_pop_id(), output);
  }

  // optional fixed32 your_pop_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->your_pop_id(), output);
  }

  // optional uint32 score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
}

::google::protobuf::uint8* CMsgSteamDatagramP2PRoutes_Route::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 my_pop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->my_pop_id(), target);
  }

  // optional fixed32 your_pop_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->your_pop_id(), target);
  }

  // optional uint32 score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  return target;
}

size_t CMsgSteamDatagramP2PRoutes_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 my_pop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_pop_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PRoutes_Route::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutes_Route* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramP2PRoutes_Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutes_Route::MergeFrom(const CMsgSteamDatagramP2PRoutes_Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      my_pop_id_ = from.my_pop_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      your_pop_id_ = from.your_pop_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PRoutes_Route::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes_Route::CopyFrom(const CMsgSteamDatagramP2PRoutes_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutes_Route::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutes_Route::Swap(CMsgSteamDatagramP2PRoutes_Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramP2PRoutes_Route::InternalSwap(CMsgSteamDatagramP2PRoutes_Route* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(my_pop_id_, other->my_pop_id_);
  swap(your_pop_id_, other->your_pop_id_);
  swap(score_, other->score_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes_Route::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramP2PRoutes::InitAsDefaultInstance() {
}
class CMsgSteamDatagramP2PRoutes::HasBitSetters {
 public:
  static void set_has_revision(CMsgSteamDatagramP2PRoutes* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramP2PRoutes::kRelayClustersFieldNumber;
const int CMsgSteamDatagramP2PRoutes::kRoutesFieldNumber;
const int CMsgSteamDatagramP2PRoutes::kRevisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramP2PRoutes)
}
CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(const CMsgSteamDatagramP2PRoutes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      relay_clusters_(from.relay_clusters_),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  revision_ = from.revision_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramP2PRoutes)
}

void CMsgSteamDatagramP2PRoutes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramP2PRoutes_steamdatagram_5fmessages_5fsdr_2eproto.base);
  revision_ = 0u;
}

CMsgSteamDatagramP2PRoutes::~CMsgSteamDatagramP2PRoutes() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramP2PRoutes)
  SharedDtor();
}

void CMsgSteamDatagramP2PRoutes::SharedDtor() {
}

void CMsgSteamDatagramP2PRoutes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramP2PRoutes& CMsgSteamDatagramP2PRoutes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramP2PRoutes_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramP2PRoutes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramP2PRoutes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relay_clusters_.Clear();
  routes_.Clear();
  revision_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramP2PRoutes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramP2PRoutes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster::_InternalParse;
          object = msg->add_relay_clusters();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.Route routes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramP2PRoutes_Route::_InternalParse;
          object = msg->add_routes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 revision = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramP2PRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramP2PRoutes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_relay_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.Route routes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramP2PRoutes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramP2PRoutes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramP2PRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramP2PRoutes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relay_clusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->relay_clusters(static_cast<int>(i)),
      output);
  }

  // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.Route routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->routes(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 revision = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revision(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramP2PRoutes)
}

::google::protobuf::uint8* CMsgSteamDatagramP2PRoutes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramP2PRoutes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relay_clusters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->relay_clusters(static_cast<int>(i)), target);
  }

  // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.Route routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->routes(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 revision = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revision(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramP2PRoutes)
  return target;
}

size_t CMsgSteamDatagramP2PRoutes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramP2PRoutes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->relay_clusters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->relay_clusters(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.Route routes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->routes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->routes(static_cast<int>(i)));
    }
  }

  // optional uint32 revision = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->revision());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PRoutes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramP2PRoutes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutes* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramP2PRoutes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramP2PRoutes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramP2PRoutes)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutes::MergeFrom(const CMsgSteamDatagramP2PRoutes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramP2PRoutes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relay_clusters_.MergeFrom(from.relay_clusters_);
  routes_.MergeFrom(from.routes_);
  if (from.has_revision()) {
    set_revision(from.revision());
  }
}

void CMsgSteamDatagramP2PRoutes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramP2PRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes::CopyFrom(const CMsgSteamDatagramP2PRoutes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramP2PRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutes::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRoutes::Swap(CMsgSteamDatagramP2PRoutes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramP2PRoutes::InternalSwap(CMsgSteamDatagramP2PRoutes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&relay_clusters_)->InternalSwap(CastToBase(&other->relay_clusters_));
  CastToBase(&routes_)->InternalSwap(CastToBase(&other->routes_));
  swap(revision_, other->revision_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramP2PRendezvous::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramP2PRendezvous_default_instance_._instance.get_mutable()->routes_ = const_cast< ::proto::steam::CMsgSteamDatagramP2PRoutes*>(
      ::proto::steam::CMsgSteamDatagramP2PRoutes::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramP2PRendezvous_default_instance_._instance.get_mutable()->connect_request_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectRequest*>(
      ::proto::steam::CMsgSteamDatagramConnectRequest::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramP2PRendezvous_default_instance_._instance.get_mutable()->connect_ok_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectOK*>(
      ::proto::steam::CMsgSteamDatagramConnectOK::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramP2PRendezvous_default_instance_._instance.get_mutable()->connection_closed_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionClosed*>(
      ::proto::steam::CMsgSteamDatagramConnectionClosed::internal_default_instance());
}
class CMsgSteamDatagramP2PRendezvous::HasBitSetters {
 public:
  static void set_has_to_connection_id(CMsgSteamDatagramP2PRendezvous* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::proto::steam::CMsgSteamDatagramP2PRoutes& routes(const CMsgSteamDatagramP2PRendezvous* msg);
  static void set_has_routes(CMsgSteamDatagramP2PRendezvous* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ack_peer_routes_revision(CMsgSteamDatagramP2PRendezvous* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectRequest& connect_request(const CMsgSteamDatagramP2PRendezvous* msg);
  static void set_has_connect_request(CMsgSteamDatagramP2PRendezvous* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectOK& connect_ok(const CMsgSteamDatagramP2PRendezvous* msg);
  static void set_has_connect_ok(CMsgSteamDatagramP2PRendezvous* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectionClosed& connection_closed(const CMsgSteamDatagramP2PRendezvous* msg);
  static void set_has_connection_closed(CMsgSteamDatagramP2PRendezvous* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_failed_relay_routing_token(CMsgSteamDatagramP2PRendezvous* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::CMsgSteamDatagramP2PRoutes&
CMsgSteamDatagramP2PRendezvous::HasBitSetters::routes(const CMsgSteamDatagramP2PRendezvous* msg) {
  return *msg->routes_;
}
const ::proto::steam::CMsgSteamDatagramConnectRequest&
CMsgSteamDatagramP2PRendezvous::HasBitSetters::connect_request(const CMsgSteamDatagramP2PRendezvous* msg) {
  return *msg->connect_request_;
}
const ::proto::steam::CMsgSteamDatagramConnectOK&
CMsgSteamDatagramP2PRendezvous::HasBitSetters::connect_ok(const CMsgSteamDatagramP2PRendezvous* msg) {
  return *msg->connect_ok_;
}
const ::proto::steam::CMsgSteamDatagramConnectionClosed&
CMsgSteamDatagramP2PRendezvous::HasBitSetters::connection_closed(const CMsgSteamDatagramP2PRendezvous* msg) {
  return *msg->connection_closed_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramP2PRendezvous::kToConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kRoutesFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kAckPeerRoutesRevisionFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kConnectRequestFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kConnectOkFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kConnectionClosedFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kFailedRelayRoutingTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramP2PRendezvous::CMsgSteamDatagramP2PRendezvous()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramP2PRendezvous)
}
CMsgSteamDatagramP2PRendezvous::CMsgSteamDatagramP2PRendezvous(const CMsgSteamDatagramP2PRendezvous& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  failed_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_failed_relay_routing_token()) {
    failed_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failed_relay_routing_token_);
  }
  if (from.has_routes()) {
    routes_ = new ::proto::steam::CMsgSteamDatagramP2PRoutes(*from.routes_);
  } else {
    routes_ = nullptr;
  }
  if (from.has_connect_request()) {
    connect_request_ = new ::proto::steam::CMsgSteamDatagramConnectRequest(*from.connect_request_);
  } else {
    connect_request_ = nullptr;
  }
  if (from.has_connect_ok()) {
    connect_ok_ = new ::proto::steam::CMsgSteamDatagramConnectOK(*from.connect_ok_);
  } else {
    connect_ok_ = nullptr;
  }
  if (from.has_connection_closed()) {
    connection_closed_ = new ::proto::steam::CMsgSteamDatagramConnectionClosed(*from.connection_closed_);
  } else {
    connection_closed_ = nullptr;
  }
  ::memcpy(&to_connection_id_, &from.to_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ack_peer_routes_revision_) -
    reinterpret_cast<char*>(&to_connection_id_)) + sizeof(ack_peer_routes_revision_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramP2PRendezvous)
}

void CMsgSteamDatagramP2PRendezvous::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramP2PRendezvous_steamdatagram_5fmessages_5fsdr_2eproto.base);
  failed_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&routes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_peer_routes_revision_) -
      reinterpret_cast<char*>(&routes_)) + sizeof(ack_peer_routes_revision_));
}

CMsgSteamDatagramP2PRendezvous::~CMsgSteamDatagramP2PRendezvous() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramP2PRendezvous)
  SharedDtor();
}

void CMsgSteamDatagramP2PRendezvous::SharedDtor() {
  failed_relay_routing_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete routes_;
  if (this != internal_default_instance()) delete connect_request_;
  if (this != internal_default_instance()) delete connect_ok_;
  if (this != internal_default_instance()) delete connection_closed_;
}

void CMsgSteamDatagramP2PRendezvous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramP2PRendezvous& CMsgSteamDatagramP2PRendezvous::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramP2PRendezvous_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramP2PRendezvous::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramP2PRendezvous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      failed_relay_routing_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(routes_ != nullptr);
      routes_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(connect_request_ != nullptr);
      connect_request_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(connect_ok_ != nullptr);
      connect_ok_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(connection_closed_ != nullptr);
      connection_closed_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&to_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ack_peer_routes_revision_) -
        reinterpret_cast<char*>(&to_connection_id_)) + sizeof(ack_peer_routes_revision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramP2PRendezvous::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramP2PRendezvous*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 to_connection_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_to_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramP2PRoutes routes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramP2PRoutes::_InternalParse;
        object = msg->mutable_routes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 ack_peer_routes_revision = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ack_peer_routes_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectRequest connect_request = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectRequest::_InternalParse;
        object = msg->mutable_connect_request();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectOK connect_ok = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectOK::_InternalParse;
        object = msg->mutable_connect_ok();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectionClosed connection_closed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionClosed::_InternalParse;
        object = msg->mutable_connection_closed();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bytes failed_relay_routing_token = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_failed_relay_routing_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramP2PRendezvous::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramP2PRendezvous)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 to_connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_to_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramP2PRoutes routes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_peer_routes_revision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_ack_peer_routes_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_peer_routes_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectRequest connect_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connect_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectOK connect_ok = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connect_ok()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectionClosed connection_closed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection_closed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes failed_relay_routing_token = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_failed_relay_routing_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramP2PRendezvous)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramP2PRendezvous)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramP2PRendezvous::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramP2PRendezvous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 to_connection_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->to_connection_id(), output);
  }

  // optional .proto.steam.CMsgSteamDatagramP2PRoutes routes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::routes(this), output);
  }

  // optional uint32 ack_peer_routes_revision = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ack_peer_routes_revision(), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectRequest connect_request = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::connect_request(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectOK connect_ok = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::connect_ok(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionClosed connection_closed = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::connection_closed(this), output);
  }

  // optional bytes failed_relay_routing_token = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->failed_relay_routing_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramP2PRendezvous)
}

::google::protobuf::uint8* CMsgSteamDatagramP2PRendezvous::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramP2PRendezvous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 to_connection_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->to_connection_id(), target);
  }

  // optional .proto.steam.CMsgSteamDatagramP2PRoutes routes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::routes(this), target);
  }

  // optional uint32 ack_peer_routes_revision = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ack_peer_routes_revision(), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectRequest connect_request = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::connect_request(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectOK connect_ok = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::connect_ok(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionClosed connection_closed = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::connection_closed(this), target);
  }

  // optional bytes failed_relay_routing_token = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->failed_relay_routing_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramP2PRendezvous)
  return target;
}

size_t CMsgSteamDatagramP2PRendezvous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramP2PRendezvous)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes failed_relay_routing_token = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->failed_relay_routing_token());
    }

    // optional .proto.steam.CMsgSteamDatagramP2PRoutes routes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *routes_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectRequest connect_request = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *connect_request_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectOK connect_ok = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *connect_ok_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionClosed connection_closed = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *connection_closed_);
    }

    // optional fixed32 to_connection_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 ack_peer_routes_revision = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_peer_routes_revision());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PRendezvous::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramP2PRendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRendezvous* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramP2PRendezvous>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramP2PRendezvous)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramP2PRendezvous)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRendezvous::MergeFrom(const CMsgSteamDatagramP2PRendezvous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramP2PRendezvous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      failed_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failed_relay_routing_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_routes()->::proto::steam::CMsgSteamDatagramP2PRoutes::MergeFrom(from.routes());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_connect_request()->::proto::steam::CMsgSteamDatagramConnectRequest::MergeFrom(from.connect_request());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_connect_ok()->::proto::steam::CMsgSteamDatagramConnectOK::MergeFrom(from.connect_ok());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_connection_closed()->::proto::steam::CMsgSteamDatagramConnectionClosed::MergeFrom(from.connection_closed());
    }
    if (cached_has_bits & 0x00000020u) {
      to_connection_id_ = from.to_connection_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      ack_peer_routes_revision_ = from.ack_peer_routes_revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PRendezvous::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramP2PRendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRendezvous::CopyFrom(const CMsgSteamDatagramP2PRendezvous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramP2PRendezvous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRendezvous::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PRendezvous::Swap(CMsgSteamDatagramP2PRendezvous* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramP2PRendezvous::InternalSwap(CMsgSteamDatagramP2PRendezvous* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  failed_relay_routing_token_.Swap(&other->failed_relay_routing_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(routes_, other->routes_);
  swap(connect_request_, other->connect_request_);
  swap(connect_ok_, other->connect_ok_);
  swap(connection_closed_, other->connection_closed_);
  swap(to_connection_id_, other->to_connection_id_);
  swap(ack_peer_routes_revision_, other->ack_peer_routes_revision_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRendezvous::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_._instance.get_mutable()->quality_relay_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_._instance.get_mutable()->quality_e2e_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
class CMsgSteamDatagramConnectionStatsP2PClientToRouter::HasBitSetters {
 public:
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg);
  static void set_has_quality_relay(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg);
  static void set_has_quality_e2e(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_flags(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_forward_target_relay_routing_token(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_forward_target_revision(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_routes(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ack_peer_routes_revision(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_connection_id(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_seq_num_c2r(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_seq_num_e2e(CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
};

const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PClientToRouter::HasBitSetters::quality_relay(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
  return *msg->quality_relay_;
}
const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PClientToRouter::HasBitSetters::quality_e2e(const CMsgSteamDatagramConnectionStatsP2PClientToRouter* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kForwardTargetRelayRoutingTokenFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kRoutesFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kAckPeerRoutesRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kSeqNumC2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kSeqNumE2EFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
}
CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  forward_target_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_forward_target_relay_routing_token()) {
    forward_target_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forward_target_relay_routing_token_);
  }
  routes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_routes()) {
    routes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routes_);
  }
  if (from.has_quality_relay()) {
    quality_relay_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from.has_quality_e2e()) {
    quality_e2e_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_e2e_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(seq_num_e2e_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectionStatsP2PClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  forward_target_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quality_relay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_e2e_) -
      reinterpret_cast<char*>(&quality_relay_)) + sizeof(seq_num_e2e_));
}

CMsgSteamDatagramConnectionStatsP2PClientToRouter::~CMsgSteamDatagramConnectionStatsP2PClientToRouter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedDtor() {
  forward_target_relay_routing_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionStatsP2PClientToRouter& CMsgSteamDatagramConnectionStatsP2PClientToRouter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionStatsP2PClientToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionStatsP2PClientToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      forward_target_relay_routing_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      routes_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connection_id_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(connection_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&seq_num_c2r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_e2e_) -
        reinterpret_cast<char*>(&seq_num_c2r_)) + sizeof(seq_num_e2e_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectionStatsP2PClientToRouter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectionStatsP2PClientToRouter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_relay();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated fixed32 ack_relay = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 29) {
          do {
            msg->add_ack_relay(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 29 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_ack_relay();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed32 legacy_ack_e2e = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 37) {
          do {
            msg->add_legacy_ack_e2e(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 37 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_legacy_ack_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 flags = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes forward_target_relay_routing_token = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_forward_target_relay_routing_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 forward_target_revision = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_forward_target_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes routes = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_routes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 ack_peer_routes_revision = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_ack_peer_routes_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 connection_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 seq_num_c2r = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_seq_num_c2r(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seq_num_e2e = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_seq_num_e2e(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_relay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_e2e()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 ack_relay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29u, input, this->mutable_ack_relay())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37u, input, this->mutable_legacy_ack_e2e())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes forward_target_relay_routing_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forward_target_relay_routing_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 forward_target_revision = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_forward_target_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_target_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes routes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_peer_routes_revision = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_ack_peer_routes_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_peer_routes_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 connection_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_c2r = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_seq_num_c2r(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_e2e = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_seq_num_e2e(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_e2e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::quality_relay(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::quality_e2e(this), output);
  }

  // repeated fixed32 ack_relay = 3;
  for (int i = 0, n = this->ack_relay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  for (int i = 0, n = this->legacy_ack_e2e_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional bytes forward_target_relay_routing_token = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->forward_target_relay_routing_token(), output);
  }

  // optional uint32 forward_target_revision = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->forward_target_revision(), output);
  }

  // optional bytes routes = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->routes(), output);
  }

  // optional uint32 ack_peer_routes_revision = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ack_peer_routes_revision(), output);
  }

  // optional fixed32 connection_id = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->connection_id(), output);
  }

  // optional uint32 seq_num_c2r = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->seq_num_c2r(), output);
  }

  // optional uint32 seq_num_e2e = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->seq_num_e2e(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsP2PClientToRouter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::quality_relay(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::quality_e2e(this), target);
  }

  // repeated fixed32 ack_relay = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(3, this->ack_relay_, target);

  // repeated fixed32 legacy_ack_e2e = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(4, this->legacy_ack_e2e_, target);

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // optional bytes forward_target_relay_routing_token = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->forward_target_relay_routing_token(), target);
  }

  // optional uint32 forward_target_revision = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->forward_target_revision(), target);
  }

  // optional bytes routes = 8;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->seq_num_c2r(), target);
  }

  // optional uint32 seq_num_e2e = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->seq_num_e2e(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsP2PClientToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes forward_target_relay_routing_token = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->forward_target_relay_routing_token());
    }

    // optional bytes routes = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->routes());
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 forward_target_revision = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forward_target_revision());
    }

    // optional uint32 ack_peer_routes_revision = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_peer_routes_revision());
    }

    // optional fixed32 connection_id = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 seq_num_c2r = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2r());
    }

    // optional uint32 seq_num_e2e = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_e2e());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsP2PClientToRouter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsP2PClientToRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      forward_target_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forward_target_relay_routing_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      routes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routes_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_quality_relay()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_quality_e2e()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      forward_target_revision_ = from.forward_target_revision_;
    }
    if (cached_has_bits & 0x00000040u) {
      ack_peer_routes_revision_ = from.ack_peer_routes_revision_;
    }
    if (cached_has_bits & 0x00000080u) {
      connection_id_ = from.connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      seq_num_c2r_ = from.seq_num_c2r_;
    }
    if (cached_has_bits & 0x00000200u) {
      seq_num_e2e_ = from.seq_num_e2e_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::Swap(CMsgSteamDatagramConnectionStatsP2PClientToRouter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsP2PClientToRouter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  forward_target_relay_routing_token_.Swap(&other->forward_target_relay_routing_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  routes_.Swap(&other->routes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(quality_relay_, other->quality_relay_);
  swap(quality_e2e_, other->quality_e2e_);
  swap(flags_, other->flags_);
  swap(forward_target_revision_, other->forward_target_revision_);
  swap(ack_peer_routes_revision_, other->ack_peer_routes_revision_);
  swap(connection_id_, other->connection_id_);
  swap(seq_num_c2r_, other->seq_num_c2r_);
  swap(seq_num_e2e_, other->seq_num_e2e_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PClientToRouter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_._instance.get_mutable()->quality_relay_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_._instance.get_mutable()->quality_e2e_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
class CMsgSteamDatagramConnectionStatsP2PRouterToClient::HasBitSetters {
 public:
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg);
  static void set_has_quality_relay(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg);
  static void set_has_quality_e2e(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_seconds_until_shutdown(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_migrate_request_ip(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_migrate_request_port(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_scoring_penalty_relay_cluster(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_flags(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_ack_forward_target_revision(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_routes(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ack_peer_routes_revision(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_connection_id(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_seq_num_r2c(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_seq_num_e2e(CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PRouterToClient::HasBitSetters::quality_relay(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
  return *msg->quality_relay_;
}
const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PRouterToClient::HasBitSetters::quality_e2e(const CMsgSteamDatagramConnectionStatsP2PRouterToClient* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kMigrateRequestIpFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kMigrateRequestPortFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kAckForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kRoutesFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kAckPeerRoutesRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kSeqNumR2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kSeqNumE2EFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
}
CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  routes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_routes()) {
    routes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routes_);
  }
  if (from.has_quality_relay()) {
    quality_relay_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from.has_quality_e2e()) {
    quality_e2e_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&seconds_until_shutdown_, &from.seconds_until_shutdown_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_e2e_) -
    reinterpret_cast<char*>(&seconds_until_shutdown_)) + sizeof(seq_num_e2e_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectionStatsP2PRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  routes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quality_relay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_e2e_) -
      reinterpret_cast<char*>(&quality_relay_)) + sizeof(seq_num_e2e_));
}

CMsgSteamDatagramConnectionStatsP2PRouterToClient::~CMsgSteamDatagramConnectionStatsP2PRouterToClient() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedDtor() {
  routes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionStatsP2PRouterToClient& CMsgSteamDatagramConnectionStatsP2PRouterToClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionStatsP2PRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionStatsP2PRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      routes_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&seconds_until_shutdown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&seconds_until_shutdown_)) + sizeof(flags_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&ack_forward_target_revision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_e2e_) -
        reinterpret_cast<char*>(&ack_forward_target_revision_)) + sizeof(seq_num_e2e_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectionStatsP2PRouterToClient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectionStatsP2PRouterToClient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_relay();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 seconds_until_shutdown = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_seconds_until_shutdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 migrate_request_ip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_migrate_request_ip(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 migrate_request_port = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_migrate_request_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scoring_penalty_relay_cluster = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_scoring_penalty_relay_cluster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated fixed32 ack_relay = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 61) {
          do {
            msg->add_ack_relay(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 61 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_ack_relay();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed32 legacy_ack_e2e = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 69) {
          do {
            msg->add_legacy_ack_e2e(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 69 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_legacy_ack_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 flags = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ack_forward_target_revision = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_ack_forward_target_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes routes = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_routes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 ack_peer_routes_revision = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_ack_peer_routes_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 connection_id = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 seq_num_r2c = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_seq_num_r2c(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seq_num_e2e = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_seq_num_e2e(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_relay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_e2e()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_seconds_until_shutdown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 migrate_request_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_migrate_request_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &migrate_request_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 migrate_request_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_migrate_request_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &migrate_request_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_scoring_penalty_relay_cluster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 ack_relay = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 61u, input, this->mutable_ack_relay())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 69u, input, this->mutable_legacy_ack_e2e())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_forward_target_revision = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_ack_forward_target_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_forward_target_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes routes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_peer_routes_revision = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_ack_peer_routes_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_peer_routes_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 connection_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_r2c = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_seq_num_r2c(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_e2e = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_seq_num_e2e(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_e2e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::quality_relay(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::quality_e2e(this), output);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 migrate_request_ip = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->migrate_request_ip(), output);
  }

  // optional uint32 migrate_request_port = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->migrate_request_port(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scoring_penalty_relay_cluster(), output);
  }

  // repeated fixed32 ack_relay = 7;
  for (int i = 0, n = this->ack_relay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      7, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 8;
  for (int i = 0, n = this->legacy_ack_e2e_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      8, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->flags(), output);
  }

  // optional uint32 ack_forward_target_revision = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ack_forward_target_revision(), output);
  }

  // optional bytes routes = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->routes(), output);
  }

  // optional uint32 ack_peer_routes_revision = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ack_peer_routes_revision(), output);
  }

  // optional fixed32 connection_id = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->connection_id(), output);
  }

  // optional uint32 seq_num_r2c = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->seq_num_r2c(), output);
  }

  // optional uint32 seq_num_e2e = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->seq_num_e2e(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsP2PRouterToClient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::quality_relay(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::quality_e2e(this), target);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 migrate_request_ip = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(7, this->ack_relay_, target);

  // repeated fixed32 legacy_ack_e2e = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(8, this->legacy_ack_e2e_, target);

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->flags(), target);
  }

  // optional uint32 ack_forward_target_revision = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ack_forward_target_revision(), target);
  }

  // optional bytes routes = 11;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->seq_num_r2c(), target);
  }

  // optional uint32 seq_num_e2e = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->seq_num_e2e(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsP2PRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes routes = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->routes());
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 seconds_until_shutdown = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 migrate_request_ip = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 migrate_request_port = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->migrate_request_port());
    }

    // optional uint32 scoring_penalty_relay_cluster = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 ack_forward_target_revision = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_forward_target_revision());
    }

    // optional uint32 ack_peer_routes_revision = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_peer_routes_revision());
    }

    // optional fixed32 connection_id = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2c = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

    // optional uint32 seq_num_e2e = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_e2e());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsP2PRouterToClient* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsP2PRouterToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      routes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routes_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_quality_relay()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_quality_e2e()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000010u) {
      migrate_request_ip_ = from.migrate_request_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      migrate_request_port_ = from.migrate_request_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      scoring_penalty_relay_cluster_ = from.scoring_penalty_relay_cluster_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ack_forward_target_revision_ = from.ack_forward_target_revision_;
    }
    if (cached_has_bits & 0x00000200u) {
      ack_peer_routes_revision_ = from.ack_peer_routes_revision_;
    }
    if (cached_has_bits & 0x00000400u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      seq_num_r2c_ = from.seq_num_r2c_;
    }
    if (cached_has_bits & 0x00001000u) {
      seq_num_e2e_ = from.seq_num_e2e_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::Swap(CMsgSteamDatagramConnectionStatsP2PRouterToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::InternalSwap(CMsgSteamDatagramConnectionStatsP2PRouterToClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  routes_.Swap(&other->routes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(quality_relay_, other->quality_relay_);
  swap(quality_e2e_, other->quality_e2e_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(migrate_request_ip_, other->migrate_request_ip_);
  swap(migrate_request_port_, other->migrate_request_port_);
  swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
  swap(flags_, other->flags_);
  swap(ack_forward_target_revision_, other->ack_forward_target_revision_);
  swap(ack_peer_routes_revision_, other->ack_peer_routes_revision_);
  swap(connection_id_, other->connection_id_);
  swap(seq_num_r2c_, other->seq_num_r2c_);
  swap(seq_num_e2e_, other->seq_num_e2e_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PRouterToClient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramP2PBadRouteRouterToClient::InitAsDefaultInstance() {
}
class CMsgSteamDatagramP2PBadRouteRouterToClient::HasBitSetters {
 public:
  static void set_has_connection_id(CMsgSteamDatagramP2PBadRouteRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_failed_relay_routing_token(CMsgSteamDatagramP2PBadRouteRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ack_forward_target_revision(CMsgSteamDatagramP2PBadRouteRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kludge_pad(CMsgSteamDatagramP2PBadRouteRouterToClient* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramP2PBadRouteRouterToClient::kConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PBadRouteRouterToClient::kFailedRelayRoutingTokenFieldNumber;
const int CMsgSteamDatagramP2PBadRouteRouterToClient::kAckForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramP2PBadRouteRouterToClient::kKludgePadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
}
CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(const CMsgSteamDatagramP2PBadRouteRouterToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  failed_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_failed_relay_routing_token()) {
    failed_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failed_relay_routing_token_);
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kludge_pad_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(kludge_pad_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramP2PBadRouteRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  failed_relay_routing_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kludge_pad_) -
      reinterpret_cast<char*>(&connection_id_)) + sizeof(kludge_pad_));
}

CMsgSteamDatagramP2PBadRouteRouterToClient::~CMsgSteamDatagramP2PBadRouteRouterToClient() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  SharedDtor();
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedDtor() {
  failed_relay_routing_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramP2PBadRouteRouterToClient& CMsgSteamDatagramP2PBadRouteRouterToClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramP2PBadRouteRouterToClient_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramP2PBadRouteRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    failed_relay_routing_token_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kludge_pad_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(kludge_pad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramP2PBadRouteRouterToClient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramP2PBadRouteRouterToClient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_connection_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bytes failed_relay_routing_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_failed_relay_routing_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 ack_forward_target_revision = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ack_forward_target_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 kludge_pad = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_kludge_pad(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramP2PBadRouteRouterToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_connection_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes failed_relay_routing_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_failed_relay_routing_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_forward_target_revision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_ack_forward_target_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_forward_target_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 kludge_pad = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (793 & 0xFF)) {
          HasBitSetters::set_has_kludge_pad(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &kludge_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramP2PBadRouteRouterToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional bytes failed_relay_routing_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->failed_relay_routing_token(), output);
  }

  // optional uint32 ack_forward_target_revision = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ack_forward_target_revision(), output);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->kludge_pad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
}

::google::protobuf::uint8* CMsgSteamDatagramP2PBadRouteRouterToClient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional bytes failed_relay_routing_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->failed_relay_routing_token(), target);
  }

  // optional uint32 ack_forward_target_revision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ack_forward_target_revision(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->kludge_pad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  return target;
}

size_t CMsgSteamDatagramP2PBadRouteRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes failed_relay_routing_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->failed_relay_routing_token());
    }

    // optional fixed32 connection_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 ack_forward_target_revision = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_forward_target_revision());
    }

    // optional fixed64 kludge_pad = 99;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PBadRouteRouterToClient* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramP2PBadRouteRouterToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::MergeFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      failed_relay_routing_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failed_relay_routing_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ack_forward_target_revision_ = from.ack_forward_target_revision_;
    }
    if (cached_has_bits & 0x00000008u) {
      kludge_pad_ = from.kludge_pad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PBadRouteRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::Swap(CMsgSteamDatagramP2PBadRouteRouterToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramP2PBadRouteRouterToClient::InternalSwap(CMsgSteamDatagramP2PBadRouteRouterToClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  failed_relay_routing_token_.Swap(&other->failed_relay_routing_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connection_id_, other->connection_id_);
  swap(ack_forward_target_revision_, other->ack_forward_target_revision_);
  swap(kludge_pad_, other->kludge_pad_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PBadRouteRouterToClient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramRelayToRelayPing::InitAsDefaultInstance() {
}
class CMsgSteamDatagramRelayToRelayPing::HasBitSetters {
 public:
  static void set_has_request_timestamp(CMsgSteamDatagramRelayToRelayPing* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_request_date(CMsgSteamDatagramRelayToRelayPing* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_my_pop_id(CMsgSteamDatagramRelayToRelayPing* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_your_pop_id(CMsgSteamDatagramRelayToRelayPing* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_checksum(CMsgSteamDatagramRelayToRelayPing* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRelayToRelayPing::kRequestTimestampFieldNumber;
const int CMsgSteamDatagramRelayToRelayPing::kRequestDateFieldNumber;
const int CMsgSteamDatagramRelayToRelayPing::kMyPopIdFieldNumber;
const int CMsgSteamDatagramRelayToRelayPing::kYourPopIdFieldNumber;
const int CMsgSteamDatagramRelayToRelayPing::kChecksumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRelayToRelayPing::CMsgSteamDatagramRelayToRelayPing()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramRelayToRelayPing)
}
CMsgSteamDatagramRelayToRelayPing::CMsgSteamDatagramRelayToRelayPing(const CMsgSteamDatagramRelayToRelayPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_timestamp_, &from.request_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&checksum_) -
    reinterpret_cast<char*>(&request_timestamp_)) + sizeof(checksum_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramRelayToRelayPing)
}

void CMsgSteamDatagramRelayToRelayPing::SharedCtor() {
  ::memset(&request_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checksum_) -
      reinterpret_cast<char*>(&request_timestamp_)) + sizeof(checksum_));
}

CMsgSteamDatagramRelayToRelayPing::~CMsgSteamDatagramRelayToRelayPing() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  SharedDtor();
}

void CMsgSteamDatagramRelayToRelayPing::SharedDtor() {
}

void CMsgSteamDatagramRelayToRelayPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramRelayToRelayPing& CMsgSteamDatagramRelayToRelayPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramRelayToRelayPing_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramRelayToRelayPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&request_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checksum_) -
        reinterpret_cast<char*>(&request_timestamp_)) + sizeof(checksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramRelayToRelayPing::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramRelayToRelayPing*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 request_timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_request_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 request_date = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_request_date(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 my_pop_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_my_pop_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 your_pop_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_your_pop_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 checksum = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_checksum(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramRelayToRelayPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 request_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_request_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &request_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 request_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_request_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &request_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 my_pop_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_my_pop_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &my_pop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 your_pop_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_your_pop_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_pop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 checksum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_checksum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramRelayToRelayPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->request_timestamp(), output);
  }

  // optional fixed32 request_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->request_date(), output);
  }

  // optional fixed32 my_pop_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->my_pop_id(), output);
  }

  // optional fixed32 your_pop_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->your_pop_id(), output);
  }

  // optional fixed32 checksum = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->checksum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramRelayToRelayPing)
}

::google::protobuf::uint8* CMsgSteamDatagramRelayToRelayPing::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->request_timestamp(), target);
  }

  // optional fixed32 request_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->request_date(), target);
  }

  // optional fixed32 my_pop_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->my_pop_id(), target);
  }

  // optional fixed32 your_pop_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->your_pop_id(), target);
  }

  // optional fixed32 checksum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->checksum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  return target;
}

size_t CMsgSteamDatagramRelayToRelayPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed32 request_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 request_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 my_pop_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_pop_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 checksum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRelayToRelayPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRelayToRelayPing* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramRelayToRelayPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramRelayToRelayPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramRelayToRelayPing)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRelayToRelayPing::MergeFrom(const CMsgSteamDatagramRelayToRelayPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      request_timestamp_ = from.request_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_date_ = from.request_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      my_pop_id_ = from.my_pop_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      your_pop_id_ = from.your_pop_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      checksum_ = from.checksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRelayToRelayPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayToRelayPing::CopyFrom(const CMsgSteamDatagramRelayToRelayPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramRelayToRelayPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayToRelayPing::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRelayToRelayPing::Swap(CMsgSteamDatagramRelayToRelayPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRelayToRelayPing::InternalSwap(CMsgSteamDatagramRelayToRelayPing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(request_timestamp_, other->request_timestamp_);
  swap(request_date_, other->request_date_);
  swap(my_pop_id_, other->my_pop_id_);
  swap(your_pop_id_, other->your_pop_id_);
  swap(checksum_, other->checksum_);
}

::google::protobuf::Metadata CMsgSteamDatagramRelayToRelayPing::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramDataCenterState_Server::InitAsDefaultInstance() {
}
class CMsgSteamDatagramDataCenterState_Server::HasBitSetters {
 public:
  static void set_has_address(CMsgSteamDatagramDataCenterState_Server* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ping_ms(CMsgSteamDatagramDataCenterState_Server* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramDataCenterState_Server::kAddressFieldNumber;
const int CMsgSteamDatagramDataCenterState_Server::kPingMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramDataCenterState_Server::CMsgSteamDatagramDataCenterState_Server()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramDataCenterState.Server)
}
CMsgSteamDatagramDataCenterState_Server::CMsgSteamDatagramDataCenterState_Server(const CMsgSteamDatagramDataCenterState_Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ping_ms_ = from.ping_ms_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramDataCenterState.Server)
}

void CMsgSteamDatagramDataCenterState_Server::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramDataCenterState_Server_steamdatagram_5fmessages_5fsdr_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ping_ms_ = 0u;
}

CMsgSteamDatagramDataCenterState_Server::~CMsgSteamDatagramDataCenterState_Server() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState_Server::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramDataCenterState_Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramDataCenterState_Server& CMsgSteamDatagramDataCenterState_Server::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramDataCenterState_Server_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramDataCenterState_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  ping_ms_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramDataCenterState_Server::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramDataCenterState_Server*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSteamDatagramDataCenterState.Server.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 ping_ms = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ping_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramDataCenterState_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSteamDatagramDataCenterState.Server.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ping_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramDataCenterState_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramDataCenterState.Server.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional uint32 ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramDataCenterState.Server)
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState_Server::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramDataCenterState.Server.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional uint32 ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  return target;
}

size_t CMsgSteamDatagramDataCenterState_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional uint32 ping_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramDataCenterState_Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState_Server* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramDataCenterState_Server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramDataCenterState.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramDataCenterState.Server)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState_Server::MergeFrom(const CMsgSteamDatagramDataCenterState_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ms_ = from.ping_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramDataCenterState_Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_Server::CopyFrom(const CMsgSteamDatagramDataCenterState_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramDataCenterState.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState_Server::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDataCenterState_Server::Swap(CMsgSteamDatagramDataCenterState_Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramDataCenterState_Server::InternalSwap(CMsgSteamDatagramDataCenterState_Server* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ping_ms_, other->ping_ms_);
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState_Server::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramDataCenterState_DataCenter::InitAsDefaultInstance() {
}
class CMsgSteamDatagramDataCenterState_DataCenter::HasBitSetters {
 public:
  static void set_has_code(CMsgSteamDatagramDataCenterState_DataCenter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramDataCenterState_DataCenter::kCodeFieldNumber;
const int CMsgSteamDatagramDataCenterState_DataCenter::kServerSampleFieldNumber;
const int CMsgSteamDatagramDataCenterState_DataCenter::kRelaySampleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramDataCenterState_DataCenter::CMsgSteamDatagramDataCenterState_DataCenter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
}
CMsgSteamDatagramDataCenterState_DataCenter::CMsgSteamDatagramDataCenterState_DataCenter(const CMsgSteamDatagramDataCenterState_DataCenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      server_sample_(from.server_sample_),
      relay_sample_(from.relay_sample_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
}

void CMsgSteamDatagramDataCenterState_DataCenter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramDataCenterState_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSteamDatagramDataCenterState_DataCenter::~CMsgSteamDatagramDataCenterState_DataCenter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState_DataCenter::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramDataCenterState_DataCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramDataCenterState_DataCenter& CMsgSteamDatagramDataCenterState_DataCenter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramDataCenterState_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramDataCenterState_DataCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_sample_.Clear();
  relay_sample_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramDataCenterState_DataCenter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramDataCenterState_DataCenter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code");
        object = msg->mutable_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server server_sample = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramDataCenterState_Server::_InternalParse;
          object = msg->add_server_sample();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramDataCenterState_Server::_InternalParse;
          object = msg->add_relay_sample();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramDataCenterState_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server server_sample = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_server_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_relay_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramDataCenterState_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->server_sample(static_cast<int>(i)),
      output);
  }

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relay_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->relay_sample(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState_DataCenter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->server_sample(static_cast<int>(i)), target);
  }

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relay_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->relay_sample(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  return target;
}

size_t CMsgSteamDatagramDataCenterState_DataCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->server_sample_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->server_sample(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->relay_sample_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->relay_sample(static_cast<int>(i)));
    }
  }

  // optional string code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramDataCenterState_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState_DataCenter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramDataCenterState_DataCenter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState_DataCenter::MergeFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_sample_.MergeFrom(from.server_sample_);
  relay_sample_.MergeFrom(from.relay_sample_);
  if (from.has_code()) {
    _has_bits_[0] |= 0x00000001u;
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void CMsgSteamDatagramDataCenterState_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_DataCenter::CopyFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState_DataCenter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDataCenterState_DataCenter::Swap(CMsgSteamDatagramDataCenterState_DataCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramDataCenterState_DataCenter::InternalSwap(CMsgSteamDatagramDataCenterState_DataCenter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&server_sample_)->InternalSwap(CastToBase(&other->server_sample_));
  CastToBase(&relay_sample_)->InternalSwap(CastToBase(&other->relay_sample_));
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState_DataCenter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramDataCenterState::InitAsDefaultInstance() {
}
class CMsgSteamDatagramDataCenterState::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramDataCenterState::kDataCentersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramDataCenterState::CMsgSteamDatagramDataCenterState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramDataCenterState)
}
CMsgSteamDatagramDataCenterState::CMsgSteamDatagramDataCenterState(const CMsgSteamDatagramDataCenterState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_centers_(from.data_centers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramDataCenterState)
}

void CMsgSteamDatagramDataCenterState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramDataCenterState_steamdatagram_5fmessages_5fsdr_2eproto.base);
}

CMsgSteamDatagramDataCenterState::~CMsgSteamDatagramDataCenterState() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramDataCenterState)
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState::SharedDtor() {
}

void CMsgSteamDatagramDataCenterState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramDataCenterState& CMsgSteamDatagramDataCenterState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramDataCenterState_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramDataCenterState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramDataCenterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_centers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramDataCenterState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramDataCenterState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter::_InternalParse;
          object = msg->add_data_centers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramDataCenterState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramDataCenterState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data_centers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramDataCenterState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramDataCenterState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramDataCenterState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramDataCenterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data_centers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramDataCenterState)
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramDataCenterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data_centers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramDataCenterState)
  return target;
}

size_t CMsgSteamDatagramDataCenterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramDataCenterState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_centers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_centers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramDataCenterState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramDataCenterState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramDataCenterState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramDataCenterState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramDataCenterState)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState::MergeFrom(const CMsgSteamDatagramDataCenterState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramDataCenterState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_centers_.MergeFrom(from.data_centers_);
}

void CMsgSteamDatagramDataCenterState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramDataCenterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState::CopyFrom(const CMsgSteamDatagramDataCenterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramDataCenterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDataCenterState::Swap(CMsgSteamDatagramDataCenterState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramDataCenterState::InternalSwap(CMsgSteamDatagramDataCenterState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&data_centers_)->InternalSwap(CastToBase(&other->data_centers_));
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramRouterHealth_DataCenter::InitAsDefaultInstance() {
}
class CMsgSteamDatagramRouterHealth_DataCenter::HasBitSetters {
 public:
  static void set_has_datacenter_id(CMsgSteamDatagramRouterHealth_DataCenter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_state(CMsgSteamDatagramRouterHealth_DataCenter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRouterHealth_DataCenter::kDatacenterIdFieldNumber;
const int CMsgSteamDatagramRouterHealth_DataCenter::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRouterHealth_DataCenter::CMsgSteamDatagramRouterHealth_DataCenter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
}
CMsgSteamDatagramRouterHealth_DataCenter::CMsgSteamDatagramRouterHealth_DataCenter(const CMsgSteamDatagramRouterHealth_DataCenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&datacenter_id_, &from.datacenter_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&datacenter_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
}

void CMsgSteamDatagramRouterHealth_DataCenter::SharedCtor() {
  ::memset(&datacenter_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&datacenter_id_)) + sizeof(state_));
}

CMsgSteamDatagramRouterHealth_DataCenter::~CMsgSteamDatagramRouterHealth_DataCenter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  SharedDtor();
}

void CMsgSteamDatagramRouterHealth_DataCenter::SharedDtor() {
}

void CMsgSteamDatagramRouterHealth_DataCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramRouterHealth_DataCenter& CMsgSteamDatagramRouterHealth_DataCenter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramRouterHealth_DataCenter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramRouterHealth_DataCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&datacenter_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&datacenter_id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramRouterHealth_DataCenter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramRouterHealth_DataCenter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 datacenter_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_datacenter_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramRouterHealth_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 datacenter_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_datacenter_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &datacenter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramRouterHealth_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 datacenter_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->datacenter_id(), output);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
}

::google::protobuf::uint8* CMsgSteamDatagramRouterHealth_DataCenter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 datacenter_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->datacenter_id(), target);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  return target;
}

size_t CMsgSteamDatagramRouterHealth_DataCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 datacenter_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRouterHealth_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterHealth_DataCenter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramRouterHealth_DataCenter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterHealth_DataCenter::MergeFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      datacenter_id_ = from.datacenter_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRouterHealth_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth_DataCenter::CopyFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterHealth_DataCenter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterHealth_DataCenter::Swap(CMsgSteamDatagramRouterHealth_DataCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRouterHealth_DataCenter::InternalSwap(CMsgSteamDatagramRouterHealth_DataCenter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(datacenter_id_, other->datacenter_id_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata CMsgSteamDatagramRouterHealth_DataCenter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramRouterHealth::InitAsDefaultInstance() {
}
class CMsgSteamDatagramRouterHealth::HasBitSetters {
 public:
  static void set_has_cpu_load(CMsgSteamDatagramRouterHealth* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_active_sessions(CMsgSteamDatagramRouterHealth* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data_pkts_sec(CMsgSteamDatagramRouterHealth* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_other_pkts_sec(CMsgSteamDatagramRouterHealth* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_seconds_until_shutdown(CMsgSteamDatagramRouterHealth* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_cpu_cost_per_user(CMsgSteamDatagramRouterHealth* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_cpu_cost_per_packet(CMsgSteamDatagramRouterHealth* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_magic(CMsgSteamDatagramRouterHealth* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRouterHealth::kCpuLoadFieldNumber;
const int CMsgSteamDatagramRouterHealth::kActiveSessionsFieldNumber;
const int CMsgSteamDatagramRouterHealth::kDataPktsSecFieldNumber;
const int CMsgSteamDatagramRouterHealth::kOtherPktsSecFieldNumber;
const int CMsgSteamDatagramRouterHealth::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramRouterHealth::kCpuCostPerUserFieldNumber;
const int CMsgSteamDatagramRouterHealth::kCpuCostPerPacketFieldNumber;
const int CMsgSteamDatagramRouterHealth::kDataCentersFieldNumber;
const int CMsgSteamDatagramRouterHealth::kMagicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRouterHealth::CMsgSteamDatagramRouterHealth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramRouterHealth)
}
CMsgSteamDatagramRouterHealth::CMsgSteamDatagramRouterHealth(const CMsgSteamDatagramRouterHealth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_centers_(from.data_centers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_load_, &from.cpu_load_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_cost_per_packet_) -
    reinterpret_cast<char*>(&cpu_load_)) + sizeof(cpu_cost_per_packet_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramRouterHealth)
}

void CMsgSteamDatagramRouterHealth::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramRouterHealth_steamdatagram_5fmessages_5fsdr_2eproto.base);
  ::memset(&cpu_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_cost_per_packet_) -
      reinterpret_cast<char*>(&cpu_load_)) + sizeof(cpu_cost_per_packet_));
}

CMsgSteamDatagramRouterHealth::~CMsgSteamDatagramRouterHealth() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramRouterHealth)
  SharedDtor();
}

void CMsgSteamDatagramRouterHealth::SharedDtor() {
}

void CMsgSteamDatagramRouterHealth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramRouterHealth& CMsgSteamDatagramRouterHealth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramRouterHealth_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramRouterHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramRouterHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_centers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cpu_load_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_cost_per_packet_) -
        reinterpret_cast<char*>(&cpu_load_)) + sizeof(cpu_cost_per_packet_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramRouterHealth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramRouterHealth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float cpu_load = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_cpu_load(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 active_sessions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_active_sessions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 data_pkts_sec = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_data_pkts_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 other_pkts_sec = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_other_pkts_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_seconds_until_shutdown(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter::_InternalParse;
          object = msg->add_data_centers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional fixed64 magic = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_magic(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional float cpu_cost_per_user = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_cpu_cost_per_user(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float cpu_cost_per_packet = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_cpu_cost_per_packet(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramRouterHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramRouterHealth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cpu_load = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_cpu_load(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_active_sessions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_pkts_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_data_pkts_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_pkts_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 other_pkts_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_other_pkts_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_pkts_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_seconds_until_shutdown(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data_centers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 magic = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_magic(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &magic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cpu_cost_per_user = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_cpu_cost_per_user(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_cost_per_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cpu_cost_per_packet = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_cpu_cost_per_packet(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_cost_per_packet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramRouterHealth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramRouterHealth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramRouterHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramRouterHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float cpu_load = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cpu_load(), output);
  }

  // optional uint32 active_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_sessions(), output);
  }

  // optional uint32 data_pkts_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_pkts_sec(), output);
  }

  // optional uint32 other_pkts_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->other_pkts_sec(), output);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_until_shutdown(), output);
  }

  // repeated .proto.steam.CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->data_centers(static_cast<int>(i)),
      output);
  }

  // optional fixed64 magic = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->magic(), output);
  }

  // optional float cpu_cost_per_user = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cpu_cost_per_user(), output);
  }

  // optional float cpu_cost_per_packet = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cpu_cost_per_packet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramRouterHealth)
}

::google::protobuf::uint8* CMsgSteamDatagramRouterHealth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramRouterHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float cpu_load = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cpu_load(), target);
  }

  // optional uint32 active_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_sessions(), target);
  }

  // optional uint32 data_pkts_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_pkts_sec(), target);
  }

  // optional uint32 other_pkts_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->other_pkts_sec(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_until_shutdown(), target);
  }

  // repeated .proto.steam.CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->data_centers(static_cast<int>(i)), target);
  }

  // optional fixed64 magic = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->magic(), target);
  }

  // optional float cpu_cost_per_user = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cpu_cost_per_user(), target);
  }

  // optional float cpu_cost_per_packet = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cpu_cost_per_packet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramRouterHealth)
  return target;
}

size_t CMsgSteamDatagramRouterHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramRouterHealth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->data_centers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_centers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float cpu_load = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 active_sessions = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_sessions());
    }

    // optional uint32 data_pkts_sec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_pkts_sec());
    }

    // optional uint32 other_pkts_sec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_pkts_sec());
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional float cpu_cost_per_user = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed64 magic = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional float cpu_cost_per_packet = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramRouterHealth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramRouterHealth)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterHealth* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramRouterHealth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramRouterHealth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramRouterHealth)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterHealth::MergeFrom(const CMsgSteamDatagramRouterHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramRouterHealth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_centers_.MergeFrom(from.data_centers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cpu_load_ = from.cpu_load_;
    }
    if (cached_has_bits & 0x00000002u) {
      active_sessions_ = from.active_sessions_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_pkts_sec_ = from.data_pkts_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      other_pkts_sec_ = from.other_pkts_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000020u) {
      cpu_cost_per_user_ = from.cpu_cost_per_user_;
    }
    if (cached_has_bits & 0x00000040u) {
      magic_ = from.magic_;
    }
    if (cached_has_bits & 0x00000080u) {
      cpu_cost_per_packet_ = from.cpu_cost_per_packet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRouterHealth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramRouterHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth::CopyFrom(const CMsgSteamDatagramRouterHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramRouterHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterHealth::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterHealth::Swap(CMsgSteamDatagramRouterHealth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRouterHealth::InternalSwap(CMsgSteamDatagramRouterHealth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&data_centers_)->InternalSwap(CastToBase(&other->data_centers_));
  swap(cpu_load_, other->cpu_load_);
  swap(active_sessions_, other->active_sessions_);
  swap(data_pkts_sec_, other->data_pkts_sec_);
  swap(other_pkts_sec_, other->other_pkts_sec_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(cpu_cost_per_user_, other->cpu_cost_per_user_);
  swap(magic_, other->magic_);
  swap(cpu_cost_per_packet_, other->cpu_cost_per_packet_);
}

::google::protobuf::Metadata CMsgSteamDatagramRouterHealth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramConnectionStatsP2PRouterToRouter_default_instance_._instance.get_mutable()->quality_relay_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::proto::steam::_CMsgSteamDatagramConnectionStatsP2PRouterToRouter_default_instance_._instance.get_mutable()->quality_e2e_ = const_cast< ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      ::proto::steam::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
class CMsgSteamDatagramConnectionStatsP2PRouterToRouter::HasBitSetters {
 public:
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg);
  static void set_has_quality_relay(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg);
  static void set_has_quality_e2e(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_flags(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ack_forward_target_revision(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_routes(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ack_peer_routes_revision(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_seq_num_r2r(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_seq_num_e2e(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_from_relay_session_id(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_to_relay_session_id(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::HasBitSetters::quality_relay(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
  return *msg->quality_relay_;
}
const ::proto::steam::CMsgSteamDatagramConnectionQuality&
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::HasBitSetters::quality_e2e(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter* msg) {
  return *msg->quality_e2e_;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_quality_relay() {
  if (quality_relay_ != nullptr) quality_relay_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_quality_e2e() {
  if (quality_e2e_ != nullptr) quality_e2e_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kAckForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kRoutesFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kAckPeerRoutesRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kSeqNumR2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kSeqNumE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kToRelaySessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsP2PRouterToRouter::CMsgSteamDatagramConnectionStatsP2PRouterToRouter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
}
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::CMsgSteamDatagramConnectionStatsP2PRouterToRouter(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ack_relay_(from.ack_relay_),
      legacy_ack_e2e_(from.legacy_ack_e2e_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  routes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_routes()) {
    routes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routes_);
  }
  if (from.has_quality_relay()) {
    quality_relay_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_relay_);
  } else {
    quality_relay_ = nullptr;
  }
  if (from.has_quality_e2e()) {
    quality_e2e_ = new ::proto::steam::CMsgSteamDatagramConnectionQuality(*from.quality_e2e_);
  } else {
    quality_e2e_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_r2r_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(seq_num_r2r_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramConnectionStatsP2PRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  routes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quality_relay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_r2r_) -
      reinterpret_cast<char*>(&quality_relay_)) + sizeof(seq_num_r2r_));
}

CMsgSteamDatagramConnectionStatsP2PRouterToRouter::~CMsgSteamDatagramConnectionStatsP2PRouterToRouter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::SharedDtor() {
  routes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quality_relay_;
  if (this != internal_default_instance()) delete quality_e2e_;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& CMsgSteamDatagramConnectionStatsP2PRouterToRouter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramConnectionStatsP2PRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      routes_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quality_relay_ != nullptr);
      quality_relay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(quality_e2e_ != nullptr);
      quality_e2e_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_relay_session_id_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(from_relay_session_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&to_relay_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_r2r_) -
        reinterpret_cast<char*>(&to_relay_session_id_)) + sizeof(seq_num_r2r_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramConnectionStatsP2PRouterToRouter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_relay();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamDatagramConnectionQuality::_InternalParse;
        object = msg->mutable_quality_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated fixed32 ack_relay = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 29) {
          do {
            msg->add_ack_relay(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 29 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_ack_relay();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed32 legacy_ack_e2e = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 37) {
          do {
            msg->add_legacy_ack_e2e(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 37 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_legacy_ack_e2e();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 flags = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ack_forward_target_revision = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_ack_forward_target_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes routes = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_routes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 ack_peer_routes_revision = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_ack_peer_routes_revision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 from_relay_session_id = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 181) goto handle_unusual;
        msg->set_from_relay_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 to_relay_session_id = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 205) goto handle_unusual;
        msg->set_to_relay_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 seq_num_r2r = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_seq_num_r2r(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seq_num_e2e = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_seq_num_e2e(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_relay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_e2e()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 ack_relay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29u, input, this->mutable_ack_relay())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37u, input, this->mutable_legacy_ack_e2e())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_forward_target_revision = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_ack_forward_target_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_forward_target_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes routes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_peer_routes_revision = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_ack_peer_routes_revision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_peer_routes_revision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_relay_session_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (181 & 0xFF)) {
          HasBitSetters::set_has_from_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 to_relay_session_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (205 & 0xFF)) {
          HasBitSetters::set_has_to_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_r2r = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_seq_num_r2r(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_e2e = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_seq_num_e2e(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_e2e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::quality_relay(this), output);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::quality_e2e(this), output);
  }

  // repeated fixed32 ack_relay = 3;
  for (int i = 0, n = this->ack_relay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  for (int i = 0, n = this->legacy_ack_e2e_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional uint32 ack_forward_target_revision = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ack_forward_target_revision(), output);
  }

  // optional bytes routes = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->routes(), output);
  }

  // optional uint32 ack_peer_routes_revision = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ack_peer_routes_revision(), output);
  }

  // optional fixed32 from_relay_session_id = 22;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(22, this->from_relay_session_id(), output);
  }

  // optional fixed32 to_relay_session_id = 25;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(25, this->to_relay_session_id(), output);
  }

  // optional uint32 seq_num_r2r = 26;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->seq_num_r2r(), output);
  }

  // optional uint32 seq_num_e2e = 27;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->seq_num_e2e(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::quality_relay(this), target);
  }

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::quality_e2e(this), target);
  }

  // repeated fixed32 ack_relay = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(3, this->ack_relay_, target);

  // repeated fixed32 legacy_ack_e2e = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(4, this->legacy_ack_e2e_, target);

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // optional uint32 ack_forward_target_revision = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ack_forward_target_revision(), target);
  }

  // optional bytes routes = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ack_peer_routes_revision(), target);
  }

  // optional fixed32 from_relay_session_id = 22;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(22, this->from_relay_session_id(), target);
  }

  // optional fixed32 to_relay_session_id = 25;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(25, this->to_relay_session_id(), target);
  }

  // optional uint32 seq_num_r2r = 26;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->seq_num_r2r(), target);
  }

  // optional uint32 seq_num_e2e = 27;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->seq_num_e2e(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ack_relay = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ack_relay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ack_relay_size());
    total_size += data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->legacy_ack_e2e_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->legacy_ack_e2e_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes routes = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->routes());
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_relay_);
    }

    // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quality_e2e_);
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 ack_forward_target_revision = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_forward_target_revision());
    }

    // optional uint32 seq_num_e2e = 27;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_e2e());
    }

    // optional uint32 ack_peer_routes_revision = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_peer_routes_revision());
    }

    // optional fixed32 from_relay_session_id = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional fixed32 to_relay_session_id = 25;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional uint32 seq_num_r2r = 26;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2r());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsP2PRouterToRouter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramConnectionStatsP2PRouterToRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      routes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routes_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_quality_relay()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_quality_e2e()->::proto::steam::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      ack_forward_target_revision_ = from.ack_forward_target_revision_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_num_e2e_ = from.seq_num_e2e_;
    }
    if (cached_has_bits & 0x00000040u) {
      ack_peer_routes_revision_ = from.ack_peer_routes_revision_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_relay_session_id_ = from.from_relay_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      to_relay_session_id_ = from.to_relay_session_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      seq_num_r2r_ = from.seq_num_r2r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Swap(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ack_relay_.InternalSwap(&other->ack_relay_);
  legacy_ack_e2e_.InternalSwap(&other->legacy_ack_e2e_);
  routes_.Swap(&other->routes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(quality_relay_, other->quality_relay_);
  swap(quality_e2e_, other->quality_e2e_);
  swap(flags_, other->flags_);
  swap(ack_forward_target_revision_, other->ack_forward_target_revision_);
  swap(seq_num_e2e_, other->seq_num_e2e_);
  swap(ack_peer_routes_revision_, other->ack_peer_routes_revision_);
  swap(from_relay_session_id_, other->from_relay_session_id_);
  swap(to_relay_session_id_, other->to_relay_session_id_);
  swap(seq_num_r2r_, other->seq_num_r2r_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PRouterToRouter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramP2PBadRouteRouterToRouter::InitAsDefaultInstance() {
}
class CMsgSteamDatagramP2PBadRouteRouterToRouter::HasBitSetters {
 public:
  static void set_has_from_relay_session_id(CMsgSteamDatagramP2PBadRouteRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kludge_pad(CMsgSteamDatagramP2PBadRouteRouterToRouter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramP2PBadRouteRouterToRouter::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramP2PBadRouteRouterToRouter::kKludgePadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramP2PBadRouteRouterToRouter::CMsgSteamDatagramP2PBadRouteRouterToRouter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
}
CMsgSteamDatagramP2PBadRouteRouterToRouter::CMsgSteamDatagramP2PBadRouteRouterToRouter(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_relay_session_id_, &from.from_relay_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kludge_pad_) -
    reinterpret_cast<char*>(&from_relay_session_id_)) + sizeof(kludge_pad_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::SharedCtor() {
  ::memset(&from_relay_session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kludge_pad_) -
      reinterpret_cast<char*>(&from_relay_session_id_)) + sizeof(kludge_pad_));
}

CMsgSteamDatagramP2PBadRouteRouterToRouter::~CMsgSteamDatagramP2PBadRouteRouterToRouter() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  SharedDtor();
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::SharedDtor() {
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramP2PBadRouteRouterToRouter& CMsgSteamDatagramP2PBadRouteRouterToRouter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramP2PBadRouteRouterToRouter_steamdatagram_5fmessages_5fsdr_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramP2PBadRouteRouterToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&from_relay_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kludge_pad_) -
        reinterpret_cast<char*>(&from_relay_session_id_)) + sizeof(kludge_pad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramP2PBadRouteRouterToRouter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramP2PBadRouteRouterToRouter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 from_relay_session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_from_relay_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 kludge_pad = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_kludge_pad(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramP2PBadRouteRouterToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 from_relay_session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_from_relay_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 kludge_pad = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (793 & 0xFF)) {
          HasBitSetters::set_has_kludge_pad(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &kludge_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramP2PBadRouteRouterToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 from_relay_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->from_relay_session_id(), output);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->kludge_pad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
}

::google::protobuf::uint8* CMsgSteamDatagramP2PBadRouteRouterToRouter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 from_relay_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->from_relay_session_id(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->kludge_pad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  return target;
}

size_t CMsgSteamDatagramP2PBadRouteRouterToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 from_relay_session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed64 kludge_pad = 99;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramP2PBadRouteRouterToRouter* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramP2PBadRouteRouterToRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::MergeFrom(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_relay_session_id_ = from.from_relay_session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      kludge_pad_ = from.kludge_pad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PBadRouteRouterToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::Swap(CMsgSteamDatagramP2PBadRouteRouterToRouter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramP2PBadRouteRouterToRouter::InternalSwap(CMsgSteamDatagramP2PBadRouteRouterToRouter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(from_relay_session_id_, other->from_relay_session_id_);
  swap(kludge_pad_, other->kludge_pad_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PBadRouteRouterToRouter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return ::file_level_metadata_steamdatagram_5fmessages_5fsdr_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramRouterPingReply* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramRouterPingReply >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramRouterPingReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramGameserverPing* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramGameserverPing >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramGameserverPing >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramNoSessionRelayToClient* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramNoSessionRelayToClient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramNoSessionRelayToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramClientPingSampleRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramClientPingSampleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramClientPingSampleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramClientPingSampleReply* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramClientPingSampleReply >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramClientPingSampleReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectOK* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectOK >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectOK >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectionClosed* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectionClosed >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectionClosed >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramNoConnection* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramNoConnection >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramNoConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramGameserverSessionRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramGameserverSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramGameserverSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramGameserverSessionEstablished* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramGameserverSessionEstablished >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramGameserverSessionEstablished >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramP2PSessionRequestBody* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramP2PSessionRequestBody >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramP2PSessionRequestBody >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramP2PSessionRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramP2PSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramP2PSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramP2PSessionEstablished* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramP2PSessionEstablished >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramP2PSessionEstablished >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramP2PRoutes_Route* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramP2PRoutes_Route >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramP2PRoutes_Route >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramP2PRoutes* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramP2PRoutes >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramP2PRoutes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramP2PRendezvous* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramP2PRendezvous >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramP2PRendezvous >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramRelayToRelayPing* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramRelayToRelayPing >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramRelayToRelayPing >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramDataCenterState_Server* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramDataCenterState* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramDataCenterState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramDataCenterState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramRouterHealth* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramRouterHealth >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramRouterHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
