// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_offline.steamclient.proto

#include "steammessages_offline.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5foffline_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_COffline_OfflineLogonTicket_steammessages_5foffline_2esteamclient_2eproto;
namespace proto {
namespace steam {
class COffline_GetOfflineLogonTicket_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<COffline_GetOfflineLogonTicket_Request> _instance;
} _COffline_GetOfflineLogonTicket_Request_default_instance_;
class COffline_GetOfflineLogonTicket_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<COffline_GetOfflineLogonTicket_Response> _instance;
} _COffline_GetOfflineLogonTicket_Response_default_instance_;
class COffline_GetUnsignedOfflineLogonTicket_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<COffline_GetUnsignedOfflineLogonTicket_Request> _instance;
} _COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_;
class COffline_OfflineLogonTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<COffline_OfflineLogonTicket> _instance;
} _COffline_OfflineLogonTicket_default_instance_;
class COffline_GetUnsignedOfflineLogonTicket_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<COffline_GetUnsignedOfflineLogonTicket_Response> _instance;
} _COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCOffline_GetOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_COffline_GetOfflineLogonTicket_Request_default_instance_;
    new (ptr) ::proto::steam::COffline_GetOfflineLogonTicket_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::COffline_GetOfflineLogonTicket_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_COffline_GetOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCOffline_GetOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto}, {}};

static void InitDefaultsCOffline_GetOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_COffline_GetOfflineLogonTicket_Response_default_instance_;
    new (ptr) ::proto::steam::COffline_GetOfflineLogonTicket_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::COffline_GetOfflineLogonTicket_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_COffline_GetOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCOffline_GetOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto}, {}};

static void InitDefaultsCOffline_GetUnsignedOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_;
    new (ptr) ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_COffline_GetUnsignedOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCOffline_GetUnsignedOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto}, {}};

static void InitDefaultsCOffline_OfflineLogonTicket_steammessages_5foffline_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_COffline_OfflineLogonTicket_default_instance_;
    new (ptr) ::proto::steam::COffline_OfflineLogonTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::COffline_OfflineLogonTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_COffline_OfflineLogonTicket_steammessages_5foffline_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCOffline_OfflineLogonTicket_steammessages_5foffline_2esteamclient_2eproto}, {}};

static void InitDefaultsCOffline_GetUnsignedOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_;
    new (ptr) ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_COffline_GetUnsignedOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCOffline_GetUnsignedOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto}, {
      &scc_info_COffline_OfflineLogonTicket_steammessages_5foffline_2esteamclient_2eproto.base,}};

void InitDefaults_steammessages_5foffline_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_COffline_GetOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_COffline_GetOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_COffline_GetUnsignedOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_COffline_OfflineLogonTicket_steammessages_5foffline_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_COffline_GetUnsignedOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5foffline_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5foffline_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5foffline_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetOfflineLogonTicket_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetOfflineLogonTicket_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetOfflineLogonTicket_Request, priority_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetOfflineLogonTicket_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetOfflineLogonTicket_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetOfflineLogonTicket_Response, serialized_ticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetOfflineLogonTicket_Response, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_OfflineLogonTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_OfflineLogonTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_OfflineLogonTicket, accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_OfflineLogonTicket, rtime32_creation_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response, ticket_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::steam::COffline_GetOfflineLogonTicket_Request)},
  { 7, 14, sizeof(::proto::steam::COffline_GetOfflineLogonTicket_Response)},
  { 16, 21, sizeof(::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request)},
  { 21, 28, sizeof(::proto::steam::COffline_OfflineLogonTicket)},
  { 30, 36, sizeof(::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_COffline_GetOfflineLogonTicket_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_COffline_GetOfflineLogonTicket_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_COffline_OfflineLogonTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5foffline_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5foffline_2esteamclient_2eproto, "steammessages_offline.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5foffline_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5foffline_2esteamclient_2eproto, 5, file_level_enum_descriptors_steammessages_5foffline_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5foffline_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5foffline_2esteamclient_2eproto[] =
  "\n\'steammessages_offline.steamclient.prot"
  "o\022\013proto.steam\032,steammessages_unified_ba"
  "se.steamclient.proto\":\n&COffline_GetOffl"
  "ineLogonTicket_Request\022\020\n\010priority\030\001 \001(\r"
  "\"W\n\'COffline_GetOfflineLogonTicket_Respo"
  "nse\022\031\n\021serialized_ticket\030\001 \001(\014\022\021\n\tsignat"
  "ure\030\002 \001(\014\"0\n.COffline_GetUnsignedOffline"
  "LogonTicket_Request\"O\n\033COffline_OfflineL"
  "ogonTicket\022\021\n\taccountid\030\001 \001(\r\022\035\n\025rtime32"
  "_creation_time\030\002 \001(\007\"k\n/COffline_GetUnsi"
  "gnedOfflineLogonTicket_Response\0228\n\006ticke"
  "t\030\001 \001(\0132(.proto.steam.COffline_OfflineLo"
  "gonTicket2\323\003\n\007Offline\022\315\001\n\025GetOfflineLogo"
  "nTicket\0223.proto.steam.COffline_GetOfflin"
  "eLogonTicket_Request\0324.proto.steam.COffl"
  "ine_GetOfflineLogonTicket_Response\"I\202\265\030E"
  "Get a serialized and signed offline logo"
  "n ticket for the current user\022\331\001\n\035GetUns"
  "ignedOfflineLogonTicket\022;.proto.steam.CO"
  "ffline_GetUnsignedOfflineLogonTicket_Req"
  "uest\032<.proto.steam.COffline_GetUnsignedO"
  "fflineLogonTicket_Response\"=\202\265\0309Get an u"
  "nsigned offline logon ticket for the cur"
  "rent user\032\034\202\265\030\030Offline settings serviceB"
  "\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5foffline_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5foffline_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5foffline_2esteamclient_2eproto,
  "steammessages_offline.steamclient.proto", &assign_descriptors_table_steammessages_5foffline_2esteamclient_2eproto, 964,
};

void AddDescriptors_steammessages_5foffline_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5foffline_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5foffline_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5foffline_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void COffline_GetOfflineLogonTicket_Request::InitAsDefaultInstance() {
}
class COffline_GetOfflineLogonTicket_Request::HasBitSetters {
 public:
  static void set_has_priority(COffline_GetOfflineLogonTicket_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COffline_GetOfflineLogonTicket_Request::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_GetOfflineLogonTicket_Request::COffline_GetOfflineLogonTicket_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_GetOfflineLogonTicket_Request)
}
COffline_GetOfflineLogonTicket_Request::COffline_GetOfflineLogonTicket_Request(const COffline_GetOfflineLogonTicket_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_GetOfflineLogonTicket_Request)
}

void COffline_GetOfflineLogonTicket_Request::SharedCtor() {
  priority_ = 0u;
}

COffline_GetOfflineLogonTicket_Request::~COffline_GetOfflineLogonTicket_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_GetOfflineLogonTicket_Request)
  SharedDtor();
}

void COffline_GetOfflineLogonTicket_Request::SharedDtor() {
}

void COffline_GetOfflineLogonTicket_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COffline_GetOfflineLogonTicket_Request& COffline_GetOfflineLogonTicket_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_COffline_GetOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void COffline_GetOfflineLogonTicket_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* COffline_GetOfflineLogonTicket_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<COffline_GetOfflineLogonTicket_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 priority = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_priority(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool COffline_GetOfflineLogonTicket_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 priority = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_priority(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_GetOfflineLogonTicket_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_GetOfflineLogonTicket_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void COffline_GetOfflineLogonTicket_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 priority = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_GetOfflineLogonTicket_Request)
}

::google::protobuf::uint8* COffline_GetOfflineLogonTicket_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 priority = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_GetOfflineLogonTicket_Request)
  return target;
}

size_t COffline_GetOfflineLogonTicket_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 priority = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COffline_GetOfflineLogonTicket_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_GetOfflineLogonTicket_Request* source =
      ::google::protobuf::DynamicCastToGenerated<COffline_GetOfflineLogonTicket_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_GetOfflineLogonTicket_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_GetOfflineLogonTicket_Request)
    MergeFrom(*source);
  }
}

void COffline_GetOfflineLogonTicket_Request::MergeFrom(const COffline_GetOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_priority()) {
    set_priority(from.priority());
  }
}

void COffline_GetOfflineLogonTicket_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_GetOfflineLogonTicket_Request::CopyFrom(const COffline_GetOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_GetOfflineLogonTicket_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetOfflineLogonTicket_Request::IsInitialized() const {
  return true;
}

void COffline_GetOfflineLogonTicket_Request::Swap(COffline_GetOfflineLogonTicket_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_GetOfflineLogonTicket_Request::InternalSwap(COffline_GetOfflineLogonTicket_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(priority_, other->priority_);
}

::google::protobuf::Metadata COffline_GetOfflineLogonTicket_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5foffline_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void COffline_GetOfflineLogonTicket_Response::InitAsDefaultInstance() {
}
class COffline_GetOfflineLogonTicket_Response::HasBitSetters {
 public:
  static void set_has_serialized_ticket(COffline_GetOfflineLogonTicket_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_signature(COffline_GetOfflineLogonTicket_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COffline_GetOfflineLogonTicket_Response::kSerializedTicketFieldNumber;
const int COffline_GetOfflineLogonTicket_Response::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_GetOfflineLogonTicket_Response::COffline_GetOfflineLogonTicket_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_GetOfflineLogonTicket_Response)
}
COffline_GetOfflineLogonTicket_Response::COffline_GetOfflineLogonTicket_Response(const COffline_GetOfflineLogonTicket_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_ticket()) {
    serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_GetOfflineLogonTicket_Response)
}

void COffline_GetOfflineLogonTicket_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_COffline_GetOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto.base);
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

COffline_GetOfflineLogonTicket_Response::~COffline_GetOfflineLogonTicket_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_GetOfflineLogonTicket_Response)
  SharedDtor();
}

void COffline_GetOfflineLogonTicket_Response::SharedDtor() {
  serialized_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void COffline_GetOfflineLogonTicket_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COffline_GetOfflineLogonTicket_Response& COffline_GetOfflineLogonTicket_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_COffline_GetOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void COffline_GetOfflineLogonTicket_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serialized_ticket_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* COffline_GetOfflineLogonTicket_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<COffline_GetOfflineLogonTicket_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes serialized_ticket = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serialized_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes signature = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool COffline_GetOfflineLogonTicket_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_GetOfflineLogonTicket_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_GetOfflineLogonTicket_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void COffline_GetOfflineLogonTicket_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_ticket(), output);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_GetOfflineLogonTicket_Response)
}

::google::protobuf::uint8* COffline_GetOfflineLogonTicket_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_ticket(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_GetOfflineLogonTicket_Response)
  return target;
}

size_t COffline_GetOfflineLogonTicket_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_ticket());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COffline_GetOfflineLogonTicket_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_GetOfflineLogonTicket_Response* source =
      ::google::protobuf::DynamicCastToGenerated<COffline_GetOfflineLogonTicket_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_GetOfflineLogonTicket_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_GetOfflineLogonTicket_Response)
    MergeFrom(*source);
  }
}

void COffline_GetOfflineLogonTicket_Response::MergeFrom(const COffline_GetOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
}

void COffline_GetOfflineLogonTicket_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_GetOfflineLogonTicket_Response::CopyFrom(const COffline_GetOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_GetOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetOfflineLogonTicket_Response::IsInitialized() const {
  return true;
}

void COffline_GetOfflineLogonTicket_Response::Swap(COffline_GetOfflineLogonTicket_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_GetOfflineLogonTicket_Response::InternalSwap(COffline_GetOfflineLogonTicket_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_ticket_.Swap(&other->serialized_ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata COffline_GetOfflineLogonTicket_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5foffline_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void COffline_GetUnsignedOfflineLogonTicket_Request::InitAsDefaultInstance() {
}
class COffline_GetUnsignedOfflineLogonTicket_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_GetUnsignedOfflineLogonTicket_Request::COffline_GetUnsignedOfflineLogonTicket_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
}
COffline_GetUnsignedOfflineLogonTicket_Request::COffline_GetUnsignedOfflineLogonTicket_Request(const COffline_GetUnsignedOfflineLogonTicket_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
}

void COffline_GetUnsignedOfflineLogonTicket_Request::SharedCtor() {
}

COffline_GetUnsignedOfflineLogonTicket_Request::~COffline_GetUnsignedOfflineLogonTicket_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  SharedDtor();
}

void COffline_GetUnsignedOfflineLogonTicket_Request::SharedDtor() {
}

void COffline_GetUnsignedOfflineLogonTicket_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COffline_GetUnsignedOfflineLogonTicket_Request& COffline_GetUnsignedOfflineLogonTicket_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_COffline_GetUnsignedOfflineLogonTicket_Request_steammessages_5foffline_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void COffline_GetUnsignedOfflineLogonTicket_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* COffline_GetUnsignedOfflineLogonTicket_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<COffline_GetUnsignedOfflineLogonTicket_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool COffline_GetUnsignedOfflineLogonTicket_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void COffline_GetUnsignedOfflineLogonTicket_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
}

::google::protobuf::uint8* COffline_GetUnsignedOfflineLogonTicket_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  return target;
}

size_t COffline_GetUnsignedOfflineLogonTicket_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COffline_GetUnsignedOfflineLogonTicket_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_GetUnsignedOfflineLogonTicket_Request* source =
      ::google::protobuf::DynamicCastToGenerated<COffline_GetUnsignedOfflineLogonTicket_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
    MergeFrom(*source);
  }
}

void COffline_GetUnsignedOfflineLogonTicket_Request::MergeFrom(const COffline_GetUnsignedOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void COffline_GetUnsignedOfflineLogonTicket_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_GetUnsignedOfflineLogonTicket_Request::CopyFrom(const COffline_GetUnsignedOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetUnsignedOfflineLogonTicket_Request::IsInitialized() const {
  return true;
}

void COffline_GetUnsignedOfflineLogonTicket_Request::Swap(COffline_GetUnsignedOfflineLogonTicket_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_GetUnsignedOfflineLogonTicket_Request::InternalSwap(COffline_GetUnsignedOfflineLogonTicket_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata COffline_GetUnsignedOfflineLogonTicket_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5foffline_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void COffline_OfflineLogonTicket::InitAsDefaultInstance() {
}
class COffline_OfflineLogonTicket::HasBitSetters {
 public:
  static void set_has_accountid(COffline_OfflineLogonTicket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rtime32_creation_time(COffline_OfflineLogonTicket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COffline_OfflineLogonTicket::kAccountidFieldNumber;
const int COffline_OfflineLogonTicket::kRtime32CreationTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_OfflineLogonTicket::COffline_OfflineLogonTicket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_OfflineLogonTicket)
}
COffline_OfflineLogonTicket::COffline_OfflineLogonTicket(const COffline_OfflineLogonTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime32_creation_time_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(rtime32_creation_time_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_OfflineLogonTicket)
}

void COffline_OfflineLogonTicket::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtime32_creation_time_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(rtime32_creation_time_));
}

COffline_OfflineLogonTicket::~COffline_OfflineLogonTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_OfflineLogonTicket)
  SharedDtor();
}

void COffline_OfflineLogonTicket::SharedDtor() {
}

void COffline_OfflineLogonTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COffline_OfflineLogonTicket& COffline_OfflineLogonTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_COffline_OfflineLogonTicket_steammessages_5foffline_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void COffline_OfflineLogonTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_OfflineLogonTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime32_creation_time_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(rtime32_creation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* COffline_OfflineLogonTicket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<COffline_OfflineLogonTicket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_accountid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 rtime32_creation_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_rtime32_creation_time(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool COffline_OfflineLogonTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_OfflineLogonTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_creation_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_rtime32_creation_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_creation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_OfflineLogonTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_OfflineLogonTicket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void COffline_OfflineLogonTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_OfflineLogonTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional fixed32 rtime32_creation_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->rtime32_creation_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_OfflineLogonTicket)
}

::google::protobuf::uint8* COffline_OfflineLogonTicket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_OfflineLogonTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional fixed32 rtime32_creation_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->rtime32_creation_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_OfflineLogonTicket)
  return target;
}

size_t COffline_OfflineLogonTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_OfflineLogonTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional fixed32 rtime32_creation_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COffline_OfflineLogonTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_OfflineLogonTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_OfflineLogonTicket* source =
      ::google::protobuf::DynamicCastToGenerated<COffline_OfflineLogonTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_OfflineLogonTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_OfflineLogonTicket)
    MergeFrom(*source);
  }
}

void COffline_OfflineLogonTicket::MergeFrom(const COffline_OfflineLogonTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_OfflineLogonTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rtime32_creation_time_ = from.rtime32_creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void COffline_OfflineLogonTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_OfflineLogonTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_OfflineLogonTicket::CopyFrom(const COffline_OfflineLogonTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_OfflineLogonTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_OfflineLogonTicket::IsInitialized() const {
  return true;
}

void COffline_OfflineLogonTicket::Swap(COffline_OfflineLogonTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_OfflineLogonTicket::InternalSwap(COffline_OfflineLogonTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accountid_, other->accountid_);
  swap(rtime32_creation_time_, other->rtime32_creation_time_);
}

::google::protobuf::Metadata COffline_OfflineLogonTicket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5foffline_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void COffline_GetUnsignedOfflineLogonTicket_Response::InitAsDefaultInstance() {
  ::proto::steam::_COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::proto::steam::COffline_OfflineLogonTicket*>(
      ::proto::steam::COffline_OfflineLogonTicket::internal_default_instance());
}
class COffline_GetUnsignedOfflineLogonTicket_Response::HasBitSetters {
 public:
  static const ::proto::steam::COffline_OfflineLogonTicket& ticket(const COffline_GetUnsignedOfflineLogonTicket_Response* msg);
  static void set_has_ticket(COffline_GetUnsignedOfflineLogonTicket_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::COffline_OfflineLogonTicket&
COffline_GetUnsignedOfflineLogonTicket_Response::HasBitSetters::ticket(const COffline_GetUnsignedOfflineLogonTicket_Response* msg) {
  return *msg->ticket_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COffline_GetUnsignedOfflineLogonTicket_Response::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COffline_GetUnsignedOfflineLogonTicket_Response::COffline_GetUnsignedOfflineLogonTicket_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
}
COffline_GetUnsignedOfflineLogonTicket_Response::COffline_GetUnsignedOfflineLogonTicket_Response(const COffline_GetUnsignedOfflineLogonTicket_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ticket()) {
    ticket_ = new ::proto::steam::COffline_OfflineLogonTicket(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
}

void COffline_GetUnsignedOfflineLogonTicket_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_COffline_GetUnsignedOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto.base);
  ticket_ = nullptr;
}

COffline_GetUnsignedOfflineLogonTicket_Response::~COffline_GetUnsignedOfflineLogonTicket_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  SharedDtor();
}

void COffline_GetUnsignedOfflineLogonTicket_Response::SharedDtor() {
  if (this != internal_default_instance()) delete ticket_;
}

void COffline_GetUnsignedOfflineLogonTicket_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COffline_GetUnsignedOfflineLogonTicket_Response& COffline_GetUnsignedOfflineLogonTicket_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_COffline_GetUnsignedOfflineLogonTicket_Response_steammessages_5foffline_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void COffline_GetUnsignedOfflineLogonTicket_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ticket_ != nullptr);
    ticket_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* COffline_GetUnsignedOfflineLogonTicket_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<COffline_GetUnsignedOfflineLogonTicket_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::COffline_OfflineLogonTicket::_InternalParse;
        object = msg->mutable_ticket();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool COffline_GetUnsignedOfflineLogonTicket_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void COffline_GetUnsignedOfflineLogonTicket_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ticket(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
}

::google::protobuf::uint8* COffline_GetUnsignedOfflineLogonTicket_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ticket(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  return target;
}

size_t COffline_GetUnsignedOfflineLogonTicket_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.steam.COffline_OfflineLogonTicket ticket = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COffline_GetUnsignedOfflineLogonTicket_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const COffline_GetUnsignedOfflineLogonTicket_Response* source =
      ::google::protobuf::DynamicCastToGenerated<COffline_GetUnsignedOfflineLogonTicket_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
    MergeFrom(*source);
  }
}

void COffline_GetUnsignedOfflineLogonTicket_Response::MergeFrom(const COffline_GetUnsignedOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ticket()) {
    mutable_ticket()->::proto::steam::COffline_OfflineLogonTicket::MergeFrom(from.ticket());
  }
}

void COffline_GetUnsignedOfflineLogonTicket_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COffline_GetUnsignedOfflineLogonTicket_Response::CopyFrom(const COffline_GetUnsignedOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.COffline_GetUnsignedOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetUnsignedOfflineLogonTicket_Response::IsInitialized() const {
  return true;
}

void COffline_GetUnsignedOfflineLogonTicket_Response::Swap(COffline_GetUnsignedOfflineLogonTicket_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COffline_GetUnsignedOfflineLogonTicket_Response::InternalSwap(COffline_GetUnsignedOfflineLogonTicket_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ticket_, other->ticket_);
}

::google::protobuf::Metadata COffline_GetUnsignedOfflineLogonTicket_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5foffline_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

Offline::~Offline() {}

const ::google::protobuf::ServiceDescriptor* Offline::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5foffline_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5foffline_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* Offline::GetDescriptor() {
  return descriptor();
}

void Offline::GetOfflineLogonTicket(::google::protobuf::RpcController* controller,
                         const ::proto::steam::COffline_GetOfflineLogonTicket_Request*,
                         ::proto::steam::COffline_GetOfflineLogonTicket_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetOfflineLogonTicket() not implemented.");
  done->Run();
}

void Offline::GetUnsignedOfflineLogonTicket(::google::protobuf::RpcController* controller,
                         const ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request*,
                         ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUnsignedOfflineLogonTicket() not implemented.");
  done->Run();
}

void Offline::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5foffline_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetOfflineLogonTicket(controller,
             ::google::protobuf::down_cast<const ::proto::steam::COffline_GetOfflineLogonTicket_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::COffline_GetOfflineLogonTicket_Response*>(response),
             done);
      break;
    case 1:
      GetUnsignedOfflineLogonTicket(controller,
             ::google::protobuf::down_cast<const ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Offline::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::COffline_GetOfflineLogonTicket_Request::default_instance();
    case 1:
      return ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Offline::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::COffline_GetOfflineLogonTicket_Response::default_instance();
    case 1:
      return ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Offline_Stub::Offline_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Offline_Stub::Offline_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Offline_Stub::~Offline_Stub() {
  if (owns_channel_) delete channel_;
}

void Offline_Stub::GetOfflineLogonTicket(::google::protobuf::RpcController* controller,
                              const ::proto::steam::COffline_GetOfflineLogonTicket_Request* request,
                              ::proto::steam::COffline_GetOfflineLogonTicket_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Offline_Stub::GetUnsignedOfflineLogonTicket(::google::protobuf::RpcController* controller,
                              const ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request* request,
                              ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::COffline_GetOfflineLogonTicket_Request* Arena::CreateMaybeMessage< ::proto::steam::COffline_GetOfflineLogonTicket_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::COffline_GetOfflineLogonTicket_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::COffline_GetOfflineLogonTicket_Response* Arena::CreateMaybeMessage< ::proto::steam::COffline_GetOfflineLogonTicket_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::COffline_GetOfflineLogonTicket_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request* Arena::CreateMaybeMessage< ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::COffline_OfflineLogonTicket* Arena::CreateMaybeMessage< ::proto::steam::COffline_OfflineLogonTicket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::COffline_OfflineLogonTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response* Arena::CreateMaybeMessage< ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::COffline_GetUnsignedOfflineLogonTicket_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
