// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient_discovery.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fremoteclient_5fdiscovery_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fremoteclient_5fdiscovery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_5fdiscovery_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5fremoteclient_5fdiscovery_2eproto();
namespace proto {
namespace steam {
class CMsgRemoteClientBroadcastClientIDDeconflict;
class CMsgRemoteClientBroadcastClientIDDeconflictDefaultTypeInternal;
extern CMsgRemoteClientBroadcastClientIDDeconflictDefaultTypeInternal _CMsgRemoteClientBroadcastClientIDDeconflict_default_instance_;
class CMsgRemoteClientBroadcastDiscovery;
class CMsgRemoteClientBroadcastDiscoveryDefaultTypeInternal;
extern CMsgRemoteClientBroadcastDiscoveryDefaultTypeInternal _CMsgRemoteClientBroadcastDiscovery_default_instance_;
class CMsgRemoteClientBroadcastHeader;
class CMsgRemoteClientBroadcastHeaderDefaultTypeInternal;
extern CMsgRemoteClientBroadcastHeaderDefaultTypeInternal _CMsgRemoteClientBroadcastHeader_default_instance_;
class CMsgRemoteClientBroadcastStatus;
class CMsgRemoteClientBroadcastStatusDefaultTypeInternal;
extern CMsgRemoteClientBroadcastStatusDefaultTypeInternal _CMsgRemoteClientBroadcastStatus_default_instance_;
class CMsgRemoteClientBroadcastStatus_User;
class CMsgRemoteClientBroadcastStatus_UserDefaultTypeInternal;
extern CMsgRemoteClientBroadcastStatus_UserDefaultTypeInternal _CMsgRemoteClientBroadcastStatus_User_default_instance_;
class CMsgRemoteDeviceAuthorizationCancelRequest;
class CMsgRemoteDeviceAuthorizationCancelRequestDefaultTypeInternal;
extern CMsgRemoteDeviceAuthorizationCancelRequestDefaultTypeInternal _CMsgRemoteDeviceAuthorizationCancelRequest_default_instance_;
class CMsgRemoteDeviceAuthorizationRequest;
class CMsgRemoteDeviceAuthorizationRequestDefaultTypeInternal;
extern CMsgRemoteDeviceAuthorizationRequestDefaultTypeInternal _CMsgRemoteDeviceAuthorizationRequest_default_instance_;
class CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket;
class CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_TicketDefaultTypeInternal;
extern CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_TicketDefaultTypeInternal _CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_default_instance_;
class CMsgRemoteDeviceAuthorizationResponse;
class CMsgRemoteDeviceAuthorizationResponseDefaultTypeInternal;
extern CMsgRemoteDeviceAuthorizationResponseDefaultTypeInternal _CMsgRemoteDeviceAuthorizationResponse_default_instance_;
class CMsgRemoteDeviceProofRequest;
class CMsgRemoteDeviceProofRequestDefaultTypeInternal;
extern CMsgRemoteDeviceProofRequestDefaultTypeInternal _CMsgRemoteDeviceProofRequest_default_instance_;
class CMsgRemoteDeviceProofResponse;
class CMsgRemoteDeviceProofResponseDefaultTypeInternal;
extern CMsgRemoteDeviceProofResponseDefaultTypeInternal _CMsgRemoteDeviceProofResponse_default_instance_;
class CMsgRemoteDeviceStreamingCancelRequest;
class CMsgRemoteDeviceStreamingCancelRequestDefaultTypeInternal;
extern CMsgRemoteDeviceStreamingCancelRequestDefaultTypeInternal _CMsgRemoteDeviceStreamingCancelRequest_default_instance_;
class CMsgRemoteDeviceStreamingRequest;
class CMsgRemoteDeviceStreamingRequestDefaultTypeInternal;
extern CMsgRemoteDeviceStreamingRequestDefaultTypeInternal _CMsgRemoteDeviceStreamingRequest_default_instance_;
class CMsgRemoteDeviceStreamingResponse;
class CMsgRemoteDeviceStreamingResponseDefaultTypeInternal;
extern CMsgRemoteDeviceStreamingResponseDefaultTypeInternal _CMsgRemoteDeviceStreamingResponse_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict>(Arena*);
template<> ::proto::steam::CMsgRemoteClientBroadcastDiscovery* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteClientBroadcastDiscovery>(Arena*);
template<> ::proto::steam::CMsgRemoteClientBroadcastHeader* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteClientBroadcastHeader>(Arena*);
template<> ::proto::steam::CMsgRemoteClientBroadcastStatus* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteClientBroadcastStatus>(Arena*);
template<> ::proto::steam::CMsgRemoteClientBroadcastStatus_User* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteClientBroadcastStatus_User>(Arena*);
template<> ::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest>(Arena*);
template<> ::proto::steam::CMsgRemoteDeviceAuthorizationRequest* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteDeviceAuthorizationRequest>(Arena*);
template<> ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket>(Arena*);
template<> ::proto::steam::CMsgRemoteDeviceAuthorizationResponse* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteDeviceAuthorizationResponse>(Arena*);
template<> ::proto::steam::CMsgRemoteDeviceProofRequest* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteDeviceProofRequest>(Arena*);
template<> ::proto::steam::CMsgRemoteDeviceProofResponse* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteDeviceProofResponse>(Arena*);
template<> ::proto::steam::CMsgRemoteDeviceStreamingCancelRequest* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteDeviceStreamingCancelRequest>(Arena*);
template<> ::proto::steam::CMsgRemoteDeviceStreamingRequest* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteDeviceStreamingRequest>(Arena*);
template<> ::proto::steam::CMsgRemoteDeviceStreamingResponse* Arena::CreateMaybeMessage<::proto::steam::CMsgRemoteDeviceStreamingResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

enum CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage {
  CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice = 0
};
bool CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_IsValid(int value);
const CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_EKeyEscrowUsage_MIN = CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice;
const CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_EKeyEscrowUsage_MAX = CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice;
const int CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_EKeyEscrowUsage_ARRAYSIZE = CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_EKeyEscrowUsage_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_descriptor();
inline const ::std::string& CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_Name(CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_descriptor(), value);
}
inline bool CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_Parse(
    const ::std::string& name, CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage>(
    CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_descriptor(), name, value);
}
enum ERemoteClientBroadcastMsg {
  k_ERemoteClientBroadcastMsgDiscovery = 0,
  k_ERemoteClientBroadcastMsgStatus = 1,
  k_ERemoteClientBroadcastMsgOffline = 2,
  k_ERemoteDeviceAuthorizationRequest = 3,
  k_ERemoteDeviceAuthorizationResponse = 4,
  k_ERemoteDeviceStreamingRequest = 5,
  k_ERemoteDeviceStreamingResponse = 6,
  k_ERemoteDeviceProofRequest = 7,
  k_ERemoteDeviceProofResponse = 8,
  k_ERemoteDeviceAuthorizationCancelRequest = 9,
  k_ERemoteDeviceStreamingCancelRequest = 10,
  k_ERemoteClientBroadcastMsgClientIDDeconflict = 11
};
bool ERemoteClientBroadcastMsg_IsValid(int value);
const ERemoteClientBroadcastMsg ERemoteClientBroadcastMsg_MIN = k_ERemoteClientBroadcastMsgDiscovery;
const ERemoteClientBroadcastMsg ERemoteClientBroadcastMsg_MAX = k_ERemoteClientBroadcastMsgClientIDDeconflict;
const int ERemoteClientBroadcastMsg_ARRAYSIZE = ERemoteClientBroadcastMsg_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERemoteClientBroadcastMsg_descriptor();
inline const ::std::string& ERemoteClientBroadcastMsg_Name(ERemoteClientBroadcastMsg value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERemoteClientBroadcastMsg_descriptor(), value);
}
inline bool ERemoteClientBroadcastMsg_Parse(
    const ::std::string& name, ERemoteClientBroadcastMsg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERemoteClientBroadcastMsg>(
    ERemoteClientBroadcastMsg_descriptor(), name, value);
}
enum ERemoteClientService {
  k_ERemoteClientServiceNone = 0,
  k_ERemoteClientServiceRemoteControl = 1,
  k_ERemoteClientServiceGameStreaming = 2,
  k_ERemoteClientServiceSiteLicense = 4,
  k_ERemoteClientServiceContentCache = 8
};
bool ERemoteClientService_IsValid(int value);
const ERemoteClientService ERemoteClientService_MIN = k_ERemoteClientServiceNone;
const ERemoteClientService ERemoteClientService_MAX = k_ERemoteClientServiceContentCache;
const int ERemoteClientService_ARRAYSIZE = ERemoteClientService_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERemoteClientService_descriptor();
inline const ::std::string& ERemoteClientService_Name(ERemoteClientService value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERemoteClientService_descriptor(), value);
}
inline bool ERemoteClientService_Parse(
    const ::std::string& name, ERemoteClientService* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERemoteClientService>(
    ERemoteClientService_descriptor(), name, value);
}
enum ERemoteDeviceAuthorizationResult {
  k_ERemoteDeviceAuthorizationSuccess = 0,
  k_ERemoteDeviceAuthorizationDenied = 1,
  k_ERemoteDeviceAuthorizationNotLoggedIn = 2,
  k_ERemoteDeviceAuthorizationOffline = 3,
  k_ERemoteDeviceAuthorizationBusy = 4,
  k_ERemoteDeviceAuthorizationInProgress = 5,
  k_ERemoteDeviceAuthorizationTimedOut = 6,
  k_ERemoteDeviceAuthorizationFailed = 7,
  k_ERemoteDeviceAuthorizationCanceled = 8
};
bool ERemoteDeviceAuthorizationResult_IsValid(int value);
const ERemoteDeviceAuthorizationResult ERemoteDeviceAuthorizationResult_MIN = k_ERemoteDeviceAuthorizationSuccess;
const ERemoteDeviceAuthorizationResult ERemoteDeviceAuthorizationResult_MAX = k_ERemoteDeviceAuthorizationCanceled;
const int ERemoteDeviceAuthorizationResult_ARRAYSIZE = ERemoteDeviceAuthorizationResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERemoteDeviceAuthorizationResult_descriptor();
inline const ::std::string& ERemoteDeviceAuthorizationResult_Name(ERemoteDeviceAuthorizationResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERemoteDeviceAuthorizationResult_descriptor(), value);
}
inline bool ERemoteDeviceAuthorizationResult_Parse(
    const ::std::string& name, ERemoteDeviceAuthorizationResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERemoteDeviceAuthorizationResult>(
    ERemoteDeviceAuthorizationResult_descriptor(), name, value);
}
enum ERemoteDeviceStreamingResult {
  k_ERemoteDeviceStreamingSuccess = 0,
  k_ERemoteDeviceStreamingUnauthorized = 1,
  k_ERemoteDeviceStreamingScreenLocked = 2,
  k_ERemoteDeviceStreamingFailed = 3,
  k_ERemoteDeviceStreamingBusy = 4,
  k_ERemoteDeviceStreamingInProgress = 5,
  k_ERemoteDeviceStreamingCanceled = 6,
  k_ERemoteDeviceStreamingDriversNotInstalled = 7,
  k_ERemoteDeviceStreamingDisabled = 8,
  k_ERemoteDeviceStreamingBroadcastingActive = 9,
  k_ERemoteDeviceStreamingVRActive = 10,
  k_ERemoteDeviceStreamingPINRequired = 11
};
bool ERemoteDeviceStreamingResult_IsValid(int value);
const ERemoteDeviceStreamingResult ERemoteDeviceStreamingResult_MIN = k_ERemoteDeviceStreamingSuccess;
const ERemoteDeviceStreamingResult ERemoteDeviceStreamingResult_MAX = k_ERemoteDeviceStreamingPINRequired;
const int ERemoteDeviceStreamingResult_ARRAYSIZE = ERemoteDeviceStreamingResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERemoteDeviceStreamingResult_descriptor();
inline const ::std::string& ERemoteDeviceStreamingResult_Name(ERemoteDeviceStreamingResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERemoteDeviceStreamingResult_descriptor(), value);
}
inline bool ERemoteDeviceStreamingResult_Parse(
    const ::std::string& name, ERemoteDeviceStreamingResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERemoteDeviceStreamingResult>(
    ERemoteDeviceStreamingResult_descriptor(), name, value);
}
// ===================================================================

class CMsgRemoteClientBroadcastHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteClientBroadcastHeader) */ {
 public:
  CMsgRemoteClientBroadcastHeader();
  virtual ~CMsgRemoteClientBroadcastHeader();

  CMsgRemoteClientBroadcastHeader(const CMsgRemoteClientBroadcastHeader& from);

  inline CMsgRemoteClientBroadcastHeader& operator=(const CMsgRemoteClientBroadcastHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteClientBroadcastHeader(CMsgRemoteClientBroadcastHeader&& from) noexcept
    : CMsgRemoteClientBroadcastHeader() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientBroadcastHeader& operator=(CMsgRemoteClientBroadcastHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteClientBroadcastHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteClientBroadcastHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientBroadcastHeader*>(
               &_CMsgRemoteClientBroadcastHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMsgRemoteClientBroadcastHeader* other);
  friend void swap(CMsgRemoteClientBroadcastHeader& a, CMsgRemoteClientBroadcastHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientBroadcastHeader* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastHeader>(nullptr);
  }

  CMsgRemoteClientBroadcastHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteClientBroadcastHeader& from);
  void MergeFrom(const CMsgRemoteClientBroadcastHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientBroadcastHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 client_id = 1;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::uint64 client_id() const;
  void set_client_id(::google::protobuf::uint64 value);

  // optional uint64 instance_id = 3;
  bool has_instance_id() const;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 3;
  ::google::protobuf::uint64 instance_id() const;
  void set_instance_id(::google::protobuf::uint64 value);

  // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  ::proto::steam::ERemoteClientBroadcastMsg msg_type() const;
  void set_msg_type(::proto::steam::ERemoteClientBroadcastMsg value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteClientBroadcastHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 client_id_;
  ::google::protobuf::uint64 instance_id_;
  int msg_type_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientBroadcastStatus_User final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteClientBroadcastStatus.User) */ {
 public:
  CMsgRemoteClientBroadcastStatus_User();
  virtual ~CMsgRemoteClientBroadcastStatus_User();

  CMsgRemoteClientBroadcastStatus_User(const CMsgRemoteClientBroadcastStatus_User& from);

  inline CMsgRemoteClientBroadcastStatus_User& operator=(const CMsgRemoteClientBroadcastStatus_User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteClientBroadcastStatus_User(CMsgRemoteClientBroadcastStatus_User&& from) noexcept
    : CMsgRemoteClientBroadcastStatus_User() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientBroadcastStatus_User& operator=(CMsgRemoteClientBroadcastStatus_User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteClientBroadcastStatus_User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteClientBroadcastStatus_User* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientBroadcastStatus_User*>(
               &_CMsgRemoteClientBroadcastStatus_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMsgRemoteClientBroadcastStatus_User* other);
  friend void swap(CMsgRemoteClientBroadcastStatus_User& a, CMsgRemoteClientBroadcastStatus_User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientBroadcastStatus_User* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastStatus_User>(nullptr);
  }

  CMsgRemoteClientBroadcastStatus_User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastStatus_User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteClientBroadcastStatus_User& from);
  void MergeFrom(const CMsgRemoteClientBroadcastStatus_User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientBroadcastStatus_User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional uint32 auth_key_id = 2;
  bool has_auth_key_id() const;
  void clear_auth_key_id();
  static const int kAuthKeyIdFieldNumber = 2;
  ::google::protobuf::uint32 auth_key_id() const;
  void set_auth_key_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteClientBroadcastStatus.User)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint32 auth_key_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientBroadcastStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteClientBroadcastStatus) */ {
 public:
  CMsgRemoteClientBroadcastStatus();
  virtual ~CMsgRemoteClientBroadcastStatus();

  CMsgRemoteClientBroadcastStatus(const CMsgRemoteClientBroadcastStatus& from);

  inline CMsgRemoteClientBroadcastStatus& operator=(const CMsgRemoteClientBroadcastStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteClientBroadcastStatus(CMsgRemoteClientBroadcastStatus&& from) noexcept
    : CMsgRemoteClientBroadcastStatus() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientBroadcastStatus& operator=(CMsgRemoteClientBroadcastStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteClientBroadcastStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteClientBroadcastStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientBroadcastStatus*>(
               &_CMsgRemoteClientBroadcastStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgRemoteClientBroadcastStatus* other);
  friend void swap(CMsgRemoteClientBroadcastStatus& a, CMsgRemoteClientBroadcastStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientBroadcastStatus* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastStatus>(nullptr);
  }

  CMsgRemoteClientBroadcastStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteClientBroadcastStatus& from);
  void MergeFrom(const CMsgRemoteClientBroadcastStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientBroadcastStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgRemoteClientBroadcastStatus_User User;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 9;
  ::proto::steam::CMsgRemoteClientBroadcastStatus_User* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientBroadcastStatus_User >*
      mutable_users();
  const ::proto::steam::CMsgRemoteClientBroadcastStatus_User& users(int index) const;
  ::proto::steam::CMsgRemoteClientBroadcastStatus_User* add_users();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientBroadcastStatus_User >&
      users() const;

  // repeated string mac_addresses = 15;
  int mac_addresses_size() const;
  void clear_mac_addresses();
  static const int kMacAddressesFieldNumber = 15;
  const ::std::string& mac_addresses(int index) const;
  ::std::string* mutable_mac_addresses(int index);
  void set_mac_addresses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mac_addresses(int index, ::std::string&& value);
  #endif
  void set_mac_addresses(int index, const char* value);
  void set_mac_addresses(int index, const char* value, size_t size);
  ::std::string* add_mac_addresses();
  void add_mac_addresses(const ::std::string& value);
  #if LANG_CXX11
  void add_mac_addresses(::std::string&& value);
  #endif
  void add_mac_addresses(const char* value);
  void add_mac_addresses(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& mac_addresses() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_mac_addresses();

  // optional string hostname = 4;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 4;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int32 min_version = 2;
  bool has_min_version() const;
  void clear_min_version();
  static const int kMinVersionFieldNumber = 2;
  ::google::protobuf::int32 min_version() const;
  void set_min_version(::google::protobuf::int32 value);

  // optional uint32 connect_port = 3;
  bool has_connect_port() const;
  void clear_connect_port();
  static const int kConnectPortFieldNumber = 3;
  ::google::protobuf::uint32 connect_port() const;
  void set_connect_port(::google::protobuf::uint32 value);

  // optional uint32 enabled_services = 6;
  bool has_enabled_services() const;
  void clear_enabled_services();
  static const int kEnabledServicesFieldNumber = 6;
  ::google::protobuf::uint32 enabled_services() const;
  void set_enabled_services(::google::protobuf::uint32 value);

  // optional int32 ostype = 7 [default = 0];
  bool has_ostype() const;
  void clear_ostype();
  static const int kOstypeFieldNumber = 7;
  ::google::protobuf::int32 ostype() const;
  void set_ostype(::google::protobuf::int32 value);

  // optional int32 euniverse = 11;
  bool has_euniverse() const;
  void clear_euniverse();
  static const int kEuniverseFieldNumber = 11;
  ::google::protobuf::int32 euniverse() const;
  void set_euniverse(::google::protobuf::int32 value);

  // optional uint32 timestamp = 12;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 12;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional bool is64bit = 8 [default = false];
  bool has_is64bit() const;
  void clear_is64bit();
  static const int kIs64BitFieldNumber = 8;
  bool is64bit() const;
  void set_is64bit(bool value);

  // optional bool screen_locked = 13;
  bool has_screen_locked() const;
  void clear_screen_locked();
  static const int kScreenLockedFieldNumber = 13;
  bool screen_locked() const;
  void set_screen_locked(bool value);

  // optional bool games_running = 14;
  bool has_games_running() const;
  void clear_games_running();
  static const int kGamesRunningFieldNumber = 14;
  bool games_running() const;
  void set_games_running(bool value);

  // optional bool broadcasting_active = 17;
  bool has_broadcasting_active() const;
  void clear_broadcasting_active();
  static const int kBroadcastingActiveFieldNumber = 17;
  bool broadcasting_active() const;
  void set_broadcasting_active(bool value);

  // optional uint32 download_lan_peer_group = 16;
  bool has_download_lan_peer_group() const;
  void clear_download_lan_peer_group();
  static const int kDownloadLanPeerGroupFieldNumber = 16;
  ::google::protobuf::uint32 download_lan_peer_group() const;
  void set_download_lan_peer_group(::google::protobuf::uint32 value);

  // optional bool vr_active = 18;
  bool has_vr_active() const;
  void clear_vr_active();
  static const int kVrActiveFieldNumber = 18;
  bool vr_active() const;
  void set_vr_active(bool value);

  // optional uint32 content_cache_port = 19;
  bool has_content_cache_port() const;
  void clear_content_cache_port();
  static const int kContentCachePortFieldNumber = 19;
  ::google::protobuf::uint32 content_cache_port() const;
  void set_content_cache_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteClientBroadcastStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientBroadcastStatus_User > users_;
  ::google::protobuf::RepeatedPtrField<::std::string> mac_addresses_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 min_version_;
  ::google::protobuf::uint32 connect_port_;
  ::google::protobuf::uint32 enabled_services_;
  ::google::protobuf::int32 ostype_;
  ::google::protobuf::int32 euniverse_;
  ::google::protobuf::uint32 timestamp_;
  bool is64bit_;
  bool screen_locked_;
  bool games_running_;
  bool broadcasting_active_;
  ::google::protobuf::uint32 download_lan_peer_group_;
  bool vr_active_;
  ::google::protobuf::uint32 content_cache_port_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientBroadcastDiscovery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteClientBroadcastDiscovery) */ {
 public:
  CMsgRemoteClientBroadcastDiscovery();
  virtual ~CMsgRemoteClientBroadcastDiscovery();

  CMsgRemoteClientBroadcastDiscovery(const CMsgRemoteClientBroadcastDiscovery& from);

  inline CMsgRemoteClientBroadcastDiscovery& operator=(const CMsgRemoteClientBroadcastDiscovery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteClientBroadcastDiscovery(CMsgRemoteClientBroadcastDiscovery&& from) noexcept
    : CMsgRemoteClientBroadcastDiscovery() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientBroadcastDiscovery& operator=(CMsgRemoteClientBroadcastDiscovery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteClientBroadcastDiscovery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteClientBroadcastDiscovery* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientBroadcastDiscovery*>(
               &_CMsgRemoteClientBroadcastDiscovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgRemoteClientBroadcastDiscovery* other);
  friend void swap(CMsgRemoteClientBroadcastDiscovery& a, CMsgRemoteClientBroadcastDiscovery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientBroadcastDiscovery* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastDiscovery>(nullptr);
  }

  CMsgRemoteClientBroadcastDiscovery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastDiscovery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteClientBroadcastDiscovery& from);
  void MergeFrom(const CMsgRemoteClientBroadcastDiscovery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientBroadcastDiscovery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 client_ids = 2;
  int client_ids_size() const;
  void clear_client_ids();
  static const int kClientIdsFieldNumber = 2;
  ::google::protobuf::uint64 client_ids(int index) const;
  void set_client_ids(int index, ::google::protobuf::uint64 value);
  void add_client_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      client_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_client_ids();

  // optional uint32 seq_num = 1;
  bool has_seq_num() const;
  void clear_seq_num();
  static const int kSeqNumFieldNumber = 1;
  ::google::protobuf::uint32 seq_num() const;
  void set_seq_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteClientBroadcastDiscovery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > client_ids_;
  ::google::protobuf::uint32 seq_num_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteClientBroadcastClientIDDeconflict final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict) */ {
 public:
  CMsgRemoteClientBroadcastClientIDDeconflict();
  virtual ~CMsgRemoteClientBroadcastClientIDDeconflict();

  CMsgRemoteClientBroadcastClientIDDeconflict(const CMsgRemoteClientBroadcastClientIDDeconflict& from);

  inline CMsgRemoteClientBroadcastClientIDDeconflict& operator=(const CMsgRemoteClientBroadcastClientIDDeconflict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteClientBroadcastClientIDDeconflict(CMsgRemoteClientBroadcastClientIDDeconflict&& from) noexcept
    : CMsgRemoteClientBroadcastClientIDDeconflict() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteClientBroadcastClientIDDeconflict& operator=(CMsgRemoteClientBroadcastClientIDDeconflict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteClientBroadcastClientIDDeconflict& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteClientBroadcastClientIDDeconflict* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteClientBroadcastClientIDDeconflict*>(
               &_CMsgRemoteClientBroadcastClientIDDeconflict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMsgRemoteClientBroadcastClientIDDeconflict* other);
  friend void swap(CMsgRemoteClientBroadcastClientIDDeconflict& a, CMsgRemoteClientBroadcastClientIDDeconflict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteClientBroadcastClientIDDeconflict* New() const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastClientIDDeconflict>(nullptr);
  }

  CMsgRemoteClientBroadcastClientIDDeconflict* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteClientBroadcastClientIDDeconflict>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteClientBroadcastClientIDDeconflict& from);
  void MergeFrom(const CMsgRemoteClientBroadcastClientIDDeconflict& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteClientBroadcastClientIDDeconflict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 client_ids = 2;
  int client_ids_size() const;
  void clear_client_ids();
  static const int kClientIdsFieldNumber = 2;
  ::google::protobuf::uint64 client_ids(int index) const;
  void set_client_ids(int index, ::google::protobuf::uint64 value);
  void add_client_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      client_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_client_ids();

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > client_ids_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket) */ {
 public:
  CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket();
  virtual ~CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket();

  CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from);

  inline CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& operator=(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket&& from) noexcept
    : CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& operator=(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket*>(
               &_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* other);
  friend void swap(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& a, CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* New() const final {
    return CreateMaybeMessage<CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket>(nullptr);
  }

  CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from);
  void MergeFrom(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes password = 1;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 1;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional bytes payload = 3;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // optional string device_name = 6;
  bool has_device_name() const;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 6;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_device_name(::std::string&& value);
  #endif
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // optional string device_model = 7;
  bool has_device_model() const;
  void clear_device_model();
  static const int kDeviceModelFieldNumber = 7;
  const ::std::string& device_model() const;
  void set_device_model(const ::std::string& value);
  #if LANG_CXX11
  void set_device_model(::std::string&& value);
  #endif
  void set_device_model(const char* value);
  void set_device_model(const char* value, size_t size);
  ::std::string* mutable_device_model();
  ::std::string* release_device_model();
  void set_allocated_device_model(::std::string* device_model);

  // optional string device_serial = 8;
  bool has_device_serial() const;
  void clear_device_serial();
  static const int kDeviceSerialFieldNumber = 8;
  const ::std::string& device_serial() const;
  void set_device_serial(const ::std::string& value);
  #if LANG_CXX11
  void set_device_serial(::std::string&& value);
  #endif
  void set_device_serial(const char* value);
  void set_device_serial(const char* value, size_t size);
  ::std::string* mutable_device_serial();
  ::std::string* release_device_serial();
  void set_allocated_device_serial(::std::string* device_serial);

  // optional uint64 identifier = 2;
  bool has_identifier() const;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  ::google::protobuf::uint64 identifier() const;
  void set_identifier(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  bool has_usage() const;
  void clear_usage();
  static const int kUsageFieldNumber = 5;
  ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage usage() const;
  void set_usage(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage value);

  // optional uint32 device_provisioning_id = 9;
  bool has_device_provisioning_id() const;
  void clear_device_provisioning_id();
  static const int kDeviceProvisioningIdFieldNumber = 9;
  ::google::protobuf::uint32 device_provisioning_id() const;
  void set_device_provisioning_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  ::google::protobuf::internal::ArenaStringPtr device_model_;
  ::google::protobuf::internal::ArenaStringPtr device_serial_;
  ::google::protobuf::uint64 identifier_;
  ::google::protobuf::uint32 timestamp_;
  int usage_;
  ::google::protobuf::uint32 device_provisioning_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteDeviceAuthorizationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteDeviceAuthorizationRequest) */ {
 public:
  CMsgRemoteDeviceAuthorizationRequest();
  virtual ~CMsgRemoteDeviceAuthorizationRequest();

  CMsgRemoteDeviceAuthorizationRequest(const CMsgRemoteDeviceAuthorizationRequest& from);

  inline CMsgRemoteDeviceAuthorizationRequest& operator=(const CMsgRemoteDeviceAuthorizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteDeviceAuthorizationRequest(CMsgRemoteDeviceAuthorizationRequest&& from) noexcept
    : CMsgRemoteDeviceAuthorizationRequest() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteDeviceAuthorizationRequest& operator=(CMsgRemoteDeviceAuthorizationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteDeviceAuthorizationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteDeviceAuthorizationRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteDeviceAuthorizationRequest*>(
               &_CMsgRemoteDeviceAuthorizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMsgRemoteDeviceAuthorizationRequest* other);
  friend void swap(CMsgRemoteDeviceAuthorizationRequest& a, CMsgRemoteDeviceAuthorizationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteDeviceAuthorizationRequest* New() const final {
    return CreateMaybeMessage<CMsgRemoteDeviceAuthorizationRequest>(nullptr);
  }

  CMsgRemoteDeviceAuthorizationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteDeviceAuthorizationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteDeviceAuthorizationRequest& from);
  void MergeFrom(const CMsgRemoteDeviceAuthorizationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteDeviceAuthorizationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket CKeyEscrow_Ticket;

  typedef CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage EKeyEscrowUsage;
  static const EKeyEscrowUsage k_EKeyEscrowUsageStreamingDevice =
    CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice;
  static inline bool EKeyEscrowUsage_IsValid(int value) {
    return CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_IsValid(value);
  }
  static const EKeyEscrowUsage EKeyEscrowUsage_MIN =
    CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_EKeyEscrowUsage_MIN;
  static const EKeyEscrowUsage EKeyEscrowUsage_MAX =
    CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_EKeyEscrowUsage_MAX;
  static const int EKeyEscrowUsage_ARRAYSIZE =
    CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_EKeyEscrowUsage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EKeyEscrowUsage_descriptor() {
    return CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_descriptor();
  }
  static inline const ::std::string& EKeyEscrowUsage_Name(EKeyEscrowUsage value) {
    return CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_Name(value);
  }
  static inline bool EKeyEscrowUsage_Parse(const ::std::string& name,
      EKeyEscrowUsage* value) {
    return CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes device_token = 1;
  bool has_device_token() const;
  void clear_device_token();
  static const int kDeviceTokenFieldNumber = 1;
  const ::std::string& device_token() const;
  void set_device_token(const ::std::string& value);
  #if LANG_CXX11
  void set_device_token(::std::string&& value);
  #endif
  void set_device_token(const char* value);
  void set_device_token(const void* value, size_t size);
  ::std::string* mutable_device_token();
  ::std::string* release_device_token();
  void set_allocated_device_token(::std::string* device_token);

  // optional string device_name = 2;
  bool has_device_name() const;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 2;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_device_name(::std::string&& value);
  #endif
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // required bytes encrypted_request = 3;
  bool has_encrypted_request() const;
  void clear_encrypted_request();
  static const int kEncryptedRequestFieldNumber = 3;
  const ::std::string& encrypted_request() const;
  void set_encrypted_request(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypted_request(::std::string&& value);
  #endif
  void set_encrypted_request(const char* value);
  void set_encrypted_request(const void* value, size_t size);
  ::std::string* mutable_encrypted_request();
  ::std::string* release_encrypted_request();
  void set_allocated_encrypted_request(::std::string* encrypted_request);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr device_token_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  ::google::protobuf::internal::ArenaStringPtr encrypted_request_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteDeviceAuthorizationCancelRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest) */ {
 public:
  CMsgRemoteDeviceAuthorizationCancelRequest();
  virtual ~CMsgRemoteDeviceAuthorizationCancelRequest();

  CMsgRemoteDeviceAuthorizationCancelRequest(const CMsgRemoteDeviceAuthorizationCancelRequest& from);

  inline CMsgRemoteDeviceAuthorizationCancelRequest& operator=(const CMsgRemoteDeviceAuthorizationCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteDeviceAuthorizationCancelRequest(CMsgRemoteDeviceAuthorizationCancelRequest&& from) noexcept
    : CMsgRemoteDeviceAuthorizationCancelRequest() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteDeviceAuthorizationCancelRequest& operator=(CMsgRemoteDeviceAuthorizationCancelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteDeviceAuthorizationCancelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteDeviceAuthorizationCancelRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteDeviceAuthorizationCancelRequest*>(
               &_CMsgRemoteDeviceAuthorizationCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CMsgRemoteDeviceAuthorizationCancelRequest* other);
  friend void swap(CMsgRemoteDeviceAuthorizationCancelRequest& a, CMsgRemoteDeviceAuthorizationCancelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteDeviceAuthorizationCancelRequest* New() const final {
    return CreateMaybeMessage<CMsgRemoteDeviceAuthorizationCancelRequest>(nullptr);
  }

  CMsgRemoteDeviceAuthorizationCancelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteDeviceAuthorizationCancelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteDeviceAuthorizationCancelRequest& from);
  void MergeFrom(const CMsgRemoteDeviceAuthorizationCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteDeviceAuthorizationCancelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteDeviceAuthorizationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteDeviceAuthorizationResponse) */ {
 public:
  CMsgRemoteDeviceAuthorizationResponse();
  virtual ~CMsgRemoteDeviceAuthorizationResponse();

  CMsgRemoteDeviceAuthorizationResponse(const CMsgRemoteDeviceAuthorizationResponse& from);

  inline CMsgRemoteDeviceAuthorizationResponse& operator=(const CMsgRemoteDeviceAuthorizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteDeviceAuthorizationResponse(CMsgRemoteDeviceAuthorizationResponse&& from) noexcept
    : CMsgRemoteDeviceAuthorizationResponse() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteDeviceAuthorizationResponse& operator=(CMsgRemoteDeviceAuthorizationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteDeviceAuthorizationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteDeviceAuthorizationResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteDeviceAuthorizationResponse*>(
               &_CMsgRemoteDeviceAuthorizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CMsgRemoteDeviceAuthorizationResponse* other);
  friend void swap(CMsgRemoteDeviceAuthorizationResponse& a, CMsgRemoteDeviceAuthorizationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteDeviceAuthorizationResponse* New() const final {
    return CreateMaybeMessage<CMsgRemoteDeviceAuthorizationResponse>(nullptr);
  }

  CMsgRemoteDeviceAuthorizationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteDeviceAuthorizationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteDeviceAuthorizationResponse& from);
  void MergeFrom(const CMsgRemoteDeviceAuthorizationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteDeviceAuthorizationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 2;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::steam::ERemoteDeviceAuthorizationResult result() const;
  void set_result(::proto::steam::ERemoteDeviceAuthorizationResult value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  int result_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteDeviceStreamingRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteDeviceStreamingRequest) */ {
 public:
  CMsgRemoteDeviceStreamingRequest();
  virtual ~CMsgRemoteDeviceStreamingRequest();

  CMsgRemoteDeviceStreamingRequest(const CMsgRemoteDeviceStreamingRequest& from);

  inline CMsgRemoteDeviceStreamingRequest& operator=(const CMsgRemoteDeviceStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteDeviceStreamingRequest(CMsgRemoteDeviceStreamingRequest&& from) noexcept
    : CMsgRemoteDeviceStreamingRequest() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteDeviceStreamingRequest& operator=(CMsgRemoteDeviceStreamingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteDeviceStreamingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteDeviceStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteDeviceStreamingRequest*>(
               &_CMsgRemoteDeviceStreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CMsgRemoteDeviceStreamingRequest* other);
  friend void swap(CMsgRemoteDeviceStreamingRequest& a, CMsgRemoteDeviceStreamingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteDeviceStreamingRequest* New() const final {
    return CreateMaybeMessage<CMsgRemoteDeviceStreamingRequest>(nullptr);
  }

  CMsgRemoteDeviceStreamingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteDeviceStreamingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteDeviceStreamingRequest& from);
  void MergeFrom(const CMsgRemoteDeviceStreamingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteDeviceStreamingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string device_version = 5;
  bool has_device_version() const;
  void clear_device_version();
  static const int kDeviceVersionFieldNumber = 5;
  const ::std::string& device_version() const;
  void set_device_version(const ::std::string& value);
  #if LANG_CXX11
  void set_device_version(::std::string&& value);
  #endif
  void set_device_version(const char* value);
  void set_device_version(const char* value, size_t size);
  ::std::string* mutable_device_version();
  ::std::string* release_device_version();
  void set_allocated_device_version(::std::string* device_version);

  // optional bytes device_token = 7;
  bool has_device_token() const;
  void clear_device_token();
  static const int kDeviceTokenFieldNumber = 7;
  const ::std::string& device_token() const;
  void set_device_token(const ::std::string& value);
  #if LANG_CXX11
  void set_device_token(::std::string&& value);
  #endif
  void set_device_token(const char* value);
  void set_device_token(const void* value, size_t size);
  ::std::string* mutable_device_token();
  ::std::string* release_device_token();
  void set_allocated_device_token(::std::string* device_token);

  // optional bytes pin = 8;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 8;
  const ::std::string& pin() const;
  void set_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_pin(::std::string&& value);
  #endif
  void set_pin(const char* value);
  void set_pin(const void* value, size_t size);
  ::std::string* mutable_pin();
  ::std::string* release_pin();
  void set_allocated_pin(::std::string* pin);

  // required uint32 request_id = 1;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // optional int32 maximum_resolution_x = 2;
  bool has_maximum_resolution_x() const;
  void clear_maximum_resolution_x();
  static const int kMaximumResolutionXFieldNumber = 2;
  ::google::protobuf::int32 maximum_resolution_x() const;
  void set_maximum_resolution_x(::google::protobuf::int32 value);

  // optional int32 maximum_resolution_y = 3;
  bool has_maximum_resolution_y() const;
  void clear_maximum_resolution_y();
  static const int kMaximumResolutionYFieldNumber = 3;
  ::google::protobuf::int32 maximum_resolution_y() const;
  void set_maximum_resolution_y(::google::protobuf::int32 value);

  // optional bool stream_desktop = 6;
  bool has_stream_desktop() const;
  void clear_stream_desktop();
  static const int kStreamDesktopFieldNumber = 6;
  bool stream_desktop() const;
  void set_stream_desktop(bool value);

  // optional bool network_test = 12;
  bool has_network_test() const;
  void clear_network_test();
  static const int kNetworkTestFieldNumber = 12;
  bool network_test() const;
  void set_network_test(bool value);

  // optional int32 audio_channel_count = 4 [default = 2];
  bool has_audio_channel_count() const;
  void clear_audio_channel_count();
  static const int kAudioChannelCountFieldNumber = 4;
  ::google::protobuf::int32 audio_channel_count() const;
  void set_audio_channel_count(::google::protobuf::int32 value);

  // optional bool enable_video_streaming = 9 [default = true];
  bool has_enable_video_streaming() const;
  void clear_enable_video_streaming();
  static const int kEnableVideoStreamingFieldNumber = 9;
  bool enable_video_streaming() const;
  void set_enable_video_streaming(bool value);

  // optional bool enable_audio_streaming = 10 [default = true];
  bool has_enable_audio_streaming() const;
  void clear_enable_audio_streaming();
  static const int kEnableAudioStreamingFieldNumber = 10;
  bool enable_audio_streaming() const;
  void set_enable_audio_streaming(bool value);

  // optional bool enable_input_streaming = 11 [default = true];
  bool has_enable_input_streaming() const;
  void clear_enable_input_streaming();
  static const int kEnableInputStreamingFieldNumber = 11;
  bool enable_input_streaming() const;
  void set_enable_input_streaming(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteDeviceStreamingRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr device_version_;
  ::google::protobuf::internal::ArenaStringPtr device_token_;
  ::google::protobuf::internal::ArenaStringPtr pin_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::int32 maximum_resolution_x_;
  ::google::protobuf::int32 maximum_resolution_y_;
  bool stream_desktop_;
  bool network_test_;
  ::google::protobuf::int32 audio_channel_count_;
  bool enable_video_streaming_;
  bool enable_audio_streaming_;
  bool enable_input_streaming_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteDeviceStreamingCancelRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteDeviceStreamingCancelRequest) */ {
 public:
  CMsgRemoteDeviceStreamingCancelRequest();
  virtual ~CMsgRemoteDeviceStreamingCancelRequest();

  CMsgRemoteDeviceStreamingCancelRequest(const CMsgRemoteDeviceStreamingCancelRequest& from);

  inline CMsgRemoteDeviceStreamingCancelRequest& operator=(const CMsgRemoteDeviceStreamingCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteDeviceStreamingCancelRequest(CMsgRemoteDeviceStreamingCancelRequest&& from) noexcept
    : CMsgRemoteDeviceStreamingCancelRequest() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteDeviceStreamingCancelRequest& operator=(CMsgRemoteDeviceStreamingCancelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteDeviceStreamingCancelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteDeviceStreamingCancelRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteDeviceStreamingCancelRequest*>(
               &_CMsgRemoteDeviceStreamingCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CMsgRemoteDeviceStreamingCancelRequest* other);
  friend void swap(CMsgRemoteDeviceStreamingCancelRequest& a, CMsgRemoteDeviceStreamingCancelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteDeviceStreamingCancelRequest* New() const final {
    return CreateMaybeMessage<CMsgRemoteDeviceStreamingCancelRequest>(nullptr);
  }

  CMsgRemoteDeviceStreamingCancelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteDeviceStreamingCancelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteDeviceStreamingCancelRequest& from);
  void MergeFrom(const CMsgRemoteDeviceStreamingCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteDeviceStreamingCancelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 request_id_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteDeviceStreamingResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteDeviceStreamingResponse) */ {
 public:
  CMsgRemoteDeviceStreamingResponse();
  virtual ~CMsgRemoteDeviceStreamingResponse();

  CMsgRemoteDeviceStreamingResponse(const CMsgRemoteDeviceStreamingResponse& from);

  inline CMsgRemoteDeviceStreamingResponse& operator=(const CMsgRemoteDeviceStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteDeviceStreamingResponse(CMsgRemoteDeviceStreamingResponse&& from) noexcept
    : CMsgRemoteDeviceStreamingResponse() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteDeviceStreamingResponse& operator=(CMsgRemoteDeviceStreamingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteDeviceStreamingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteDeviceStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteDeviceStreamingResponse*>(
               &_CMsgRemoteDeviceStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CMsgRemoteDeviceStreamingResponse* other);
  friend void swap(CMsgRemoteDeviceStreamingResponse& a, CMsgRemoteDeviceStreamingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteDeviceStreamingResponse* New() const final {
    return CreateMaybeMessage<CMsgRemoteDeviceStreamingResponse>(nullptr);
  }

  CMsgRemoteDeviceStreamingResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteDeviceStreamingResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteDeviceStreamingResponse& from);
  void MergeFrom(const CMsgRemoteDeviceStreamingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteDeviceStreamingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes encrypted_session_key = 4;
  bool has_encrypted_session_key() const;
  void clear_encrypted_session_key();
  static const int kEncryptedSessionKeyFieldNumber = 4;
  const ::std::string& encrypted_session_key() const;
  void set_encrypted_session_key(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypted_session_key(::std::string&& value);
  #endif
  void set_encrypted_session_key(const char* value);
  void set_encrypted_session_key(const void* value, size_t size);
  ::std::string* mutable_encrypted_session_key();
  ::std::string* release_encrypted_session_key();
  void set_allocated_encrypted_session_key(::std::string* encrypted_session_key);

  // required uint32 request_id = 1;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::proto::steam::ERemoteDeviceStreamingResult result() const;
  void set_result(::proto::steam::ERemoteDeviceStreamingResult value);

  // optional uint32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
  bool has_virtualhere_licensed_device_count_obsolete() const;
  void clear_virtualhere_licensed_device_count_obsolete();
  static const int kVirtualhereLicensedDeviceCountOBSOLETEFieldNumber = 5;
  ::google::protobuf::int32 virtualhere_licensed_device_count_obsolete() const;
  void set_virtualhere_licensed_device_count_obsolete(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteDeviceStreamingResponse)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr encrypted_session_key_;
  ::google::protobuf::uint32 request_id_;
  int result_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::int32 virtualhere_licensed_device_count_obsolete_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteDeviceProofRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteDeviceProofRequest) */ {
 public:
  CMsgRemoteDeviceProofRequest();
  virtual ~CMsgRemoteDeviceProofRequest();

  CMsgRemoteDeviceProofRequest(const CMsgRemoteDeviceProofRequest& from);

  inline CMsgRemoteDeviceProofRequest& operator=(const CMsgRemoteDeviceProofRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteDeviceProofRequest(CMsgRemoteDeviceProofRequest&& from) noexcept
    : CMsgRemoteDeviceProofRequest() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteDeviceProofRequest& operator=(CMsgRemoteDeviceProofRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteDeviceProofRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteDeviceProofRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteDeviceProofRequest*>(
               &_CMsgRemoteDeviceProofRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CMsgRemoteDeviceProofRequest* other);
  friend void swap(CMsgRemoteDeviceProofRequest& a, CMsgRemoteDeviceProofRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteDeviceProofRequest* New() const final {
    return CreateMaybeMessage<CMsgRemoteDeviceProofRequest>(nullptr);
  }

  CMsgRemoteDeviceProofRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteDeviceProofRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteDeviceProofRequest& from);
  void MergeFrom(const CMsgRemoteDeviceProofRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteDeviceProofRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes challenge = 1;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 1;
  const ::std::string& challenge() const;
  void set_challenge(const ::std::string& value);
  #if LANG_CXX11
  void set_challenge(::std::string&& value);
  #endif
  void set_challenge(const char* value);
  void set_challenge(const void* value, size_t size);
  ::std::string* mutable_challenge();
  ::std::string* release_challenge();
  void set_allocated_challenge(::std::string* challenge);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteDeviceProofRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr challenge_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class CMsgRemoteDeviceProofResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgRemoteDeviceProofResponse) */ {
 public:
  CMsgRemoteDeviceProofResponse();
  virtual ~CMsgRemoteDeviceProofResponse();

  CMsgRemoteDeviceProofResponse(const CMsgRemoteDeviceProofResponse& from);

  inline CMsgRemoteDeviceProofResponse& operator=(const CMsgRemoteDeviceProofResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgRemoteDeviceProofResponse(CMsgRemoteDeviceProofResponse&& from) noexcept
    : CMsgRemoteDeviceProofResponse() {
    *this = ::std::move(from);
  }

  inline CMsgRemoteDeviceProofResponse& operator=(CMsgRemoteDeviceProofResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgRemoteDeviceProofResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgRemoteDeviceProofResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgRemoteDeviceProofResponse*>(
               &_CMsgRemoteDeviceProofResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CMsgRemoteDeviceProofResponse* other);
  friend void swap(CMsgRemoteDeviceProofResponse& a, CMsgRemoteDeviceProofResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgRemoteDeviceProofResponse* New() const final {
    return CreateMaybeMessage<CMsgRemoteDeviceProofResponse>(nullptr);
  }

  CMsgRemoteDeviceProofResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRemoteDeviceProofResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgRemoteDeviceProofResponse& from);
  void MergeFrom(const CMsgRemoteDeviceProofResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRemoteDeviceProofResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgRemoteDeviceProofResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  friend struct ::TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgRemoteClientBroadcastHeader

// optional uint64 client_id = 1;
inline bool CMsgRemoteClientBroadcastHeader::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteClientBroadcastHeader::clear_client_id() {
  client_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgRemoteClientBroadcastHeader::client_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastHeader.client_id)
  return client_id_;
}
inline void CMsgRemoteClientBroadcastHeader::set_client_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastHeader.client_id)
}

// optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
inline bool CMsgRemoteClientBroadcastHeader::has_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgRemoteClientBroadcastHeader::clear_msg_type() {
  msg_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::proto::steam::ERemoteClientBroadcastMsg CMsgRemoteClientBroadcastHeader::msg_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastHeader.msg_type)
  return static_cast< ::proto::steam::ERemoteClientBroadcastMsg >(msg_type_);
}
inline void CMsgRemoteClientBroadcastHeader::set_msg_type(::proto::steam::ERemoteClientBroadcastMsg value) {
  assert(::proto::steam::ERemoteClientBroadcastMsg_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastHeader.msg_type)
}

// optional uint64 instance_id = 3;
inline bool CMsgRemoteClientBroadcastHeader::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRemoteClientBroadcastHeader::clear_instance_id() {
  instance_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgRemoteClientBroadcastHeader::instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastHeader.instance_id)
  return instance_id_;
}
inline void CMsgRemoteClientBroadcastHeader::set_instance_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastHeader.instance_id)
}

// -------------------------------------------------------------------

// CMsgRemoteClientBroadcastStatus_User

// optional fixed64 steamid = 1;
inline bool CMsgRemoteClientBroadcastStatus_User::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus_User::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgRemoteClientBroadcastStatus_User::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.User.steamid)
  return steamid_;
}
inline void CMsgRemoteClientBroadcastStatus_User::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.User.steamid)
}

// optional uint32 auth_key_id = 2;
inline bool CMsgRemoteClientBroadcastStatus_User::has_auth_key_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus_User::clear_auth_key_id() {
  auth_key_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus_User::auth_key_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.User.auth_key_id)
  return auth_key_id_;
}
inline void CMsgRemoteClientBroadcastStatus_User::set_auth_key_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.User.auth_key_id)
}

// -------------------------------------------------------------------

// CMsgRemoteClientBroadcastStatus

// optional int32 version = 1;
inline bool CMsgRemoteClientBroadcastStatus::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CMsgRemoteClientBroadcastStatus::version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.version)
  return version_;
}
inline void CMsgRemoteClientBroadcastStatus::set_version(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.version)
}

// optional int32 min_version = 2;
inline bool CMsgRemoteClientBroadcastStatus::has_min_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_min_version() {
  min_version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CMsgRemoteClientBroadcastStatus::min_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.min_version)
  return min_version_;
}
inline void CMsgRemoteClientBroadcastStatus::set_min_version(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  min_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.min_version)
}

// optional uint32 connect_port = 3;
inline bool CMsgRemoteClientBroadcastStatus::has_connect_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_connect_port() {
  connect_port_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus::connect_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.connect_port)
  return connect_port_;
}
inline void CMsgRemoteClientBroadcastStatus::set_connect_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  connect_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.connect_port)
}

// optional string hostname = 4;
inline bool CMsgRemoteClientBroadcastStatus::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgRemoteClientBroadcastStatus::hostname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
  return hostname_.GetNoArena();
}
inline void CMsgRemoteClientBroadcastStatus::set_hostname(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}
#if LANG_CXX11
inline void CMsgRemoteClientBroadcastStatus::set_hostname(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}
#endif
inline void CMsgRemoteClientBroadcastStatus::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}
inline void CMsgRemoteClientBroadcastStatus::set_hostname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}
inline ::std::string* CMsgRemoteClientBroadcastStatus::mutable_hostname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteClientBroadcastStatus::release_hostname() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
  if (!has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hostname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteClientBroadcastStatus::set_allocated_hostname(::std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}

// optional uint32 enabled_services = 6;
inline bool CMsgRemoteClientBroadcastStatus::has_enabled_services() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_enabled_services() {
  enabled_services_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus::enabled_services() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.enabled_services)
  return enabled_services_;
}
inline void CMsgRemoteClientBroadcastStatus::set_enabled_services(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  enabled_services_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.enabled_services)
}

// optional int32 ostype = 7 [default = 0];
inline bool CMsgRemoteClientBroadcastStatus::has_ostype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_ostype() {
  ostype_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 CMsgRemoteClientBroadcastStatus::ostype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.ostype)
  return ostype_;
}
inline void CMsgRemoteClientBroadcastStatus::set_ostype(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  ostype_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.ostype)
}

// optional bool is64bit = 8 [default = false];
inline bool CMsgRemoteClientBroadcastStatus::has_is64bit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_is64bit() {
  is64bit_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgRemoteClientBroadcastStatus::is64bit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.is64bit)
  return is64bit_;
}
inline void CMsgRemoteClientBroadcastStatus::set_is64bit(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is64bit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.is64bit)
}

// repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
inline int CMsgRemoteClientBroadcastStatus::users_size() const {
  return users_.size();
}
inline void CMsgRemoteClientBroadcastStatus::clear_users() {
  users_.Clear();
}
inline ::proto::steam::CMsgRemoteClientBroadcastStatus_User* CMsgRemoteClientBroadcastStatus::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientBroadcastStatus_User >*
CMsgRemoteClientBroadcastStatus::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return &users_;
}
inline const ::proto::steam::CMsgRemoteClientBroadcastStatus_User& CMsgRemoteClientBroadcastStatus::users(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return users_.Get(index);
}
inline ::proto::steam::CMsgRemoteClientBroadcastStatus_User* CMsgRemoteClientBroadcastStatus::add_users() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientBroadcastStatus_User >&
CMsgRemoteClientBroadcastStatus::users() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return users_;
}

// optional int32 euniverse = 11;
inline bool CMsgRemoteClientBroadcastStatus::has_euniverse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_euniverse() {
  euniverse_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 CMsgRemoteClientBroadcastStatus::euniverse() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.euniverse)
  return euniverse_;
}
inline void CMsgRemoteClientBroadcastStatus::set_euniverse(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  euniverse_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.euniverse)
}

// optional uint32 timestamp = 12;
inline bool CMsgRemoteClientBroadcastStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.timestamp)
  return timestamp_;
}
inline void CMsgRemoteClientBroadcastStatus::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.timestamp)
}

// optional bool screen_locked = 13;
inline bool CMsgRemoteClientBroadcastStatus::has_screen_locked() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_screen_locked() {
  screen_locked_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgRemoteClientBroadcastStatus::screen_locked() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.screen_locked)
  return screen_locked_;
}
inline void CMsgRemoteClientBroadcastStatus::set_screen_locked(bool value) {
  _has_bits_[0] |= 0x00000200u;
  screen_locked_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.screen_locked)
}

// optional bool games_running = 14;
inline bool CMsgRemoteClientBroadcastStatus::has_games_running() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_games_running() {
  games_running_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgRemoteClientBroadcastStatus::games_running() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.games_running)
  return games_running_;
}
inline void CMsgRemoteClientBroadcastStatus::set_games_running(bool value) {
  _has_bits_[0] |= 0x00000400u;
  games_running_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.games_running)
}

// repeated string mac_addresses = 15;
inline int CMsgRemoteClientBroadcastStatus::mac_addresses_size() const {
  return mac_addresses_.size();
}
inline void CMsgRemoteClientBroadcastStatus::clear_mac_addresses() {
  mac_addresses_.Clear();
}
inline const ::std::string& CMsgRemoteClientBroadcastStatus::mac_addresses(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return mac_addresses_.Get(index);
}
inline ::std::string* CMsgRemoteClientBroadcastStatus::mutable_mac_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return mac_addresses_.Mutable(index);
}
inline void CMsgRemoteClientBroadcastStatus::set_mac_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  mac_addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CMsgRemoteClientBroadcastStatus::set_mac_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  mac_addresses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CMsgRemoteClientBroadcastStatus::set_mac_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mac_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
inline void CMsgRemoteClientBroadcastStatus::set_mac_addresses(int index, const char* value, size_t size) {
  mac_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
inline ::std::string* CMsgRemoteClientBroadcastStatus::add_mac_addresses() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return mac_addresses_.Add();
}
inline void CMsgRemoteClientBroadcastStatus::add_mac_addresses(const ::std::string& value) {
  mac_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
#if LANG_CXX11
inline void CMsgRemoteClientBroadcastStatus::add_mac_addresses(::std::string&& value) {
  mac_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
#endif
inline void CMsgRemoteClientBroadcastStatus::add_mac_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mac_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
inline void CMsgRemoteClientBroadcastStatus::add_mac_addresses(const char* value, size_t size) {
  mac_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CMsgRemoteClientBroadcastStatus::mac_addresses() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return mac_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CMsgRemoteClientBroadcastStatus::mutable_mac_addresses() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return &mac_addresses_;
}

// optional uint32 download_lan_peer_group = 16;
inline bool CMsgRemoteClientBroadcastStatus::has_download_lan_peer_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_download_lan_peer_group() {
  download_lan_peer_group_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus::download_lan_peer_group() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.download_lan_peer_group)
  return download_lan_peer_group_;
}
inline void CMsgRemoteClientBroadcastStatus::set_download_lan_peer_group(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  download_lan_peer_group_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.download_lan_peer_group)
}

// optional bool broadcasting_active = 17;
inline bool CMsgRemoteClientBroadcastStatus::has_broadcasting_active() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_broadcasting_active() {
  broadcasting_active_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgRemoteClientBroadcastStatus::broadcasting_active() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.broadcasting_active)
  return broadcasting_active_;
}
inline void CMsgRemoteClientBroadcastStatus::set_broadcasting_active(bool value) {
  _has_bits_[0] |= 0x00000800u;
  broadcasting_active_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.broadcasting_active)
}

// optional bool vr_active = 18;
inline bool CMsgRemoteClientBroadcastStatus::has_vr_active() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_vr_active() {
  vr_active_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgRemoteClientBroadcastStatus::vr_active() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.vr_active)
  return vr_active_;
}
inline void CMsgRemoteClientBroadcastStatus::set_vr_active(bool value) {
  _has_bits_[0] |= 0x00002000u;
  vr_active_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.vr_active)
}

// optional uint32 content_cache_port = 19;
inline bool CMsgRemoteClientBroadcastStatus::has_content_cache_port() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgRemoteClientBroadcastStatus::clear_content_cache_port() {
  content_cache_port_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus::content_cache_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.content_cache_port)
  return content_cache_port_;
}
inline void CMsgRemoteClientBroadcastStatus::set_content_cache_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  content_cache_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.content_cache_port)
}

// -------------------------------------------------------------------

// CMsgRemoteClientBroadcastDiscovery

// optional uint32 seq_num = 1;
inline bool CMsgRemoteClientBroadcastDiscovery::has_seq_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteClientBroadcastDiscovery::clear_seq_num() {
  seq_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgRemoteClientBroadcastDiscovery::seq_num() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastDiscovery.seq_num)
  return seq_num_;
}
inline void CMsgRemoteClientBroadcastDiscovery::set_seq_num(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastDiscovery.seq_num)
}

// repeated uint64 client_ids = 2;
inline int CMsgRemoteClientBroadcastDiscovery::client_ids_size() const {
  return client_ids_.size();
}
inline void CMsgRemoteClientBroadcastDiscovery::clear_client_ids() {
  client_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgRemoteClientBroadcastDiscovery::client_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
  return client_ids_.Get(index);
}
inline void CMsgRemoteClientBroadcastDiscovery::set_client_ids(int index, ::google::protobuf::uint64 value) {
  client_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
}
inline void CMsgRemoteClientBroadcastDiscovery::add_client_ids(::google::protobuf::uint64 value) {
  client_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgRemoteClientBroadcastDiscovery::client_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
  return client_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgRemoteClientBroadcastDiscovery::mutable_client_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
  return &client_ids_;
}

// -------------------------------------------------------------------

// CMsgRemoteClientBroadcastClientIDDeconflict

// repeated uint64 client_ids = 2;
inline int CMsgRemoteClientBroadcastClientIDDeconflict::client_ids_size() const {
  return client_ids_.size();
}
inline void CMsgRemoteClientBroadcastClientIDDeconflict::clear_client_ids() {
  client_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgRemoteClientBroadcastClientIDDeconflict::client_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict.client_ids)
  return client_ids_.Get(index);
}
inline void CMsgRemoteClientBroadcastClientIDDeconflict::set_client_ids(int index, ::google::protobuf::uint64 value) {
  client_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict.client_ids)
}
inline void CMsgRemoteClientBroadcastClientIDDeconflict::add_client_ids(::google::protobuf::uint64 value) {
  client_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict.client_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgRemoteClientBroadcastClientIDDeconflict::client_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict.client_ids)
  return client_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgRemoteClientBroadcastClientIDDeconflict::mutable_client_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict.client_ids)
  return &client_ids_;
}

// -------------------------------------------------------------------

// CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket

// optional bytes password = 1;
inline bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::password() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
  return password_.GetNoArena();
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_password(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_password(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}
#endif
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_password(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_password() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
  if (!has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}

// optional uint64 identifier = 2;
inline bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_identifier() {
  identifier_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::identifier() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.identifier)
  return identifier_;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_identifier(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  identifier_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.identifier)
}

// optional bytes payload = 3;
inline bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::payload() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
  return payload_.GetNoArena();
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_payload(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_payload(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}
#endif
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_payload(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_payload() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_payload() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
  if (!has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return payload_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_payload(::std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}

// optional uint32 timestamp = 4;
inline bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.timestamp)
  return timestamp_;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.timestamp)
}

// optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
inline bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_usage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_usage() {
  usage_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::usage() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.usage)
  return static_cast< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage >(usage_);
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_usage(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage value) {
  assert(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  usage_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.usage)
}

// optional string device_name = 6;
inline bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::device_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
  return device_name_.GetNoArena();
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}
#endif
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_device_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_device_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
  if (!has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return device_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_device_name(::std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}

// optional string device_model = 7;
inline bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_device_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_device_model() {
  device_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::device_model() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
  return device_model_.GetNoArena();
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_model(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_model(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  device_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}
#endif
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_device_model() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
  return device_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_device_model() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
  if (!has_device_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return device_model_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_device_model(::std::string* device_model) {
  if (device_model != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  device_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_model);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}

// optional string device_serial = 8;
inline bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_device_serial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_device_serial() {
  device_serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::device_serial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
  return device_serial_.GetNoArena();
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_serial(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_serial(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  device_serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}
#endif
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_serial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_serial(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_device_serial() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
  return device_serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_device_serial() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
  if (!has_device_serial()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return device_serial_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_device_serial(::std::string* device_serial) {
  if (device_serial != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  device_serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_serial);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}

// optional uint32 device_provisioning_id = 9;
inline bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_device_provisioning_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_device_provisioning_id() {
  device_provisioning_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::device_provisioning_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_provisioning_id)
  return device_provisioning_id_;
}
inline void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_provisioning_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  device_provisioning_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_provisioning_id)
}

// -------------------------------------------------------------------

// CMsgRemoteDeviceAuthorizationRequest

// required bytes device_token = 1;
inline bool CMsgRemoteDeviceAuthorizationRequest::has_device_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgRemoteDeviceAuthorizationRequest::device_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
  return device_token_.GetNoArena();
}
inline void CMsgRemoteDeviceAuthorizationRequest::set_device_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceAuthorizationRequest::set_device_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}
#endif
inline void CMsgRemoteDeviceAuthorizationRequest::set_device_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}
inline void CMsgRemoteDeviceAuthorizationRequest::set_device_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest::mutable_device_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest::release_device_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
  if (!has_device_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceAuthorizationRequest::set_allocated_device_token(::std::string* device_token) {
  if (device_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}

// optional string device_name = 2;
inline bool CMsgRemoteDeviceAuthorizationRequest::has_device_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgRemoteDeviceAuthorizationRequest::device_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
  return device_name_.GetNoArena();
}
inline void CMsgRemoteDeviceAuthorizationRequest::set_device_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceAuthorizationRequest::set_device_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}
#endif
inline void CMsgRemoteDeviceAuthorizationRequest::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}
inline void CMsgRemoteDeviceAuthorizationRequest::set_device_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest::mutable_device_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest::release_device_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
  if (!has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return device_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceAuthorizationRequest::set_allocated_device_name(::std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}

// required bytes encrypted_request = 3;
inline bool CMsgRemoteDeviceAuthorizationRequest::has_encrypted_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationRequest::clear_encrypted_request() {
  encrypted_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgRemoteDeviceAuthorizationRequest::encrypted_request() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
  return encrypted_request_.GetNoArena();
}
inline void CMsgRemoteDeviceAuthorizationRequest::set_encrypted_request(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  encrypted_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceAuthorizationRequest::set_encrypted_request(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  encrypted_request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}
#endif
inline void CMsgRemoteDeviceAuthorizationRequest::set_encrypted_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  encrypted_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}
inline void CMsgRemoteDeviceAuthorizationRequest::set_encrypted_request(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  encrypted_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest::mutable_encrypted_request() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
  return encrypted_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceAuthorizationRequest::release_encrypted_request() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
  if (!has_encrypted_request()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return encrypted_request_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceAuthorizationRequest::set_allocated_encrypted_request(::std::string* encrypted_request) {
  if (encrypted_request != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  encrypted_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_request);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}

// -------------------------------------------------------------------

// CMsgRemoteDeviceAuthorizationCancelRequest

// -------------------------------------------------------------------

// CMsgRemoteDeviceAuthorizationResponse

// required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
inline bool CMsgRemoteDeviceAuthorizationResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::steam::ERemoteDeviceAuthorizationResult CMsgRemoteDeviceAuthorizationResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationResponse.result)
  return static_cast< ::proto::steam::ERemoteDeviceAuthorizationResult >(result_);
}
inline void CMsgRemoteDeviceAuthorizationResponse::set_result(::proto::steam::ERemoteDeviceAuthorizationResult value) {
  assert(::proto::steam::ERemoteDeviceAuthorizationResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationResponse.result)
}

// optional fixed64 steamid = 2;
inline bool CMsgRemoteDeviceAuthorizationResponse::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteDeviceAuthorizationResponse::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgRemoteDeviceAuthorizationResponse::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationResponse.steamid)
  return steamid_;
}
inline void CMsgRemoteDeviceAuthorizationResponse::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationResponse.steamid)
}

// -------------------------------------------------------------------

// CMsgRemoteDeviceStreamingRequest

// required uint32 request_id = 1;
inline bool CMsgRemoteDeviceStreamingRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgRemoteDeviceStreamingRequest::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.request_id)
  return request_id_;
}
inline void CMsgRemoteDeviceStreamingRequest::set_request_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.request_id)
}

// optional int32 maximum_resolution_x = 2;
inline bool CMsgRemoteDeviceStreamingRequest::has_maximum_resolution_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_maximum_resolution_x() {
  maximum_resolution_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 CMsgRemoteDeviceStreamingRequest::maximum_resolution_x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.maximum_resolution_x)
  return maximum_resolution_x_;
}
inline void CMsgRemoteDeviceStreamingRequest::set_maximum_resolution_x(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  maximum_resolution_x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.maximum_resolution_x)
}

// optional int32 maximum_resolution_y = 3;
inline bool CMsgRemoteDeviceStreamingRequest::has_maximum_resolution_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_maximum_resolution_y() {
  maximum_resolution_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 CMsgRemoteDeviceStreamingRequest::maximum_resolution_y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.maximum_resolution_y)
  return maximum_resolution_y_;
}
inline void CMsgRemoteDeviceStreamingRequest::set_maximum_resolution_y(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  maximum_resolution_y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.maximum_resolution_y)
}

// optional int32 audio_channel_count = 4 [default = 2];
inline bool CMsgRemoteDeviceStreamingRequest::has_audio_channel_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_audio_channel_count() {
  audio_channel_count_ = 2;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 CMsgRemoteDeviceStreamingRequest::audio_channel_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.audio_channel_count)
  return audio_channel_count_;
}
inline void CMsgRemoteDeviceStreamingRequest::set_audio_channel_count(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  audio_channel_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.audio_channel_count)
}

// optional string device_version = 5;
inline bool CMsgRemoteDeviceStreamingRequest::has_device_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_device_version() {
  device_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgRemoteDeviceStreamingRequest::device_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
  return device_version_.GetNoArena();
}
inline void CMsgRemoteDeviceStreamingRequest::set_device_version(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceStreamingRequest::set_device_version(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}
#endif
inline void CMsgRemoteDeviceStreamingRequest::set_device_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}
inline void CMsgRemoteDeviceStreamingRequest::set_device_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}
inline ::std::string* CMsgRemoteDeviceStreamingRequest::mutable_device_version() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
  return device_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceStreamingRequest::release_device_version() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
  if (!has_device_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceStreamingRequest::set_allocated_device_version(::std::string* device_version) {
  if (device_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_version);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}

// optional bool stream_desktop = 6;
inline bool CMsgRemoteDeviceStreamingRequest::has_stream_desktop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_stream_desktop() {
  stream_desktop_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgRemoteDeviceStreamingRequest::stream_desktop() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.stream_desktop)
  return stream_desktop_;
}
inline void CMsgRemoteDeviceStreamingRequest::set_stream_desktop(bool value) {
  _has_bits_[0] |= 0x00000040u;
  stream_desktop_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.stream_desktop)
}

// optional bytes device_token = 7;
inline bool CMsgRemoteDeviceStreamingRequest::has_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgRemoteDeviceStreamingRequest::device_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
  return device_token_.GetNoArena();
}
inline void CMsgRemoteDeviceStreamingRequest::set_device_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceStreamingRequest::set_device_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  device_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}
#endif
inline void CMsgRemoteDeviceStreamingRequest::set_device_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}
inline void CMsgRemoteDeviceStreamingRequest::set_device_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}
inline ::std::string* CMsgRemoteDeviceStreamingRequest::mutable_device_token() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceStreamingRequest::release_device_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
  if (!has_device_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return device_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceStreamingRequest::set_allocated_device_token(::std::string* device_token) {
  if (device_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}

// optional bytes pin = 8;
inline bool CMsgRemoteDeviceStreamingRequest::has_pin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_pin() {
  pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgRemoteDeviceStreamingRequest::pin() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
  return pin_.GetNoArena();
}
inline void CMsgRemoteDeviceStreamingRequest::set_pin(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceStreamingRequest::set_pin(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}
#endif
inline void CMsgRemoteDeviceStreamingRequest::set_pin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}
inline void CMsgRemoteDeviceStreamingRequest::set_pin(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}
inline ::std::string* CMsgRemoteDeviceStreamingRequest::mutable_pin() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
  return pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceStreamingRequest::release_pin() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
  if (!has_pin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return pin_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceStreamingRequest::set_allocated_pin(::std::string* pin) {
  if (pin != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pin);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}

// optional bool enable_video_streaming = 9 [default = true];
inline bool CMsgRemoteDeviceStreamingRequest::has_enable_video_streaming() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_enable_video_streaming() {
  enable_video_streaming_ = true;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgRemoteDeviceStreamingRequest::enable_video_streaming() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_video_streaming)
  return enable_video_streaming_;
}
inline void CMsgRemoteDeviceStreamingRequest::set_enable_video_streaming(bool value) {
  _has_bits_[0] |= 0x00000200u;
  enable_video_streaming_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_video_streaming)
}

// optional bool enable_audio_streaming = 10 [default = true];
inline bool CMsgRemoteDeviceStreamingRequest::has_enable_audio_streaming() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_enable_audio_streaming() {
  enable_audio_streaming_ = true;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgRemoteDeviceStreamingRequest::enable_audio_streaming() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_audio_streaming)
  return enable_audio_streaming_;
}
inline void CMsgRemoteDeviceStreamingRequest::set_enable_audio_streaming(bool value) {
  _has_bits_[0] |= 0x00000400u;
  enable_audio_streaming_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_audio_streaming)
}

// optional bool enable_input_streaming = 11 [default = true];
inline bool CMsgRemoteDeviceStreamingRequest::has_enable_input_streaming() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_enable_input_streaming() {
  enable_input_streaming_ = true;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgRemoteDeviceStreamingRequest::enable_input_streaming() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_input_streaming)
  return enable_input_streaming_;
}
inline void CMsgRemoteDeviceStreamingRequest::set_enable_input_streaming(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enable_input_streaming_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_input_streaming)
}

// optional bool network_test = 12;
inline bool CMsgRemoteDeviceStreamingRequest::has_network_test() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgRemoteDeviceStreamingRequest::clear_network_test() {
  network_test_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgRemoteDeviceStreamingRequest::network_test() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.network_test)
  return network_test_;
}
inline void CMsgRemoteDeviceStreamingRequest::set_network_test(bool value) {
  _has_bits_[0] |= 0x00000080u;
  network_test_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.network_test)
}

// -------------------------------------------------------------------

// CMsgRemoteDeviceStreamingCancelRequest

// required uint32 request_id = 1;
inline bool CMsgRemoteDeviceStreamingCancelRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteDeviceStreamingCancelRequest::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgRemoteDeviceStreamingCancelRequest::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingCancelRequest.request_id)
  return request_id_;
}
inline void CMsgRemoteDeviceStreamingCancelRequest::set_request_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingCancelRequest.request_id)
}

// -------------------------------------------------------------------

// CMsgRemoteDeviceStreamingResponse

// required uint32 request_id = 1;
inline bool CMsgRemoteDeviceStreamingResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgRemoteDeviceStreamingResponse::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgRemoteDeviceStreamingResponse::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.request_id)
  return request_id_;
}
inline void CMsgRemoteDeviceStreamingResponse::set_request_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.request_id)
}

// required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
inline bool CMsgRemoteDeviceStreamingResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgRemoteDeviceStreamingResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::proto::steam::ERemoteDeviceStreamingResult CMsgRemoteDeviceStreamingResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.result)
  return static_cast< ::proto::steam::ERemoteDeviceStreamingResult >(result_);
}
inline void CMsgRemoteDeviceStreamingResponse::set_result(::proto::steam::ERemoteDeviceStreamingResult value) {
  assert(::proto::steam::ERemoteDeviceStreamingResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.result)
}

// optional uint32 port = 3;
inline bool CMsgRemoteDeviceStreamingResponse::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgRemoteDeviceStreamingResponse::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgRemoteDeviceStreamingResponse::port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.port)
  return port_;
}
inline void CMsgRemoteDeviceStreamingResponse::set_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.port)
}

// optional bytes encrypted_session_key = 4;
inline bool CMsgRemoteDeviceStreamingResponse::has_encrypted_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteDeviceStreamingResponse::clear_encrypted_session_key() {
  encrypted_session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgRemoteDeviceStreamingResponse::encrypted_session_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
  return encrypted_session_key_.GetNoArena();
}
inline void CMsgRemoteDeviceStreamingResponse::set_encrypted_session_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceStreamingResponse::set_encrypted_session_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_session_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}
#endif
inline void CMsgRemoteDeviceStreamingResponse::set_encrypted_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encrypted_session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}
inline void CMsgRemoteDeviceStreamingResponse::set_encrypted_session_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}
inline ::std::string* CMsgRemoteDeviceStreamingResponse::mutable_encrypted_session_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
  return encrypted_session_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceStreamingResponse::release_encrypted_session_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
  if (!has_encrypted_session_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encrypted_session_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceStreamingResponse::set_allocated_encrypted_session_key(::std::string* encrypted_session_key) {
  if (encrypted_session_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_session_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_session_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}

// optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
inline bool CMsgRemoteDeviceStreamingResponse::has_virtualhere_licensed_device_count_obsolete() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgRemoteDeviceStreamingResponse::clear_virtualhere_licensed_device_count_obsolete() {
  virtualhere_licensed_device_count_obsolete_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 CMsgRemoteDeviceStreamingResponse::virtualhere_licensed_device_count_obsolete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.virtualhere_licensed_device_count_OBSOLETE)
  return virtualhere_licensed_device_count_obsolete_;
}
inline void CMsgRemoteDeviceStreamingResponse::set_virtualhere_licensed_device_count_obsolete(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  virtualhere_licensed_device_count_obsolete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.virtualhere_licensed_device_count_OBSOLETE)
}

// -------------------------------------------------------------------

// CMsgRemoteDeviceProofRequest

// required bytes challenge = 1;
inline bool CMsgRemoteDeviceProofRequest::has_challenge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteDeviceProofRequest::clear_challenge() {
  challenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgRemoteDeviceProofRequest::challenge() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
  return challenge_.GetNoArena();
}
inline void CMsgRemoteDeviceProofRequest::set_challenge(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceProofRequest::set_challenge(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  challenge_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}
#endif
inline void CMsgRemoteDeviceProofRequest::set_challenge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}
inline void CMsgRemoteDeviceProofRequest::set_challenge(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}
inline ::std::string* CMsgRemoteDeviceProofRequest::mutable_challenge() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
  return challenge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceProofRequest::release_challenge() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
  if (!has_challenge()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return challenge_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceProofRequest::set_allocated_challenge(::std::string* challenge) {
  if (challenge != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  challenge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), challenge);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}

// -------------------------------------------------------------------

// CMsgRemoteDeviceProofResponse

// required bytes response = 1;
inline bool CMsgRemoteDeviceProofResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgRemoteDeviceProofResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgRemoteDeviceProofResponse::response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceProofResponse.response)
  return response_.GetNoArena();
}
inline void CMsgRemoteDeviceProofResponse::set_response(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceProofResponse.response)
}
#if LANG_CXX11
inline void CMsgRemoteDeviceProofResponse::set_response(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceProofResponse.response)
}
#endif
inline void CMsgRemoteDeviceProofResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceProofResponse.response)
}
inline void CMsgRemoteDeviceProofResponse::set_response(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceProofResponse.response)
}
inline ::std::string* CMsgRemoteDeviceProofResponse::mutable_response() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceProofResponse.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgRemoteDeviceProofResponse::release_response() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceProofResponse.response)
  if (!has_response()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgRemoteDeviceProofResponse::set_allocated_response(::std::string* response) {
  if (response != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceProofResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage>() {
  return ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::ERemoteClientBroadcastMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::ERemoteClientBroadcastMsg>() {
  return ::proto::steam::ERemoteClientBroadcastMsg_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::ERemoteClientService> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::ERemoteClientService>() {
  return ::proto::steam::ERemoteClientService_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::ERemoteDeviceAuthorizationResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::ERemoteDeviceAuthorizationResult>() {
  return ::proto::steam::ERemoteDeviceAuthorizationResult_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::ERemoteDeviceStreamingResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::ERemoteDeviceStreamingResult>() {
  return ::proto::steam::ERemoteDeviceStreamingResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5fremoteclient_5fdiscovery_2eproto
