// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_sdr.proto

#ifndef PROTOBUF_INCLUDED_steamdatagram_5fmessages_5fsdr_2eproto
#define PROTOBUF_INCLUDED_steamdatagram_5fmessages_5fsdr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steamnetworkingsockets_messages_certs.pb.h"
#include "steamnetworkingsockets_messages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fsdr_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steamdatagram_5fmessages_5fsdr_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[39]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steamdatagram_5fmessages_5fsdr_2eproto();
namespace proto {
namespace steam {
class CMsgSteamDatagramClientPingSampleReply;
class CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal;
extern CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_default_instance_;
class CMsgSteamDatagramClientPingSampleReply_DataCenter;
class CMsgSteamDatagramClientPingSampleReply_DataCenterDefaultTypeInternal;
extern CMsgSteamDatagramClientPingSampleReply_DataCenterDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_DataCenter_default_instance_;
class CMsgSteamDatagramClientPingSampleReply_RoutingCluster;
class CMsgSteamDatagramClientPingSampleReply_RoutingClusterDefaultTypeInternal;
extern CMsgSteamDatagramClientPingSampleReply_RoutingClusterDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_RoutingCluster_default_instance_;
class CMsgSteamDatagramClientPingSampleRequest;
class CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal;
extern CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal _CMsgSteamDatagramClientPingSampleRequest_default_instance_;
class CMsgSteamDatagramClientSwitchedPrimary;
class CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal;
extern CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal _CMsgSteamDatagramClientSwitchedPrimary_default_instance_;
class CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
class CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal;
extern CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal _CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_;
class CMsgSteamDatagramConnectOK;
class CMsgSteamDatagramConnectOKDefaultTypeInternal;
extern CMsgSteamDatagramConnectOKDefaultTypeInternal _CMsgSteamDatagramConnectOK_default_instance_;
class CMsgSteamDatagramConnectRequest;
class CMsgSteamDatagramConnectRequestDefaultTypeInternal;
extern CMsgSteamDatagramConnectRequestDefaultTypeInternal _CMsgSteamDatagramConnectRequest_default_instance_;
class CMsgSteamDatagramConnectionClosed;
class CMsgSteamDatagramConnectionClosedDefaultTypeInternal;
extern CMsgSteamDatagramConnectionClosedDefaultTypeInternal _CMsgSteamDatagramConnectionClosed_default_instance_;
class CMsgSteamDatagramConnectionStatsClientToRouter;
class CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal;
extern CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_;
class CMsgSteamDatagramConnectionStatsP2PClientToRouter;
class CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal;
extern CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_;
class CMsgSteamDatagramConnectionStatsP2PRouterToClient;
class CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal;
extern CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal _CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_;
class CMsgSteamDatagramConnectionStatsP2PRouterToRouter;
class CMsgSteamDatagramConnectionStatsP2PRouterToRouterDefaultTypeInternal;
extern CMsgSteamDatagramConnectionStatsP2PRouterToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsP2PRouterToRouter_default_instance_;
class CMsgSteamDatagramConnectionStatsRouterToClient;
class CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal;
extern CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal _CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_;
class CMsgSteamDatagramConnectionStatsRouterToServer;
class CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal;
extern CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal _CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_;
class CMsgSteamDatagramConnectionStatsServerToRouter;
class CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal;
extern CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_;
class CMsgSteamDatagramDataCenterState;
class CMsgSteamDatagramDataCenterStateDefaultTypeInternal;
extern CMsgSteamDatagramDataCenterStateDefaultTypeInternal _CMsgSteamDatagramDataCenterState_default_instance_;
class CMsgSteamDatagramDataCenterState_DataCenter;
class CMsgSteamDatagramDataCenterState_DataCenterDefaultTypeInternal;
extern CMsgSteamDatagramDataCenterState_DataCenterDefaultTypeInternal _CMsgSteamDatagramDataCenterState_DataCenter_default_instance_;
class CMsgSteamDatagramDataCenterState_Server;
class CMsgSteamDatagramDataCenterState_ServerDefaultTypeInternal;
extern CMsgSteamDatagramDataCenterState_ServerDefaultTypeInternal _CMsgSteamDatagramDataCenterState_Server_default_instance_;
class CMsgSteamDatagramGameserverPing;
class CMsgSteamDatagramGameserverPingDefaultTypeInternal;
extern CMsgSteamDatagramGameserverPingDefaultTypeInternal _CMsgSteamDatagramGameserverPing_default_instance_;
class CMsgSteamDatagramGameserverSessionEstablished;
class CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal;
extern CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal _CMsgSteamDatagramGameserverSessionEstablished_default_instance_;
class CMsgSteamDatagramGameserverSessionRequest;
class CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal;
extern CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal _CMsgSteamDatagramGameserverSessionRequest_default_instance_;
class CMsgSteamDatagramNoConnection;
class CMsgSteamDatagramNoConnectionDefaultTypeInternal;
extern CMsgSteamDatagramNoConnectionDefaultTypeInternal _CMsgSteamDatagramNoConnection_default_instance_;
class CMsgSteamDatagramNoSessionRelayToClient;
class CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal;
extern CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal _CMsgSteamDatagramNoSessionRelayToClient_default_instance_;
class CMsgSteamDatagramNoSessionRelayToPeer;
class CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal;
extern CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal _CMsgSteamDatagramNoSessionRelayToPeer_default_instance_;
class CMsgSteamDatagramP2PBadRouteRouterToClient;
class CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal;
extern CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal _CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_;
class CMsgSteamDatagramP2PBadRouteRouterToRouter;
class CMsgSteamDatagramP2PBadRouteRouterToRouterDefaultTypeInternal;
extern CMsgSteamDatagramP2PBadRouteRouterToRouterDefaultTypeInternal _CMsgSteamDatagramP2PBadRouteRouterToRouter_default_instance_;
class CMsgSteamDatagramP2PRendezvous;
class CMsgSteamDatagramP2PRendezvousDefaultTypeInternal;
extern CMsgSteamDatagramP2PRendezvousDefaultTypeInternal _CMsgSteamDatagramP2PRendezvous_default_instance_;
class CMsgSteamDatagramP2PRoutes;
class CMsgSteamDatagramP2PRoutesDefaultTypeInternal;
extern CMsgSteamDatagramP2PRoutesDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_default_instance_;
class CMsgSteamDatagramP2PRoutes_RelayCluster;
class CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal;
extern CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_;
class CMsgSteamDatagramP2PRoutes_Route;
class CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal;
extern CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_Route_default_instance_;
class CMsgSteamDatagramP2PSessionEstablished;
class CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal;
extern CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal _CMsgSteamDatagramP2PSessionEstablished_default_instance_;
class CMsgSteamDatagramP2PSessionRequest;
class CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal;
extern CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequest_default_instance_;
class CMsgSteamDatagramP2PSessionRequestBody;
class CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal;
extern CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequestBody_default_instance_;
class CMsgSteamDatagramRelayToRelayPing;
class CMsgSteamDatagramRelayToRelayPingDefaultTypeInternal;
extern CMsgSteamDatagramRelayToRelayPingDefaultTypeInternal _CMsgSteamDatagramRelayToRelayPing_default_instance_;
class CMsgSteamDatagramRouterHealth;
class CMsgSteamDatagramRouterHealthDefaultTypeInternal;
extern CMsgSteamDatagramRouterHealthDefaultTypeInternal _CMsgSteamDatagramRouterHealth_default_instance_;
class CMsgSteamDatagramRouterHealth_DataCenter;
class CMsgSteamDatagramRouterHealth_DataCenterDefaultTypeInternal;
extern CMsgSteamDatagramRouterHealth_DataCenterDefaultTypeInternal _CMsgSteamDatagramRouterHealth_DataCenter_default_instance_;
class CMsgSteamDatagramRouterPingReply;
class CMsgSteamDatagramRouterPingReplyDefaultTypeInternal;
extern CMsgSteamDatagramRouterPingReplyDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_default_instance_;
class CMsgSteamDatagramRouterPingReply_RouteException;
class CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal;
extern CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_RouteException_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CMsgSteamDatagramClientPingSampleReply* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientPingSampleReply>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramClientPingSampleRequest* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientPingSampleRequest>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientSwitchedPrimary>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectOK* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectOK>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectRequest* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectRequest>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectionClosed* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionClosed>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramDataCenterState* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramDataCenterState>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramDataCenterState_Server* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramDataCenterState_Server>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramGameserverPing* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramGameserverPing>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramGameserverSessionEstablished* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramGameserverSessionEstablished>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramGameserverSessionRequest* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramGameserverSessionRequest>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramNoConnection* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramNoConnection>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramNoSessionRelayToClient* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramNoSessionRelayToClient>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramNoSessionRelayToPeer>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToClient>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PBadRouteRouterToRouter>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramP2PRendezvous* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PRendezvous>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramP2PRoutes* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PRoutes>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramP2PRoutes_Route* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PRoutes_Route>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramP2PSessionEstablished* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PSessionEstablished>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramP2PSessionRequest* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PSessionRequest>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramP2PSessionRequestBody* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PSessionRequestBody>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramRelayToRelayPing* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramRelayToRelayPing>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramRouterHealth* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramRouterHealth>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramRouterPingReply* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramRouterPingReply>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

enum CMsgSteamDatagramConnectionClosed_ERelayMode {
  CMsgSteamDatagramConnectionClosed_ERelayMode_None = 0,
  CMsgSteamDatagramConnectionClosed_ERelayMode_EndToEnd = 1,
  CMsgSteamDatagramConnectionClosed_ERelayMode_ClosedByPeer = 2
};
bool CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(int value);
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MIN = CMsgSteamDatagramConnectionClosed_ERelayMode_None;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MAX = CMsgSteamDatagramConnectionClosed_ERelayMode_ClosedByPeer;
const int CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_ARRAYSIZE = CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionClosed_ERelayMode_Name(CMsgSteamDatagramConnectionClosed_ERelayMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionClosed_ERelayMode_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionClosed_ERelayMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionClosed_ERelayMode>(
    CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsClientToRouter_Flags {
  CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsClientToRouter_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Name(CMsgSteamDatagramConnectionStatsClientToRouter_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsClientToRouter_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsClientToRouter_Flags>(
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsRouterToClient_Flags {
  CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsRouterToClient_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Name(CMsgSteamDatagramConnectionStatsRouterToClient_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsRouterToClient_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsRouterToClient_Flags>(
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsRouterToServer_Flags {
  CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsRouterToServer_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Name(CMsgSteamDatagramConnectionStatsRouterToServer_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsRouterToServer_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsRouterToServer_Flags>(
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsServerToRouter_Flags {
  CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsServerToRouter_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Name(CMsgSteamDatagramConnectionStatsServerToRouter_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsServerToRouter_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsServerToRouter_Flags>(
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags {
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Name(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags>(
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags {
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Name(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags>(
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags {
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Name(CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags>(
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor(), name, value);
}
enum ESteamDatagramMsgID {
  k_ESteamDatagramMsg_Invalid = 0,
  k_ESteamDatagramMsg_RouterPingRequest = 1,
  k_ESteamDatagramMsg_RouterPingReply = 2,
  k_ESteamDatagramMsg_GameserverPingRequest = 3,
  k_ESteamDatagramMsg_GameserverPingReply = 4,
  k_ESteamDatagramMsg_GameserverSessionRequest = 5,
  k_ESteamDatagramMsg_GameserverSessionEstablished = 6,
  k_ESteamDatagramMsg_NoSession = 7,
  k_ESteamDatagramMsg_Diagnostic = 8,
  k_ESteamDatagramMsg_DataClientToRouter = 9,
  k_ESteamDatagramMsg_DataRouterToServer = 10,
  k_ESteamDatagramMsg_DataServerToRouter = 11,
  k_ESteamDatagramMsg_DataRouterToClient = 12,
  k_ESteamDatagramMsg_Stats = 13,
  k_ESteamDatagramMsg_ClientPingSampleRequest = 14,
  k_ESteamDatagramMsg_ClientPingSampleReply = 15,
  k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary = 16,
  k_ESteamDatagramMsg_RelayHealth = 17,
  k_ESteamDatagramMsg_ConnectRequest = 18,
  k_ESteamDatagramMsg_ConnectOK = 19,
  k_ESteamDatagramMsg_ConnectionClosed = 20,
  k_ESteamDatagramMsg_NoConnection = 21,
  k_ESteamDatagramMsg_RelayToRelayPingRequest = 22,
  k_ESteamDatagramMsg_RelayToRelayPingReply = 23,
  k_ESteamDatagramMsg_P2PSessionRequest = 24,
  k_ESteamDatagramMsg_P2PSessionEstablished = 25,
  k_ESteamDatagramMsg_P2PStatsClient = 26,
  k_ESteamDatagramMsg_P2PStatsRelay = 27,
  k_ESteamDatagramMsg_P2PBadRoute = 28
};
bool ESteamDatagramMsgID_IsValid(int value);
const ESteamDatagramMsgID ESteamDatagramMsgID_MIN = k_ESteamDatagramMsg_Invalid;
const ESteamDatagramMsgID ESteamDatagramMsgID_MAX = k_ESteamDatagramMsg_P2PBadRoute;
const int ESteamDatagramMsgID_ARRAYSIZE = ESteamDatagramMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESteamDatagramMsgID_descriptor();
inline const ::std::string& ESteamDatagramMsgID_Name(ESteamDatagramMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESteamDatagramMsgID_descriptor(), value);
}
inline bool ESteamDatagramMsgID_Parse(
    const ::std::string& name, ESteamDatagramMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESteamDatagramMsgID>(
    ESteamDatagramMsgID_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamDatagramRouterPingReply_RouteException final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException) */ {
 public:
  CMsgSteamDatagramRouterPingReply_RouteException();
  virtual ~CMsgSteamDatagramRouterPingReply_RouteException();

  CMsgSteamDatagramRouterPingReply_RouteException(const CMsgSteamDatagramRouterPingReply_RouteException& from);

  inline CMsgSteamDatagramRouterPingReply_RouteException& operator=(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramRouterPingReply_RouteException(CMsgSteamDatagramRouterPingReply_RouteException&& from) noexcept
    : CMsgSteamDatagramRouterPingReply_RouteException() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramRouterPingReply_RouteException& operator=(CMsgSteamDatagramRouterPingReply_RouteException&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramRouterPingReply_RouteException& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramRouterPingReply_RouteException* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramRouterPingReply_RouteException*>(
               &_CMsgSteamDatagramRouterPingReply_RouteException_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMsgSteamDatagramRouterPingReply_RouteException* other);
  friend void swap(CMsgSteamDatagramRouterPingReply_RouteException& a, CMsgSteamDatagramRouterPingReply_RouteException& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramRouterPingReply_RouteException* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramRouterPingReply_RouteException>(nullptr);
  }

  CMsgSteamDatagramRouterPingReply_RouteException* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramRouterPingReply_RouteException>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from);
  void MergeFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramRouterPingReply_RouteException* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 data_center_id = 1;
  bool has_data_center_id() const;
  void clear_data_center_id();
  static const int kDataCenterIdFieldNumber = 1;
  ::google::protobuf::uint32 data_center_id() const;
  void set_data_center_id(::google::protobuf::uint32 value);

  // optional uint32 flags = 2;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional uint32 penalty = 3;
  bool has_penalty() const;
  void clear_penalty();
  static const int kPenaltyFieldNumber = 3;
  ::google::protobuf::uint32 penalty() const;
  void set_penalty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 data_center_id_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 penalty_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRouterPingReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramRouterPingReply) */ {
 public:
  CMsgSteamDatagramRouterPingReply();
  virtual ~CMsgSteamDatagramRouterPingReply();

  CMsgSteamDatagramRouterPingReply(const CMsgSteamDatagramRouterPingReply& from);

  inline CMsgSteamDatagramRouterPingReply& operator=(const CMsgSteamDatagramRouterPingReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramRouterPingReply(CMsgSteamDatagramRouterPingReply&& from) noexcept
    : CMsgSteamDatagramRouterPingReply() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramRouterPingReply& operator=(CMsgSteamDatagramRouterPingReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramRouterPingReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramRouterPingReply* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramRouterPingReply*>(
               &_CMsgSteamDatagramRouterPingReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMsgSteamDatagramRouterPingReply* other);
  friend void swap(CMsgSteamDatagramRouterPingReply& a, CMsgSteamDatagramRouterPingReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramRouterPingReply* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramRouterPingReply>(nullptr);
  }

  CMsgSteamDatagramRouterPingReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramRouterPingReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramRouterPingReply& from);
  void MergeFrom(const CMsgSteamDatagramRouterPingReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramRouterPingReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramRouterPingReply_RouteException RouteException;

  // accessors -------------------------------------------------------

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  int latency_datacenter_ids_size() const;
  void clear_latency_datacenter_ids();
  static const int kLatencyDatacenterIdsFieldNumber = 2;
  ::google::protobuf::uint32 latency_datacenter_ids(int index) const;
  void set_latency_datacenter_ids(int index, ::google::protobuf::uint32 value);
  void add_latency_datacenter_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      latency_datacenter_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_latency_datacenter_ids();

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  int latency_ping_ms_size() const;
  void clear_latency_ping_ms();
  static const int kLatencyPingMsFieldNumber = 3;
  ::google::protobuf::uint32 latency_ping_ms(int index) const;
  void set_latency_ping_ms(int index, ::google::protobuf::uint32 value);
  void add_latency_ping_ms(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      latency_ping_ms() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_latency_ping_ms();

  // repeated .proto.steam.CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  int route_exceptions_size() const;
  void clear_route_exceptions();
  static const int kRouteExceptionsFieldNumber = 10;
  ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException* mutable_route_exceptions(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException >*
      mutable_route_exceptions();
  const ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException& route_exceptions(int index) const;
  ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException* add_route_exceptions();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException >&
      route_exceptions() const;

  // optional fixed32 client_timestamp = 1;
  bool has_client_timestamp() const;
  void clear_client_timestamp();
  static const int kClientTimestampFieldNumber = 1;
  ::google::protobuf::uint32 client_timestamp() const;
  void set_client_timestamp(::google::protobuf::uint32 value);

  // optional fixed32 your_public_ip = 4;
  bool has_your_public_ip() const;
  void clear_your_public_ip();
  static const int kYourPublicIpFieldNumber = 4;
  ::google::protobuf::uint32 your_public_ip() const;
  void set_your_public_ip(::google::protobuf::uint32 value);

  // optional fixed64 challenge = 6;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 6;
  ::google::protobuf::uint64 challenge() const;
  void set_challenge(::google::protobuf::uint64 value);

  // optional fixed32 server_time = 5;
  bool has_server_time() const;
  void clear_server_time();
  static const int kServerTimeFieldNumber = 5;
  ::google::protobuf::uint32 server_time() const;
  void set_server_time(::google::protobuf::uint32 value);

  // optional uint32 seconds_until_shutdown = 7;
  bool has_seconds_until_shutdown() const;
  void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 7;
  ::google::protobuf::uint32 seconds_until_shutdown() const;
  void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional fixed32 client_cookie = 8;
  bool has_client_cookie() const;
  void clear_client_cookie();
  static const int kClientCookieFieldNumber = 8;
  ::google::protobuf::uint32 client_cookie() const;
  void set_client_cookie(::google::protobuf::uint32 value);

  // optional uint32 scoring_penalty_relay_cluster = 9;
  bool has_scoring_penalty_relay_cluster() const;
  void clear_scoring_penalty_relay_cluster();
  static const int kScoringPenaltyRelayClusterFieldNumber = 9;
  ::google::protobuf::uint32 scoring_penalty_relay_cluster() const;
  void set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramRouterPingReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > latency_datacenter_ids_;
  mutable std::atomic<int> _latency_datacenter_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > latency_ping_ms_;
  mutable std::atomic<int> _latency_ping_ms_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException > route_exceptions_;
  ::google::protobuf::uint32 client_timestamp_;
  ::google::protobuf::uint32 your_public_ip_;
  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 server_time_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint32 client_cookie_;
  ::google::protobuf::uint32 scoring_penalty_relay_cluster_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramGameserverPing final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramGameserverPing) */ {
 public:
  CMsgSteamDatagramGameserverPing();
  virtual ~CMsgSteamDatagramGameserverPing();

  CMsgSteamDatagramGameserverPing(const CMsgSteamDatagramGameserverPing& from);

  inline CMsgSteamDatagramGameserverPing& operator=(const CMsgSteamDatagramGameserverPing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramGameserverPing(CMsgSteamDatagramGameserverPing&& from) noexcept
    : CMsgSteamDatagramGameserverPing() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramGameserverPing& operator=(CMsgSteamDatagramGameserverPing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramGameserverPing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramGameserverPing* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramGameserverPing*>(
               &_CMsgSteamDatagramGameserverPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgSteamDatagramGameserverPing* other);
  friend void swap(CMsgSteamDatagramGameserverPing& a, CMsgSteamDatagramGameserverPing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramGameserverPing* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramGameserverPing>(nullptr);
  }

  CMsgSteamDatagramGameserverPing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramGameserverPing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramGameserverPing& from);
  void MergeFrom(const CMsgSteamDatagramGameserverPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramGameserverPing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 router_timestamp = 4;
  bool has_router_timestamp() const;
  void clear_router_timestamp();
  static const int kRouterTimestampFieldNumber = 4;
  ::google::protobuf::uint32 router_timestamp() const;
  void set_router_timestamp(::google::protobuf::uint32 value);

  // optional fixed64 dummy_pad = 99;
  bool has_dummy_pad() const;
  void clear_dummy_pad();
  static const int kDummyPadFieldNumber = 99;
  ::google::protobuf::uint64 dummy_pad() const;
  void set_dummy_pad(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramGameserverPing)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 router_timestamp_;
  ::google::protobuf::uint64 dummy_pad_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramNoSessionRelayToClient final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramNoSessionRelayToClient) */ {
 public:
  CMsgSteamDatagramNoSessionRelayToClient();
  virtual ~CMsgSteamDatagramNoSessionRelayToClient();

  CMsgSteamDatagramNoSessionRelayToClient(const CMsgSteamDatagramNoSessionRelayToClient& from);

  inline CMsgSteamDatagramNoSessionRelayToClient& operator=(const CMsgSteamDatagramNoSessionRelayToClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramNoSessionRelayToClient(CMsgSteamDatagramNoSessionRelayToClient&& from) noexcept
    : CMsgSteamDatagramNoSessionRelayToClient() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramNoSessionRelayToClient& operator=(CMsgSteamDatagramNoSessionRelayToClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramNoSessionRelayToClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramNoSessionRelayToClient* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramNoSessionRelayToClient*>(
               &_CMsgSteamDatagramNoSessionRelayToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgSteamDatagramNoSessionRelayToClient* other);
  friend void swap(CMsgSteamDatagramNoSessionRelayToClient& a, CMsgSteamDatagramNoSessionRelayToClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramNoSessionRelayToClient* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramNoSessionRelayToClient>(nullptr);
  }

  CMsgSteamDatagramNoSessionRelayToClient* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramNoSessionRelayToClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramNoSessionRelayToClient& from);
  void MergeFrom(const CMsgSteamDatagramNoSessionRelayToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramNoSessionRelayToClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 your_public_ip = 2;
  bool has_your_public_ip() const;
  void clear_your_public_ip();
  static const int kYourPublicIpFieldNumber = 2;
  ::google::protobuf::uint32 your_public_ip() const;
  void set_your_public_ip(::google::protobuf::uint32 value);

  // optional fixed32 server_time = 3;
  bool has_server_time() const;
  void clear_server_time();
  static const int kServerTimeFieldNumber = 3;
  ::google::protobuf::uint32 server_time() const;
  void set_server_time(::google::protobuf::uint32 value);

  // optional fixed64 challenge = 4;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 4;
  ::google::protobuf::uint64 challenge() const;
  void set_challenge(::google::protobuf::uint64 value);

  // optional uint32 seconds_until_shutdown = 5;
  bool has_seconds_until_shutdown() const;
  void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 5;
  ::google::protobuf::uint32 seconds_until_shutdown() const;
  void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional fixed32 connection_id = 7;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 7;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramNoSessionRelayToClient)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 your_public_ip_;
  ::google::protobuf::uint32 server_time_;
  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint32 connection_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramNoSessionRelayToPeer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer) */ {
 public:
  CMsgSteamDatagramNoSessionRelayToPeer();
  virtual ~CMsgSteamDatagramNoSessionRelayToPeer();

  CMsgSteamDatagramNoSessionRelayToPeer(const CMsgSteamDatagramNoSessionRelayToPeer& from);

  inline CMsgSteamDatagramNoSessionRelayToPeer& operator=(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramNoSessionRelayToPeer(CMsgSteamDatagramNoSessionRelayToPeer&& from) noexcept
    : CMsgSteamDatagramNoSessionRelayToPeer() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramNoSessionRelayToPeer& operator=(CMsgSteamDatagramNoSessionRelayToPeer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramNoSessionRelayToPeer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramNoSessionRelayToPeer* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramNoSessionRelayToPeer*>(
               &_CMsgSteamDatagramNoSessionRelayToPeer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMsgSteamDatagramNoSessionRelayToPeer* other);
  friend void swap(CMsgSteamDatagramNoSessionRelayToPeer& a, CMsgSteamDatagramNoSessionRelayToPeer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramNoSessionRelayToPeer* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramNoSessionRelayToPeer>(nullptr);
  }

  CMsgSteamDatagramNoSessionRelayToPeer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramNoSessionRelayToPeer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from);
  void MergeFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramNoSessionRelayToPeer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 legacy_relay_session_id = 1;
  bool has_legacy_relay_session_id() const;
  void clear_legacy_relay_session_id();
  static const int kLegacyRelaySessionIdFieldNumber = 1;
  ::google::protobuf::uint32 legacy_relay_session_id() const;
  void set_legacy_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 from_relay_session_id = 2;
  bool has_from_relay_session_id() const;
  void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 2;
  ::google::protobuf::uint32 from_relay_session_id() const;
  void set_from_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 7;
  bool has_from_connection_id() const;
  void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 7;
  ::google::protobuf::uint32 from_connection_id() const;
  void set_from_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 kludge_pad = 99;
  bool has_kludge_pad() const;
  void clear_kludge_pad();
  static const int kKludgePadFieldNumber = 99;
  ::google::protobuf::uint64 kludge_pad() const;
  void set_kludge_pad(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 legacy_relay_session_id_;
  ::google::protobuf::uint32 from_relay_session_id_;
  ::google::protobuf::uint32 from_connection_id_;
  ::google::protobuf::uint64 kludge_pad_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientPingSampleRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramClientPingSampleRequest) */ {
 public:
  CMsgSteamDatagramClientPingSampleRequest();
  virtual ~CMsgSteamDatagramClientPingSampleRequest();

  CMsgSteamDatagramClientPingSampleRequest(const CMsgSteamDatagramClientPingSampleRequest& from);

  inline CMsgSteamDatagramClientPingSampleRequest& operator=(const CMsgSteamDatagramClientPingSampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramClientPingSampleRequest(CMsgSteamDatagramClientPingSampleRequest&& from) noexcept
    : CMsgSteamDatagramClientPingSampleRequest() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramClientPingSampleRequest& operator=(CMsgSteamDatagramClientPingSampleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramClientPingSampleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramClientPingSampleRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramClientPingSampleRequest*>(
               &_CMsgSteamDatagramClientPingSampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgSteamDatagramClientPingSampleRequest* other);
  friend void swap(CMsgSteamDatagramClientPingSampleRequest& a, CMsgSteamDatagramClientPingSampleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramClientPingSampleRequest* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientPingSampleRequest>(nullptr);
  }

  CMsgSteamDatagramClientPingSampleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientPingSampleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramClientPingSampleRequest& from);
  void MergeFrom(const CMsgSteamDatagramClientPingSampleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramClientPingSampleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramClientPingSampleRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 connection_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientPingSampleReply_RoutingCluster final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster) */ {
 public:
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster();
  virtual ~CMsgSteamDatagramClientPingSampleReply_RoutingCluster();

  CMsgSteamDatagramClientPingSampleReply_RoutingCluster(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from);

  inline CMsgSteamDatagramClientPingSampleReply_RoutingCluster& operator=(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster(CMsgSteamDatagramClientPingSampleReply_RoutingCluster&& from) noexcept
    : CMsgSteamDatagramClientPingSampleReply_RoutingCluster() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramClientPingSampleReply_RoutingCluster& operator=(CMsgSteamDatagramClientPingSampleReply_RoutingCluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramClientPingSampleReply_RoutingCluster* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramClientPingSampleReply_RoutingCluster*>(
               &_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* other);
  friend void swap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster& a, CMsgSteamDatagramClientPingSampleReply_RoutingCluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramClientPingSampleReply_RoutingCluster* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientPingSampleReply_RoutingCluster>(nullptr);
  }

  CMsgSteamDatagramClientPingSampleReply_RoutingCluster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientPingSampleReply_RoutingCluster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from);
  void MergeFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 front_ping_ms = 2;
  bool has_front_ping_ms() const;
  void clear_front_ping_ms();
  static const int kFrontPingMsFieldNumber = 2;
  ::google::protobuf::uint32 front_ping_ms() const;
  void set_front_ping_ms(::google::protobuf::uint32 value);

  // optional uint32 e2e_ping_ms = 3;
  bool has_e2e_ping_ms() const;
  void clear_e2e_ping_ms();
  static const int kE2EPingMsFieldNumber = 3;
  ::google::protobuf::uint32 e2e_ping_ms() const;
  void set_e2e_ping_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 front_ping_ms_;
  ::google::protobuf::uint32 e2e_ping_ms_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientPingSampleReply_DataCenter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter) */ {
 public:
  CMsgSteamDatagramClientPingSampleReply_DataCenter();
  virtual ~CMsgSteamDatagramClientPingSampleReply_DataCenter();

  CMsgSteamDatagramClientPingSampleReply_DataCenter(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from);

  inline CMsgSteamDatagramClientPingSampleReply_DataCenter& operator=(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramClientPingSampleReply_DataCenter(CMsgSteamDatagramClientPingSampleReply_DataCenter&& from) noexcept
    : CMsgSteamDatagramClientPingSampleReply_DataCenter() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramClientPingSampleReply_DataCenter& operator=(CMsgSteamDatagramClientPingSampleReply_DataCenter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramClientPingSampleReply_DataCenter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramClientPingSampleReply_DataCenter* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramClientPingSampleReply_DataCenter*>(
               &_CMsgSteamDatagramClientPingSampleReply_DataCenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CMsgSteamDatagramClientPingSampleReply_DataCenter* other);
  friend void swap(CMsgSteamDatagramClientPingSampleReply_DataCenter& a, CMsgSteamDatagramClientPingSampleReply_DataCenter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramClientPingSampleReply_DataCenter* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientPingSampleReply_DataCenter>(nullptr);
  }

  CMsgSteamDatagramClientPingSampleReply_DataCenter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientPingSampleReply_DataCenter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from);
  void MergeFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramClientPingSampleReply_DataCenter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 data_center_id = 1;
  bool has_data_center_id() const;
  void clear_data_center_id();
  static const int kDataCenterIdFieldNumber = 1;
  ::google::protobuf::uint32 data_center_id() const;
  void set_data_center_id(::google::protobuf::uint32 value);

  // optional fixed32 via_relay_id = 2;
  bool has_via_relay_id() const;
  void clear_via_relay_id();
  static const int kViaRelayIdFieldNumber = 2;
  ::google::protobuf::uint32 via_relay_id() const;
  void set_via_relay_id(::google::protobuf::uint32 value);

  // optional uint32 e2e_ping_ms = 3;
  bool has_e2e_ping_ms() const;
  void clear_e2e_ping_ms();
  static const int kE2EPingMsFieldNumber = 3;
  ::google::protobuf::uint32 e2e_ping_ms() const;
  void set_e2e_ping_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 data_center_id_;
  ::google::protobuf::uint32 via_relay_id_;
  ::google::protobuf::uint32 e2e_ping_ms_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientPingSampleReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramClientPingSampleReply) */ {
 public:
  CMsgSteamDatagramClientPingSampleReply();
  virtual ~CMsgSteamDatagramClientPingSampleReply();

  CMsgSteamDatagramClientPingSampleReply(const CMsgSteamDatagramClientPingSampleReply& from);

  inline CMsgSteamDatagramClientPingSampleReply& operator=(const CMsgSteamDatagramClientPingSampleReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramClientPingSampleReply(CMsgSteamDatagramClientPingSampleReply&& from) noexcept
    : CMsgSteamDatagramClientPingSampleReply() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramClientPingSampleReply& operator=(CMsgSteamDatagramClientPingSampleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramClientPingSampleReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramClientPingSampleReply* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramClientPingSampleReply*>(
               &_CMsgSteamDatagramClientPingSampleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CMsgSteamDatagramClientPingSampleReply* other);
  friend void swap(CMsgSteamDatagramClientPingSampleReply& a, CMsgSteamDatagramClientPingSampleReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramClientPingSampleReply* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientPingSampleReply>(nullptr);
  }

  CMsgSteamDatagramClientPingSampleReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientPingSampleReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramClientPingSampleReply& from);
  void MergeFrom(const CMsgSteamDatagramClientPingSampleReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramClientPingSampleReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramClientPingSampleReply_RoutingCluster RoutingCluster;
  typedef CMsgSteamDatagramClientPingSampleReply_DataCenter DataCenter;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  int routing_clusters_size() const;
  void clear_routing_clusters();
  static const int kRoutingClustersFieldNumber = 2;
  ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* mutable_routing_clusters(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >*
      mutable_routing_clusters();
  const ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster& routing_clusters(int index) const;
  ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* add_routing_clusters();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >&
      routing_clusters() const;

  // repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  int data_centers_size() const;
  void clear_data_centers();
  static const int kDataCentersFieldNumber = 3;
  ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter* mutable_data_centers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter >*
      mutable_data_centers();
  const ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter& data_centers(int index) const;
  ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter* add_data_centers();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter >&
      data_centers() const;

  // optional fixed32 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramClientPingSampleReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster > routing_clusters_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter > data_centers_;
  ::google::protobuf::uint32 connection_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientSwitchedPrimary_RouterQuality final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality) */ {
 public:
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality();
  virtual ~CMsgSteamDatagramClientSwitchedPrimary_RouterQuality();

  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from);

  inline CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& operator=(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&& from) noexcept
    : CMsgSteamDatagramClientSwitchedPrimary_RouterQuality() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& operator=(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
               &_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other);
  friend void swap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& a, CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(nullptr);
  }

  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from);
  void MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 score = 1;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // optional uint32 front_ping = 2;
  bool has_front_ping() const;
  void clear_front_ping();
  static const int kFrontPingFieldNumber = 2;
  ::google::protobuf::uint32 front_ping() const;
  void set_front_ping(::google::protobuf::uint32 value);

  // optional uint32 back_ping = 3;
  bool has_back_ping() const;
  void clear_back_ping();
  static const int kBackPingFieldNumber = 3;
  ::google::protobuf::uint32 back_ping() const;
  void set_back_ping(::google::protobuf::uint32 value);

  // optional uint32 seconds_until_down = 4;
  bool has_seconds_until_down() const;
  void clear_seconds_until_down();
  static const int kSecondsUntilDownFieldNumber = 4;
  ::google::protobuf::uint32 seconds_until_down() const;
  void set_seconds_until_down(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 front_ping_;
  ::google::protobuf::uint32 back_ping_;
  ::google::protobuf::uint32 seconds_until_down_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientSwitchedPrimary final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramClientSwitchedPrimary) */ {
 public:
  CMsgSteamDatagramClientSwitchedPrimary();
  virtual ~CMsgSteamDatagramClientSwitchedPrimary();

  CMsgSteamDatagramClientSwitchedPrimary(const CMsgSteamDatagramClientSwitchedPrimary& from);

  inline CMsgSteamDatagramClientSwitchedPrimary& operator=(const CMsgSteamDatagramClientSwitchedPrimary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramClientSwitchedPrimary(CMsgSteamDatagramClientSwitchedPrimary&& from) noexcept
    : CMsgSteamDatagramClientSwitchedPrimary() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramClientSwitchedPrimary& operator=(CMsgSteamDatagramClientSwitchedPrimary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramClientSwitchedPrimary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramClientSwitchedPrimary* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramClientSwitchedPrimary*>(
               &_CMsgSteamDatagramClientSwitchedPrimary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CMsgSteamDatagramClientSwitchedPrimary* other);
  friend void swap(CMsgSteamDatagramClientSwitchedPrimary& a, CMsgSteamDatagramClientSwitchedPrimary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramClientSwitchedPrimary* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientSwitchedPrimary>(nullptr);
  }

  CMsgSteamDatagramClientSwitchedPrimary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramClientSwitchedPrimary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary& from);
  void MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramClientSwitchedPrimary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramClientSwitchedPrimary_RouterQuality RouterQuality;

  // accessors -------------------------------------------------------

  // optional string from_dropped_reason = 7;
  bool has_from_dropped_reason() const;
  void clear_from_dropped_reason();
  static const int kFromDroppedReasonFieldNumber = 7;
  const ::std::string& from_dropped_reason() const;
  void set_from_dropped_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_from_dropped_reason(::std::string&& value);
  #endif
  void set_from_dropped_reason(const char* value);
  void set_from_dropped_reason(const char* value, size_t size);
  ::std::string* mutable_from_dropped_reason();
  ::std::string* release_from_dropped_reason();
  void set_allocated_from_dropped_reason(::std::string* from_dropped_reason);

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  bool has_from_quality_now() const;
  void clear_from_quality_now();
  static const int kFromQualityNowFieldNumber = 9;
  const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_now() const;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* release_from_quality_now();
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* mutable_from_quality_now();
  void set_allocated_from_quality_now(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_now);

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  bool has_to_quality_now() const;
  void clear_to_quality_now();
  static const int kToQualityNowFieldNumber = 10;
  const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_now() const;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* release_to_quality_now();
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* mutable_to_quality_now();
  void set_allocated_to_quality_now(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_now);

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  bool has_from_quality_then() const;
  void clear_from_quality_then();
  static const int kFromQualityThenFieldNumber = 11;
  const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_then() const;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* release_from_quality_then();
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* mutable_from_quality_then();
  void set_allocated_from_quality_then(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_then);

  // optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  bool has_to_quality_then() const;
  void clear_to_quality_then();
  static const int kToQualityThenFieldNumber = 12;
  const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_then() const;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* release_to_quality_then();
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* mutable_to_quality_then();
  void set_allocated_to_quality_then(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_then);

  // optional fixed32 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_ip = 2;
  bool has_from_ip() const;
  void clear_from_ip();
  static const int kFromIpFieldNumber = 2;
  ::google::protobuf::uint32 from_ip() const;
  void set_from_ip(::google::protobuf::uint32 value);

  // optional uint32 from_port = 3;
  bool has_from_port() const;
  void clear_from_port();
  static const int kFromPortFieldNumber = 3;
  ::google::protobuf::uint32 from_port() const;
  void set_from_port(::google::protobuf::uint32 value);

  // optional fixed32 from_router_cluster = 4;
  bool has_from_router_cluster() const;
  void clear_from_router_cluster();
  static const int kFromRouterClusterFieldNumber = 4;
  ::google::protobuf::uint32 from_router_cluster() const;
  void set_from_router_cluster(::google::protobuf::uint32 value);

  // optional uint32 from_active_time = 5;
  bool has_from_active_time() const;
  void clear_from_active_time();
  static const int kFromActiveTimeFieldNumber = 5;
  ::google::protobuf::uint32 from_active_time() const;
  void set_from_active_time(::google::protobuf::uint32 value);

  // optional uint32 from_active_packets_recv = 6;
  bool has_from_active_packets_recv() const;
  void clear_from_active_packets_recv();
  static const int kFromActivePacketsRecvFieldNumber = 6;
  ::google::protobuf::uint32 from_active_packets_recv() const;
  void set_from_active_packets_recv(::google::protobuf::uint32 value);

  // optional uint32 gap_ms = 8;
  bool has_gap_ms() const;
  void clear_gap_ms();
  static const int kGapMsFieldNumber = 8;
  ::google::protobuf::uint32 gap_ms() const;
  void set_gap_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramClientSwitchedPrimary)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_dropped_reason_;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_now_;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_now_;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_then_;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_then_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 from_ip_;
  ::google::protobuf::uint32 from_port_;
  ::google::protobuf::uint32 from_router_cluster_;
  ::google::protobuf::uint32 from_active_time_;
  ::google::protobuf::uint32 from_active_packets_recv_;
  ::google::protobuf::uint32 gap_ms_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectRequest) */ {
 public:
  CMsgSteamDatagramConnectRequest();
  virtual ~CMsgSteamDatagramConnectRequest();

  CMsgSteamDatagramConnectRequest(const CMsgSteamDatagramConnectRequest& from);

  inline CMsgSteamDatagramConnectRequest& operator=(const CMsgSteamDatagramConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectRequest(CMsgSteamDatagramConnectRequest&& from) noexcept
    : CMsgSteamDatagramConnectRequest() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectRequest& operator=(CMsgSteamDatagramConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectRequest*>(
               &_CMsgSteamDatagramConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CMsgSteamDatagramConnectRequest* other);
  friend void swap(CMsgSteamDatagramConnectRequest& a, CMsgSteamDatagramConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectRequest* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectRequest>(nullptr);
  }

  CMsgSteamDatagramConnectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectRequest& from);
  void MergeFrom(const CMsgSteamDatagramConnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  bool has_crypt() const;
  void clear_crypt();
  static const int kCryptFieldNumber = 6;
  const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  void set_allocated_crypt(::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 7;
  bool has_cert() const;
  void clear_cert();
  static const int kCertFieldNumber = 7;
  const ::proto::steam::CMsgSteamDatagramCertificateSigned& cert() const;
  ::proto::steam::CMsgSteamDatagramCertificateSigned* release_cert();
  ::proto::steam::CMsgSteamDatagramCertificateSigned* mutable_cert();
  void set_allocated_cert(::proto::steam::CMsgSteamDatagramCertificateSigned* cert);

  // optional fixed32 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 gameserver_relay_session_id = 2;
  bool has_gameserver_relay_session_id() const;
  void clear_gameserver_relay_session_id();
  static const int kGameserverRelaySessionIdFieldNumber = 2;
  ::google::protobuf::uint32 gameserver_relay_session_id() const;
  void set_gameserver_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed64 legacy_client_steam_id = 3;
  bool has_legacy_client_steam_id() const;
  void clear_legacy_client_steam_id();
  static const int kLegacyClientSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 legacy_client_steam_id() const;
  void set_legacy_client_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 my_timestamp = 4;
  bool has_my_timestamp() const;
  void clear_my_timestamp();
  static const int kMyTimestampFieldNumber = 4;
  ::google::protobuf::uint64 my_timestamp() const;
  void set_my_timestamp(::google::protobuf::uint64 value);

  // optional uint32 ping_est_ms = 5;
  bool has_ping_est_ms() const;
  void clear_ping_est_ms();
  static const int kPingEstMsFieldNumber = 5;
  ::google::protobuf::uint32 ping_est_ms() const;
  void set_ping_est_ms(::google::protobuf::uint32 value);

  // optional uint32 virtual_port = 9;
  bool has_virtual_port() const;
  void clear_virtual_port();
  static const int kVirtualPortFieldNumber = 9;
  ::google::protobuf::uint32 virtual_port() const;
  void set_virtual_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::proto::steam::CMsgSteamDatagramCertificateSigned* cert_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 gameserver_relay_session_id_;
  ::google::protobuf::uint64 legacy_client_steam_id_;
  ::google::protobuf::uint64 my_timestamp_;
  ::google::protobuf::uint32 ping_est_ms_;
  ::google::protobuf::uint32 virtual_port_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectOK final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectOK) */ {
 public:
  CMsgSteamDatagramConnectOK();
  virtual ~CMsgSteamDatagramConnectOK();

  CMsgSteamDatagramConnectOK(const CMsgSteamDatagramConnectOK& from);

  inline CMsgSteamDatagramConnectOK& operator=(const CMsgSteamDatagramConnectOK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectOK(CMsgSteamDatagramConnectOK&& from) noexcept
    : CMsgSteamDatagramConnectOK() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectOK& operator=(CMsgSteamDatagramConnectOK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectOK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectOK* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectOK*>(
               &_CMsgSteamDatagramConnectOK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CMsgSteamDatagramConnectOK* other);
  friend void swap(CMsgSteamDatagramConnectOK& a, CMsgSteamDatagramConnectOK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectOK* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectOK>(nullptr);
  }

  CMsgSteamDatagramConnectOK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectOK>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectOK& from);
  void MergeFrom(const CMsgSteamDatagramConnectOK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectOK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  bool has_crypt() const;
  void clear_crypt();
  static const int kCryptFieldNumber = 5;
  const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  void set_allocated_crypt(::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 6;
  bool has_cert() const;
  void clear_cert();
  static const int kCertFieldNumber = 6;
  const ::proto::steam::CMsgSteamDatagramCertificateSigned& cert() const;
  ::proto::steam::CMsgSteamDatagramCertificateSigned* release_cert();
  ::proto::steam::CMsgSteamDatagramCertificateSigned* mutable_cert();
  void set_allocated_cert(::proto::steam::CMsgSteamDatagramCertificateSigned* cert);

  // optional fixed32 client_connection_id = 1;
  bool has_client_connection_id() const;
  void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 client_connection_id() const;
  void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 gameserver_relay_session_id = 2;
  bool has_gameserver_relay_session_id() const;
  void clear_gameserver_relay_session_id();
  static const int kGameserverRelaySessionIdFieldNumber = 2;
  ::google::protobuf::uint32 gameserver_relay_session_id() const;
  void set_gameserver_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed64 your_timestamp = 3;
  bool has_your_timestamp() const;
  void clear_your_timestamp();
  static const int kYourTimestampFieldNumber = 3;
  ::google::protobuf::uint64 your_timestamp() const;
  void set_your_timestamp(::google::protobuf::uint64 value);

  // optional uint32 delay_time_usec = 4;
  bool has_delay_time_usec() const;
  void clear_delay_time_usec();
  static const int kDelayTimeUsecFieldNumber = 4;
  ::google::protobuf::uint32 delay_time_usec() const;
  void set_delay_time_usec(::google::protobuf::uint32 value);

  // optional fixed32 server_connection_id = 7;
  bool has_server_connection_id() const;
  void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 7;
  ::google::protobuf::uint32 server_connection_id() const;
  void set_server_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectOK)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::proto::steam::CMsgSteamDatagramCertificateSigned* cert_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 gameserver_relay_session_id_;
  ::google::protobuf::uint64 your_timestamp_;
  ::google::protobuf::uint32 delay_time_usec_;
  ::google::protobuf::uint32 server_connection_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionClosed final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectionClosed) */ {
 public:
  CMsgSteamDatagramConnectionClosed();
  virtual ~CMsgSteamDatagramConnectionClosed();

  CMsgSteamDatagramConnectionClosed(const CMsgSteamDatagramConnectionClosed& from);

  inline CMsgSteamDatagramConnectionClosed& operator=(const CMsgSteamDatagramConnectionClosed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectionClosed(CMsgSteamDatagramConnectionClosed&& from) noexcept
    : CMsgSteamDatagramConnectionClosed() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectionClosed& operator=(CMsgSteamDatagramConnectionClosed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectionClosed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectionClosed* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectionClosed*>(
               &_CMsgSteamDatagramConnectionClosed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CMsgSteamDatagramConnectionClosed* other);
  friend void swap(CMsgSteamDatagramConnectionClosed& a, CMsgSteamDatagramConnectionClosed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectionClosed* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionClosed>(nullptr);
  }

  CMsgSteamDatagramConnectionClosed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionClosed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectionClosed& from);
  void MergeFrom(const CMsgSteamDatagramConnectionClosed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectionClosed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionClosed_ERelayMode ERelayMode;
  static const ERelayMode None =
    CMsgSteamDatagramConnectionClosed_ERelayMode_None;
  static const ERelayMode EndToEnd =
    CMsgSteamDatagramConnectionClosed_ERelayMode_EndToEnd;
  static const ERelayMode ClosedByPeer =
    CMsgSteamDatagramConnectionClosed_ERelayMode_ClosedByPeer;
  static inline bool ERelayMode_IsValid(int value) {
    return CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(value);
  }
  static const ERelayMode ERelayMode_MIN =
    CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MIN;
  static const ERelayMode ERelayMode_MAX =
    CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MAX;
  static const int ERelayMode_ARRAYSIZE =
    CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ERelayMode_descriptor() {
    return CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor();
  }
  static inline const ::std::string& ERelayMode_Name(ERelayMode value) {
    return CMsgSteamDatagramConnectionClosed_ERelayMode_Name(value);
  }
  static inline bool ERelayMode_Parse(const ::std::string& name,
      ERelayMode* value) {
    return CMsgSteamDatagramConnectionClosed_ERelayMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string debug = 5;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 5;
  const ::std::string& debug() const;
  void set_debug(const ::std::string& value);
  #if LANG_CXX11
  void set_debug(::std::string&& value);
  #endif
  void set_debug(const char* value);
  void set_debug(const char* value, size_t size);
  ::std::string* mutable_debug();
  ::std::string* release_debug();
  void set_allocated_debug(::std::string* debug);

  // optional bytes forward_target_relay_routing_token = 11;
  bool has_forward_target_relay_routing_token() const;
  void clear_forward_target_relay_routing_token();
  static const int kForwardTargetRelayRoutingTokenFieldNumber = 11;
  const ::std::string& forward_target_relay_routing_token() const;
  void set_forward_target_relay_routing_token(const ::std::string& value);
  #if LANG_CXX11
  void set_forward_target_relay_routing_token(::std::string&& value);
  #endif
  void set_forward_target_relay_routing_token(const char* value);
  void set_forward_target_relay_routing_token(const void* value, size_t size);
  ::std::string* mutable_forward_target_relay_routing_token();
  ::std::string* release_forward_target_relay_routing_token();
  void set_allocated_forward_target_relay_routing_token(::std::string* forward_target_relay_routing_token);

  // optional .proto.steam.CMsgSteamNetworkingIdentity from_identity = 13;
  bool has_from_identity() const;
  void clear_from_identity();
  static const int kFromIdentityFieldNumber = 13;
  const ::proto::steam::CMsgSteamNetworkingIdentity& from_identity() const;
  ::proto::steam::CMsgSteamNetworkingIdentity* release_from_identity();
  ::proto::steam::CMsgSteamNetworkingIdentity* mutable_from_identity();
  void set_allocated_from_identity(::proto::steam::CMsgSteamNetworkingIdentity* from_identity);

  // optional fixed64 legacy_from_steam_id = 3;
  bool has_legacy_from_steam_id() const;
  void clear_legacy_from_steam_id();
  static const int kLegacyFromSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 legacy_from_steam_id() const;
  void set_legacy_from_steam_id(::google::protobuf::uint64 value);

  // optional uint32 legacy_gameserver_relay_session_id = 2;
  bool has_legacy_gameserver_relay_session_id() const;
  void clear_legacy_gameserver_relay_session_id();
  static const int kLegacyGameserverRelaySessionIdFieldNumber = 2;
  ::google::protobuf::uint32 legacy_gameserver_relay_session_id() const;
  void set_legacy_gameserver_relay_session_id(::google::protobuf::uint32 value);

  // optional .proto.steam.CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
  bool has_relay_mode() const;
  void clear_relay_mode();
  static const int kRelayModeFieldNumber = 4;
  ::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode relay_mode() const;
  void set_relay_mode(::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode value);

  // optional uint32 reason_code = 6;
  bool has_reason_code() const;
  void clear_reason_code();
  static const int kReasonCodeFieldNumber = 6;
  ::google::protobuf::uint32 reason_code() const;
  void set_reason_code(::google::protobuf::uint32 value);

  // optional fixed32 to_connection_id = 7;
  bool has_to_connection_id() const;
  void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 7;
  ::google::protobuf::uint32 to_connection_id() const;
  void set_to_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 8;
  bool has_from_connection_id() const;
  void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 8;
  ::google::protobuf::uint32 from_connection_id() const;
  void set_from_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 to_relay_session_id = 9;
  bool has_to_relay_session_id() const;
  void clear_to_relay_session_id();
  static const int kToRelaySessionIdFieldNumber = 9;
  ::google::protobuf::uint32 to_relay_session_id() const;
  void set_to_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 from_relay_session_id = 10;
  bool has_from_relay_session_id() const;
  void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 10;
  ::google::protobuf::uint32 from_relay_session_id() const;
  void set_from_relay_session_id(::google::protobuf::uint32 value);

  // optional uint32 forward_target_revision = 12;
  bool has_forward_target_revision() const;
  void clear_forward_target_revision();
  static const int kForwardTargetRevisionFieldNumber = 12;
  ::google::protobuf::uint32 forward_target_revision() const;
  void set_forward_target_revision(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectionClosed)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr debug_;
  ::google::protobuf::internal::ArenaStringPtr forward_target_relay_routing_token_;
  ::proto::steam::CMsgSteamNetworkingIdentity* from_identity_;
  ::google::protobuf::uint64 legacy_from_steam_id_;
  ::google::protobuf::uint32 legacy_gameserver_relay_session_id_;
  int relay_mode_;
  ::google::protobuf::uint32 reason_code_;
  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 from_connection_id_;
  ::google::protobuf::uint32 to_relay_session_id_;
  ::google::protobuf::uint32 from_relay_session_id_;
  ::google::protobuf::uint32 forward_target_revision_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramNoConnection final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramNoConnection) */ {
 public:
  CMsgSteamDatagramNoConnection();
  virtual ~CMsgSteamDatagramNoConnection();

  CMsgSteamDatagramNoConnection(const CMsgSteamDatagramNoConnection& from);

  inline CMsgSteamDatagramNoConnection& operator=(const CMsgSteamDatagramNoConnection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramNoConnection(CMsgSteamDatagramNoConnection&& from) noexcept
    : CMsgSteamDatagramNoConnection() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramNoConnection& operator=(CMsgSteamDatagramNoConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramNoConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramNoConnection* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramNoConnection*>(
               &_CMsgSteamDatagramNoConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CMsgSteamDatagramNoConnection* other);
  friend void swap(CMsgSteamDatagramNoConnection& a, CMsgSteamDatagramNoConnection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramNoConnection* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramNoConnection>(nullptr);
  }

  CMsgSteamDatagramNoConnection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramNoConnection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramNoConnection& from);
  void MergeFrom(const CMsgSteamDatagramNoConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramNoConnection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 from_steam_id = 3;
  bool has_from_steam_id() const;
  void clear_from_steam_id();
  static const int kFromSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 from_steam_id() const;
  void set_from_steam_id(::google::protobuf::uint64 value);

  // optional uint32 legacy_gameserver_relay_session_id = 2;
  bool has_legacy_gameserver_relay_session_id() const;
  void clear_legacy_gameserver_relay_session_id();
  static const int kLegacyGameserverRelaySessionIdFieldNumber = 2;
  ::google::protobuf::uint32 legacy_gameserver_relay_session_id() const;
  void set_legacy_gameserver_relay_session_id(::google::protobuf::uint32 value);

  // optional bool end_to_end = 4;
  bool has_end_to_end() const;
  void clear_end_to_end();
  static const int kEndToEndFieldNumber = 4;
  bool end_to_end() const;
  void set_end_to_end(bool value);

  // optional fixed32 to_connection_id = 5;
  bool has_to_connection_id() const;
  void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 5;
  ::google::protobuf::uint32 to_connection_id() const;
  void set_to_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 6;
  bool has_from_connection_id() const;
  void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 6;
  ::google::protobuf::uint32 from_connection_id() const;
  void set_from_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 dummy_pad = 1023;
  bool has_dummy_pad() const;
  void clear_dummy_pad();
  static const int kDummyPadFieldNumber = 1023;
  ::google::protobuf::uint32 dummy_pad() const;
  void set_dummy_pad(::google::protobuf::uint32 value);

  // optional fixed32 to_relay_session_id = 9;
  bool has_to_relay_session_id() const;
  void clear_to_relay_session_id();
  static const int kToRelaySessionIdFieldNumber = 9;
  ::google::protobuf::uint32 to_relay_session_id() const;
  void set_to_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 from_relay_session_id = 10;
  bool has_from_relay_session_id() const;
  void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 10;
  ::google::protobuf::uint32 from_relay_session_id() const;
  void set_from_relay_session_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramNoConnection)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 from_steam_id_;
  ::google::protobuf::uint32 legacy_gameserver_relay_session_id_;
  bool end_to_end_;
  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 from_connection_id_;
  ::google::protobuf::uint32 dummy_pad_;
  ::google::protobuf::uint32 to_relay_session_id_;
  ::google::protobuf::uint32 from_relay_session_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramGameserverSessionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramGameserverSessionRequest) */ {
 public:
  CMsgSteamDatagramGameserverSessionRequest();
  virtual ~CMsgSteamDatagramGameserverSessionRequest();

  CMsgSteamDatagramGameserverSessionRequest(const CMsgSteamDatagramGameserverSessionRequest& from);

  inline CMsgSteamDatagramGameserverSessionRequest& operator=(const CMsgSteamDatagramGameserverSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramGameserverSessionRequest(CMsgSteamDatagramGameserverSessionRequest&& from) noexcept
    : CMsgSteamDatagramGameserverSessionRequest() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramGameserverSessionRequest& operator=(CMsgSteamDatagramGameserverSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramGameserverSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramGameserverSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramGameserverSessionRequest*>(
               &_CMsgSteamDatagramGameserverSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CMsgSteamDatagramGameserverSessionRequest* other);
  friend void swap(CMsgSteamDatagramGameserverSessionRequest& a, CMsgSteamDatagramGameserverSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramGameserverSessionRequest* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramGameserverSessionRequest>(nullptr);
  }

  CMsgSteamDatagramGameserverSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramGameserverSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramGameserverSessionRequest& from);
  void MergeFrom(const CMsgSteamDatagramGameserverSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramGameserverSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ticket = 1;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 1;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const void* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // optional fixed64 challenge = 4;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 4;
  ::google::protobuf::uint64 challenge() const;
  void set_challenge(::google::protobuf::uint64 value);

  // optional fixed32 challenge_time = 3;
  bool has_challenge_time() const;
  void clear_challenge_time();
  static const int kChallengeTimeFieldNumber = 3;
  ::google::protobuf::uint32 challenge_time() const;
  void set_challenge_time(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 5;
  bool has_client_connection_id() const;
  void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 5;
  ::google::protobuf::uint32 client_connection_id() const;
  void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 network_config_version = 6;
  bool has_network_config_version() const;
  void clear_network_config_version();
  static const int kNetworkConfigVersionFieldNumber = 6;
  ::google::protobuf::uint32 network_config_version() const;
  void set_network_config_version(::google::protobuf::uint32 value);

  // optional uint32 protocol_version = 7;
  bool has_protocol_version() const;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 7;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // optional fixed32 server_connection_id = 8;
  bool has_server_connection_id() const;
  void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 8;
  ::google::protobuf::uint32 server_connection_id() const;
  void set_server_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramGameserverSessionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 challenge_time_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 network_config_version_;
  ::google::protobuf::uint32 protocol_version_;
  ::google::protobuf::uint32 server_connection_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramGameserverSessionEstablished final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramGameserverSessionEstablished) */ {
 public:
  CMsgSteamDatagramGameserverSessionEstablished();
  virtual ~CMsgSteamDatagramGameserverSessionEstablished();

  CMsgSteamDatagramGameserverSessionEstablished(const CMsgSteamDatagramGameserverSessionEstablished& from);

  inline CMsgSteamDatagramGameserverSessionEstablished& operator=(const CMsgSteamDatagramGameserverSessionEstablished& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramGameserverSessionEstablished(CMsgSteamDatagramGameserverSessionEstablished&& from) noexcept
    : CMsgSteamDatagramGameserverSessionEstablished() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramGameserverSessionEstablished& operator=(CMsgSteamDatagramGameserverSessionEstablished&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramGameserverSessionEstablished& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramGameserverSessionEstablished* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramGameserverSessionEstablished*>(
               &_CMsgSteamDatagramGameserverSessionEstablished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CMsgSteamDatagramGameserverSessionEstablished* other);
  friend void swap(CMsgSteamDatagramGameserverSessionEstablished& a, CMsgSteamDatagramGameserverSessionEstablished& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramGameserverSessionEstablished* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramGameserverSessionEstablished>(nullptr);
  }

  CMsgSteamDatagramGameserverSessionEstablished* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramGameserverSessionEstablished>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramGameserverSessionEstablished& from);
  void MergeFrom(const CMsgSteamDatagramGameserverSessionEstablished& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramGameserverSessionEstablished* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seconds_until_shutdown = 4;
  bool has_seconds_until_shutdown() const;
  void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 4;
  ::google::protobuf::uint32 seconds_until_shutdown() const;
  void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional fixed64 gameserver_steam_id = 3;
  bool has_gameserver_steam_id() const;
  void clear_gameserver_steam_id();
  static const int kGameserverSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 gameserver_steam_id() const;
  void set_gameserver_steam_id(::google::protobuf::uint64 value);

  // optional uint32 seq_num_r2c = 6;
  bool has_seq_num_r2c() const;
  void clear_seq_num_r2c();
  static const int kSeqNumR2CFieldNumber = 6;
  ::google::protobuf::uint32 seq_num_r2c() const;
  void set_seq_num_r2c(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramGameserverSessionEstablished)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint64 gameserver_steam_id_;
  ::google::protobuf::uint32 seq_num_r2c_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsClientToRouter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter) */ {
 public:
  CMsgSteamDatagramConnectionStatsClientToRouter();
  virtual ~CMsgSteamDatagramConnectionStatsClientToRouter();

  CMsgSteamDatagramConnectionStatsClientToRouter(const CMsgSteamDatagramConnectionStatsClientToRouter& from);

  inline CMsgSteamDatagramConnectionStatsClientToRouter& operator=(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectionStatsClientToRouter(CMsgSteamDatagramConnectionStatsClientToRouter&& from) noexcept
    : CMsgSteamDatagramConnectionStatsClientToRouter() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectionStatsClientToRouter& operator=(CMsgSteamDatagramConnectionStatsClientToRouter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectionStatsClientToRouter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectionStatsClientToRouter* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectionStatsClientToRouter*>(
               &_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CMsgSteamDatagramConnectionStatsClientToRouter* other);
  friend void swap(CMsgSteamDatagramConnectionStatsClientToRouter& a, CMsgSteamDatagramConnectionStatsClientToRouter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectionStatsClientToRouter* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsClientToRouter>(nullptr);
  }

  CMsgSteamDatagramConnectionStatsClientToRouter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsClientToRouter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectionStatsClientToRouter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsClientToRouter_Flags Flags;
  static const Flags ACK_REQUEST_RELAY =
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E =
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE =
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsClientToRouter_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed32 ack_relay = 4;
  int ack_relay_size() const;
  void clear_ack_relay();
  static const int kAckRelayFieldNumber = 4;
  ::google::protobuf::uint32 ack_relay(int index) const;
  void set_ack_relay(int index, ::google::protobuf::uint32 value);
  void add_ack_relay(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 5;
  int legacy_ack_e2e_size() const;
  void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 5;
  ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  bool has_quality_relay() const;
  void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  void set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  bool has_quality_e2e() const;
  void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  void set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // optional uint32 flags = 6;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 6;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 8;
  bool has_client_connection_id() const;
  void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 8;
  ::google::protobuf::uint32 client_connection_id() const;
  void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num_c2r = 9;
  bool has_seq_num_c2r() const;
  void clear_seq_num_c2r();
  static const int kSeqNumC2RFieldNumber = 9;
  ::google::protobuf::uint32 seq_num_c2r() const;
  void set_seq_num_c2r(::google::protobuf::uint32 value);

  // optional uint32 seq_num_c2s = 10;
  bool has_seq_num_c2s() const;
  void clear_seq_num_c2s();
  static const int kSeqNumC2SFieldNumber = 10;
  ::google::protobuf::uint32 seq_num_c2s() const;
  void set_seq_num_c2s(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 seq_num_c2r_;
  ::google::protobuf::uint32 seq_num_c2s_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsRouterToClient final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient) */ {
 public:
  CMsgSteamDatagramConnectionStatsRouterToClient();
  virtual ~CMsgSteamDatagramConnectionStatsRouterToClient();

  CMsgSteamDatagramConnectionStatsRouterToClient(const CMsgSteamDatagramConnectionStatsRouterToClient& from);

  inline CMsgSteamDatagramConnectionStatsRouterToClient& operator=(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectionStatsRouterToClient(CMsgSteamDatagramConnectionStatsRouterToClient&& from) noexcept
    : CMsgSteamDatagramConnectionStatsRouterToClient() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectionStatsRouterToClient& operator=(CMsgSteamDatagramConnectionStatsRouterToClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectionStatsRouterToClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectionStatsRouterToClient* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectionStatsRouterToClient*>(
               &_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CMsgSteamDatagramConnectionStatsRouterToClient* other);
  friend void swap(CMsgSteamDatagramConnectionStatsRouterToClient& a, CMsgSteamDatagramConnectionStatsRouterToClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectionStatsRouterToClient* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsRouterToClient>(nullptr);
  }

  CMsgSteamDatagramConnectionStatsRouterToClient* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsRouterToClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectionStatsRouterToClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsRouterToClient_Flags Flags;
  static const Flags ACK_REQUEST_RELAY =
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E =
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE =
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsRouterToClient_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed32 ack_relay = 13;
  int ack_relay_size() const;
  void clear_ack_relay();
  static const int kAckRelayFieldNumber = 13;
  ::google::protobuf::uint32 ack_relay(int index) const;
  void set_ack_relay(int index, ::google::protobuf::uint32 value);
  void add_ack_relay(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 14;
  int legacy_ack_e2e_size() const;
  void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 14;
  ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  bool has_quality_relay() const;
  void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  void set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  bool has_quality_e2e() const;
  void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  void set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // optional uint32 seconds_until_shutdown = 6;
  bool has_seconds_until_shutdown() const;
  void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 6;
  ::google::protobuf::uint32 seconds_until_shutdown() const;
  void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 7;
  bool has_client_connection_id() const;
  void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 7;
  ::google::protobuf::uint32 client_connection_id() const;
  void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num_r2c = 8;
  bool has_seq_num_r2c() const;
  void clear_seq_num_r2c();
  static const int kSeqNumR2CFieldNumber = 8;
  ::google::protobuf::uint32 seq_num_r2c() const;
  void set_seq_num_r2c(::google::protobuf::uint32 value);

  // optional uint32 seq_num_s2c = 9;
  bool has_seq_num_s2c() const;
  void clear_seq_num_s2c();
  static const int kSeqNumS2CFieldNumber = 9;
  ::google::protobuf::uint32 seq_num_s2c() const;
  void set_seq_num_s2c(::google::protobuf::uint32 value);

  // optional fixed32 migrate_request_ip = 10;
  bool has_migrate_request_ip() const;
  void clear_migrate_request_ip();
  static const int kMigrateRequestIpFieldNumber = 10;
  ::google::protobuf::uint32 migrate_request_ip() const;
  void set_migrate_request_ip(::google::protobuf::uint32 value);

  // optional uint32 migrate_request_port = 11;
  bool has_migrate_request_port() const;
  void clear_migrate_request_port();
  static const int kMigrateRequestPortFieldNumber = 11;
  ::google::protobuf::uint32 migrate_request_port() const;
  void set_migrate_request_port(::google::protobuf::uint32 value);

  // optional uint32 scoring_penalty_relay_cluster = 12;
  bool has_scoring_penalty_relay_cluster() const;
  void clear_scoring_penalty_relay_cluster();
  static const int kScoringPenaltyRelayClusterFieldNumber = 12;
  ::google::protobuf::uint32 scoring_penalty_relay_cluster() const;
  void set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value);

  // optional uint32 flags = 15;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 15;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 seq_num_r2c_;
  ::google::protobuf::uint32 seq_num_s2c_;
  ::google::protobuf::uint32 migrate_request_ip_;
  ::google::protobuf::uint32 migrate_request_port_;
  ::google::protobuf::uint32 scoring_penalty_relay_cluster_;
  ::google::protobuf::uint32 flags_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsRouterToServer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer) */ {
 public:
  CMsgSteamDatagramConnectionStatsRouterToServer();
  virtual ~CMsgSteamDatagramConnectionStatsRouterToServer();

  CMsgSteamDatagramConnectionStatsRouterToServer(const CMsgSteamDatagramConnectionStatsRouterToServer& from);

  inline CMsgSteamDatagramConnectionStatsRouterToServer& operator=(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectionStatsRouterToServer(CMsgSteamDatagramConnectionStatsRouterToServer&& from) noexcept
    : CMsgSteamDatagramConnectionStatsRouterToServer() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectionStatsRouterToServer& operator=(CMsgSteamDatagramConnectionStatsRouterToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectionStatsRouterToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectionStatsRouterToServer* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectionStatsRouterToServer*>(
               &_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CMsgSteamDatagramConnectionStatsRouterToServer* other);
  friend void swap(CMsgSteamDatagramConnectionStatsRouterToServer& a, CMsgSteamDatagramConnectionStatsRouterToServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectionStatsRouterToServer* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsRouterToServer>(nullptr);
  }

  CMsgSteamDatagramConnectionStatsRouterToServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsRouterToServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectionStatsRouterToServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsRouterToServer_Flags Flags;
  static const Flags ACK_REQUEST_RELAY =
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E =
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE =
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsRouterToServer_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed32 ack_relay = 10;
  int ack_relay_size() const;
  void clear_ack_relay();
  static const int kAckRelayFieldNumber = 10;
  ::google::protobuf::uint32 ack_relay(int index) const;
  void set_ack_relay(int index, ::google::protobuf::uint32 value);
  void add_ack_relay(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 11;
  int legacy_ack_e2e_size() const;
  void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 11;
  ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  bool has_quality_relay() const;
  void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  void set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  bool has_quality_e2e() const;
  void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  void set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // optional uint32 seq_num_r2s = 5;
  bool has_seq_num_r2s() const;
  void clear_seq_num_r2s();
  static const int kSeqNumR2SFieldNumber = 5;
  ::google::protobuf::uint32 seq_num_r2s() const;
  void set_seq_num_r2s(::google::protobuf::uint32 value);

  // optional uint32 seq_num_c2s = 6;
  bool has_seq_num_c2s() const;
  void clear_seq_num_c2s();
  static const int kSeqNumC2SFieldNumber = 6;
  ::google::protobuf::uint32 seq_num_c2s() const;
  void set_seq_num_c2s(::google::protobuf::uint32 value);

  // optional fixed64 client_steam_id = 7;
  bool has_client_steam_id() const;
  void clear_client_steam_id();
  static const int kClientSteamIdFieldNumber = 7;
  ::google::protobuf::uint64 client_steam_id() const;
  void set_client_steam_id(::google::protobuf::uint64 value);

  // optional uint32 relay_session_id = 8;
  bool has_relay_session_id() const;
  void clear_relay_session_id();
  static const int kRelaySessionIdFieldNumber = 8;
  ::google::protobuf::uint32 relay_session_id() const;
  void set_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 9;
  bool has_client_connection_id() const;
  void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 9;
  ::google::protobuf::uint32 client_connection_id() const;
  void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 flags = 12;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 12;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional fixed32 server_connection_id = 13;
  bool has_server_connection_id() const;
  void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 13;
  ::google::protobuf::uint32 server_connection_id() const;
  void set_server_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::uint32 seq_num_r2s_;
  ::google::protobuf::uint32 seq_num_c2s_;
  ::google::protobuf::uint64 client_steam_id_;
  ::google::protobuf::uint32 relay_session_id_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 server_connection_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsServerToRouter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter) */ {
 public:
  CMsgSteamDatagramConnectionStatsServerToRouter();
  virtual ~CMsgSteamDatagramConnectionStatsServerToRouter();

  CMsgSteamDatagramConnectionStatsServerToRouter(const CMsgSteamDatagramConnectionStatsServerToRouter& from);

  inline CMsgSteamDatagramConnectionStatsServerToRouter& operator=(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectionStatsServerToRouter(CMsgSteamDatagramConnectionStatsServerToRouter&& from) noexcept
    : CMsgSteamDatagramConnectionStatsServerToRouter() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectionStatsServerToRouter& operator=(CMsgSteamDatagramConnectionStatsServerToRouter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectionStatsServerToRouter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectionStatsServerToRouter* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectionStatsServerToRouter*>(
               &_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CMsgSteamDatagramConnectionStatsServerToRouter* other);
  friend void swap(CMsgSteamDatagramConnectionStatsServerToRouter& a, CMsgSteamDatagramConnectionStatsServerToRouter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectionStatsServerToRouter* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsServerToRouter>(nullptr);
  }

  CMsgSteamDatagramConnectionStatsServerToRouter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsServerToRouter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectionStatsServerToRouter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsServerToRouter_Flags Flags;
  static const Flags ACK_REQUEST_RELAY =
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E =
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE =
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsServerToRouter_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed32 ack_relay = 8;
  int ack_relay_size() const;
  void clear_ack_relay();
  static const int kAckRelayFieldNumber = 8;
  ::google::protobuf::uint32 ack_relay(int index) const;
  void set_ack_relay(int index, ::google::protobuf::uint32 value);
  void add_ack_relay(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 9;
  int legacy_ack_e2e_size() const;
  void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 9;
  ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  bool has_quality_relay() const;
  void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  void set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  bool has_quality_e2e() const;
  void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  void set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // optional uint32 seq_num_s2r = 3;
  bool has_seq_num_s2r() const;
  void clear_seq_num_s2r();
  static const int kSeqNumS2RFieldNumber = 3;
  ::google::protobuf::uint32 seq_num_s2r() const;
  void set_seq_num_s2r(::google::protobuf::uint32 value);

  // optional uint32 seq_num_s2c = 4;
  bool has_seq_num_s2c() const;
  void clear_seq_num_s2c();
  static const int kSeqNumS2CFieldNumber = 4;
  ::google::protobuf::uint32 seq_num_s2c() const;
  void set_seq_num_s2c(::google::protobuf::uint32 value);

  // optional fixed64 client_steam_id = 5;
  bool has_client_steam_id() const;
  void clear_client_steam_id();
  static const int kClientSteamIdFieldNumber = 5;
  ::google::protobuf::uint64 client_steam_id() const;
  void set_client_steam_id(::google::protobuf::uint64 value);

  // optional uint32 relay_session_id = 6;
  bool has_relay_session_id() const;
  void clear_relay_session_id();
  static const int kRelaySessionIdFieldNumber = 6;
  ::google::protobuf::uint32 relay_session_id() const;
  void set_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 7;
  bool has_client_connection_id() const;
  void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 7;
  ::google::protobuf::uint32 client_connection_id() const;
  void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 flags = 10;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 10;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional fixed32 server_connection_id = 11;
  bool has_server_connection_id() const;
  void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 11;
  ::google::protobuf::uint32 server_connection_id() const;
  void set_server_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::uint32 seq_num_s2r_;
  ::google::protobuf::uint32 seq_num_s2c_;
  ::google::protobuf::uint64 client_steam_id_;
  ::google::protobuf::uint32 relay_session_id_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 server_connection_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PSessionRequestBody final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramP2PSessionRequestBody) */ {
 public:
  CMsgSteamDatagramP2PSessionRequestBody();
  virtual ~CMsgSteamDatagramP2PSessionRequestBody();

  CMsgSteamDatagramP2PSessionRequestBody(const CMsgSteamDatagramP2PSessionRequestBody& from);

  inline CMsgSteamDatagramP2PSessionRequestBody& operator=(const CMsgSteamDatagramP2PSessionRequestBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramP2PSessionRequestBody(CMsgSteamDatagramP2PSessionRequestBody&& from) noexcept
    : CMsgSteamDatagramP2PSessionRequestBody() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramP2PSessionRequestBody& operator=(CMsgSteamDatagramP2PSessionRequestBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramP2PSessionRequestBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramP2PSessionRequestBody* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramP2PSessionRequestBody*>(
               &_CMsgSteamDatagramP2PSessionRequestBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CMsgSteamDatagramP2PSessionRequestBody* other);
  friend void swap(CMsgSteamDatagramP2PSessionRequestBody& a, CMsgSteamDatagramP2PSessionRequestBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramP2PSessionRequestBody* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PSessionRequestBody>(nullptr);
  }

  CMsgSteamDatagramP2PSessionRequestBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PSessionRequestBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramP2PSessionRequestBody& from);
  void MergeFrom(const CMsgSteamDatagramP2PSessionRequestBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramP2PSessionRequestBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 challenge = 2;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 2;
  ::google::protobuf::uint64 challenge() const;
  void set_challenge(::google::protobuf::uint64 value);

  // optional fixed32 challenge_time = 1;
  bool has_challenge_time() const;
  void clear_challenge_time();
  static const int kChallengeTimeFieldNumber = 1;
  ::google::protobuf::uint32 challenge_time() const;
  void set_challenge_time(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 3;
  bool has_client_connection_id() const;
  void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 3;
  ::google::protobuf::uint32 client_connection_id() const;
  void set_client_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 peer_steam_id = 4;
  bool has_peer_steam_id() const;
  void clear_peer_steam_id();
  static const int kPeerSteamIdFieldNumber = 4;
  ::google::protobuf::uint64 peer_steam_id() const;
  void set_peer_steam_id(::google::protobuf::uint64 value);

  // optional fixed32 peer_connection_id = 5;
  bool has_peer_connection_id() const;
  void clear_peer_connection_id();
  static const int kPeerConnectionIdFieldNumber = 5;
  ::google::protobuf::uint32 peer_connection_id() const;
  void set_peer_connection_id(::google::protobuf::uint32 value);

  // optional uint32 protocol_version = 8;
  bool has_protocol_version() const;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 8;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // optional uint32 network_config_version = 9;
  bool has_network_config_version() const;
  void clear_network_config_version();
  static const int kNetworkConfigVersionFieldNumber = 9;
  ::google::protobuf::uint32 network_config_version() const;
  void set_network_config_version(::google::protobuf::uint32 value);

  // optional fixed32 public_ip = 10;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 10;
  ::google::protobuf::uint32 public_ip() const;
  void set_public_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramP2PSessionRequestBody)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 challenge_time_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint64 peer_steam_id_;
  ::google::protobuf::uint32 peer_connection_id_;
  ::google::protobuf::uint32 protocol_version_;
  ::google::protobuf::uint32 network_config_version_;
  ::google::protobuf::uint32 public_ip_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PSessionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramP2PSessionRequest) */ {
 public:
  CMsgSteamDatagramP2PSessionRequest();
  virtual ~CMsgSteamDatagramP2PSessionRequest();

  CMsgSteamDatagramP2PSessionRequest(const CMsgSteamDatagramP2PSessionRequest& from);

  inline CMsgSteamDatagramP2PSessionRequest& operator=(const CMsgSteamDatagramP2PSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramP2PSessionRequest(CMsgSteamDatagramP2PSessionRequest&& from) noexcept
    : CMsgSteamDatagramP2PSessionRequest() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramP2PSessionRequest& operator=(CMsgSteamDatagramP2PSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramP2PSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramP2PSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramP2PSessionRequest*>(
               &_CMsgSteamDatagramP2PSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CMsgSteamDatagramP2PSessionRequest* other);
  friend void swap(CMsgSteamDatagramP2PSessionRequest& a, CMsgSteamDatagramP2PSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramP2PSessionRequest* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PSessionRequest>(nullptr);
  }

  CMsgSteamDatagramP2PSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramP2PSessionRequest& from);
  void MergeFrom(const CMsgSteamDatagramP2PSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramP2PSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional bytes signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 1;
  bool has_cert() const;
  void clear_cert();
  static const int kCertFieldNumber = 1;
  const ::proto::steam::CMsgSteamDatagramCertificateSigned& cert() const;
  ::proto::steam::CMsgSteamDatagramCertificateSigned* release_cert();
  ::proto::steam::CMsgSteamDatagramCertificateSigned* mutable_cert();
  void set_allocated_cert(::proto::steam::CMsgSteamDatagramCertificateSigned* cert);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramP2PSessionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::proto::steam::CMsgSteamDatagramCertificateSigned* cert_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PSessionEstablished final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramP2PSessionEstablished) */ {
 public:
  CMsgSteamDatagramP2PSessionEstablished();
  virtual ~CMsgSteamDatagramP2PSessionEstablished();

  CMsgSteamDatagramP2PSessionEstablished(const CMsgSteamDatagramP2PSessionEstablished& from);

  inline CMsgSteamDatagramP2PSessionEstablished& operator=(const CMsgSteamDatagramP2PSessionEstablished& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramP2PSessionEstablished(CMsgSteamDatagramP2PSessionEstablished&& from) noexcept
    : CMsgSteamDatagramP2PSessionEstablished() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramP2PSessionEstablished& operator=(CMsgSteamDatagramP2PSessionEstablished&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramP2PSessionEstablished& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramP2PSessionEstablished* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramP2PSessionEstablished*>(
               &_CMsgSteamDatagramP2PSessionEstablished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CMsgSteamDatagramP2PSessionEstablished* other);
  friend void swap(CMsgSteamDatagramP2PSessionEstablished& a, CMsgSteamDatagramP2PSessionEstablished& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramP2PSessionEstablished* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PSessionEstablished>(nullptr);
  }

  CMsgSteamDatagramP2PSessionEstablished* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PSessionEstablished>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramP2PSessionEstablished& from);
  void MergeFrom(const CMsgSteamDatagramP2PSessionEstablished& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramP2PSessionEstablished* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes relay_routing_token = 4;
  bool has_relay_routing_token() const;
  void clear_relay_routing_token();
  static const int kRelayRoutingTokenFieldNumber = 4;
  const ::std::string& relay_routing_token() const;
  void set_relay_routing_token(const ::std::string& value);
  #if LANG_CXX11
  void set_relay_routing_token(::std::string&& value);
  #endif
  void set_relay_routing_token(const char* value);
  void set_relay_routing_token(const void* value, size_t size);
  ::std::string* mutable_relay_routing_token();
  ::std::string* release_relay_routing_token();
  void set_allocated_relay_routing_token(::std::string* relay_routing_token);

  // optional fixed32 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seconds_until_shutdown = 3;
  bool has_seconds_until_shutdown() const;
  void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 3;
  ::google::protobuf::uint32 seconds_until_shutdown() const;
  void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional uint32 seq_num_r2c = 5;
  bool has_seq_num_r2c() const;
  void clear_seq_num_r2c();
  static const int kSeqNumR2CFieldNumber = 5;
  ::google::protobuf::uint32 seq_num_r2c() const;
  void set_seq_num_r2c(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramP2PSessionEstablished)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr relay_routing_token_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint32 seq_num_r2c_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PRoutes_RelayCluster final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster) */ {
 public:
  CMsgSteamDatagramP2PRoutes_RelayCluster();
  virtual ~CMsgSteamDatagramP2PRoutes_RelayCluster();

  CMsgSteamDatagramP2PRoutes_RelayCluster(const CMsgSteamDatagramP2PRoutes_RelayCluster& from);

  inline CMsgSteamDatagramP2PRoutes_RelayCluster& operator=(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramP2PRoutes_RelayCluster(CMsgSteamDatagramP2PRoutes_RelayCluster&& from) noexcept
    : CMsgSteamDatagramP2PRoutes_RelayCluster() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramP2PRoutes_RelayCluster& operator=(CMsgSteamDatagramP2PRoutes_RelayCluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramP2PRoutes_RelayCluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramP2PRoutes_RelayCluster* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramP2PRoutes_RelayCluster*>(
               &_CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CMsgSteamDatagramP2PRoutes_RelayCluster* other);
  friend void swap(CMsgSteamDatagramP2PRoutes_RelayCluster& a, CMsgSteamDatagramP2PRoutes_RelayCluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramP2PRoutes_RelayCluster* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PRoutes_RelayCluster>(nullptr);
  }

  CMsgSteamDatagramP2PRoutes_RelayCluster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PRoutes_RelayCluster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from);
  void MergeFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramP2PRoutes_RelayCluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes session_relay_routing_token = 4;
  bool has_session_relay_routing_token() const;
  void clear_session_relay_routing_token();
  static const int kSessionRelayRoutingTokenFieldNumber = 4;
  const ::std::string& session_relay_routing_token() const;
  void set_session_relay_routing_token(const ::std::string& value);
  #if LANG_CXX11
  void set_session_relay_routing_token(::std::string&& value);
  #endif
  void set_session_relay_routing_token(const char* value);
  void set_session_relay_routing_token(const void* value, size_t size);
  ::std::string* mutable_session_relay_routing_token();
  ::std::string* release_session_relay_routing_token();
  void set_allocated_session_relay_routing_token(::std::string* session_relay_routing_token);

  // optional fixed32 pop_id = 1;
  bool has_pop_id() const;
  void clear_pop_id();
  static const int kPopIdFieldNumber = 1;
  ::google::protobuf::uint32 pop_id() const;
  void set_pop_id(::google::protobuf::uint32 value);

  // optional uint32 ping_ms = 2;
  bool has_ping_ms() const;
  void clear_ping_ms();
  static const int kPingMsFieldNumber = 2;
  ::google::protobuf::uint32 ping_ms() const;
  void set_ping_ms(::google::protobuf::uint32 value);

  // optional uint32 score_penalty = 3;
  bool has_score_penalty() const;
  void clear_score_penalty();
  static const int kScorePenaltyFieldNumber = 3;
  ::google::protobuf::uint32 score_penalty() const;
  void set_score_penalty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr session_relay_routing_token_;
  ::google::protobuf::uint32 pop_id_;
  ::google::protobuf::uint32 ping_ms_;
  ::google::protobuf::uint32 score_penalty_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PRoutes_Route final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramP2PRoutes.Route) */ {
 public:
  CMsgSteamDatagramP2PRoutes_Route();
  virtual ~CMsgSteamDatagramP2PRoutes_Route();

  CMsgSteamDatagramP2PRoutes_Route(const CMsgSteamDatagramP2PRoutes_Route& from);

  inline CMsgSteamDatagramP2PRoutes_Route& operator=(const CMsgSteamDatagramP2PRoutes_Route& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramP2PRoutes_Route(CMsgSteamDatagramP2PRoutes_Route&& from) noexcept
    : CMsgSteamDatagramP2PRoutes_Route() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramP2PRoutes_Route& operator=(CMsgSteamDatagramP2PRoutes_Route&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramP2PRoutes_Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramP2PRoutes_Route* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramP2PRoutes_Route*>(
               &_CMsgSteamDatagramP2PRoutes_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CMsgSteamDatagramP2PRoutes_Route* other);
  friend void swap(CMsgSteamDatagramP2PRoutes_Route& a, CMsgSteamDatagramP2PRoutes_Route& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramP2PRoutes_Route* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PRoutes_Route>(nullptr);
  }

  CMsgSteamDatagramP2PRoutes_Route* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PRoutes_Route>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramP2PRoutes_Route& from);
  void MergeFrom(const CMsgSteamDatagramP2PRoutes_Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramP2PRoutes_Route* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 my_pop_id = 1;
  bool has_my_pop_id() const;
  void clear_my_pop_id();
  static const int kMyPopIdFieldNumber = 1;
  ::google::protobuf::uint32 my_pop_id() const;
  void set_my_pop_id(::google::protobuf::uint32 value);

  // optional fixed32 your_pop_id = 2;
  bool has_your_pop_id() const;
  void clear_your_pop_id();
  static const int kYourPopIdFieldNumber = 2;
  ::google::protobuf::uint32 your_pop_id() const;
  void set_your_pop_id(::google::protobuf::uint32 value);

  // optional uint32 score = 3;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  ::google::protobuf::uint32 score() const;
  void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramP2PRoutes.Route)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 my_pop_id_;
  ::google::protobuf::uint32 your_pop_id_;
  ::google::protobuf::uint32 score_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PRoutes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramP2PRoutes) */ {
 public:
  CMsgSteamDatagramP2PRoutes();
  virtual ~CMsgSteamDatagramP2PRoutes();

  CMsgSteamDatagramP2PRoutes(const CMsgSteamDatagramP2PRoutes& from);

  inline CMsgSteamDatagramP2PRoutes& operator=(const CMsgSteamDatagramP2PRoutes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramP2PRoutes(CMsgSteamDatagramP2PRoutes&& from) noexcept
    : CMsgSteamDatagramP2PRoutes() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramP2PRoutes& operator=(CMsgSteamDatagramP2PRoutes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramP2PRoutes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramP2PRoutes* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramP2PRoutes*>(
               &_CMsgSteamDatagramP2PRoutes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CMsgSteamDatagramP2PRoutes* other);
  friend void swap(CMsgSteamDatagramP2PRoutes& a, CMsgSteamDatagramP2PRoutes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramP2PRoutes* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PRoutes>(nullptr);
  }

  CMsgSteamDatagramP2PRoutes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PRoutes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramP2PRoutes& from);
  void MergeFrom(const CMsgSteamDatagramP2PRoutes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramP2PRoutes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramP2PRoutes_RelayCluster RelayCluster;
  typedef CMsgSteamDatagramP2PRoutes_Route Route;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  int relay_clusters_size() const;
  void clear_relay_clusters();
  static const int kRelayClustersFieldNumber = 1;
  ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster* mutable_relay_clusters(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster >*
      mutable_relay_clusters();
  const ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster& relay_clusters(int index) const;
  ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster* add_relay_clusters();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster >&
      relay_clusters() const;

  // repeated .proto.steam.CMsgSteamDatagramP2PRoutes.Route routes = 2;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 2;
  ::proto::steam::CMsgSteamDatagramP2PRoutes_Route* mutable_routes(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_Route >*
      mutable_routes();
  const ::proto::steam::CMsgSteamDatagramP2PRoutes_Route& routes(int index) const;
  ::proto::steam::CMsgSteamDatagramP2PRoutes_Route* add_routes();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_Route >&
      routes() const;

  // optional uint32 revision = 3;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 3;
  ::google::protobuf::uint32 revision() const;
  void set_revision(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramP2PRoutes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster > relay_clusters_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_Route > routes_;
  ::google::protobuf::uint32 revision_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PRendezvous final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramP2PRendezvous) */ {
 public:
  CMsgSteamDatagramP2PRendezvous();
  virtual ~CMsgSteamDatagramP2PRendezvous();

  CMsgSteamDatagramP2PRendezvous(const CMsgSteamDatagramP2PRendezvous& from);

  inline CMsgSteamDatagramP2PRendezvous& operator=(const CMsgSteamDatagramP2PRendezvous& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramP2PRendezvous(CMsgSteamDatagramP2PRendezvous&& from) noexcept
    : CMsgSteamDatagramP2PRendezvous() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramP2PRendezvous& operator=(CMsgSteamDatagramP2PRendezvous&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramP2PRendezvous& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramP2PRendezvous* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramP2PRendezvous*>(
               &_CMsgSteamDatagramP2PRendezvous_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CMsgSteamDatagramP2PRendezvous* other);
  friend void swap(CMsgSteamDatagramP2PRendezvous& a, CMsgSteamDatagramP2PRendezvous& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramP2PRendezvous* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PRendezvous>(nullptr);
  }

  CMsgSteamDatagramP2PRendezvous* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PRendezvous>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramP2PRendezvous& from);
  void MergeFrom(const CMsgSteamDatagramP2PRendezvous& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramP2PRendezvous* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes failed_relay_routing_token = 7;
  bool has_failed_relay_routing_token() const;
  void clear_failed_relay_routing_token();
  static const int kFailedRelayRoutingTokenFieldNumber = 7;
  const ::std::string& failed_relay_routing_token() const;
  void set_failed_relay_routing_token(const ::std::string& value);
  #if LANG_CXX11
  void set_failed_relay_routing_token(::std::string&& value);
  #endif
  void set_failed_relay_routing_token(const char* value);
  void set_failed_relay_routing_token(const void* value, size_t size);
  ::std::string* mutable_failed_relay_routing_token();
  ::std::string* release_failed_relay_routing_token();
  void set_allocated_failed_relay_routing_token(::std::string* failed_relay_routing_token);

  // optional .proto.steam.CMsgSteamDatagramP2PRoutes routes = 2;
  bool has_routes() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 2;
  const ::proto::steam::CMsgSteamDatagramP2PRoutes& routes() const;
  ::proto::steam::CMsgSteamDatagramP2PRoutes* release_routes();
  ::proto::steam::CMsgSteamDatagramP2PRoutes* mutable_routes();
  void set_allocated_routes(::proto::steam::CMsgSteamDatagramP2PRoutes* routes);

  // optional .proto.steam.CMsgSteamDatagramConnectRequest connect_request = 4;
  bool has_connect_request() const;
  void clear_connect_request();
  static const int kConnectRequestFieldNumber = 4;
  const ::proto::steam::CMsgSteamDatagramConnectRequest& connect_request() const;
  ::proto::steam::CMsgSteamDatagramConnectRequest* release_connect_request();
  ::proto::steam::CMsgSteamDatagramConnectRequest* mutable_connect_request();
  void set_allocated_connect_request(::proto::steam::CMsgSteamDatagramConnectRequest* connect_request);

  // optional .proto.steam.CMsgSteamDatagramConnectOK connect_ok = 5;
  bool has_connect_ok() const;
  void clear_connect_ok();
  static const int kConnectOkFieldNumber = 5;
  const ::proto::steam::CMsgSteamDatagramConnectOK& connect_ok() const;
  ::proto::steam::CMsgSteamDatagramConnectOK* release_connect_ok();
  ::proto::steam::CMsgSteamDatagramConnectOK* mutable_connect_ok();
  void set_allocated_connect_ok(::proto::steam::CMsgSteamDatagramConnectOK* connect_ok);

  // optional .proto.steam.CMsgSteamDatagramConnectionClosed connection_closed = 6;
  bool has_connection_closed() const;
  void clear_connection_closed();
  static const int kConnectionClosedFieldNumber = 6;
  const ::proto::steam::CMsgSteamDatagramConnectionClosed& connection_closed() const;
  ::proto::steam::CMsgSteamDatagramConnectionClosed* release_connection_closed();
  ::proto::steam::CMsgSteamDatagramConnectionClosed* mutable_connection_closed();
  void set_allocated_connection_closed(::proto::steam::CMsgSteamDatagramConnectionClosed* connection_closed);

  // optional fixed32 to_connection_id = 1;
  bool has_to_connection_id() const;
  void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 to_connection_id() const;
  void set_to_connection_id(::google::protobuf::uint32 value);

  // optional uint32 ack_peer_routes_revision = 3;
  bool has_ack_peer_routes_revision() const;
  void clear_ack_peer_routes_revision();
  static const int kAckPeerRoutesRevisionFieldNumber = 3;
  ::google::protobuf::uint32 ack_peer_routes_revision() const;
  void set_ack_peer_routes_revision(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramP2PRendezvous)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr failed_relay_routing_token_;
  ::proto::steam::CMsgSteamDatagramP2PRoutes* routes_;
  ::proto::steam::CMsgSteamDatagramConnectRequest* connect_request_;
  ::proto::steam::CMsgSteamDatagramConnectOK* connect_ok_;
  ::proto::steam::CMsgSteamDatagramConnectionClosed* connection_closed_;
  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 ack_peer_routes_revision_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsP2PClientToRouter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter) */ {
 public:
  CMsgSteamDatagramConnectionStatsP2PClientToRouter();
  virtual ~CMsgSteamDatagramConnectionStatsP2PClientToRouter();

  CMsgSteamDatagramConnectionStatsP2PClientToRouter(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from);

  inline CMsgSteamDatagramConnectionStatsP2PClientToRouter& operator=(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectionStatsP2PClientToRouter(CMsgSteamDatagramConnectionStatsP2PClientToRouter&& from) noexcept
    : CMsgSteamDatagramConnectionStatsP2PClientToRouter() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectionStatsP2PClientToRouter& operator=(CMsgSteamDatagramConnectionStatsP2PClientToRouter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectionStatsP2PClientToRouter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectionStatsP2PClientToRouter* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectionStatsP2PClientToRouter*>(
               &_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CMsgSteamDatagramConnectionStatsP2PClientToRouter* other);
  friend void swap(CMsgSteamDatagramConnectionStatsP2PClientToRouter& a, CMsgSteamDatagramConnectionStatsP2PClientToRouter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectionStatsP2PClientToRouter* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsP2PClientToRouter>(nullptr);
  }

  CMsgSteamDatagramConnectionStatsP2PClientToRouter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsP2PClientToRouter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectionStatsP2PClientToRouter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags Flags;
  static const Flags ACK_REQUEST_RELAY =
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E =
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE =
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed32 ack_relay = 3;
  int ack_relay_size() const;
  void clear_ack_relay();
  static const int kAckRelayFieldNumber = 3;
  ::google::protobuf::uint32 ack_relay(int index) const;
  void set_ack_relay(int index, ::google::protobuf::uint32 value);
  void add_ack_relay(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 4;
  int legacy_ack_e2e_size() const;
  void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 4;
  ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional bytes forward_target_relay_routing_token = 6;
  bool has_forward_target_relay_routing_token() const;
  void clear_forward_target_relay_routing_token();
  static const int kForwardTargetRelayRoutingTokenFieldNumber = 6;
  const ::std::string& forward_target_relay_routing_token() const;
  void set_forward_target_relay_routing_token(const ::std::string& value);
  #if LANG_CXX11
  void set_forward_target_relay_routing_token(::std::string&& value);
  #endif
  void set_forward_target_relay_routing_token(const char* value);
  void set_forward_target_relay_routing_token(const void* value, size_t size);
  ::std::string* mutable_forward_target_relay_routing_token();
  ::std::string* release_forward_target_relay_routing_token();
  void set_allocated_forward_target_relay_routing_token(::std::string* forward_target_relay_routing_token);

  // optional bytes routes = 8;
  bool has_routes() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 8;
  const ::std::string& routes() const;
  void set_routes(const ::std::string& value);
  #if LANG_CXX11
  void set_routes(::std::string&& value);
  #endif
  void set_routes(const char* value);
  void set_routes(const void* value, size_t size);
  ::std::string* mutable_routes();
  ::std::string* release_routes();
  void set_allocated_routes(::std::string* routes);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  bool has_quality_relay() const;
  void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  void set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  bool has_quality_e2e() const;
  void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  void set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 5;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional uint32 forward_target_revision = 7;
  bool has_forward_target_revision() const;
  void clear_forward_target_revision();
  static const int kForwardTargetRevisionFieldNumber = 7;
  ::google::protobuf::uint32 forward_target_revision() const;
  void set_forward_target_revision(::google::protobuf::uint32 value);

  // optional uint32 ack_peer_routes_revision = 9;
  bool has_ack_peer_routes_revision() const;
  void clear_ack_peer_routes_revision();
  static const int kAckPeerRoutesRevisionFieldNumber = 9;
  ::google::protobuf::uint32 ack_peer_routes_revision() const;
  void set_ack_peer_routes_revision(::google::protobuf::uint32 value);

  // optional fixed32 connection_id = 10;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 10;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num_c2r = 11;
  bool has_seq_num_c2r() const;
  void clear_seq_num_c2r();
  static const int kSeqNumC2RFieldNumber = 11;
  ::google::protobuf::uint32 seq_num_c2r() const;
  void set_seq_num_c2r(::google::protobuf::uint32 value);

  // optional uint32 seq_num_e2e = 12;
  bool has_seq_num_e2e() const;
  void clear_seq_num_e2e();
  static const int kSeqNumE2EFieldNumber = 12;
  ::google::protobuf::uint32 seq_num_e2e() const;
  void set_seq_num_e2e(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::google::protobuf::internal::ArenaStringPtr forward_target_relay_routing_token_;
  ::google::protobuf::internal::ArenaStringPtr routes_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 forward_target_revision_;
  ::google::protobuf::uint32 ack_peer_routes_revision_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 seq_num_c2r_;
  ::google::protobuf::uint32 seq_num_e2e_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsP2PRouterToClient final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient) */ {
 public:
  CMsgSteamDatagramConnectionStatsP2PRouterToClient();
  virtual ~CMsgSteamDatagramConnectionStatsP2PRouterToClient();

  CMsgSteamDatagramConnectionStatsP2PRouterToClient(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from);

  inline CMsgSteamDatagramConnectionStatsP2PRouterToClient& operator=(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectionStatsP2PRouterToClient(CMsgSteamDatagramConnectionStatsP2PRouterToClient&& from) noexcept
    : CMsgSteamDatagramConnectionStatsP2PRouterToClient() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectionStatsP2PRouterToClient& operator=(CMsgSteamDatagramConnectionStatsP2PRouterToClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectionStatsP2PRouterToClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectionStatsP2PRouterToClient* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectionStatsP2PRouterToClient*>(
               &_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CMsgSteamDatagramConnectionStatsP2PRouterToClient* other);
  friend void swap(CMsgSteamDatagramConnectionStatsP2PRouterToClient& a, CMsgSteamDatagramConnectionStatsP2PRouterToClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectionStatsP2PRouterToClient* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsP2PRouterToClient>(nullptr);
  }

  CMsgSteamDatagramConnectionStatsP2PRouterToClient* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsP2PRouterToClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectionStatsP2PRouterToClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags Flags;
  static const Flags ACK_REQUEST_RELAY =
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E =
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE =
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed32 ack_relay = 7;
  int ack_relay_size() const;
  void clear_ack_relay();
  static const int kAckRelayFieldNumber = 7;
  ::google::protobuf::uint32 ack_relay(int index) const;
  void set_ack_relay(int index, ::google::protobuf::uint32 value);
  void add_ack_relay(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 8;
  int legacy_ack_e2e_size() const;
  void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 8;
  ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional bytes routes = 11;
  bool has_routes() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 11;
  const ::std::string& routes() const;
  void set_routes(const ::std::string& value);
  #if LANG_CXX11
  void set_routes(::std::string&& value);
  #endif
  void set_routes(const char* value);
  void set_routes(const void* value, size_t size);
  ::std::string* mutable_routes();
  ::std::string* release_routes();
  void set_allocated_routes(::std::string* routes);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  bool has_quality_relay() const;
  void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  void set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  bool has_quality_e2e() const;
  void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  void set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // optional uint32 seconds_until_shutdown = 3;
  bool has_seconds_until_shutdown() const;
  void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 3;
  ::google::protobuf::uint32 seconds_until_shutdown() const;
  void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional fixed32 migrate_request_ip = 4;
  bool has_migrate_request_ip() const;
  void clear_migrate_request_ip();
  static const int kMigrateRequestIpFieldNumber = 4;
  ::google::protobuf::uint32 migrate_request_ip() const;
  void set_migrate_request_ip(::google::protobuf::uint32 value);

  // optional uint32 migrate_request_port = 5;
  bool has_migrate_request_port() const;
  void clear_migrate_request_port();
  static const int kMigrateRequestPortFieldNumber = 5;
  ::google::protobuf::uint32 migrate_request_port() const;
  void set_migrate_request_port(::google::protobuf::uint32 value);

  // optional uint32 scoring_penalty_relay_cluster = 6;
  bool has_scoring_penalty_relay_cluster() const;
  void clear_scoring_penalty_relay_cluster();
  static const int kScoringPenaltyRelayClusterFieldNumber = 6;
  ::google::protobuf::uint32 scoring_penalty_relay_cluster() const;
  void set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value);

  // optional uint32 flags = 9;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 9;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional uint32 ack_forward_target_revision = 10;
  bool has_ack_forward_target_revision() const;
  void clear_ack_forward_target_revision();
  static const int kAckForwardTargetRevisionFieldNumber = 10;
  ::google::protobuf::uint32 ack_forward_target_revision() const;
  void set_ack_forward_target_revision(::google::protobuf::uint32 value);

  // optional uint32 ack_peer_routes_revision = 12;
  bool has_ack_peer_routes_revision() const;
  void clear_ack_peer_routes_revision();
  static const int kAckPeerRoutesRevisionFieldNumber = 12;
  ::google::protobuf::uint32 ack_peer_routes_revision() const;
  void set_ack_peer_routes_revision(::google::protobuf::uint32 value);

  // optional fixed32 connection_id = 13;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 13;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num_r2c = 14;
  bool has_seq_num_r2c() const;
  void clear_seq_num_r2c();
  static const int kSeqNumR2CFieldNumber = 14;
  ::google::protobuf::uint32 seq_num_r2c() const;
  void set_seq_num_r2c(::google::protobuf::uint32 value);

  // optional uint32 seq_num_e2e = 15;
  bool has_seq_num_e2e() const;
  void clear_seq_num_e2e();
  static const int kSeqNumE2EFieldNumber = 15;
  ::google::protobuf::uint32 seq_num_e2e() const;
  void set_seq_num_e2e(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::google::protobuf::internal::ArenaStringPtr routes_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint32 migrate_request_ip_;
  ::google::protobuf::uint32 migrate_request_port_;
  ::google::protobuf::uint32 scoring_penalty_relay_cluster_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 ack_forward_target_revision_;
  ::google::protobuf::uint32 ack_peer_routes_revision_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 seq_num_r2c_;
  ::google::protobuf::uint32 seq_num_e2e_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PBadRouteRouterToClient final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient) */ {
 public:
  CMsgSteamDatagramP2PBadRouteRouterToClient();
  virtual ~CMsgSteamDatagramP2PBadRouteRouterToClient();

  CMsgSteamDatagramP2PBadRouteRouterToClient(const CMsgSteamDatagramP2PBadRouteRouterToClient& from);

  inline CMsgSteamDatagramP2PBadRouteRouterToClient& operator=(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramP2PBadRouteRouterToClient(CMsgSteamDatagramP2PBadRouteRouterToClient&& from) noexcept
    : CMsgSteamDatagramP2PBadRouteRouterToClient() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramP2PBadRouteRouterToClient& operator=(CMsgSteamDatagramP2PBadRouteRouterToClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramP2PBadRouteRouterToClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramP2PBadRouteRouterToClient* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramP2PBadRouteRouterToClient*>(
               &_CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(CMsgSteamDatagramP2PBadRouteRouterToClient* other);
  friend void swap(CMsgSteamDatagramP2PBadRouteRouterToClient& a, CMsgSteamDatagramP2PBadRouteRouterToClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramP2PBadRouteRouterToClient* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PBadRouteRouterToClient>(nullptr);
  }

  CMsgSteamDatagramP2PBadRouteRouterToClient* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PBadRouteRouterToClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from);
  void MergeFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramP2PBadRouteRouterToClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes failed_relay_routing_token = 2;
  bool has_failed_relay_routing_token() const;
  void clear_failed_relay_routing_token();
  static const int kFailedRelayRoutingTokenFieldNumber = 2;
  const ::std::string& failed_relay_routing_token() const;
  void set_failed_relay_routing_token(const ::std::string& value);
  #if LANG_CXX11
  void set_failed_relay_routing_token(::std::string&& value);
  #endif
  void set_failed_relay_routing_token(const char* value);
  void set_failed_relay_routing_token(const void* value, size_t size);
  ::std::string* mutable_failed_relay_routing_token();
  ::std::string* release_failed_relay_routing_token();
  void set_allocated_failed_relay_routing_token(::std::string* failed_relay_routing_token);

  // optional fixed32 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint32 connection_id() const;
  void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 ack_forward_target_revision = 3;
  bool has_ack_forward_target_revision() const;
  void clear_ack_forward_target_revision();
  static const int kAckForwardTargetRevisionFieldNumber = 3;
  ::google::protobuf::uint32 ack_forward_target_revision() const;
  void set_ack_forward_target_revision(::google::protobuf::uint32 value);

  // optional fixed64 kludge_pad = 99;
  bool has_kludge_pad() const;
  void clear_kludge_pad();
  static const int kKludgePadFieldNumber = 99;
  ::google::protobuf::uint64 kludge_pad() const;
  void set_kludge_pad(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr failed_relay_routing_token_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 ack_forward_target_revision_;
  ::google::protobuf::uint64 kludge_pad_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRelayToRelayPing final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramRelayToRelayPing) */ {
 public:
  CMsgSteamDatagramRelayToRelayPing();
  virtual ~CMsgSteamDatagramRelayToRelayPing();

  CMsgSteamDatagramRelayToRelayPing(const CMsgSteamDatagramRelayToRelayPing& from);

  inline CMsgSteamDatagramRelayToRelayPing& operator=(const CMsgSteamDatagramRelayToRelayPing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramRelayToRelayPing(CMsgSteamDatagramRelayToRelayPing&& from) noexcept
    : CMsgSteamDatagramRelayToRelayPing() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramRelayToRelayPing& operator=(CMsgSteamDatagramRelayToRelayPing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramRelayToRelayPing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramRelayToRelayPing* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramRelayToRelayPing*>(
               &_CMsgSteamDatagramRelayToRelayPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CMsgSteamDatagramRelayToRelayPing* other);
  friend void swap(CMsgSteamDatagramRelayToRelayPing& a, CMsgSteamDatagramRelayToRelayPing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramRelayToRelayPing* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayToRelayPing>(nullptr);
  }

  CMsgSteamDatagramRelayToRelayPing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayToRelayPing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramRelayToRelayPing& from);
  void MergeFrom(const CMsgSteamDatagramRelayToRelayPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramRelayToRelayPing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 request_timestamp = 1;
  bool has_request_timestamp() const;
  void clear_request_timestamp();
  static const int kRequestTimestampFieldNumber = 1;
  ::google::protobuf::uint32 request_timestamp() const;
  void set_request_timestamp(::google::protobuf::uint32 value);

  // optional fixed32 request_date = 2;
  bool has_request_date() const;
  void clear_request_date();
  static const int kRequestDateFieldNumber = 2;
  ::google::protobuf::uint32 request_date() const;
  void set_request_date(::google::protobuf::uint32 value);

  // optional fixed32 my_pop_id = 3;
  bool has_my_pop_id() const;
  void clear_my_pop_id();
  static const int kMyPopIdFieldNumber = 3;
  ::google::protobuf::uint32 my_pop_id() const;
  void set_my_pop_id(::google::protobuf::uint32 value);

  // optional fixed32 your_pop_id = 4;
  bool has_your_pop_id() const;
  void clear_your_pop_id();
  static const int kYourPopIdFieldNumber = 4;
  ::google::protobuf::uint32 your_pop_id() const;
  void set_your_pop_id(::google::protobuf::uint32 value);

  // optional fixed32 checksum = 5;
  bool has_checksum() const;
  void clear_checksum();
  static const int kChecksumFieldNumber = 5;
  ::google::protobuf::uint32 checksum() const;
  void set_checksum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramRelayToRelayPing)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 request_timestamp_;
  ::google::protobuf::uint32 request_date_;
  ::google::protobuf::uint32 my_pop_id_;
  ::google::protobuf::uint32 your_pop_id_;
  ::google::protobuf::uint32 checksum_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramDataCenterState_Server final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramDataCenterState.Server) */ {
 public:
  CMsgSteamDatagramDataCenterState_Server();
  virtual ~CMsgSteamDatagramDataCenterState_Server();

  CMsgSteamDatagramDataCenterState_Server(const CMsgSteamDatagramDataCenterState_Server& from);

  inline CMsgSteamDatagramDataCenterState_Server& operator=(const CMsgSteamDatagramDataCenterState_Server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramDataCenterState_Server(CMsgSteamDatagramDataCenterState_Server&& from) noexcept
    : CMsgSteamDatagramDataCenterState_Server() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramDataCenterState_Server& operator=(CMsgSteamDatagramDataCenterState_Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramDataCenterState_Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramDataCenterState_Server* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramDataCenterState_Server*>(
               &_CMsgSteamDatagramDataCenterState_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(CMsgSteamDatagramDataCenterState_Server* other);
  friend void swap(CMsgSteamDatagramDataCenterState_Server& a, CMsgSteamDatagramDataCenterState_Server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramDataCenterState_Server* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramDataCenterState_Server>(nullptr);
  }

  CMsgSteamDatagramDataCenterState_Server* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramDataCenterState_Server>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramDataCenterState_Server& from);
  void MergeFrom(const CMsgSteamDatagramDataCenterState_Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramDataCenterState_Server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional uint32 ping_ms = 2;
  bool has_ping_ms() const;
  void clear_ping_ms();
  static const int kPingMsFieldNumber = 2;
  ::google::protobuf::uint32 ping_ms() const;
  void set_ping_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramDataCenterState.Server)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::uint32 ping_ms_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramDataCenterState_DataCenter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter) */ {
 public:
  CMsgSteamDatagramDataCenterState_DataCenter();
  virtual ~CMsgSteamDatagramDataCenterState_DataCenter();

  CMsgSteamDatagramDataCenterState_DataCenter(const CMsgSteamDatagramDataCenterState_DataCenter& from);

  inline CMsgSteamDatagramDataCenterState_DataCenter& operator=(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramDataCenterState_DataCenter(CMsgSteamDatagramDataCenterState_DataCenter&& from) noexcept
    : CMsgSteamDatagramDataCenterState_DataCenter() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramDataCenterState_DataCenter& operator=(CMsgSteamDatagramDataCenterState_DataCenter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramDataCenterState_DataCenter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramDataCenterState_DataCenter* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramDataCenterState_DataCenter*>(
               &_CMsgSteamDatagramDataCenterState_DataCenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(CMsgSteamDatagramDataCenterState_DataCenter* other);
  friend void swap(CMsgSteamDatagramDataCenterState_DataCenter& a, CMsgSteamDatagramDataCenterState_DataCenter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramDataCenterState_DataCenter* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramDataCenterState_DataCenter>(nullptr);
  }

  CMsgSteamDatagramDataCenterState_DataCenter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramDataCenterState_DataCenter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from);
  void MergeFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramDataCenterState_DataCenter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  int server_sample_size() const;
  void clear_server_sample();
  static const int kServerSampleFieldNumber = 2;
  ::proto::steam::CMsgSteamDatagramDataCenterState_Server* mutable_server_sample(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >*
      mutable_server_sample();
  const ::proto::steam::CMsgSteamDatagramDataCenterState_Server& server_sample(int index) const;
  ::proto::steam::CMsgSteamDatagramDataCenterState_Server* add_server_sample();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >&
      server_sample() const;

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
  int relay_sample_size() const;
  void clear_relay_sample();
  static const int kRelaySampleFieldNumber = 3;
  ::proto::steam::CMsgSteamDatagramDataCenterState_Server* mutable_relay_sample(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >*
      mutable_relay_sample();
  const ::proto::steam::CMsgSteamDatagramDataCenterState_Server& relay_sample(int index) const;
  ::proto::steam::CMsgSteamDatagramDataCenterState_Server* add_relay_sample();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >&
      relay_sample() const;

  // optional string code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server > server_sample_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server > relay_sample_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramDataCenterState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramDataCenterState) */ {
 public:
  CMsgSteamDatagramDataCenterState();
  virtual ~CMsgSteamDatagramDataCenterState();

  CMsgSteamDatagramDataCenterState(const CMsgSteamDatagramDataCenterState& from);

  inline CMsgSteamDatagramDataCenterState& operator=(const CMsgSteamDatagramDataCenterState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramDataCenterState(CMsgSteamDatagramDataCenterState&& from) noexcept
    : CMsgSteamDatagramDataCenterState() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramDataCenterState& operator=(CMsgSteamDatagramDataCenterState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramDataCenterState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramDataCenterState* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramDataCenterState*>(
               &_CMsgSteamDatagramDataCenterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(CMsgSteamDatagramDataCenterState* other);
  friend void swap(CMsgSteamDatagramDataCenterState& a, CMsgSteamDatagramDataCenterState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramDataCenterState* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramDataCenterState>(nullptr);
  }

  CMsgSteamDatagramDataCenterState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramDataCenterState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramDataCenterState& from);
  void MergeFrom(const CMsgSteamDatagramDataCenterState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramDataCenterState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramDataCenterState_Server Server;
  typedef CMsgSteamDatagramDataCenterState_DataCenter DataCenter;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  int data_centers_size() const;
  void clear_data_centers();
  static const int kDataCentersFieldNumber = 1;
  ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter* mutable_data_centers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter >*
      mutable_data_centers();
  const ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter& data_centers(int index) const;
  ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter* add_data_centers();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter >&
      data_centers() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramDataCenterState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter > data_centers_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRouterHealth_DataCenter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter) */ {
 public:
  CMsgSteamDatagramRouterHealth_DataCenter();
  virtual ~CMsgSteamDatagramRouterHealth_DataCenter();

  CMsgSteamDatagramRouterHealth_DataCenter(const CMsgSteamDatagramRouterHealth_DataCenter& from);

  inline CMsgSteamDatagramRouterHealth_DataCenter& operator=(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramRouterHealth_DataCenter(CMsgSteamDatagramRouterHealth_DataCenter&& from) noexcept
    : CMsgSteamDatagramRouterHealth_DataCenter() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramRouterHealth_DataCenter& operator=(CMsgSteamDatagramRouterHealth_DataCenter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramRouterHealth_DataCenter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramRouterHealth_DataCenter* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramRouterHealth_DataCenter*>(
               &_CMsgSteamDatagramRouterHealth_DataCenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(CMsgSteamDatagramRouterHealth_DataCenter* other);
  friend void swap(CMsgSteamDatagramRouterHealth_DataCenter& a, CMsgSteamDatagramRouterHealth_DataCenter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramRouterHealth_DataCenter* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramRouterHealth_DataCenter>(nullptr);
  }

  CMsgSteamDatagramRouterHealth_DataCenter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramRouterHealth_DataCenter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from);
  void MergeFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramRouterHealth_DataCenter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 datacenter_id = 1;
  bool has_datacenter_id() const;
  void clear_datacenter_id();
  static const int kDatacenterIdFieldNumber = 1;
  ::google::protobuf::uint32 datacenter_id() const;
  void set_datacenter_id(::google::protobuf::uint32 value);

  // optional uint32 state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::uint32 state() const;
  void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 datacenter_id_;
  ::google::protobuf::uint32 state_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRouterHealth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramRouterHealth) */ {
 public:
  CMsgSteamDatagramRouterHealth();
  virtual ~CMsgSteamDatagramRouterHealth();

  CMsgSteamDatagramRouterHealth(const CMsgSteamDatagramRouterHealth& from);

  inline CMsgSteamDatagramRouterHealth& operator=(const CMsgSteamDatagramRouterHealth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramRouterHealth(CMsgSteamDatagramRouterHealth&& from) noexcept
    : CMsgSteamDatagramRouterHealth() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramRouterHealth& operator=(CMsgSteamDatagramRouterHealth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramRouterHealth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramRouterHealth* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramRouterHealth*>(
               &_CMsgSteamDatagramRouterHealth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(CMsgSteamDatagramRouterHealth* other);
  friend void swap(CMsgSteamDatagramRouterHealth& a, CMsgSteamDatagramRouterHealth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramRouterHealth* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramRouterHealth>(nullptr);
  }

  CMsgSteamDatagramRouterHealth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramRouterHealth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramRouterHealth& from);
  void MergeFrom(const CMsgSteamDatagramRouterHealth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramRouterHealth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramRouterHealth_DataCenter DataCenter;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  int data_centers_size() const;
  void clear_data_centers();
  static const int kDataCentersFieldNumber = 6;
  ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter* mutable_data_centers(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter >*
      mutable_data_centers();
  const ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter& data_centers(int index) const;
  ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter* add_data_centers();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter >&
      data_centers() const;

  // optional float cpu_load = 1;
  bool has_cpu_load() const;
  void clear_cpu_load();
  static const int kCpuLoadFieldNumber = 1;
  float cpu_load() const;
  void set_cpu_load(float value);

  // optional uint32 active_sessions = 2;
  bool has_active_sessions() const;
  void clear_active_sessions();
  static const int kActiveSessionsFieldNumber = 2;
  ::google::protobuf::uint32 active_sessions() const;
  void set_active_sessions(::google::protobuf::uint32 value);

  // optional uint32 data_pkts_sec = 3;
  bool has_data_pkts_sec() const;
  void clear_data_pkts_sec();
  static const int kDataPktsSecFieldNumber = 3;
  ::google::protobuf::uint32 data_pkts_sec() const;
  void set_data_pkts_sec(::google::protobuf::uint32 value);

  // optional uint32 other_pkts_sec = 4;
  bool has_other_pkts_sec() const;
  void clear_other_pkts_sec();
  static const int kOtherPktsSecFieldNumber = 4;
  ::google::protobuf::uint32 other_pkts_sec() const;
  void set_other_pkts_sec(::google::protobuf::uint32 value);

  // optional uint32 seconds_until_shutdown = 5;
  bool has_seconds_until_shutdown() const;
  void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 5;
  ::google::protobuf::uint32 seconds_until_shutdown() const;
  void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional float cpu_cost_per_user = 8;
  bool has_cpu_cost_per_user() const;
  void clear_cpu_cost_per_user();
  static const int kCpuCostPerUserFieldNumber = 8;
  float cpu_cost_per_user() const;
  void set_cpu_cost_per_user(float value);

  // optional fixed64 magic = 7;
  bool has_magic() const;
  void clear_magic();
  static const int kMagicFieldNumber = 7;
  ::google::protobuf::uint64 magic() const;
  void set_magic(::google::protobuf::uint64 value);

  // optional float cpu_cost_per_packet = 9;
  bool has_cpu_cost_per_packet() const;
  void clear_cpu_cost_per_packet();
  static const int kCpuCostPerPacketFieldNumber = 9;
  float cpu_cost_per_packet() const;
  void set_cpu_cost_per_packet(float value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramRouterHealth)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter > data_centers_;
  float cpu_load_;
  ::google::protobuf::uint32 active_sessions_;
  ::google::protobuf::uint32 data_pkts_sec_;
  ::google::protobuf::uint32 other_pkts_sec_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  float cpu_cost_per_user_;
  ::google::protobuf::uint64 magic_;
  float cpu_cost_per_packet_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsP2PRouterToRouter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter) */ {
 public:
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter();
  virtual ~CMsgSteamDatagramConnectionStatsP2PRouterToRouter();

  CMsgSteamDatagramConnectionStatsP2PRouterToRouter(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from);

  inline CMsgSteamDatagramConnectionStatsP2PRouterToRouter& operator=(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter(CMsgSteamDatagramConnectionStatsP2PRouterToRouter&& from) noexcept
    : CMsgSteamDatagramConnectionStatsP2PRouterToRouter() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectionStatsP2PRouterToRouter& operator=(CMsgSteamDatagramConnectionStatsP2PRouterToRouter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectionStatsP2PRouterToRouter* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectionStatsP2PRouterToRouter*>(
               &_CMsgSteamDatagramConnectionStatsP2PRouterToRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* other);
  friend void swap(CMsgSteamDatagramConnectionStatsP2PRouterToRouter& a, CMsgSteamDatagramConnectionStatsP2PRouterToRouter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectionStatsP2PRouterToRouter* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsP2PRouterToRouter>(nullptr);
  }

  CMsgSteamDatagramConnectionStatsP2PRouterToRouter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionStatsP2PRouterToRouter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags Flags;
  static const Flags ACK_REQUEST_RELAY =
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E =
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE =
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed32 ack_relay = 3;
  int ack_relay_size() const;
  void clear_ack_relay();
  static const int kAckRelayFieldNumber = 3;
  ::google::protobuf::uint32 ack_relay(int index) const;
  void set_ack_relay(int index, ::google::protobuf::uint32 value);
  void add_ack_relay(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 4;
  int legacy_ack_e2e_size() const;
  void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 4;
  ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional bytes routes = 7;
  bool has_routes() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 7;
  const ::std::string& routes() const;
  void set_routes(const ::std::string& value);
  #if LANG_CXX11
  void set_routes(::std::string&& value);
  #endif
  void set_routes(const char* value);
  void set_routes(const void* value, size_t size);
  ::std::string* mutable_routes();
  ::std::string* release_routes();
  void set_allocated_routes(::std::string* routes);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
  bool has_quality_relay() const;
  void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  void set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  bool has_quality_e2e() const;
  void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  const ::proto::steam::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  ::proto::steam::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  void set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 5;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // optional uint32 ack_forward_target_revision = 6;
  bool has_ack_forward_target_revision() const;
  void clear_ack_forward_target_revision();
  static const int kAckForwardTargetRevisionFieldNumber = 6;
  ::google::protobuf::uint32 ack_forward_target_revision() const;
  void set_ack_forward_target_revision(::google::protobuf::uint32 value);

  // optional uint32 seq_num_e2e = 27;
  bool has_seq_num_e2e() const;
  void clear_seq_num_e2e();
  static const int kSeqNumE2EFieldNumber = 27;
  ::google::protobuf::uint32 seq_num_e2e() const;
  void set_seq_num_e2e(::google::protobuf::uint32 value);

  // optional uint32 ack_peer_routes_revision = 8;
  bool has_ack_peer_routes_revision() const;
  void clear_ack_peer_routes_revision();
  static const int kAckPeerRoutesRevisionFieldNumber = 8;
  ::google::protobuf::uint32 ack_peer_routes_revision() const;
  void set_ack_peer_routes_revision(::google::protobuf::uint32 value);

  // optional fixed32 from_relay_session_id = 22;
  bool has_from_relay_session_id() const;
  void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 22;
  ::google::protobuf::uint32 from_relay_session_id() const;
  void set_from_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 to_relay_session_id = 25;
  bool has_to_relay_session_id() const;
  void clear_to_relay_session_id();
  static const int kToRelaySessionIdFieldNumber = 25;
  ::google::protobuf::uint32 to_relay_session_id() const;
  void set_to_relay_session_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num_r2r = 26;
  bool has_seq_num_r2r() const;
  void clear_seq_num_r2r();
  static const int kSeqNumR2RFieldNumber = 26;
  ::google::protobuf::uint32 seq_num_r2r() const;
  void set_seq_num_r2r(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::google::protobuf::internal::ArenaStringPtr routes_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 ack_forward_target_revision_;
  ::google::protobuf::uint32 seq_num_e2e_;
  ::google::protobuf::uint32 ack_peer_routes_revision_;
  ::google::protobuf::uint32 from_relay_session_id_;
  ::google::protobuf::uint32 to_relay_session_id_;
  ::google::protobuf::uint32 seq_num_r2r_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PBadRouteRouterToRouter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter) */ {
 public:
  CMsgSteamDatagramP2PBadRouteRouterToRouter();
  virtual ~CMsgSteamDatagramP2PBadRouteRouterToRouter();

  CMsgSteamDatagramP2PBadRouteRouterToRouter(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from);

  inline CMsgSteamDatagramP2PBadRouteRouterToRouter& operator=(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramP2PBadRouteRouterToRouter(CMsgSteamDatagramP2PBadRouteRouterToRouter&& from) noexcept
    : CMsgSteamDatagramP2PBadRouteRouterToRouter() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramP2PBadRouteRouterToRouter& operator=(CMsgSteamDatagramP2PBadRouteRouterToRouter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramP2PBadRouteRouterToRouter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramP2PBadRouteRouterToRouter* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramP2PBadRouteRouterToRouter*>(
               &_CMsgSteamDatagramP2PBadRouteRouterToRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(CMsgSteamDatagramP2PBadRouteRouterToRouter* other);
  friend void swap(CMsgSteamDatagramP2PBadRouteRouterToRouter& a, CMsgSteamDatagramP2PBadRouteRouterToRouter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramP2PBadRouteRouterToRouter* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PBadRouteRouterToRouter>(nullptr);
  }

  CMsgSteamDatagramP2PBadRouteRouterToRouter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramP2PBadRouteRouterToRouter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from);
  void MergeFrom(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramP2PBadRouteRouterToRouter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 from_relay_session_id = 1;
  bool has_from_relay_session_id() const;
  void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 1;
  ::google::protobuf::uint32 from_relay_session_id() const;
  void set_from_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed64 kludge_pad = 99;
  bool has_kludge_pad() const;
  void clear_kludge_pad();
  static const int kKludgePadFieldNumber = 99;
  ::google::protobuf::uint64 kludge_pad() const;
  void set_kludge_pad(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 from_relay_session_id_;
  ::google::protobuf::uint64 kludge_pad_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fsdr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgSteamDatagramRouterPingReply_RouteException

// optional fixed32 data_center_id = 1;
inline bool CMsgSteamDatagramRouterPingReply_RouteException::has_data_center_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::clear_data_center_id() {
  data_center_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply_RouteException::data_center_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException.data_center_id)
  return data_center_id_;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::set_data_center_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  data_center_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException.data_center_id)
}

// optional uint32 flags = 2;
inline bool CMsgSteamDatagramRouterPingReply_RouteException::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply_RouteException::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException.flags)
  return flags_;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException.flags)
}

// optional uint32 penalty = 3;
inline bool CMsgSteamDatagramRouterPingReply_RouteException::has_penalty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::clear_penalty() {
  penalty_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply_RouteException::penalty() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException.penalty)
  return penalty_;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::set_penalty(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  penalty_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.RouteException.penalty)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRouterPingReply

// optional fixed32 client_timestamp = 1;
inline bool CMsgSteamDatagramRouterPingReply::has_client_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::clear_client_timestamp() {
  client_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::client_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.client_timestamp)
  return client_timestamp_;
}
inline void CMsgSteamDatagramRouterPingReply::set_client_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  client_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.client_timestamp)
}

// repeated fixed32 latency_datacenter_ids = 2 [packed = true];
inline int CMsgSteamDatagramRouterPingReply::latency_datacenter_ids_size() const {
  return latency_datacenter_ids_.size();
}
inline void CMsgSteamDatagramRouterPingReply::clear_latency_datacenter_ids() {
  latency_datacenter_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::latency_datacenter_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.latency_datacenter_ids)
  return latency_datacenter_ids_.Get(index);
}
inline void CMsgSteamDatagramRouterPingReply::set_latency_datacenter_ids(int index, ::google::protobuf::uint32 value) {
  latency_datacenter_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.latency_datacenter_ids)
}
inline void CMsgSteamDatagramRouterPingReply::add_latency_datacenter_ids(::google::protobuf::uint32 value) {
  latency_datacenter_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramRouterPingReply.latency_datacenter_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramRouterPingReply::latency_datacenter_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramRouterPingReply.latency_datacenter_ids)
  return latency_datacenter_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramRouterPingReply::mutable_latency_datacenter_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramRouterPingReply.latency_datacenter_ids)
  return &latency_datacenter_ids_;
}

// repeated uint32 latency_ping_ms = 3 [packed = true];
inline int CMsgSteamDatagramRouterPingReply::latency_ping_ms_size() const {
  return latency_ping_ms_.size();
}
inline void CMsgSteamDatagramRouterPingReply::clear_latency_ping_ms() {
  latency_ping_ms_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::latency_ping_ms(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.latency_ping_ms)
  return latency_ping_ms_.Get(index);
}
inline void CMsgSteamDatagramRouterPingReply::set_latency_ping_ms(int index, ::google::protobuf::uint32 value) {
  latency_ping_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.latency_ping_ms)
}
inline void CMsgSteamDatagramRouterPingReply::add_latency_ping_ms(::google::protobuf::uint32 value) {
  latency_ping_ms_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramRouterPingReply.latency_ping_ms)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramRouterPingReply::latency_ping_ms() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramRouterPingReply.latency_ping_ms)
  return latency_ping_ms_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramRouterPingReply::mutable_latency_ping_ms() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramRouterPingReply.latency_ping_ms)
  return &latency_ping_ms_;
}

// optional fixed32 your_public_ip = 4;
inline bool CMsgSteamDatagramRouterPingReply::has_your_public_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::clear_your_public_ip() {
  your_public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::your_public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.your_public_ip)
  return your_public_ip_;
}
inline void CMsgSteamDatagramRouterPingReply::set_your_public_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  your_public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.your_public_ip)
}

// optional fixed32 server_time = 5;
inline bool CMsgSteamDatagramRouterPingReply::has_server_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::clear_server_time() {
  server_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::server_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.server_time)
  return server_time_;
}
inline void CMsgSteamDatagramRouterPingReply::set_server_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  server_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.server_time)
}

// optional fixed64 challenge = 6;
inline bool CMsgSteamDatagramRouterPingReply::has_challenge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::clear_challenge() {
  challenge_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRouterPingReply::challenge() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.challenge)
  return challenge_;
}
inline void CMsgSteamDatagramRouterPingReply::set_challenge(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.challenge)
}

// optional uint32 seconds_until_shutdown = 7;
inline bool CMsgSteamDatagramRouterPingReply::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::seconds_until_shutdown() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.seconds_until_shutdown)
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramRouterPingReply::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  seconds_until_shutdown_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.seconds_until_shutdown)
}

// optional fixed32 client_cookie = 8;
inline bool CMsgSteamDatagramRouterPingReply::has_client_cookie() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::clear_client_cookie() {
  client_cookie_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::client_cookie() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.client_cookie)
  return client_cookie_;
}
inline void CMsgSteamDatagramRouterPingReply::set_client_cookie(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  client_cookie_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.client_cookie)
}

// optional uint32 scoring_penalty_relay_cluster = 9;
inline bool CMsgSteamDatagramRouterPingReply::has_scoring_penalty_relay_cluster() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::clear_scoring_penalty_relay_cluster() {
  scoring_penalty_relay_cluster_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::scoring_penalty_relay_cluster() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.scoring_penalty_relay_cluster)
  return scoring_penalty_relay_cluster_;
}
inline void CMsgSteamDatagramRouterPingReply::set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  scoring_penalty_relay_cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterPingReply.scoring_penalty_relay_cluster)
}

// repeated .proto.steam.CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
inline int CMsgSteamDatagramRouterPingReply::route_exceptions_size() const {
  return route_exceptions_.size();
}
inline void CMsgSteamDatagramRouterPingReply::clear_route_exceptions() {
  route_exceptions_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException* CMsgSteamDatagramRouterPingReply::mutable_route_exceptions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramRouterPingReply.route_exceptions)
  return route_exceptions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException >*
CMsgSteamDatagramRouterPingReply::mutable_route_exceptions() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramRouterPingReply.route_exceptions)
  return &route_exceptions_;
}
inline const ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException& CMsgSteamDatagramRouterPingReply::route_exceptions(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterPingReply.route_exceptions)
  return route_exceptions_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException* CMsgSteamDatagramRouterPingReply::add_route_exceptions() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramRouterPingReply.route_exceptions)
  return route_exceptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterPingReply_RouteException >&
CMsgSteamDatagramRouterPingReply::route_exceptions() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramRouterPingReply.route_exceptions)
  return route_exceptions_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramGameserverPing

// optional fixed32 router_timestamp = 4;
inline bool CMsgSteamDatagramGameserverPing::has_router_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramGameserverPing::clear_router_timestamp() {
  router_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverPing::router_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverPing.router_timestamp)
  return router_timestamp_;
}
inline void CMsgSteamDatagramGameserverPing::set_router_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  router_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverPing.router_timestamp)
}

// optional fixed64 dummy_pad = 99;
inline bool CMsgSteamDatagramGameserverPing::has_dummy_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramGameserverPing::clear_dummy_pad() {
  dummy_pad_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramGameserverPing::dummy_pad() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverPing.dummy_pad)
  return dummy_pad_;
}
inline void CMsgSteamDatagramGameserverPing::set_dummy_pad(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  dummy_pad_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverPing.dummy_pad)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramNoSessionRelayToClient

// optional fixed32 connection_id = 7;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_connection_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToClient::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.connection_id)
}

// optional fixed32 your_public_ip = 2;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_your_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_your_public_ip() {
  your_public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToClient::your_public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.your_public_ip)
  return your_public_ip_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_your_public_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  your_public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.your_public_ip)
}

// optional fixed32 server_time = 3;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_server_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_server_time() {
  server_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToClient::server_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.server_time)
  return server_time_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_server_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  server_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.server_time)
}

// optional fixed64 challenge = 4;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_challenge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_challenge() {
  challenge_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramNoSessionRelayToClient::challenge() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.challenge)
  return challenge_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_challenge(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.challenge)
}

// optional uint32 seconds_until_shutdown = 5;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToClient::seconds_until_shutdown() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.seconds_until_shutdown)
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seconds_until_shutdown_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoSessionRelayToClient.seconds_until_shutdown)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramNoSessionRelayToPeer

// optional uint32 legacy_relay_session_id = 1;
inline bool CMsgSteamDatagramNoSessionRelayToPeer::has_legacy_relay_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_legacy_relay_session_id() {
  legacy_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToPeer::legacy_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer.legacy_relay_session_id)
  return legacy_relay_session_id_;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_legacy_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  legacy_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer.legacy_relay_session_id)
}

// optional fixed32 from_relay_session_id = 2;
inline bool CMsgSteamDatagramNoSessionRelayToPeer::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToPeer::from_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer.from_relay_session_id)
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_from_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  from_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer.from_relay_session_id)
}

// optional fixed32 from_connection_id = 7;
inline bool CMsgSteamDatagramNoSessionRelayToPeer::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_from_connection_id() {
  from_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToPeer::from_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer.from_connection_id)
  return from_connection_id_;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_from_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  from_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer.from_connection_id)
}

// optional fixed64 kludge_pad = 99;
inline bool CMsgSteamDatagramNoSessionRelayToPeer::has_kludge_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_kludge_pad() {
  kludge_pad_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramNoSessionRelayToPeer::kludge_pad() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer.kludge_pad)
  return kludge_pad_;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_kludge_pad(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  kludge_pad_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoSessionRelayToPeer.kludge_pad)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientPingSampleRequest

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramClientPingSampleRequest::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleRequest::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleRequest.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramClientPingSampleRequest::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientPingSampleRequest.connection_id)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientPingSampleReply_RoutingCluster

// optional fixed32 id = 1;
inline bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_RoutingCluster::id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster.id)
  return id_;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::set_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster.id)
}

// optional uint32 front_ping_ms = 2;
inline bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::has_front_ping_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::clear_front_ping_ms() {
  front_ping_ms_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_RoutingCluster::front_ping_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster.front_ping_ms)
  return front_ping_ms_;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::set_front_ping_ms(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  front_ping_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster.front_ping_ms)
}

// optional uint32 e2e_ping_ms = 3;
inline bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::has_e2e_ping_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::clear_e2e_ping_ms() {
  e2e_ping_ms_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_RoutingCluster::e2e_ping_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster.e2e_ping_ms)
  return e2e_ping_ms_;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::set_e2e_ping_ms(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  e2e_ping_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster.e2e_ping_ms)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientPingSampleReply_DataCenter

// optional fixed32 data_center_id = 1;
inline bool CMsgSteamDatagramClientPingSampleReply_DataCenter::has_data_center_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::clear_data_center_id() {
  data_center_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_DataCenter::data_center_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter.data_center_id)
  return data_center_id_;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::set_data_center_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  data_center_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter.data_center_id)
}

// optional fixed32 via_relay_id = 2;
inline bool CMsgSteamDatagramClientPingSampleReply_DataCenter::has_via_relay_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::clear_via_relay_id() {
  via_relay_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_DataCenter::via_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter.via_relay_id)
  return via_relay_id_;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::set_via_relay_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  via_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter.via_relay_id)
}

// optional uint32 e2e_ping_ms = 3;
inline bool CMsgSteamDatagramClientPingSampleReply_DataCenter::has_e2e_ping_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::clear_e2e_ping_ms() {
  e2e_ping_ms_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_DataCenter::e2e_ping_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter.e2e_ping_ms)
  return e2e_ping_ms_;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::set_e2e_ping_ms(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  e2e_ping_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter.e2e_ping_ms)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientPingSampleReply

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramClientPingSampleReply::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleReply.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramClientPingSampleReply::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientPingSampleReply.connection_id)
}

// repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
inline int CMsgSteamDatagramClientPingSampleReply::routing_clusters_size() const {
  return routing_clusters_.size();
}
inline void CMsgSteamDatagramClientPingSampleReply::clear_routing_clusters() {
  routing_clusters_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* CMsgSteamDatagramClientPingSampleReply::mutable_routing_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramClientPingSampleReply.routing_clusters)
  return routing_clusters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >*
CMsgSteamDatagramClientPingSampleReply::mutable_routing_clusters() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramClientPingSampleReply.routing_clusters)
  return &routing_clusters_;
}
inline const ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster& CMsgSteamDatagramClientPingSampleReply::routing_clusters(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleReply.routing_clusters)
  return routing_clusters_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* CMsgSteamDatagramClientPingSampleReply::add_routing_clusters() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramClientPingSampleReply.routing_clusters)
  return routing_clusters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >&
CMsgSteamDatagramClientPingSampleReply::routing_clusters() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramClientPingSampleReply.routing_clusters)
  return routing_clusters_;
}

// repeated .proto.steam.CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
inline int CMsgSteamDatagramClientPingSampleReply::data_centers_size() const {
  return data_centers_.size();
}
inline void CMsgSteamDatagramClientPingSampleReply::clear_data_centers() {
  data_centers_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter* CMsgSteamDatagramClientPingSampleReply::mutable_data_centers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramClientPingSampleReply.data_centers)
  return data_centers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter >*
CMsgSteamDatagramClientPingSampleReply::mutable_data_centers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramClientPingSampleReply.data_centers)
  return &data_centers_;
}
inline const ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter& CMsgSteamDatagramClientPingSampleReply::data_centers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientPingSampleReply.data_centers)
  return data_centers_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter* CMsgSteamDatagramClientPingSampleReply::add_data_centers() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramClientPingSampleReply.data_centers)
  return data_centers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramClientPingSampleReply_DataCenter >&
CMsgSteamDatagramClientPingSampleReply::data_centers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramClientPingSampleReply.data_centers)
  return data_centers_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientSwitchedPrimary_RouterQuality

// optional uint32 score = 1;
inline bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::score() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.score)
  return score_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.score)
}

// optional uint32 front_ping = 2;
inline bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::has_front_ping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_front_ping() {
  front_ping_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::front_ping() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.front_ping)
  return front_ping_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_front_ping(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  front_ping_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.front_ping)
}

// optional uint32 back_ping = 3;
inline bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::has_back_ping() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_back_ping() {
  back_ping_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::back_ping() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.back_ping)
  return back_ping_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_back_ping(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  back_ping_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.back_ping)
}

// optional uint32 seconds_until_down = 4;
inline bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::has_seconds_until_down() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_seconds_until_down() {
  seconds_until_down_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::seconds_until_down() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.seconds_until_down)
  return seconds_until_down_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_seconds_until_down(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seconds_until_down_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.seconds_until_down)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientSwitchedPrimary

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_connection_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.connection_id)
}

// optional fixed32 from_ip = 2;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_ip() {
  from_ip_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_ip)
  return from_ip_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  from_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_ip)
}

// optional uint32 from_port = 3;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_port() {
  from_port_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_port)
  return from_port_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  from_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_port)
}

// optional fixed32 from_router_cluster = 4;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_router_cluster() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_router_cluster() {
  from_router_cluster_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_router_cluster() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_router_cluster)
  return from_router_cluster_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_router_cluster(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  from_router_cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_router_cluster)
}

// optional uint32 from_active_time = 5;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_active_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_active_time() {
  from_active_time_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_active_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_active_time)
  return from_active_time_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_active_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  from_active_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_active_time)
}

// optional uint32 from_active_packets_recv = 6;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_active_packets_recv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_active_packets_recv() {
  from_active_packets_recv_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_active_packets_recv() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_active_packets_recv)
  return from_active_packets_recv_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_active_packets_recv(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  from_active_packets_recv_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_active_packets_recv)
}

// optional string from_dropped_reason = 7;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_dropped_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_dropped_reason() {
  from_dropped_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramClientSwitchedPrimary::from_dropped_reason() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason)
  return from_dropped_reason_.GetNoArena();
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_dropped_reason(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  from_dropped_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason)
}
#if LANG_CXX11
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_dropped_reason(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  from_dropped_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason)
}
#endif
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_dropped_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  from_dropped_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason)
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_dropped_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  from_dropped_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason)
}
inline ::std::string* CMsgSteamDatagramClientSwitchedPrimary::mutable_from_dropped_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason)
  return from_dropped_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramClientSwitchedPrimary::release_from_dropped_reason() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason)
  if (!has_from_dropped_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return from_dropped_reason_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_from_dropped_reason(::std::string* from_dropped_reason) {
  if (from_dropped_reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  from_dropped_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_dropped_reason);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason)
}

// optional uint32 gap_ms = 8;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_gap_ms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_gap_ms() {
  gap_ms_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::gap_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.gap_ms)
  return gap_ms_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_gap_ms(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  gap_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.gap_ms)
}

// optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_quality_now() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_quality_now() {
  if (from_quality_now_ != nullptr) from_quality_now_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::from_quality_now() const {
  const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* p = from_quality_now_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_quality_now)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      &::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::release_from_quality_now() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_quality_now)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* temp = from_quality_now_;
  from_quality_now_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::mutable_from_quality_now() {
  _has_bits_[0] |= 0x00000002u;
  if (from_quality_now_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(GetArenaNoVirtual());
    from_quality_now_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_quality_now)
  return from_quality_now_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_from_quality_now(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_now) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete from_quality_now_;
  }
  if (from_quality_now) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from_quality_now = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_quality_now, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  from_quality_now_ = from_quality_now;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_quality_now)
}

// optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_to_quality_now() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_to_quality_now() {
  if (to_quality_now_ != nullptr) to_quality_now_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::to_quality_now() const {
  const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* p = to_quality_now_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.to_quality_now)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      &::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::release_to_quality_now() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.to_quality_now)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* temp = to_quality_now_;
  to_quality_now_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::mutable_to_quality_now() {
  _has_bits_[0] |= 0x00000004u;
  if (to_quality_now_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(GetArenaNoVirtual());
    to_quality_now_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.to_quality_now)
  return to_quality_now_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_to_quality_now(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_now) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete to_quality_now_;
  }
  if (to_quality_now) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to_quality_now = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to_quality_now, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  to_quality_now_ = to_quality_now;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.to_quality_now)
}

// optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_quality_then() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_quality_then() {
  if (from_quality_then_ != nullptr) from_quality_then_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::from_quality_then() const {
  const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* p = from_quality_then_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_quality_then)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      &::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::release_from_quality_then() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_quality_then)
  _has_bits_[0] &= ~0x00000008u;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* temp = from_quality_then_;
  from_quality_then_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::mutable_from_quality_then() {
  _has_bits_[0] |= 0x00000008u;
  if (from_quality_then_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(GetArenaNoVirtual());
    from_quality_then_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_quality_then)
  return from_quality_then_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_from_quality_then(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_then) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete from_quality_then_;
  }
  if (from_quality_then) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from_quality_then = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_quality_then, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  from_quality_then_ = from_quality_then;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.from_quality_then)
}

// optional .proto.steam.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_to_quality_then() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_to_quality_then() {
  if (to_quality_then_ != nullptr) to_quality_then_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::to_quality_then() const {
  const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* p = to_quality_then_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.to_quality_then)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      &::proto::steam::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::release_to_quality_then() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.to_quality_then)
  _has_bits_[0] &= ~0x00000010u;
  ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* temp = to_quality_then_;
  to_quality_then_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::mutable_to_quality_then() {
  _has_bits_[0] |= 0x00000010u;
  if (to_quality_then_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(GetArenaNoVirtual());
    to_quality_then_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.to_quality_then)
  return to_quality_then_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_to_quality_then(::proto::steam::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_then) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete to_quality_then_;
  }
  if (to_quality_then) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to_quality_then = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to_quality_then, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  to_quality_then_ = to_quality_then;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramClientSwitchedPrimary.to_quality_then)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectRequest

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramConnectRequest::has_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectRequest.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramConnectRequest::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectRequest.connection_id)
}

// optional fixed64 my_timestamp = 4;
inline bool CMsgSteamDatagramConnectRequest::has_my_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::clear_my_timestamp() {
  my_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectRequest::my_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectRequest.my_timestamp)
  return my_timestamp_;
}
inline void CMsgSteamDatagramConnectRequest::set_my_timestamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  my_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectRequest.my_timestamp)
}

// optional uint32 ping_est_ms = 5;
inline bool CMsgSteamDatagramConnectRequest::has_ping_est_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::clear_ping_est_ms() {
  ping_est_ms_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectRequest::ping_est_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectRequest.ping_est_ms)
  return ping_est_ms_;
}
inline void CMsgSteamDatagramConnectRequest::set_ping_est_ms(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ping_est_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectRequest.ping_est_ms)
}

// optional uint32 virtual_port = 9;
inline bool CMsgSteamDatagramConnectRequest::has_virtual_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::clear_virtual_port() {
  virtual_port_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectRequest::virtual_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectRequest.virtual_port)
  return virtual_port_;
}
inline void CMsgSteamDatagramConnectRequest::set_virtual_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  virtual_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectRequest.virtual_port)
}

// optional uint32 gameserver_relay_session_id = 2;
inline bool CMsgSteamDatagramConnectRequest::has_gameserver_relay_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::clear_gameserver_relay_session_id() {
  gameserver_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectRequest::gameserver_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectRequest.gameserver_relay_session_id)
  return gameserver_relay_session_id_;
}
inline void CMsgSteamDatagramConnectRequest::set_gameserver_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  gameserver_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectRequest.gameserver_relay_session_id)
}

// optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
inline bool CMsgSteamDatagramConnectRequest::has_crypt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramConnectRequest::crypt() const {
  const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* p = crypt_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectRequest.crypt)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned*>(
      &::proto::steam::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramConnectRequest::release_crypt() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectRequest.crypt)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramConnectRequest::mutable_crypt() {
  _has_bits_[0] |= 0x00000001u;
  if (crypt_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned>(GetArenaNoVirtual());
    crypt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectRequest.crypt)
  return crypt_;
}
inline void CMsgSteamDatagramConnectRequest::set_allocated_crypt(::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(crypt_);
  }
  if (crypt) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crypt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  crypt_ = crypt;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectRequest.crypt)
}

// optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 7;
inline bool CMsgSteamDatagramConnectRequest::has_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramConnectRequest::cert() const {
  const ::proto::steam::CMsgSteamDatagramCertificateSigned* p = cert_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectRequest.cert)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramCertificateSigned*>(
      &::proto::steam::_CMsgSteamDatagramCertificateSigned_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramConnectRequest::release_cert() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectRequest.cert)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramConnectRequest::mutable_cert() {
  _has_bits_[0] |= 0x00000002u;
  if (cert_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramCertificateSigned>(GetArenaNoVirtual());
    cert_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectRequest.cert)
  return cert_;
}
inline void CMsgSteamDatagramConnectRequest::set_allocated_cert(::proto::steam::CMsgSteamDatagramCertificateSigned* cert) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cert_);
  }
  if (cert) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cert = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cert_ = cert;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectRequest.cert)
}

// optional fixed64 legacy_client_steam_id = 3;
inline bool CMsgSteamDatagramConnectRequest::has_legacy_client_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::clear_legacy_client_steam_id() {
  legacy_client_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectRequest::legacy_client_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectRequest.legacy_client_steam_id)
  return legacy_client_steam_id_;
}
inline void CMsgSteamDatagramConnectRequest::set_legacy_client_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  legacy_client_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectRequest.legacy_client_steam_id)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectOK

// optional fixed32 client_connection_id = 1;
inline bool CMsgSteamDatagramConnectOK::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectOK::clear_client_connection_id() {
  client_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectOK::client_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectOK.client_connection_id)
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectOK::set_client_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  client_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectOK.client_connection_id)
}

// optional fixed32 server_connection_id = 7;
inline bool CMsgSteamDatagramConnectOK::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectOK::clear_server_connection_id() {
  server_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectOK::server_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectOK.server_connection_id)
  return server_connection_id_;
}
inline void CMsgSteamDatagramConnectOK::set_server_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  server_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectOK.server_connection_id)
}

// optional fixed64 your_timestamp = 3;
inline bool CMsgSteamDatagramConnectOK::has_your_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectOK::clear_your_timestamp() {
  your_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectOK::your_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectOK.your_timestamp)
  return your_timestamp_;
}
inline void CMsgSteamDatagramConnectOK::set_your_timestamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  your_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectOK.your_timestamp)
}

// optional uint32 delay_time_usec = 4;
inline bool CMsgSteamDatagramConnectOK::has_delay_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectOK::clear_delay_time_usec() {
  delay_time_usec_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectOK::delay_time_usec() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectOK.delay_time_usec)
  return delay_time_usec_;
}
inline void CMsgSteamDatagramConnectOK::set_delay_time_usec(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  delay_time_usec_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectOK.delay_time_usec)
}

// optional uint32 gameserver_relay_session_id = 2;
inline bool CMsgSteamDatagramConnectOK::has_gameserver_relay_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectOK::clear_gameserver_relay_session_id() {
  gameserver_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectOK::gameserver_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectOK.gameserver_relay_session_id)
  return gameserver_relay_session_id_;
}
inline void CMsgSteamDatagramConnectOK::set_gameserver_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  gameserver_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectOK.gameserver_relay_session_id)
}

// optional .proto.steam.CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
inline bool CMsgSteamDatagramConnectOK::has_crypt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramConnectOK::crypt() const {
  const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* p = crypt_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectOK.crypt)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned*>(
      &::proto::steam::_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramConnectOK::release_crypt() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectOK.crypt)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramConnectOK::mutable_crypt() {
  _has_bits_[0] |= 0x00000001u;
  if (crypt_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned>(GetArenaNoVirtual());
    crypt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectOK.crypt)
  return crypt_;
}
inline void CMsgSteamDatagramConnectOK::set_allocated_crypt(::proto::steam::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(crypt_);
  }
  if (crypt) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crypt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  crypt_ = crypt;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectOK.crypt)
}

// optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 6;
inline bool CMsgSteamDatagramConnectOK::has_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramConnectOK::cert() const {
  const ::proto::steam::CMsgSteamDatagramCertificateSigned* p = cert_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectOK.cert)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramCertificateSigned*>(
      &::proto::steam::_CMsgSteamDatagramCertificateSigned_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramConnectOK::release_cert() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectOK.cert)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramConnectOK::mutable_cert() {
  _has_bits_[0] |= 0x00000002u;
  if (cert_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramCertificateSigned>(GetArenaNoVirtual());
    cert_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectOK.cert)
  return cert_;
}
inline void CMsgSteamDatagramConnectOK::set_allocated_cert(::proto::steam::CMsgSteamDatagramCertificateSigned* cert) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cert_);
  }
  if (cert) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cert = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cert_ = cert;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectOK.cert)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionClosed

// optional fixed32 to_connection_id = 7;
inline bool CMsgSteamDatagramConnectionClosed::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_to_connection_id() {
  to_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::to_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.to_connection_id)
  return to_connection_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_to_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  to_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.to_connection_id)
}

// optional fixed32 from_connection_id = 8;
inline bool CMsgSteamDatagramConnectionClosed::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_from_connection_id() {
  from_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::from_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.from_connection_id)
  return from_connection_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_from_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  from_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.from_connection_id)
}

// optional .proto.steam.CMsgSteamNetworkingIdentity from_identity = 13;
inline bool CMsgSteamDatagramConnectionClosed::has_from_identity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::proto::steam::CMsgSteamNetworkingIdentity& CMsgSteamDatagramConnectionClosed::from_identity() const {
  const ::proto::steam::CMsgSteamNetworkingIdentity* p = from_identity_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.from_identity)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamNetworkingIdentity*>(
      &::proto::steam::_CMsgSteamNetworkingIdentity_default_instance_);
}
inline ::proto::steam::CMsgSteamNetworkingIdentity* CMsgSteamDatagramConnectionClosed::release_from_identity() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionClosed.from_identity)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::steam::CMsgSteamNetworkingIdentity* temp = from_identity_;
  from_identity_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamNetworkingIdentity* CMsgSteamDatagramConnectionClosed::mutable_from_identity() {
  _has_bits_[0] |= 0x00000004u;
  if (from_identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamNetworkingIdentity>(GetArenaNoVirtual());
    from_identity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionClosed.from_identity)
  return from_identity_;
}
inline void CMsgSteamDatagramConnectionClosed::set_allocated_from_identity(::proto::steam::CMsgSteamNetworkingIdentity* from_identity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_identity_);
  }
  if (from_identity) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from_identity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_identity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  from_identity_ = from_identity;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionClosed.from_identity)
}

// optional fixed64 legacy_from_steam_id = 3;
inline bool CMsgSteamDatagramConnectionClosed::has_legacy_from_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_legacy_from_steam_id() {
  legacy_from_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectionClosed::legacy_from_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.legacy_from_steam_id)
  return legacy_from_steam_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_legacy_from_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  legacy_from_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.legacy_from_steam_id)
}

// optional uint32 legacy_gameserver_relay_session_id = 2;
inline bool CMsgSteamDatagramConnectionClosed::has_legacy_gameserver_relay_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_legacy_gameserver_relay_session_id() {
  legacy_gameserver_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::legacy_gameserver_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.legacy_gameserver_relay_session_id)
  return legacy_gameserver_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_legacy_gameserver_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  legacy_gameserver_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.legacy_gameserver_relay_session_id)
}

// optional fixed32 to_relay_session_id = 9;
inline bool CMsgSteamDatagramConnectionClosed::has_to_relay_session_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_to_relay_session_id() {
  to_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::to_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.to_relay_session_id)
  return to_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_to_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  to_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.to_relay_session_id)
}

// optional fixed32 from_relay_session_id = 10;
inline bool CMsgSteamDatagramConnectionClosed::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::from_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.from_relay_session_id)
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_from_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  from_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.from_relay_session_id)
}

// optional bytes forward_target_relay_routing_token = 11;
inline bool CMsgSteamDatagramConnectionClosed::has_forward_target_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_forward_target_relay_routing_token() {
  forward_target_relay_routing_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgSteamDatagramConnectionClosed::forward_target_relay_routing_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_relay_routing_token)
  return forward_target_relay_routing_token_.GetNoArena();
}
inline void CMsgSteamDatagramConnectionClosed::set_forward_target_relay_routing_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  forward_target_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_relay_routing_token)
}
#if LANG_CXX11
inline void CMsgSteamDatagramConnectionClosed::set_forward_target_relay_routing_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  forward_target_relay_routing_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_relay_routing_token)
}
#endif
inline void CMsgSteamDatagramConnectionClosed::set_forward_target_relay_routing_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  forward_target_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_relay_routing_token)
}
inline void CMsgSteamDatagramConnectionClosed::set_forward_target_relay_routing_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  forward_target_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_relay_routing_token)
}
inline ::std::string* CMsgSteamDatagramConnectionClosed::mutable_forward_target_relay_routing_token() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_relay_routing_token)
  return forward_target_relay_routing_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramConnectionClosed::release_forward_target_relay_routing_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_relay_routing_token)
  if (!has_forward_target_relay_routing_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return forward_target_relay_routing_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramConnectionClosed::set_allocated_forward_target_relay_routing_token(::std::string* forward_target_relay_routing_token) {
  if (forward_target_relay_routing_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  forward_target_relay_routing_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forward_target_relay_routing_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_relay_routing_token)
}

// optional uint32 forward_target_revision = 12;
inline bool CMsgSteamDatagramConnectionClosed::has_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_forward_target_revision() {
  forward_target_revision_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::forward_target_revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_revision)
  return forward_target_revision_;
}
inline void CMsgSteamDatagramConnectionClosed::set_forward_target_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  forward_target_revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.forward_target_revision)
}

// optional .proto.steam.CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
inline bool CMsgSteamDatagramConnectionClosed::has_relay_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_relay_mode() {
  relay_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::relay_mode() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.relay_mode)
  return static_cast< ::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode >(relay_mode_);
}
inline void CMsgSteamDatagramConnectionClosed::set_relay_mode(::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode value) {
  assert(::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  relay_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.relay_mode)
}

// optional string debug = 5;
inline bool CMsgSteamDatagramConnectionClosed::has_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramConnectionClosed::debug() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.debug)
  return debug_.GetNoArena();
}
inline void CMsgSteamDatagramConnectionClosed::set_debug(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.debug)
}
#if LANG_CXX11
inline void CMsgSteamDatagramConnectionClosed::set_debug(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  debug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramConnectionClosed.debug)
}
#endif
inline void CMsgSteamDatagramConnectionClosed::set_debug(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramConnectionClosed.debug)
}
inline void CMsgSteamDatagramConnectionClosed::set_debug(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramConnectionClosed.debug)
}
inline ::std::string* CMsgSteamDatagramConnectionClosed::mutable_debug() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionClosed.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramConnectionClosed::release_debug() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionClosed.debug)
  if (!has_debug()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return debug_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramConnectionClosed::set_allocated_debug(::std::string* debug) {
  if (debug != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionClosed.debug)
}

// optional uint32 reason_code = 6;
inline bool CMsgSteamDatagramConnectionClosed::has_reason_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::clear_reason_code() {
  reason_code_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::reason_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionClosed.reason_code)
  return reason_code_;
}
inline void CMsgSteamDatagramConnectionClosed::set_reason_code(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionClosed.reason_code)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramNoConnection

// optional fixed32 to_connection_id = 5;
inline bool CMsgSteamDatagramNoConnection::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramNoConnection::clear_to_connection_id() {
  to_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::to_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoConnection.to_connection_id)
  return to_connection_id_;
}
inline void CMsgSteamDatagramNoConnection::set_to_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  to_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoConnection.to_connection_id)
}

// optional fixed32 from_connection_id = 6;
inline bool CMsgSteamDatagramNoConnection::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramNoConnection::clear_from_connection_id() {
  from_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::from_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoConnection.from_connection_id)
  return from_connection_id_;
}
inline void CMsgSteamDatagramNoConnection::set_from_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  from_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoConnection.from_connection_id)
}

// optional uint32 legacy_gameserver_relay_session_id = 2;
inline bool CMsgSteamDatagramNoConnection::has_legacy_gameserver_relay_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramNoConnection::clear_legacy_gameserver_relay_session_id() {
  legacy_gameserver_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::legacy_gameserver_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoConnection.legacy_gameserver_relay_session_id)
  return legacy_gameserver_relay_session_id_;
}
inline void CMsgSteamDatagramNoConnection::set_legacy_gameserver_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  legacy_gameserver_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoConnection.legacy_gameserver_relay_session_id)
}

// optional fixed32 to_relay_session_id = 9;
inline bool CMsgSteamDatagramNoConnection::has_to_relay_session_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramNoConnection::clear_to_relay_session_id() {
  to_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::to_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoConnection.to_relay_session_id)
  return to_relay_session_id_;
}
inline void CMsgSteamDatagramNoConnection::set_to_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  to_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoConnection.to_relay_session_id)
}

// optional fixed32 from_relay_session_id = 10;
inline bool CMsgSteamDatagramNoConnection::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramNoConnection::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::from_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoConnection.from_relay_session_id)
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramNoConnection::set_from_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  from_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoConnection.from_relay_session_id)
}

// optional fixed64 from_steam_id = 3;
inline bool CMsgSteamDatagramNoConnection::has_from_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramNoConnection::clear_from_steam_id() {
  from_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramNoConnection::from_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoConnection.from_steam_id)
  return from_steam_id_;
}
inline void CMsgSteamDatagramNoConnection::set_from_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  from_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoConnection.from_steam_id)
}

// optional bool end_to_end = 4;
inline bool CMsgSteamDatagramNoConnection::has_end_to_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramNoConnection::clear_end_to_end() {
  end_to_end_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgSteamDatagramNoConnection::end_to_end() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoConnection.end_to_end)
  return end_to_end_;
}
inline void CMsgSteamDatagramNoConnection::set_end_to_end(bool value) {
  _has_bits_[0] |= 0x00000004u;
  end_to_end_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoConnection.end_to_end)
}

// optional fixed32 dummy_pad = 1023;
inline bool CMsgSteamDatagramNoConnection::has_dummy_pad() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramNoConnection::clear_dummy_pad() {
  dummy_pad_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::dummy_pad() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramNoConnection.dummy_pad)
  return dummy_pad_;
}
inline void CMsgSteamDatagramNoConnection::set_dummy_pad(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  dummy_pad_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramNoConnection.dummy_pad)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramGameserverSessionRequest

// optional bytes ticket = 1;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramGameserverSessionRequest::ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionRequest.ticket)
  return ticket_.GetNoArena();
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_ticket(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionRequest.ticket)
}
#if LANG_CXX11
inline void CMsgSteamDatagramGameserverSessionRequest::set_ticket(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramGameserverSessionRequest.ticket)
}
#endif
inline void CMsgSteamDatagramGameserverSessionRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramGameserverSessionRequest.ticket)
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_ticket(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramGameserverSessionRequest.ticket)
}
inline ::std::string* CMsgSteamDatagramGameserverSessionRequest::mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramGameserverSessionRequest.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramGameserverSessionRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramGameserverSessionRequest.ticket)
  if (!has_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramGameserverSessionRequest.ticket)
}

// optional fixed32 challenge_time = 3;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_challenge_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_challenge_time() {
  challenge_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::challenge_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionRequest.challenge_time)
  return challenge_time_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_challenge_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionRequest.challenge_time)
}

// optional fixed64 challenge = 4;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_challenge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_challenge() {
  challenge_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramGameserverSessionRequest::challenge() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionRequest.challenge)
  return challenge_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_challenge(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  challenge_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionRequest.challenge)
}

// optional fixed32 client_connection_id = 5;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_client_connection_id() {
  client_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::client_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionRequest.client_connection_id)
  return client_connection_id_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_client_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionRequest.client_connection_id)
}

// optional fixed32 server_connection_id = 8;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_server_connection_id() {
  server_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::server_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionRequest.server_connection_id)
  return server_connection_id_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_server_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  server_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionRequest.server_connection_id)
}

// optional uint32 network_config_version = 6;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_network_config_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_network_config_version() {
  network_config_version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::network_config_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionRequest.network_config_version)
  return network_config_version_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_network_config_version(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  network_config_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionRequest.network_config_version)
}

// optional uint32 protocol_version = 7;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_protocol_version() {
  protocol_version_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::protocol_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionRequest.protocol_version)
  return protocol_version_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_protocol_version(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionRequest.protocol_version)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramGameserverSessionEstablished

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramGameserverSessionEstablished::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionEstablished::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionEstablished.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionEstablished.connection_id)
}

// optional fixed64 gameserver_steam_id = 3;
inline bool CMsgSteamDatagramGameserverSessionEstablished::has_gameserver_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_gameserver_steam_id() {
  gameserver_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramGameserverSessionEstablished::gameserver_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionEstablished.gameserver_steam_id)
  return gameserver_steam_id_;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_gameserver_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  gameserver_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionEstablished.gameserver_steam_id)
}

// optional uint32 seconds_until_shutdown = 4;
inline bool CMsgSteamDatagramGameserverSessionEstablished::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionEstablished::seconds_until_shutdown() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionEstablished.seconds_until_shutdown)
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  seconds_until_shutdown_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionEstablished.seconds_until_shutdown)
}

// optional uint32 seq_num_r2c = 6;
inline bool CMsgSteamDatagramGameserverSessionEstablished::has_seq_num_r2c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_seq_num_r2c() {
  seq_num_r2c_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionEstablished::seq_num_r2c() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramGameserverSessionEstablished.seq_num_r2c)
  return seq_num_r2c_;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_seq_num_r2c(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seq_num_r2c_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramGameserverSessionEstablished.seq_num_r2c)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsClientToRouter

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsClientToRouter::quality_relay() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_relay_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.quality_relay)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsClientToRouter::release_quality_relay() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.quality_relay)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsClientToRouter::mutable_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
  if (quality_relay_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_relay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.quality_relay)
  return quality_relay_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_relay_);
  }
  if (quality_relay) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_relay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_relay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  quality_relay_ = quality_relay;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.quality_relay)
}

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsClientToRouter::quality_e2e() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_e2e_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.quality_e2e)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsClientToRouter::release_quality_e2e() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.quality_e2e)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsClientToRouter::mutable_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
  if (quality_e2e_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_e2e_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.quality_e2e)
  return quality_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_e2e_);
  }
  if (quality_e2e) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_e2e = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_e2e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quality_e2e_ = quality_e2e;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.quality_e2e)
}

// repeated fixed32 ack_relay = 4;
inline int CMsgSteamDatagramConnectionStatsClientToRouter::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::ack_relay(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.ack_relay)
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.ack_relay)
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.ack_relay)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsClientToRouter::ack_relay() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.ack_relay)
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsClientToRouter::mutable_ack_relay() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.ack_relay)
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 5;
inline int CMsgSteamDatagramConnectionStatsClientToRouter::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::legacy_ack_e2e(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.legacy_ack_e2e)
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.legacy_ack_e2e)
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.legacy_ack_e2e)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsClientToRouter::legacy_ack_e2e() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.legacy_ack_e2e)
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsClientToRouter::mutable_legacy_ack_e2e() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.legacy_ack_e2e)
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 6;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.flags)
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.flags)
}

// optional fixed32 client_connection_id = 8;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_client_connection_id() {
  client_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::client_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.client_connection_id)
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_client_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.client_connection_id)
}

// optional uint32 seq_num_c2r = 9;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_seq_num_c2r() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_seq_num_c2r() {
  seq_num_c2r_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::seq_num_c2r() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.seq_num_c2r)
  return seq_num_c2r_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_seq_num_c2r(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  seq_num_c2r_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.seq_num_c2r)
}

// optional uint32 seq_num_c2s = 10;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_seq_num_c2s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_seq_num_c2s() {
  seq_num_c2s_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::seq_num_c2s() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.seq_num_c2s)
  return seq_num_c2s_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_seq_num_c2s(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  seq_num_c2s_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsClientToRouter.seq_num_c2s)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsRouterToClient

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToClient::quality_relay() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_relay_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.quality_relay)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToClient::release_quality_relay() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.quality_relay)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToClient::mutable_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
  if (quality_relay_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_relay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.quality_relay)
  return quality_relay_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_relay_);
  }
  if (quality_relay) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_relay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_relay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  quality_relay_ = quality_relay;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.quality_relay)
}

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToClient::quality_e2e() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_e2e_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.quality_e2e)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToClient::release_quality_e2e() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.quality_e2e)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToClient::mutable_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
  if (quality_e2e_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_e2e_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.quality_e2e)
  return quality_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_e2e_);
  }
  if (quality_e2e) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_e2e = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_e2e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quality_e2e_ = quality_e2e;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.quality_e2e)
}

// optional uint32 seconds_until_shutdown = 6;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::seconds_until_shutdown() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.seconds_until_shutdown)
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  seconds_until_shutdown_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.seconds_until_shutdown)
}

// optional fixed32 migrate_request_ip = 10;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_migrate_request_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_migrate_request_ip() {
  migrate_request_ip_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::migrate_request_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.migrate_request_ip)
  return migrate_request_ip_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_migrate_request_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  migrate_request_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.migrate_request_ip)
}

// optional uint32 migrate_request_port = 11;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_migrate_request_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_migrate_request_port() {
  migrate_request_port_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::migrate_request_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.migrate_request_port)
  return migrate_request_port_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_migrate_request_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  migrate_request_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.migrate_request_port)
}

// optional uint32 scoring_penalty_relay_cluster = 12;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_scoring_penalty_relay_cluster() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_scoring_penalty_relay_cluster() {
  scoring_penalty_relay_cluster_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::scoring_penalty_relay_cluster() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.scoring_penalty_relay_cluster)
  return scoring_penalty_relay_cluster_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  scoring_penalty_relay_cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.scoring_penalty_relay_cluster)
}

// repeated fixed32 ack_relay = 13;
inline int CMsgSteamDatagramConnectionStatsRouterToClient::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::ack_relay(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.ack_relay)
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.ack_relay)
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.ack_relay)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsRouterToClient::ack_relay() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.ack_relay)
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsRouterToClient::mutable_ack_relay() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.ack_relay)
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 14;
inline int CMsgSteamDatagramConnectionStatsRouterToClient::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::legacy_ack_e2e(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.legacy_ack_e2e)
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.legacy_ack_e2e)
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.legacy_ack_e2e)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsRouterToClient::legacy_ack_e2e() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.legacy_ack_e2e)
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsRouterToClient::mutable_legacy_ack_e2e() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.legacy_ack_e2e)
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 15;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.flags)
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.flags)
}

// optional fixed32 client_connection_id = 7;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_client_connection_id() {
  client_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::client_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.client_connection_id)
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_client_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.client_connection_id)
}

// optional uint32 seq_num_r2c = 8;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_seq_num_r2c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_seq_num_r2c() {
  seq_num_r2c_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::seq_num_r2c() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.seq_num_r2c)
  return seq_num_r2c_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_seq_num_r2c(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  seq_num_r2c_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.seq_num_r2c)
}

// optional uint32 seq_num_s2c = 9;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_seq_num_s2c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_seq_num_s2c() {
  seq_num_s2c_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::seq_num_s2c() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.seq_num_s2c)
  return seq_num_s2c_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_seq_num_s2c(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  seq_num_s2c_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToClient.seq_num_s2c)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsRouterToServer

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToServer::quality_relay() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_relay_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.quality_relay)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToServer::release_quality_relay() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.quality_relay)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToServer::mutable_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
  if (quality_relay_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_relay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.quality_relay)
  return quality_relay_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_relay_);
  }
  if (quality_relay) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_relay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_relay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  quality_relay_ = quality_relay;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.quality_relay)
}

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToServer::quality_e2e() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_e2e_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.quality_e2e)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToServer::release_quality_e2e() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.quality_e2e)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToServer::mutable_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
  if (quality_e2e_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_e2e_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.quality_e2e)
  return quality_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_e2e_);
  }
  if (quality_e2e) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_e2e = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_e2e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quality_e2e_ = quality_e2e;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.quality_e2e)
}

// repeated fixed32 ack_relay = 10;
inline int CMsgSteamDatagramConnectionStatsRouterToServer::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::ack_relay(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.ack_relay)
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.ack_relay)
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.ack_relay)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsRouterToServer::ack_relay() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.ack_relay)
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsRouterToServer::mutable_ack_relay() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.ack_relay)
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 11;
inline int CMsgSteamDatagramConnectionStatsRouterToServer::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::legacy_ack_e2e(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.legacy_ack_e2e)
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.legacy_ack_e2e)
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.legacy_ack_e2e)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsRouterToServer::legacy_ack_e2e() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.legacy_ack_e2e)
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsRouterToServer::mutable_legacy_ack_e2e() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.legacy_ack_e2e)
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 12;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.flags)
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.flags)
}

// optional uint32 seq_num_r2s = 5;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_seq_num_r2s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_seq_num_r2s() {
  seq_num_r2s_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::seq_num_r2s() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.seq_num_r2s)
  return seq_num_r2s_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_seq_num_r2s(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  seq_num_r2s_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.seq_num_r2s)
}

// optional uint32 seq_num_c2s = 6;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_seq_num_c2s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_seq_num_c2s() {
  seq_num_c2s_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::seq_num_c2s() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.seq_num_c2s)
  return seq_num_c2s_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_seq_num_c2s(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seq_num_c2s_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.seq_num_c2s)
}

// optional fixed64 client_steam_id = 7;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_client_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_client_steam_id() {
  client_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectionStatsRouterToServer::client_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.client_steam_id)
  return client_steam_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_client_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  client_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.client_steam_id)
}

// optional uint32 relay_session_id = 8;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_relay_session_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_relay_session_id() {
  relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.relay_session_id)
  return relay_session_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.relay_session_id)
}

// optional fixed32 client_connection_id = 9;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_client_connection_id() {
  client_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::client_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.client_connection_id)
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_client_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  client_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.client_connection_id)
}

// optional fixed32 server_connection_id = 13;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_server_connection_id() {
  server_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::server_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.server_connection_id)
  return server_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_server_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  server_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsRouterToServer.server_connection_id)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsServerToRouter

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsServerToRouter::quality_relay() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_relay_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.quality_relay)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsServerToRouter::release_quality_relay() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.quality_relay)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsServerToRouter::mutable_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
  if (quality_relay_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_relay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.quality_relay)
  return quality_relay_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_relay_);
  }
  if (quality_relay) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_relay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_relay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  quality_relay_ = quality_relay;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.quality_relay)
}

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsServerToRouter::quality_e2e() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_e2e_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.quality_e2e)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsServerToRouter::release_quality_e2e() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.quality_e2e)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsServerToRouter::mutable_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
  if (quality_e2e_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_e2e_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.quality_e2e)
  return quality_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_e2e_);
  }
  if (quality_e2e) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_e2e = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_e2e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quality_e2e_ = quality_e2e;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.quality_e2e)
}

// repeated fixed32 ack_relay = 8;
inline int CMsgSteamDatagramConnectionStatsServerToRouter::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::ack_relay(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.ack_relay)
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.ack_relay)
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.ack_relay)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsServerToRouter::ack_relay() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.ack_relay)
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsServerToRouter::mutable_ack_relay() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.ack_relay)
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 9;
inline int CMsgSteamDatagramConnectionStatsServerToRouter::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::legacy_ack_e2e(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.legacy_ack_e2e)
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.legacy_ack_e2e)
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.legacy_ack_e2e)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsServerToRouter::legacy_ack_e2e() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.legacy_ack_e2e)
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsServerToRouter::mutable_legacy_ack_e2e() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.legacy_ack_e2e)
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 10;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.flags)
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.flags)
}

// optional uint32 seq_num_s2r = 3;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_seq_num_s2r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_seq_num_s2r() {
  seq_num_s2r_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::seq_num_s2r() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.seq_num_s2r)
  return seq_num_s2r_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_seq_num_s2r(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  seq_num_s2r_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.seq_num_s2r)
}

// optional uint32 seq_num_s2c = 4;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_seq_num_s2c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_seq_num_s2c() {
  seq_num_s2c_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::seq_num_s2c() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.seq_num_s2c)
  return seq_num_s2c_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_seq_num_s2c(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seq_num_s2c_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.seq_num_s2c)
}

// optional fixed64 client_steam_id = 5;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_client_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_client_steam_id() {
  client_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectionStatsServerToRouter::client_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.client_steam_id)
  return client_steam_id_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_client_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  client_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.client_steam_id)
}

// optional uint32 relay_session_id = 6;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_relay_session_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_relay_session_id() {
  relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.relay_session_id)
  return relay_session_id_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.relay_session_id)
}

// optional fixed32 client_connection_id = 7;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_client_connection_id() {
  client_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::client_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.client_connection_id)
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_client_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  client_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.client_connection_id)
}

// optional fixed32 server_connection_id = 11;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_server_connection_id() {
  server_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::server_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.server_connection_id)
  return server_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_server_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  server_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsServerToRouter.server_connection_id)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PSessionRequestBody

// optional fixed32 challenge_time = 1;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_challenge_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_challenge_time() {
  challenge_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::challenge_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.challenge_time)
  return challenge_time_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_challenge_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  challenge_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.challenge_time)
}

// optional fixed64 challenge = 2;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_challenge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_challenge() {
  challenge_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramP2PSessionRequestBody::challenge() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.challenge)
  return challenge_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_challenge(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  challenge_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.challenge)
}

// optional fixed32 client_connection_id = 3;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_client_connection_id() {
  client_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::client_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.client_connection_id)
  return client_connection_id_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_client_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  client_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.client_connection_id)
}

// optional fixed64 peer_steam_id = 4;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_peer_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_peer_steam_id() {
  peer_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramP2PSessionRequestBody::peer_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.peer_steam_id)
  return peer_steam_id_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_peer_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  peer_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.peer_steam_id)
}

// optional fixed32 peer_connection_id = 5;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_peer_connection_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_peer_connection_id() {
  peer_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::peer_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.peer_connection_id)
  return peer_connection_id_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_peer_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  peer_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.peer_connection_id)
}

// optional uint32 protocol_version = 8;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_protocol_version() {
  protocol_version_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::protocol_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.protocol_version)
  return protocol_version_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_protocol_version(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.protocol_version)
}

// optional uint32 network_config_version = 9;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_network_config_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_network_config_version() {
  network_config_version_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::network_config_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.network_config_version)
  return network_config_version_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_network_config_version(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  network_config_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.network_config_version)
}

// optional fixed32 public_ip = 10;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_public_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_public_ip() {
  public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.public_ip)
  return public_ip_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_public_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequestBody.public_ip)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PSessionRequest

// optional .proto.steam.CMsgSteamDatagramCertificateSigned cert = 1;
inline bool CMsgSteamDatagramP2PSessionRequest::has_cert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramP2PSessionRequest::cert() const {
  const ::proto::steam::CMsgSteamDatagramCertificateSigned* p = cert_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequest.cert)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramCertificateSigned*>(
      &::proto::steam::_CMsgSteamDatagramCertificateSigned_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramP2PSessionRequest::release_cert() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PSessionRequest.cert)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::steam::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramP2PSessionRequest::mutable_cert() {
  _has_bits_[0] |= 0x00000004u;
  if (cert_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramCertificateSigned>(GetArenaNoVirtual());
    cert_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PSessionRequest.cert)
  return cert_;
}
inline void CMsgSteamDatagramP2PSessionRequest::set_allocated_cert(::proto::steam::CMsgSteamDatagramCertificateSigned* cert) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cert_);
  }
  if (cert) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cert = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cert_ = cert;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PSessionRequest.cert)
}

// optional bytes body = 2;
inline bool CMsgSteamDatagramP2PSessionRequest::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramP2PSessionRequest::body() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequest.body)
  return body_.GetNoArena();
}
inline void CMsgSteamDatagramP2PSessionRequest::set_body(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequest.body)
}
#if LANG_CXX11
inline void CMsgSteamDatagramP2PSessionRequest::set_body(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramP2PSessionRequest.body)
}
#endif
inline void CMsgSteamDatagramP2PSessionRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramP2PSessionRequest.body)
}
inline void CMsgSteamDatagramP2PSessionRequest::set_body(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramP2PSessionRequest.body)
}
inline ::std::string* CMsgSteamDatagramP2PSessionRequest::mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PSessionRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramP2PSessionRequest::release_body() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PSessionRequest.body)
  if (!has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramP2PSessionRequest::set_allocated_body(::std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PSessionRequest.body)
}

// optional bytes signature = 3;
inline bool CMsgSteamDatagramP2PSessionRequest::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgSteamDatagramP2PSessionRequest::signature() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionRequest.signature)
  return signature_.GetNoArena();
}
inline void CMsgSteamDatagramP2PSessionRequest::set_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionRequest.signature)
}
#if LANG_CXX11
inline void CMsgSteamDatagramP2PSessionRequest::set_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramP2PSessionRequest.signature)
}
#endif
inline void CMsgSteamDatagramP2PSessionRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramP2PSessionRequest.signature)
}
inline void CMsgSteamDatagramP2PSessionRequest::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramP2PSessionRequest.signature)
}
inline ::std::string* CMsgSteamDatagramP2PSessionRequest::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PSessionRequest.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramP2PSessionRequest::release_signature() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PSessionRequest.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramP2PSessionRequest::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PSessionRequest.signature)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PSessionEstablished

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramP2PSessionEstablished::has_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionEstablished::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionEstablished.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionEstablished.connection_id)
}

// optional uint32 seconds_until_shutdown = 3;
inline bool CMsgSteamDatagramP2PSessionEstablished::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionEstablished::seconds_until_shutdown() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionEstablished.seconds_until_shutdown)
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  seconds_until_shutdown_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionEstablished.seconds_until_shutdown)
}

// optional bytes relay_routing_token = 4;
inline bool CMsgSteamDatagramP2PSessionEstablished::has_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_relay_routing_token() {
  relay_routing_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramP2PSessionEstablished::relay_routing_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionEstablished.relay_routing_token)
  return relay_routing_token_.GetNoArena();
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_relay_routing_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionEstablished.relay_routing_token)
}
#if LANG_CXX11
inline void CMsgSteamDatagramP2PSessionEstablished::set_relay_routing_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  relay_routing_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramP2PSessionEstablished.relay_routing_token)
}
#endif
inline void CMsgSteamDatagramP2PSessionEstablished::set_relay_routing_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramP2PSessionEstablished.relay_routing_token)
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_relay_routing_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramP2PSessionEstablished.relay_routing_token)
}
inline ::std::string* CMsgSteamDatagramP2PSessionEstablished::mutable_relay_routing_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PSessionEstablished.relay_routing_token)
  return relay_routing_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramP2PSessionEstablished::release_relay_routing_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PSessionEstablished.relay_routing_token)
  if (!has_relay_routing_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return relay_routing_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_allocated_relay_routing_token(::std::string* relay_routing_token) {
  if (relay_routing_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  relay_routing_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relay_routing_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PSessionEstablished.relay_routing_token)
}

// optional uint32 seq_num_r2c = 5;
inline bool CMsgSteamDatagramP2PSessionEstablished::has_seq_num_r2c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_seq_num_r2c() {
  seq_num_r2c_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionEstablished::seq_num_r2c() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PSessionEstablished.seq_num_r2c)
  return seq_num_r2c_;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_seq_num_r2c(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seq_num_r2c_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PSessionEstablished.seq_num_r2c)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PRoutes_RelayCluster

// optional fixed32 pop_id = 1;
inline bool CMsgSteamDatagramP2PRoutes_RelayCluster::has_pop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_pop_id() {
  pop_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_RelayCluster::pop_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.pop_id)
  return pop_id_;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_pop_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pop_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.pop_id)
}

// optional uint32 ping_ms = 2;
inline bool CMsgSteamDatagramP2PRoutes_RelayCluster::has_ping_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_ping_ms() {
  ping_ms_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_RelayCluster::ping_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.ping_ms)
  return ping_ms_;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_ping_ms(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ping_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.ping_ms)
}

// optional uint32 score_penalty = 3;
inline bool CMsgSteamDatagramP2PRoutes_RelayCluster::has_score_penalty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_score_penalty() {
  score_penalty_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_RelayCluster::score_penalty() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.score_penalty)
  return score_penalty_;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_score_penalty(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  score_penalty_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.score_penalty)
}

// optional bytes session_relay_routing_token = 4;
inline bool CMsgSteamDatagramP2PRoutes_RelayCluster::has_session_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_session_relay_routing_token() {
  session_relay_routing_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramP2PRoutes_RelayCluster::session_relay_routing_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.session_relay_routing_token)
  return session_relay_routing_token_.GetNoArena();
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_session_relay_routing_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.session_relay_routing_token)
}
#if LANG_CXX11
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_session_relay_routing_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_relay_routing_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.session_relay_routing_token)
}
#endif
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_session_relay_routing_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.session_relay_routing_token)
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_session_relay_routing_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.session_relay_routing_token)
}
inline ::std::string* CMsgSteamDatagramP2PRoutes_RelayCluster::mutable_session_relay_routing_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.session_relay_routing_token)
  return session_relay_routing_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramP2PRoutes_RelayCluster::release_session_relay_routing_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.session_relay_routing_token)
  if (!has_session_relay_routing_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_relay_routing_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_allocated_session_relay_routing_token(::std::string* session_relay_routing_token) {
  if (session_relay_routing_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_relay_routing_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_relay_routing_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster.session_relay_routing_token)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PRoutes_Route

// optional fixed32 my_pop_id = 1;
inline bool CMsgSteamDatagramP2PRoutes_Route::has_my_pop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_Route::clear_my_pop_id() {
  my_pop_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_Route::my_pop_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.Route.my_pop_id)
  return my_pop_id_;
}
inline void CMsgSteamDatagramP2PRoutes_Route::set_my_pop_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  my_pop_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRoutes.Route.my_pop_id)
}

// optional fixed32 your_pop_id = 2;
inline bool CMsgSteamDatagramP2PRoutes_Route::has_your_pop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_Route::clear_your_pop_id() {
  your_pop_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_Route::your_pop_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.Route.your_pop_id)
  return your_pop_id_;
}
inline void CMsgSteamDatagramP2PRoutes_Route::set_your_pop_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  your_pop_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRoutes.Route.your_pop_id)
}

// optional uint32 score = 3;
inline bool CMsgSteamDatagramP2PRoutes_Route::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_Route::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_Route::score() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.Route.score)
  return score_;
}
inline void CMsgSteamDatagramP2PRoutes_Route::set_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRoutes.Route.score)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PRoutes

// repeated .proto.steam.CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
inline int CMsgSteamDatagramP2PRoutes::relay_clusters_size() const {
  return relay_clusters_.size();
}
inline void CMsgSteamDatagramP2PRoutes::clear_relay_clusters() {
  relay_clusters_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster* CMsgSteamDatagramP2PRoutes::mutable_relay_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PRoutes.relay_clusters)
  return relay_clusters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster >*
CMsgSteamDatagramP2PRoutes::mutable_relay_clusters() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramP2PRoutes.relay_clusters)
  return &relay_clusters_;
}
inline const ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster& CMsgSteamDatagramP2PRoutes::relay_clusters(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.relay_clusters)
  return relay_clusters_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster* CMsgSteamDatagramP2PRoutes::add_relay_clusters() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramP2PRoutes.relay_clusters)
  return relay_clusters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_RelayCluster >&
CMsgSteamDatagramP2PRoutes::relay_clusters() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramP2PRoutes.relay_clusters)
  return relay_clusters_;
}

// repeated .proto.steam.CMsgSteamDatagramP2PRoutes.Route routes = 2;
inline int CMsgSteamDatagramP2PRoutes::routes_size() const {
  return routes_.size();
}
inline void CMsgSteamDatagramP2PRoutes::clear_routes() {
  routes_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramP2PRoutes_Route* CMsgSteamDatagramP2PRoutes::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PRoutes.routes)
  return routes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_Route >*
CMsgSteamDatagramP2PRoutes::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramP2PRoutes.routes)
  return &routes_;
}
inline const ::proto::steam::CMsgSteamDatagramP2PRoutes_Route& CMsgSteamDatagramP2PRoutes::routes(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.routes)
  return routes_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramP2PRoutes_Route* CMsgSteamDatagramP2PRoutes::add_routes() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramP2PRoutes.routes)
  return routes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramP2PRoutes_Route >&
CMsgSteamDatagramP2PRoutes::routes() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramP2PRoutes.routes)
  return routes_;
}

// optional uint32 revision = 3;
inline bool CMsgSteamDatagramP2PRoutes::has_revision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes::clear_revision() {
  revision_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes::revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRoutes.revision)
  return revision_;
}
inline void CMsgSteamDatagramP2PRoutes::set_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRoutes.revision)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PRendezvous

// optional fixed32 to_connection_id = 1;
inline bool CMsgSteamDatagramP2PRendezvous::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_to_connection_id() {
  to_connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRendezvous::to_connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRendezvous.to_connection_id)
  return to_connection_id_;
}
inline void CMsgSteamDatagramP2PRendezvous::set_to_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  to_connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRendezvous.to_connection_id)
}

// optional .proto.steam.CMsgSteamDatagramP2PRoutes routes = 2;
inline bool CMsgSteamDatagramP2PRendezvous::has_routes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_routes() {
  if (routes_ != nullptr) routes_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::steam::CMsgSteamDatagramP2PRoutes& CMsgSteamDatagramP2PRendezvous::routes() const {
  const ::proto::steam::CMsgSteamDatagramP2PRoutes* p = routes_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRendezvous.routes)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramP2PRoutes*>(
      &::proto::steam::_CMsgSteamDatagramP2PRoutes_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramP2PRoutes* CMsgSteamDatagramP2PRendezvous::release_routes() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PRendezvous.routes)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramP2PRoutes* temp = routes_;
  routes_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramP2PRoutes* CMsgSteamDatagramP2PRendezvous::mutable_routes() {
  _has_bits_[0] |= 0x00000002u;
  if (routes_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramP2PRoutes>(GetArenaNoVirtual());
    routes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PRendezvous.routes)
  return routes_;
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_routes(::proto::steam::CMsgSteamDatagramP2PRoutes* routes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete routes_;
  }
  if (routes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      routes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, routes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  routes_ = routes;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PRendezvous.routes)
}

// optional uint32 ack_peer_routes_revision = 3;
inline bool CMsgSteamDatagramP2PRendezvous::has_ack_peer_routes_revision() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_ack_peer_routes_revision() {
  ack_peer_routes_revision_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRendezvous::ack_peer_routes_revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRendezvous.ack_peer_routes_revision)
  return ack_peer_routes_revision_;
}
inline void CMsgSteamDatagramP2PRendezvous::set_ack_peer_routes_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ack_peer_routes_revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRendezvous.ack_peer_routes_revision)
}

// optional .proto.steam.CMsgSteamDatagramConnectRequest connect_request = 4;
inline bool CMsgSteamDatagramP2PRendezvous::has_connect_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_connect_request() {
  if (connect_request_ != nullptr) connect_request_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::proto::steam::CMsgSteamDatagramConnectRequest& CMsgSteamDatagramP2PRendezvous::connect_request() const {
  const ::proto::steam::CMsgSteamDatagramConnectRequest* p = connect_request_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRendezvous.connect_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectRequest*>(
      &::proto::steam::_CMsgSteamDatagramConnectRequest_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectRequest* CMsgSteamDatagramP2PRendezvous::release_connect_request() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PRendezvous.connect_request)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::steam::CMsgSteamDatagramConnectRequest* temp = connect_request_;
  connect_request_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectRequest* CMsgSteamDatagramP2PRendezvous::mutable_connect_request() {
  _has_bits_[0] |= 0x00000004u;
  if (connect_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectRequest>(GetArenaNoVirtual());
    connect_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PRendezvous.connect_request)
  return connect_request_;
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_connect_request(::proto::steam::CMsgSteamDatagramConnectRequest* connect_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connect_request_;
  }
  if (connect_request) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connect_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connect_request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  connect_request_ = connect_request;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PRendezvous.connect_request)
}

// optional .proto.steam.CMsgSteamDatagramConnectOK connect_ok = 5;
inline bool CMsgSteamDatagramP2PRendezvous::has_connect_ok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_connect_ok() {
  if (connect_ok_ != nullptr) connect_ok_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::proto::steam::CMsgSteamDatagramConnectOK& CMsgSteamDatagramP2PRendezvous::connect_ok() const {
  const ::proto::steam::CMsgSteamDatagramConnectOK* p = connect_ok_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRendezvous.connect_ok)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectOK*>(
      &::proto::steam::_CMsgSteamDatagramConnectOK_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectOK* CMsgSteamDatagramP2PRendezvous::release_connect_ok() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PRendezvous.connect_ok)
  _has_bits_[0] &= ~0x00000008u;
  ::proto::steam::CMsgSteamDatagramConnectOK* temp = connect_ok_;
  connect_ok_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectOK* CMsgSteamDatagramP2PRendezvous::mutable_connect_ok() {
  _has_bits_[0] |= 0x00000008u;
  if (connect_ok_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectOK>(GetArenaNoVirtual());
    connect_ok_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PRendezvous.connect_ok)
  return connect_ok_;
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_connect_ok(::proto::steam::CMsgSteamDatagramConnectOK* connect_ok) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connect_ok_;
  }
  if (connect_ok) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connect_ok = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connect_ok, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  connect_ok_ = connect_ok;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PRendezvous.connect_ok)
}

// optional .proto.steam.CMsgSteamDatagramConnectionClosed connection_closed = 6;
inline bool CMsgSteamDatagramP2PRendezvous::has_connection_closed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_connection_closed() {
  if (connection_closed_ != nullptr) connection_closed_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionClosed& CMsgSteamDatagramP2PRendezvous::connection_closed() const {
  const ::proto::steam::CMsgSteamDatagramConnectionClosed* p = connection_closed_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRendezvous.connection_closed)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionClosed*>(
      &::proto::steam::_CMsgSteamDatagramConnectionClosed_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionClosed* CMsgSteamDatagramP2PRendezvous::release_connection_closed() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PRendezvous.connection_closed)
  _has_bits_[0] &= ~0x00000010u;
  ::proto::steam::CMsgSteamDatagramConnectionClosed* temp = connection_closed_;
  connection_closed_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionClosed* CMsgSteamDatagramP2PRendezvous::mutable_connection_closed() {
  _has_bits_[0] |= 0x00000010u;
  if (connection_closed_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionClosed>(GetArenaNoVirtual());
    connection_closed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PRendezvous.connection_closed)
  return connection_closed_;
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_connection_closed(::proto::steam::CMsgSteamDatagramConnectionClosed* connection_closed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connection_closed_;
  }
  if (connection_closed) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connection_closed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection_closed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  connection_closed_ = connection_closed;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PRendezvous.connection_closed)
}

// optional bytes failed_relay_routing_token = 7;
inline bool CMsgSteamDatagramP2PRendezvous::has_failed_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_failed_relay_routing_token() {
  failed_relay_routing_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramP2PRendezvous::failed_relay_routing_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PRendezvous.failed_relay_routing_token)
  return failed_relay_routing_token_.GetNoArena();
}
inline void CMsgSteamDatagramP2PRendezvous::set_failed_relay_routing_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  failed_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PRendezvous.failed_relay_routing_token)
}
#if LANG_CXX11
inline void CMsgSteamDatagramP2PRendezvous::set_failed_relay_routing_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  failed_relay_routing_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramP2PRendezvous.failed_relay_routing_token)
}
#endif
inline void CMsgSteamDatagramP2PRendezvous::set_failed_relay_routing_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  failed_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramP2PRendezvous.failed_relay_routing_token)
}
inline void CMsgSteamDatagramP2PRendezvous::set_failed_relay_routing_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  failed_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramP2PRendezvous.failed_relay_routing_token)
}
inline ::std::string* CMsgSteamDatagramP2PRendezvous::mutable_failed_relay_routing_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PRendezvous.failed_relay_routing_token)
  return failed_relay_routing_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramP2PRendezvous::release_failed_relay_routing_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PRendezvous.failed_relay_routing_token)
  if (!has_failed_relay_routing_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return failed_relay_routing_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_failed_relay_routing_token(::std::string* failed_relay_routing_token) {
  if (failed_relay_routing_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  failed_relay_routing_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failed_relay_routing_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PRendezvous.failed_relay_routing_token)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsP2PClientToRouter

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PClientToRouter::quality_relay() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_relay_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_relay)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PClientToRouter::release_quality_relay() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_relay)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_quality_relay() {
  _has_bits_[0] |= 0x00000004u;
  if (quality_relay_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_relay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_relay)
  return quality_relay_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_relay_);
  }
  if (quality_relay) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_relay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_relay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  quality_relay_ = quality_relay;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_relay)
}

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PClientToRouter::quality_e2e() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_e2e_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_e2e)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PClientToRouter::release_quality_e2e() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_e2e)
  _has_bits_[0] &= ~0x00000008u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_quality_e2e() {
  _has_bits_[0] |= 0x00000008u;
  if (quality_e2e_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_e2e_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_e2e)
  return quality_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_e2e_);
  }
  if (quality_e2e) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_e2e = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_e2e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  quality_e2e_ = quality_e2e;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_e2e)
}

// repeated fixed32 ack_relay = 3;
inline int CMsgSteamDatagramConnectionStatsP2PClientToRouter::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::ack_relay(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_relay)
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_relay)
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_relay)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PClientToRouter::ack_relay() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_relay)
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_ack_relay() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_relay)
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 4;
inline int CMsgSteamDatagramConnectionStatsP2PClientToRouter::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::legacy_ack_e2e(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.legacy_ack_e2e)
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.legacy_ack_e2e)
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.legacy_ack_e2e)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PClientToRouter::legacy_ack_e2e() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.legacy_ack_e2e)
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_legacy_ack_e2e() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.legacy_ack_e2e)
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 5;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.flags)
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.flags)
}

// optional bytes forward_target_relay_routing_token = 6;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_forward_target_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_forward_target_relay_routing_token() {
  forward_target_relay_routing_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PClientToRouter::forward_target_relay_routing_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_relay_routing_token)
  return forward_target_relay_routing_token_.GetNoArena();
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_forward_target_relay_routing_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  forward_target_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_relay_routing_token)
}
#if LANG_CXX11
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_forward_target_relay_routing_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  forward_target_relay_routing_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_relay_routing_token)
}
#endif
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_forward_target_relay_routing_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  forward_target_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_relay_routing_token)
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_forward_target_relay_routing_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  forward_target_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_relay_routing_token)
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_forward_target_relay_routing_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_relay_routing_token)
  return forward_target_relay_routing_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PClientToRouter::release_forward_target_relay_routing_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_relay_routing_token)
  if (!has_forward_target_relay_routing_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return forward_target_relay_routing_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_allocated_forward_target_relay_routing_token(::std::string* forward_target_relay_routing_token) {
  if (forward_target_relay_routing_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  forward_target_relay_routing_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forward_target_relay_routing_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_relay_routing_token)
}

// optional uint32 forward_target_revision = 7;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_forward_target_revision() {
  forward_target_revision_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::forward_target_revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_revision)
  return forward_target_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_forward_target_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  forward_target_revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.forward_target_revision)
}

// optional bytes routes = 8;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_routes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_routes() {
  routes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PClientToRouter::routes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes)
  return routes_.GetNoArena();
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_routes(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  routes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes)
}
#if LANG_CXX11
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_routes(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  routes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes)
}
#endif
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_routes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  routes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes)
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_routes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  routes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes)
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_routes() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes)
  return routes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PClientToRouter::release_routes() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes)
  if (!has_routes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return routes_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_allocated_routes(::std::string* routes) {
  if (routes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  routes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), routes);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.routes)
}

// optional uint32 ack_peer_routes_revision = 9;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_ack_peer_routes_revision() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_ack_peer_routes_revision() {
  ack_peer_routes_revision_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::ack_peer_routes_revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_peer_routes_revision)
  return ack_peer_routes_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_ack_peer_routes_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ack_peer_routes_revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.ack_peer_routes_revision)
}

// optional fixed32 connection_id = 10;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_connection_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.connection_id)
}

// optional uint32 seq_num_c2r = 11;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_seq_num_c2r() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_seq_num_c2r() {
  seq_num_c2r_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::seq_num_c2r() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.seq_num_c2r)
  return seq_num_c2r_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_seq_num_c2r(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  seq_num_c2r_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.seq_num_c2r)
}

// optional uint32 seq_num_e2e = 12;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_seq_num_e2e() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_seq_num_e2e() {
  seq_num_e2e_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::seq_num_e2e() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.seq_num_e2e)
  return seq_num_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_seq_num_e2e(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  seq_num_e2e_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PClientToRouter.seq_num_e2e)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsP2PRouterToClient

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToClient::quality_relay() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_relay_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_relay)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToClient::release_quality_relay() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_relay)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_quality_relay() {
  _has_bits_[0] |= 0x00000002u;
  if (quality_relay_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_relay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_relay)
  return quality_relay_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_relay_);
  }
  if (quality_relay) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_relay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_relay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quality_relay_ = quality_relay;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_relay)
}

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToClient::quality_e2e() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_e2e_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_e2e)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToClient::release_quality_e2e() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_e2e)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_quality_e2e() {
  _has_bits_[0] |= 0x00000004u;
  if (quality_e2e_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_e2e_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_e2e)
  return quality_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_e2e_);
  }
  if (quality_e2e) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_e2e = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_e2e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  quality_e2e_ = quality_e2e;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_e2e)
}

// optional uint32 seconds_until_shutdown = 3;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::seconds_until_shutdown() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.seconds_until_shutdown)
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  seconds_until_shutdown_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.seconds_until_shutdown)
}

// optional fixed32 migrate_request_ip = 4;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_migrate_request_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_migrate_request_ip() {
  migrate_request_ip_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::migrate_request_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.migrate_request_ip)
  return migrate_request_ip_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_migrate_request_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  migrate_request_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.migrate_request_ip)
}

// optional uint32 migrate_request_port = 5;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_migrate_request_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_migrate_request_port() {
  migrate_request_port_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::migrate_request_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.migrate_request_port)
  return migrate_request_port_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_migrate_request_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  migrate_request_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.migrate_request_port)
}

// optional uint32 scoring_penalty_relay_cluster = 6;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_scoring_penalty_relay_cluster() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_scoring_penalty_relay_cluster() {
  scoring_penalty_relay_cluster_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::scoring_penalty_relay_cluster() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.scoring_penalty_relay_cluster)
  return scoring_penalty_relay_cluster_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  scoring_penalty_relay_cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.scoring_penalty_relay_cluster)
}

// repeated fixed32 ack_relay = 7;
inline int CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_relay(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_relay)
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_relay)
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_relay)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_relay() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_relay)
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_ack_relay() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_relay)
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 8;
inline int CMsgSteamDatagramConnectionStatsP2PRouterToClient::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::legacy_ack_e2e(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.legacy_ack_e2e)
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.legacy_ack_e2e)
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.legacy_ack_e2e)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PRouterToClient::legacy_ack_e2e() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.legacy_ack_e2e)
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_legacy_ack_e2e() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.legacy_ack_e2e)
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 9;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.flags)
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.flags)
}

// optional uint32 ack_forward_target_revision = 10;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_ack_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_ack_forward_target_revision() {
  ack_forward_target_revision_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_forward_target_revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_forward_target_revision)
  return ack_forward_target_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_ack_forward_target_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  ack_forward_target_revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_forward_target_revision)
}

// optional bytes routes = 11;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_routes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_routes() {
  routes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PRouterToClient::routes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes)
  return routes_.GetNoArena();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_routes(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  routes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes)
}
#if LANG_CXX11
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_routes(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  routes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes)
}
#endif
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_routes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  routes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes)
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_routes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  routes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes)
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_routes() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes)
  return routes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PRouterToClient::release_routes() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes)
  if (!has_routes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return routes_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_allocated_routes(::std::string* routes) {
  if (routes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  routes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), routes);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.routes)
}

// optional uint32 ack_peer_routes_revision = 12;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_ack_peer_routes_revision() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_ack_peer_routes_revision() {
  ack_peer_routes_revision_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_peer_routes_revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_peer_routes_revision)
  return ack_peer_routes_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_ack_peer_routes_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  ack_peer_routes_revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.ack_peer_routes_revision)
}

// optional fixed32 connection_id = 13;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_connection_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.connection_id)
}

// optional uint32 seq_num_r2c = 14;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_seq_num_r2c() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_seq_num_r2c() {
  seq_num_r2c_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::seq_num_r2c() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.seq_num_r2c)
  return seq_num_r2c_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_seq_num_r2c(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  seq_num_r2c_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.seq_num_r2c)
}

// optional uint32 seq_num_e2e = 15;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_seq_num_e2e() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_seq_num_e2e() {
  seq_num_e2e_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::seq_num_e2e() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.seq_num_e2e)
  return seq_num_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_seq_num_e2e(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  seq_num_e2e_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToClient.seq_num_e2e)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PBadRouteRouterToClient

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramP2PBadRouteRouterToClient::has_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_connection_id() {
  connection_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PBadRouteRouterToClient::connection_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.connection_id)
  return connection_id_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_connection_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.connection_id)
}

// optional bytes failed_relay_routing_token = 2;
inline bool CMsgSteamDatagramP2PBadRouteRouterToClient::has_failed_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_failed_relay_routing_token() {
  failed_relay_routing_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramP2PBadRouteRouterToClient::failed_relay_routing_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.failed_relay_routing_token)
  return failed_relay_routing_token_.GetNoArena();
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_failed_relay_routing_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  failed_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.failed_relay_routing_token)
}
#if LANG_CXX11
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_failed_relay_routing_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  failed_relay_routing_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.failed_relay_routing_token)
}
#endif
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_failed_relay_routing_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  failed_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.failed_relay_routing_token)
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_failed_relay_routing_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  failed_relay_routing_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.failed_relay_routing_token)
}
inline ::std::string* CMsgSteamDatagramP2PBadRouteRouterToClient::mutable_failed_relay_routing_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.failed_relay_routing_token)
  return failed_relay_routing_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramP2PBadRouteRouterToClient::release_failed_relay_routing_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.failed_relay_routing_token)
  if (!has_failed_relay_routing_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return failed_relay_routing_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_allocated_failed_relay_routing_token(::std::string* failed_relay_routing_token) {
  if (failed_relay_routing_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  failed_relay_routing_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failed_relay_routing_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.failed_relay_routing_token)
}

// optional uint32 ack_forward_target_revision = 3;
inline bool CMsgSteamDatagramP2PBadRouteRouterToClient::has_ack_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_ack_forward_target_revision() {
  ack_forward_target_revision_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PBadRouteRouterToClient::ack_forward_target_revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.ack_forward_target_revision)
  return ack_forward_target_revision_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_ack_forward_target_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ack_forward_target_revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.ack_forward_target_revision)
}

// optional fixed64 kludge_pad = 99;
inline bool CMsgSteamDatagramP2PBadRouteRouterToClient::has_kludge_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_kludge_pad() {
  kludge_pad_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramP2PBadRouteRouterToClient::kludge_pad() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.kludge_pad)
  return kludge_pad_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_kludge_pad(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  kludge_pad_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToClient.kludge_pad)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRelayToRelayPing

// optional fixed32 request_timestamp = 1;
inline bool CMsgSteamDatagramRelayToRelayPing::has_request_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_request_timestamp() {
  request_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::request_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayToRelayPing.request_timestamp)
  return request_timestamp_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_request_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  request_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayToRelayPing.request_timestamp)
}

// optional fixed32 request_date = 2;
inline bool CMsgSteamDatagramRelayToRelayPing::has_request_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_request_date() {
  request_date_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::request_date() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayToRelayPing.request_date)
  return request_date_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_request_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  request_date_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayToRelayPing.request_date)
}

// optional fixed32 my_pop_id = 3;
inline bool CMsgSteamDatagramRelayToRelayPing::has_my_pop_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_my_pop_id() {
  my_pop_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::my_pop_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayToRelayPing.my_pop_id)
  return my_pop_id_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_my_pop_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  my_pop_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayToRelayPing.my_pop_id)
}

// optional fixed32 your_pop_id = 4;
inline bool CMsgSteamDatagramRelayToRelayPing::has_your_pop_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_your_pop_id() {
  your_pop_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::your_pop_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayToRelayPing.your_pop_id)
  return your_pop_id_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_your_pop_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  your_pop_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayToRelayPing.your_pop_id)
}

// optional fixed32 checksum = 5;
inline bool CMsgSteamDatagramRelayToRelayPing::has_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_checksum() {
  checksum_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::checksum() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayToRelayPing.checksum)
  return checksum_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_checksum(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  checksum_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayToRelayPing.checksum)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramDataCenterState_Server

// optional string address = 1;
inline bool CMsgSteamDatagramDataCenterState_Server::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramDataCenterState_Server::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramDataCenterState_Server::address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramDataCenterState.Server.address)
  return address_.GetNoArena();
}
inline void CMsgSteamDatagramDataCenterState_Server::set_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramDataCenterState.Server.address)
}
#if LANG_CXX11
inline void CMsgSteamDatagramDataCenterState_Server::set_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramDataCenterState.Server.address)
}
#endif
inline void CMsgSteamDatagramDataCenterState_Server::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramDataCenterState.Server.address)
}
inline void CMsgSteamDatagramDataCenterState_Server::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramDataCenterState.Server.address)
}
inline ::std::string* CMsgSteamDatagramDataCenterState_Server::mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramDataCenterState.Server.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramDataCenterState_Server::release_address() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramDataCenterState.Server.address)
  if (!has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramDataCenterState_Server::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramDataCenterState.Server.address)
}

// optional uint32 ping_ms = 2;
inline bool CMsgSteamDatagramDataCenterState_Server::has_ping_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramDataCenterState_Server::clear_ping_ms() {
  ping_ms_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramDataCenterState_Server::ping_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramDataCenterState.Server.ping_ms)
  return ping_ms_;
}
inline void CMsgSteamDatagramDataCenterState_Server::set_ping_ms(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ping_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramDataCenterState.Server.ping_ms)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramDataCenterState_DataCenter

// optional string code = 1;
inline bool CMsgSteamDatagramDataCenterState_DataCenter::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramDataCenterState_DataCenter::code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code)
  return code_.GetNoArena();
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_code(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code)
}
#if LANG_CXX11
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_code(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code)
}
#endif
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code)
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code)
}
inline ::std::string* CMsgSteamDatagramDataCenterState_DataCenter::mutable_code() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramDataCenterState_DataCenter::release_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code)
  if (!has_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.code)
}

// repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server server_sample = 2;
inline int CMsgSteamDatagramDataCenterState_DataCenter::server_sample_size() const {
  return server_sample_.size();
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::clear_server_sample() {
  server_sample_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_DataCenter::mutable_server_sample(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.server_sample)
  return server_sample_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >*
CMsgSteamDatagramDataCenterState_DataCenter::mutable_server_sample() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.server_sample)
  return &server_sample_;
}
inline const ::proto::steam::CMsgSteamDatagramDataCenterState_Server& CMsgSteamDatagramDataCenterState_DataCenter::server_sample(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.server_sample)
  return server_sample_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_DataCenter::add_server_sample() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.server_sample)
  return server_sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >&
CMsgSteamDatagramDataCenterState_DataCenter::server_sample() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.server_sample)
  return server_sample_;
}

// repeated .proto.steam.CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
inline int CMsgSteamDatagramDataCenterState_DataCenter::relay_sample_size() const {
  return relay_sample_.size();
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::clear_relay_sample() {
  relay_sample_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_DataCenter::mutable_relay_sample(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.relay_sample)
  return relay_sample_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >*
CMsgSteamDatagramDataCenterState_DataCenter::mutable_relay_sample() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.relay_sample)
  return &relay_sample_;
}
inline const ::proto::steam::CMsgSteamDatagramDataCenterState_Server& CMsgSteamDatagramDataCenterState_DataCenter::relay_sample(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.relay_sample)
  return relay_sample_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_DataCenter::add_relay_sample() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.relay_sample)
  return relay_sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_Server >&
CMsgSteamDatagramDataCenterState_DataCenter::relay_sample() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramDataCenterState.DataCenter.relay_sample)
  return relay_sample_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramDataCenterState

// repeated .proto.steam.CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
inline int CMsgSteamDatagramDataCenterState::data_centers_size() const {
  return data_centers_.size();
}
inline void CMsgSteamDatagramDataCenterState::clear_data_centers() {
  data_centers_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter* CMsgSteamDatagramDataCenterState::mutable_data_centers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramDataCenterState.data_centers)
  return data_centers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter >*
CMsgSteamDatagramDataCenterState::mutable_data_centers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramDataCenterState.data_centers)
  return &data_centers_;
}
inline const ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter& CMsgSteamDatagramDataCenterState::data_centers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramDataCenterState.data_centers)
  return data_centers_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter* CMsgSteamDatagramDataCenterState::add_data_centers() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramDataCenterState.data_centers)
  return data_centers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramDataCenterState_DataCenter >&
CMsgSteamDatagramDataCenterState::data_centers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramDataCenterState.data_centers)
  return data_centers_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRouterHealth_DataCenter

// optional fixed32 datacenter_id = 1;
inline bool CMsgSteamDatagramRouterHealth_DataCenter::has_datacenter_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::clear_datacenter_id() {
  datacenter_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth_DataCenter::datacenter_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter.datacenter_id)
  return datacenter_id_;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::set_datacenter_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  datacenter_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter.datacenter_id)
}

// optional uint32 state = 2;
inline bool CMsgSteamDatagramRouterHealth_DataCenter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::clear_state() {
  state_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth_DataCenter::state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter.state)
  return state_;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::set_state(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.DataCenter.state)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRouterHealth

// optional float cpu_load = 1;
inline bool CMsgSteamDatagramRouterHealth::has_cpu_load() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::clear_cpu_load() {
  cpu_load_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgSteamDatagramRouterHealth::cpu_load() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.cpu_load)
  return cpu_load_;
}
inline void CMsgSteamDatagramRouterHealth::set_cpu_load(float value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_load_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.cpu_load)
}

// optional uint32 active_sessions = 2;
inline bool CMsgSteamDatagramRouterHealth::has_active_sessions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::clear_active_sessions() {
  active_sessions_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth::active_sessions() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.active_sessions)
  return active_sessions_;
}
inline void CMsgSteamDatagramRouterHealth::set_active_sessions(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  active_sessions_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.active_sessions)
}

// optional uint32 data_pkts_sec = 3;
inline bool CMsgSteamDatagramRouterHealth::has_data_pkts_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::clear_data_pkts_sec() {
  data_pkts_sec_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth::data_pkts_sec() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.data_pkts_sec)
  return data_pkts_sec_;
}
inline void CMsgSteamDatagramRouterHealth::set_data_pkts_sec(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  data_pkts_sec_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.data_pkts_sec)
}

// optional uint32 other_pkts_sec = 4;
inline bool CMsgSteamDatagramRouterHealth::has_other_pkts_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::clear_other_pkts_sec() {
  other_pkts_sec_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth::other_pkts_sec() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.other_pkts_sec)
  return other_pkts_sec_;
}
inline void CMsgSteamDatagramRouterHealth::set_other_pkts_sec(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  other_pkts_sec_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.other_pkts_sec)
}

// optional uint32 seconds_until_shutdown = 5;
inline bool CMsgSteamDatagramRouterHealth::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth::seconds_until_shutdown() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.seconds_until_shutdown)
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramRouterHealth::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  seconds_until_shutdown_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.seconds_until_shutdown)
}

// optional float cpu_cost_per_user = 8;
inline bool CMsgSteamDatagramRouterHealth::has_cpu_cost_per_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::clear_cpu_cost_per_user() {
  cpu_cost_per_user_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CMsgSteamDatagramRouterHealth::cpu_cost_per_user() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.cpu_cost_per_user)
  return cpu_cost_per_user_;
}
inline void CMsgSteamDatagramRouterHealth::set_cpu_cost_per_user(float value) {
  _has_bits_[0] |= 0x00000020u;
  cpu_cost_per_user_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.cpu_cost_per_user)
}

// optional float cpu_cost_per_packet = 9;
inline bool CMsgSteamDatagramRouterHealth::has_cpu_cost_per_packet() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::clear_cpu_cost_per_packet() {
  cpu_cost_per_packet_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CMsgSteamDatagramRouterHealth::cpu_cost_per_packet() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.cpu_cost_per_packet)
  return cpu_cost_per_packet_;
}
inline void CMsgSteamDatagramRouterHealth::set_cpu_cost_per_packet(float value) {
  _has_bits_[0] |= 0x00000080u;
  cpu_cost_per_packet_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.cpu_cost_per_packet)
}

// repeated .proto.steam.CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
inline int CMsgSteamDatagramRouterHealth::data_centers_size() const {
  return data_centers_.size();
}
inline void CMsgSteamDatagramRouterHealth::clear_data_centers() {
  data_centers_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter* CMsgSteamDatagramRouterHealth::mutable_data_centers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramRouterHealth.data_centers)
  return data_centers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter >*
CMsgSteamDatagramRouterHealth::mutable_data_centers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramRouterHealth.data_centers)
  return &data_centers_;
}
inline const ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter& CMsgSteamDatagramRouterHealth::data_centers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.data_centers)
  return data_centers_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter* CMsgSteamDatagramRouterHealth::add_data_centers() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramRouterHealth.data_centers)
  return data_centers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRouterHealth_DataCenter >&
CMsgSteamDatagramRouterHealth::data_centers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramRouterHealth.data_centers)
  return data_centers_;
}

// optional fixed64 magic = 7;
inline bool CMsgSteamDatagramRouterHealth::has_magic() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::clear_magic() {
  magic_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRouterHealth::magic() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRouterHealth.magic)
  return magic_;
}
inline void CMsgSteamDatagramRouterHealth::set_magic(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  magic_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRouterHealth.magic)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsP2PRouterToRouter

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToRouter::quality_relay() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_relay_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_relay)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::release_quality_relay() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_relay)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_quality_relay() {
  _has_bits_[0] |= 0x00000002u;
  if (quality_relay_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_relay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_relay)
  return quality_relay_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_allocated_quality_relay(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_relay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_relay_);
  }
  if (quality_relay) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_relay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_relay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quality_relay_ = quality_relay;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_relay)
}

// optional .proto.steam.CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::proto::steam::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToRouter::quality_e2e() const {
  const ::proto::steam::CMsgSteamDatagramConnectionQuality* p = quality_e2e_;
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_e2e)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CMsgSteamDatagramConnectionQuality*>(
      &::proto::steam::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::release_quality_e2e() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_e2e)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::steam::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = nullptr;
  return temp;
}
inline ::proto::steam::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_quality_e2e() {
  _has_bits_[0] |= 0x00000004u;
  if (quality_e2e_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CMsgSteamDatagramConnectionQuality>(GetArenaNoVirtual());
    quality_e2e_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_e2e)
  return quality_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_allocated_quality_e2e(::proto::steam::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_e2e_);
  }
  if (quality_e2e) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_e2e = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_e2e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  quality_e2e_ = quality_e2e;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_e2e)
}

// repeated fixed32 ack_relay = 3;
inline int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_relay(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_relay)
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_relay)
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_relay)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_relay() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_relay)
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_ack_relay() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_relay)
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 4;
inline int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::legacy_ack_e2e(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.legacy_ack_e2e)
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.legacy_ack_e2e)
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.legacy_ack_e2e)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::legacy_ack_e2e() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.legacy_ack_e2e)
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_legacy_ack_e2e() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.legacy_ack_e2e)
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 5;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.flags)
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.flags)
}

// optional uint32 ack_forward_target_revision = 6;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_ack_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_ack_forward_target_revision() {
  ack_forward_target_revision_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_forward_target_revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_forward_target_revision)
  return ack_forward_target_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_ack_forward_target_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ack_forward_target_revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_forward_target_revision)
}

// optional bytes routes = 7;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_routes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_routes() {
  routes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PRouterToRouter::routes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.routes)
  return routes_.GetNoArena();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_routes(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  routes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.routes)
}
#if LANG_CXX11
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_routes(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  routes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.routes)
}
#endif
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_routes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  routes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.routes)
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_routes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  routes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.routes)
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_routes() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.routes)
  return routes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::release_routes() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.routes)
  if (!has_routes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return routes_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_allocated_routes(::std::string* routes) {
  if (routes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  routes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), routes);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.routes)
}

// optional uint32 ack_peer_routes_revision = 8;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_ack_peer_routes_revision() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_ack_peer_routes_revision() {
  ack_peer_routes_revision_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_peer_routes_revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_peer_routes_revision)
  return ack_peer_routes_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_ack_peer_routes_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ack_peer_routes_revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ack_peer_routes_revision)
}

// optional uint32 seq_num_r2r = 26;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_seq_num_r2r() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_seq_num_r2r() {
  seq_num_r2r_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::seq_num_r2r() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.seq_num_r2r)
  return seq_num_r2r_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_seq_num_r2r(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  seq_num_r2r_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.seq_num_r2r)
}

// optional uint32 seq_num_e2e = 27;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_seq_num_e2e() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_seq_num_e2e() {
  seq_num_e2e_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::seq_num_e2e() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.seq_num_e2e)
  return seq_num_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_seq_num_e2e(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  seq_num_e2e_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.seq_num_e2e)
}

// optional fixed32 from_relay_session_id = 22;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::from_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.from_relay_session_id)
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_from_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  from_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.from_relay_session_id)
}

// optional fixed32 to_relay_session_id = 25;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_to_relay_session_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_to_relay_session_id() {
  to_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::to_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.to_relay_session_id)
  return to_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_to_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  to_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.to_relay_session_id)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PBadRouteRouterToRouter

// optional fixed32 from_relay_session_id = 1;
inline bool CMsgSteamDatagramP2PBadRouteRouterToRouter::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PBadRouteRouterToRouter::from_relay_session_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter.from_relay_session_id)
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::set_from_relay_session_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  from_relay_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter.from_relay_session_id)
}

// optional fixed64 kludge_pad = 99;
inline bool CMsgSteamDatagramP2PBadRouteRouterToRouter::has_kludge_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::clear_kludge_pad() {
  kludge_pad_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramP2PBadRouteRouterToRouter::kludge_pad() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter.kludge_pad)
  return kludge_pad_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::set_kludge_pad(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  kludge_pad_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramP2PBadRouteRouterToRouter.kludge_pad)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode>() {
  return ::proto::steam::CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter_Flags>() {
  return ::proto::steam::CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient_Flags>() {
  return ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer_Flags>() {
  return ::proto::steam::CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter_Flags>() {
  return ::proto::steam::CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags>() {
  return ::proto::steam::CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags>() {
  return ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags>() {
  return ::proto::steam::CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::ESteamDatagramMsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::ESteamDatagramMsgID>() {
  return ::proto::steam::ESteamDatagramMsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steamdatagram_5fmessages_5fsdr_2eproto
