// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_auth.proto

#ifndef PROTOBUF_INCLUDED_steamdatagram_5fmessages_5fauth_2eproto
#define PROTOBUF_INCLUDED_steamdatagram_5fmessages_5fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fauth_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steamdatagram_5fmessages_5fauth_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steamdatagram_5fmessages_5fauth_2eproto();
namespace proto {
namespace steam {
class CMsgSteamDatagramCachedCredentialsForApp;
class CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal;
extern CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal _CMsgSteamDatagramCachedCredentialsForApp_default_instance_;
class CMsgSteamDatagramRelayAuthTicket;
class CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal;
extern CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal _CMsgSteamDatagramRelayAuthTicket_default_instance_;
class CMsgSteamDatagramRelayAuthTicket_ExtraField;
class CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal;
extern CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal _CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_;
class CMsgSteamDatagramSignedRelayAuthTicket;
class CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal;
extern CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal _CMsgSteamDatagramSignedRelayAuthTicket_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CMsgSteamDatagramCachedCredentialsForApp* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramCachedCredentialsForApp>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramRelayAuthTicket* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramRelayAuthTicket>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField>(Arena*);
template<> ::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket* Arena::CreateMaybeMessage<::proto::steam::CMsgSteamDatagramSignedRelayAuthTicket>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

// ===================================================================

class CMsgSteamDatagramRelayAuthTicket_ExtraField final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField) */ {
 public:
  CMsgSteamDatagramRelayAuthTicket_ExtraField();
  virtual ~CMsgSteamDatagramRelayAuthTicket_ExtraField();

  CMsgSteamDatagramRelayAuthTicket_ExtraField(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from);

  inline CMsgSteamDatagramRelayAuthTicket_ExtraField& operator=(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramRelayAuthTicket_ExtraField(CMsgSteamDatagramRelayAuthTicket_ExtraField&& from) noexcept
    : CMsgSteamDatagramRelayAuthTicket_ExtraField() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramRelayAuthTicket_ExtraField& operator=(CMsgSteamDatagramRelayAuthTicket_ExtraField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramRelayAuthTicket_ExtraField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramRelayAuthTicket_ExtraField* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramRelayAuthTicket_ExtraField*>(
               &_CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other);
  friend void swap(CMsgSteamDatagramRelayAuthTicket_ExtraField& a, CMsgSteamDatagramRelayAuthTicket_ExtraField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramRelayAuthTicket_ExtraField* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayAuthTicket_ExtraField>(nullptr);
  }

  CMsgSteamDatagramRelayAuthTicket_ExtraField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayAuthTicket_ExtraField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from);
  void MergeFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string string_value = 2;
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 2;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // optional sint64 int64_value = 3;
  bool has_int64_value() const;
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 3;
  ::google::protobuf::int64 int64_value() const;
  void set_int64_value(::google::protobuf::int64 value);

  // optional fixed64 fixed64_value = 5;
  bool has_fixed64_value() const;
  void clear_fixed64_value();
  static const int kFixed64ValueFieldNumber = 5;
  ::google::protobuf::uint64 fixed64_value() const;
  void set_fixed64_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::int64 int64_value_;
  ::google::protobuf::uint64 fixed64_value_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRelayAuthTicket final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramRelayAuthTicket) */ {
 public:
  CMsgSteamDatagramRelayAuthTicket();
  virtual ~CMsgSteamDatagramRelayAuthTicket();

  CMsgSteamDatagramRelayAuthTicket(const CMsgSteamDatagramRelayAuthTicket& from);

  inline CMsgSteamDatagramRelayAuthTicket& operator=(const CMsgSteamDatagramRelayAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramRelayAuthTicket(CMsgSteamDatagramRelayAuthTicket&& from) noexcept
    : CMsgSteamDatagramRelayAuthTicket() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramRelayAuthTicket& operator=(CMsgSteamDatagramRelayAuthTicket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramRelayAuthTicket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramRelayAuthTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramRelayAuthTicket*>(
               &_CMsgSteamDatagramRelayAuthTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMsgSteamDatagramRelayAuthTicket* other);
  friend void swap(CMsgSteamDatagramRelayAuthTicket& a, CMsgSteamDatagramRelayAuthTicket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramRelayAuthTicket* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayAuthTicket>(nullptr);
  }

  CMsgSteamDatagramRelayAuthTicket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayAuthTicket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramRelayAuthTicket& from);
  void MergeFrom(const CMsgSteamDatagramRelayAuthTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramRelayAuthTicket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramRelayAuthTicket_ExtraField ExtraField;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  int extra_fields_size() const;
  void clear_extra_fields();
  static const int kExtraFieldsFieldNumber = 8;
  ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField* mutable_extra_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField >*
      mutable_extra_fields();
  const ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField& extra_fields(int index) const;
  ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField* add_extra_fields();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField >&
      extra_fields() const;

  // optional bytes DELETED_signature = 6;
  bool has_deleted_signature() const;
  void clear_deleted_signature();
  static const int kDELETEDSignatureFieldNumber = 6;
  const ::std::string& deleted_signature() const;
  void set_deleted_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_deleted_signature(::std::string&& value);
  #endif
  void set_deleted_signature(const char* value);
  void set_deleted_signature(const void* value, size_t size);
  ::std::string* mutable_deleted_signature();
  ::std::string* release_deleted_signature();
  void set_allocated_deleted_signature(::std::string* deleted_signature);

  // optional bytes gameserver_address = 11;
  bool has_gameserver_address() const;
  void clear_gameserver_address();
  static const int kGameserverAddressFieldNumber = 11;
  const ::std::string& gameserver_address() const;
  void set_gameserver_address(const ::std::string& value);
  #if LANG_CXX11
  void set_gameserver_address(::std::string&& value);
  #endif
  void set_gameserver_address(const char* value);
  void set_gameserver_address(const void* value, size_t size);
  ::std::string* mutable_gameserver_address();
  ::std::string* release_gameserver_address();
  void set_allocated_gameserver_address(::std::string* gameserver_address);

  // optional bytes authorized_client_identity = 12;
  bool has_authorized_client_identity() const;
  void clear_authorized_client_identity();
  static const int kAuthorizedClientIdentityFieldNumber = 12;
  const ::std::string& authorized_client_identity() const;
  void set_authorized_client_identity(const ::std::string& value);
  #if LANG_CXX11
  void set_authorized_client_identity(::std::string&& value);
  #endif
  void set_authorized_client_identity(const char* value);
  void set_authorized_client_identity(const void* value, size_t size);
  ::std::string* mutable_authorized_client_identity();
  ::std::string* release_authorized_client_identity();
  void set_allocated_authorized_client_identity(::std::string* authorized_client_identity);

  // optional bytes gameserver_identity = 13;
  bool has_gameserver_identity() const;
  void clear_gameserver_identity();
  static const int kGameserverIdentityFieldNumber = 13;
  const ::std::string& gameserver_identity() const;
  void set_gameserver_identity(const ::std::string& value);
  #if LANG_CXX11
  void set_gameserver_identity(::std::string&& value);
  #endif
  void set_gameserver_identity(const char* value);
  void set_gameserver_identity(const void* value, size_t size);
  ::std::string* mutable_gameserver_identity();
  ::std::string* release_gameserver_identity();
  void set_allocated_gameserver_identity(::std::string* gameserver_identity);

  // optional fixed64 legacy_authorized_steam_id = 2;
  bool has_legacy_authorized_steam_id() const;
  void clear_legacy_authorized_steam_id();
  static const int kLegacyAuthorizedSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 legacy_authorized_steam_id() const;
  void set_legacy_authorized_steam_id(::google::protobuf::uint64 value);

  // optional fixed32 time_expiry = 1;
  bool has_time_expiry() const;
  void clear_time_expiry();
  static const int kTimeExpiryFieldNumber = 1;
  ::google::protobuf::uint32 time_expiry() const;
  void set_time_expiry(::google::protobuf::uint32 value);

  // optional fixed32 authorized_public_ip = 3;
  bool has_authorized_public_ip() const;
  void clear_authorized_public_ip();
  static const int kAuthorizedPublicIpFieldNumber = 3;
  ::google::protobuf::uint32 authorized_public_ip() const;
  void set_authorized_public_ip(::google::protobuf::uint32 value);

  // optional fixed64 legacy_gameserver_steam_id = 4;
  bool has_legacy_gameserver_steam_id() const;
  void clear_legacy_gameserver_steam_id();
  static const int kLegacyGameserverSteamIdFieldNumber = 4;
  ::google::protobuf::uint64 legacy_gameserver_steam_id() const;
  void set_legacy_gameserver_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 legacy_gameserver_net_id = 5;
  bool has_legacy_gameserver_net_id() const;
  void clear_legacy_gameserver_net_id();
  static const int kLegacyGameserverNetIdFieldNumber = 5;
  ::google::protobuf::uint64 legacy_gameserver_net_id() const;
  void set_legacy_gameserver_net_id(::google::protobuf::uint64 value);

  // optional uint32 app_id = 7;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 7;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // optional fixed32 legacy_gameserver_pop_id = 9;
  bool has_legacy_gameserver_pop_id() const;
  void clear_legacy_gameserver_pop_id();
  static const int kLegacyGameserverPopIdFieldNumber = 9;
  ::google::protobuf::uint32 legacy_gameserver_pop_id() const;
  void set_legacy_gameserver_pop_id(::google::protobuf::uint32 value);

  // optional uint32 virtual_port = 10;
  bool has_virtual_port() const;
  void clear_virtual_port();
  static const int kVirtualPortFieldNumber = 10;
  ::google::protobuf::uint32 virtual_port() const;
  void set_virtual_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramRelayAuthTicket)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField > extra_fields_;
  ::google::protobuf::internal::ArenaStringPtr deleted_signature_;
  ::google::protobuf::internal::ArenaStringPtr gameserver_address_;
  ::google::protobuf::internal::ArenaStringPtr authorized_client_identity_;
  ::google::protobuf::internal::ArenaStringPtr gameserver_identity_;
  ::google::protobuf::uint64 legacy_authorized_steam_id_;
  ::google::protobuf::uint32 time_expiry_;
  ::google::protobuf::uint32 authorized_public_ip_;
  ::google::protobuf::uint64 legacy_gameserver_steam_id_;
  ::google::protobuf::uint64 legacy_gameserver_net_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 legacy_gameserver_pop_id_;
  ::google::protobuf::uint32 virtual_port_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramSignedRelayAuthTicket final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket) */ {
 public:
  CMsgSteamDatagramSignedRelayAuthTicket();
  virtual ~CMsgSteamDatagramSignedRelayAuthTicket();

  CMsgSteamDatagramSignedRelayAuthTicket(const CMsgSteamDatagramSignedRelayAuthTicket& from);

  inline CMsgSteamDatagramSignedRelayAuthTicket& operator=(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramSignedRelayAuthTicket(CMsgSteamDatagramSignedRelayAuthTicket&& from) noexcept
    : CMsgSteamDatagramSignedRelayAuthTicket() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramSignedRelayAuthTicket& operator=(CMsgSteamDatagramSignedRelayAuthTicket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramSignedRelayAuthTicket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramSignedRelayAuthTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramSignedRelayAuthTicket*>(
               &_CMsgSteamDatagramSignedRelayAuthTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgSteamDatagramSignedRelayAuthTicket* other);
  friend void swap(CMsgSteamDatagramSignedRelayAuthTicket& a, CMsgSteamDatagramSignedRelayAuthTicket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramSignedRelayAuthTicket* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramSignedRelayAuthTicket>(nullptr);
  }

  CMsgSteamDatagramSignedRelayAuthTicket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramSignedRelayAuthTicket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from);
  void MergeFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramSignedRelayAuthTicket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ticket = 3;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 3;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const void* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // optional bytes signature = 4;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 4;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional fixed64 reserved_do_not_use = 1;
  bool has_reserved_do_not_use() const;
  void clear_reserved_do_not_use();
  static const int kReservedDoNotUseFieldNumber = 1;
  ::google::protobuf::uint64 reserved_do_not_use() const;
  void set_reserved_do_not_use(::google::protobuf::uint64 value);

  // optional fixed64 key_id = 2;
  bool has_key_id() const;
  void clear_key_id();
  static const int kKeyIdFieldNumber = 2;
  ::google::protobuf::uint64 key_id() const;
  void set_key_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::uint64 reserved_do_not_use_;
  ::google::protobuf::uint64 key_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramCachedCredentialsForApp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CMsgSteamDatagramCachedCredentialsForApp) */ {
 public:
  CMsgSteamDatagramCachedCredentialsForApp();
  virtual ~CMsgSteamDatagramCachedCredentialsForApp();

  CMsgSteamDatagramCachedCredentialsForApp(const CMsgSteamDatagramCachedCredentialsForApp& from);

  inline CMsgSteamDatagramCachedCredentialsForApp& operator=(const CMsgSteamDatagramCachedCredentialsForApp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSteamDatagramCachedCredentialsForApp(CMsgSteamDatagramCachedCredentialsForApp&& from) noexcept
    : CMsgSteamDatagramCachedCredentialsForApp() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramCachedCredentialsForApp& operator=(CMsgSteamDatagramCachedCredentialsForApp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSteamDatagramCachedCredentialsForApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramCachedCredentialsForApp* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramCachedCredentialsForApp*>(
               &_CMsgSteamDatagramCachedCredentialsForApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgSteamDatagramCachedCredentialsForApp* other);
  friend void swap(CMsgSteamDatagramCachedCredentialsForApp& a, CMsgSteamDatagramCachedCredentialsForApp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramCachedCredentialsForApp* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramCachedCredentialsForApp>(nullptr);
  }

  CMsgSteamDatagramCachedCredentialsForApp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramCachedCredentialsForApp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramCachedCredentialsForApp& from);
  void MergeFrom(const CMsgSteamDatagramCachedCredentialsForApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramCachedCredentialsForApp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes relay_tickets = 3;
  int relay_tickets_size() const;
  void clear_relay_tickets();
  static const int kRelayTicketsFieldNumber = 3;
  const ::std::string& relay_tickets(int index) const;
  ::std::string* mutable_relay_tickets(int index);
  void set_relay_tickets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_relay_tickets(int index, ::std::string&& value);
  #endif
  void set_relay_tickets(int index, const char* value);
  void set_relay_tickets(int index, const void* value, size_t size);
  ::std::string* add_relay_tickets();
  void add_relay_tickets(const ::std::string& value);
  #if LANG_CXX11
  void add_relay_tickets(::std::string&& value);
  #endif
  void add_relay_tickets(const char* value);
  void add_relay_tickets(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& relay_tickets() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_relay_tickets();

  // optional bytes private_key = 1;
  bool has_private_key() const;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 1;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // optional bytes cert = 2;
  bool has_cert() const;
  void clear_cert();
  static const int kCertFieldNumber = 2;
  const ::std::string& cert() const;
  void set_cert(const ::std::string& value);
  #if LANG_CXX11
  void set_cert(::std::string&& value);
  #endif
  void set_cert(const char* value);
  void set_cert(const void* value, size_t size);
  ::std::string* mutable_cert();
  ::std::string* release_cert();
  void set_allocated_cert(::std::string* cert);

  // @@protoc_insertion_point(class_scope:proto.steam.CMsgSteamDatagramCachedCredentialsForApp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> relay_tickets_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::google::protobuf::internal::ArenaStringPtr cert_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgSteamDatagramRelayAuthTicket_ExtraField

// optional string name = 1;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket_ExtraField::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
  return name_.GetNoArena();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}
#if LANG_CXX11
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}
#endif
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}

// optional string string_value = 2;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_string_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket_ExtraField::string_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
  return string_value_.GetNoArena();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}
#if LANG_CXX11
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}
#endif
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::mutable_string_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::release_string_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
  if (!has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string_value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_allocated_string_value(::std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}

// optional sint64 int64_value = 3;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_int64_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_int64_value() {
  int64_value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int64 CMsgSteamDatagramRelayAuthTicket_ExtraField::int64_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.int64_value)
  return int64_value_;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_int64_value(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  int64_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.int64_value)
}

// optional fixed64 fixed64_value = 5;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_fixed64_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_fixed64_value() {
  fixed64_value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRelayAuthTicket_ExtraField::fixed64_value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.fixed64_value)
  return fixed64_value_;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_fixed64_value(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  fixed64_value_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField.fixed64_value)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRelayAuthTicket

// optional fixed32 time_expiry = 1;
inline bool CMsgSteamDatagramRelayAuthTicket::has_time_expiry() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_time_expiry() {
  time_expiry_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::time_expiry() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.time_expiry)
  return time_expiry_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_time_expiry(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  time_expiry_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.time_expiry)
}

// optional bytes authorized_client_identity = 12;
inline bool CMsgSteamDatagramRelayAuthTicket::has_authorized_client_identity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_authorized_client_identity() {
  authorized_client_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket::authorized_client_identity() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_client_identity)
  return authorized_client_identity_.GetNoArena();
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  authorized_client_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_client_identity)
}
#if LANG_CXX11
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  authorized_client_identity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_client_identity)
}
#endif
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  authorized_client_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_client_identity)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  authorized_client_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_client_identity)
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::mutable_authorized_client_identity() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_client_identity)
  return authorized_client_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::release_authorized_client_identity() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_client_identity)
  if (!has_authorized_client_identity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return authorized_client_identity_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_authorized_client_identity(::std::string* authorized_client_identity) {
  if (authorized_client_identity != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  authorized_client_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authorized_client_identity);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_client_identity)
}

// optional bytes gameserver_identity = 13;
inline bool CMsgSteamDatagramRelayAuthTicket::has_gameserver_identity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_gameserver_identity() {
  gameserver_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket::gameserver_identity() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_identity)
  return gameserver_identity_.GetNoArena();
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  gameserver_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_identity)
}
#if LANG_CXX11
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  gameserver_identity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_identity)
}
#endif
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  gameserver_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_identity)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  gameserver_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_identity)
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::mutable_gameserver_identity() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_identity)
  return gameserver_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::release_gameserver_identity() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_identity)
  if (!has_gameserver_identity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return gameserver_identity_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_gameserver_identity(::std::string* gameserver_identity) {
  if (gameserver_identity != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gameserver_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameserver_identity);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_identity)
}

// optional fixed32 authorized_public_ip = 3;
inline bool CMsgSteamDatagramRelayAuthTicket::has_authorized_public_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_authorized_public_ip() {
  authorized_public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::authorized_public_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_public_ip)
  return authorized_public_ip_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_public_ip(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  authorized_public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.authorized_public_ip)
}

// optional bytes gameserver_address = 11;
inline bool CMsgSteamDatagramRelayAuthTicket::has_gameserver_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_gameserver_address() {
  gameserver_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket::gameserver_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_address)
  return gameserver_address_.GetNoArena();
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gameserver_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}
#if LANG_CXX11
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gameserver_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}
#endif
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gameserver_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gameserver_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::mutable_gameserver_address() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_address)
  return gameserver_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::release_gameserver_address() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_address)
  if (!has_gameserver_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gameserver_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_gameserver_address(::std::string* gameserver_address) {
  if (gameserver_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gameserver_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameserver_address);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}

// optional uint32 app_id = 7;
inline bool CMsgSteamDatagramRelayAuthTicket::has_app_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.app_id)
  return app_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_app_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.app_id)
}

// optional uint32 virtual_port = 10;
inline bool CMsgSteamDatagramRelayAuthTicket::has_virtual_port() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_virtual_port() {
  virtual_port_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::virtual_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.virtual_port)
  return virtual_port_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_virtual_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  virtual_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.virtual_port)
}

// repeated .proto.steam.CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
inline int CMsgSteamDatagramRelayAuthTicket::extra_fields_size() const {
  return extra_fields_.size();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_extra_fields() {
  extra_fields_.Clear();
}
inline ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField* CMsgSteamDatagramRelayAuthTicket::mutable_extra_fields(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return extra_fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField >*
CMsgSteamDatagramRelayAuthTicket::mutable_extra_fields() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return &extra_fields_;
}
inline const ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField& CMsgSteamDatagramRelayAuthTicket::extra_fields(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return extra_fields_.Get(index);
}
inline ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField* CMsgSteamDatagramRelayAuthTicket::add_extra_fields() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return extra_fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgSteamDatagramRelayAuthTicket_ExtraField >&
CMsgSteamDatagramRelayAuthTicket::extra_fields() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return extra_fields_;
}

// optional fixed64 legacy_authorized_steam_id = 2;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_authorized_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_authorized_steam_id() {
  legacy_authorized_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRelayAuthTicket::legacy_authorized_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.legacy_authorized_steam_id)
  return legacy_authorized_steam_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  legacy_authorized_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.legacy_authorized_steam_id)
}

// optional fixed64 legacy_gameserver_steam_id = 4;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_steam_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_steam_id() {
  legacy_gameserver_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_steam_id)
  return legacy_gameserver_steam_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  legacy_gameserver_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_steam_id)
}

// optional fixed64 legacy_gameserver_net_id = 5;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_net_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_net_id() {
  legacy_gameserver_net_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_net_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_net_id)
  return legacy_gameserver_net_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_net_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  legacy_gameserver_net_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_net_id)
}

// optional fixed32 legacy_gameserver_pop_id = 9;
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_pop_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_pop_id() {
  legacy_gameserver_pop_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_pop_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_pop_id)
  return legacy_gameserver_pop_id_;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_pop_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  legacy_gameserver_pop_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_pop_id)
}

// optional bytes DELETED_signature = 6;
inline bool CMsgSteamDatagramRelayAuthTicket::has_deleted_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_deleted_signature() {
  deleted_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramRelayAuthTicket::deleted_signature() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramRelayAuthTicket.DELETED_signature)
  return deleted_signature_.GetNoArena();
}
inline void CMsgSteamDatagramRelayAuthTicket::set_deleted_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  deleted_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramRelayAuthTicket.DELETED_signature)
}
#if LANG_CXX11
inline void CMsgSteamDatagramRelayAuthTicket::set_deleted_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  deleted_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramRelayAuthTicket.DELETED_signature)
}
#endif
inline void CMsgSteamDatagramRelayAuthTicket::set_deleted_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  deleted_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramRelayAuthTicket.DELETED_signature)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_deleted_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  deleted_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramRelayAuthTicket.DELETED_signature)
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::mutable_deleted_signature() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramRelayAuthTicket.DELETED_signature)
  return deleted_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramRelayAuthTicket::release_deleted_signature() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramRelayAuthTicket.DELETED_signature)
  if (!has_deleted_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return deleted_signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_deleted_signature(::std::string* deleted_signature) {
  if (deleted_signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  deleted_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deleted_signature);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramRelayAuthTicket.DELETED_signature)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramSignedRelayAuthTicket

// optional fixed64 reserved_do_not_use = 1;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_reserved_do_not_use() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_reserved_do_not_use() {
  reserved_do_not_use_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramSignedRelayAuthTicket::reserved_do_not_use() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.reserved_do_not_use)
  return reserved_do_not_use_;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_reserved_do_not_use(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  reserved_do_not_use_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.reserved_do_not_use)
}

// optional fixed64 key_id = 2;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_key_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_key_id() {
  key_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CMsgSteamDatagramSignedRelayAuthTicket::key_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.key_id)
  return key_id_;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_key_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  key_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.key_id)
}

// optional bytes ticket = 3;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramSignedRelayAuthTicket::ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.ticket)
  return ticket_.GetNoArena();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}
#if LANG_CXX11
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}
#endif
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}
inline ::std::string* CMsgSteamDatagramSignedRelayAuthTicket::mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramSignedRelayAuthTicket::release_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.ticket)
  if (!has_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_allocated_ticket(::std::string* ticket) {
  if (ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}

// optional bytes signature = 4;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgSteamDatagramSignedRelayAuthTicket::signature() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.signature)
  return signature_.GetNoArena();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.signature)
}
#if LANG_CXX11
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.signature)
}
#endif
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.signature)
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.signature)
}
inline ::std::string* CMsgSteamDatagramSignedRelayAuthTicket::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramSignedRelayAuthTicket::release_signature() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramSignedRelayAuthTicket.signature)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCachedCredentialsForApp

// optional bytes private_key = 1;
inline bool CMsgSteamDatagramCachedCredentialsForApp::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgSteamDatagramCachedCredentialsForApp::private_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.private_key)
  return private_key_.GetNoArena();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.private_key)
}
#if LANG_CXX11
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.private_key)
}
#endif
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.private_key)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.private_key)
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::mutable_private_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::release_private_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.private_key)
  if (!has_private_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_allocated_private_key(::std::string* private_key) {
  if (private_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.private_key)
}

// optional bytes cert = 2;
inline bool CMsgSteamDatagramCachedCredentialsForApp::has_cert() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_cert() {
  cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgSteamDatagramCachedCredentialsForApp::cert() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.cert)
  return cert_.GetNoArena();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.cert)
}
#if LANG_CXX11
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.cert)
}
#endif
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.cert)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.cert)
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::mutable_cert() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.cert)
  return cert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::release_cert() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.cert)
  if (!has_cert()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cert_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_allocated_cert(::std::string* cert) {
  if (cert != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cert);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.cert)
}

// repeated bytes relay_tickets = 3;
inline int CMsgSteamDatagramCachedCredentialsForApp::relay_tickets_size() const {
  return relay_tickets_.size();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_relay_tickets() {
  relay_tickets_.Clear();
}
inline const ::std::string& CMsgSteamDatagramCachedCredentialsForApp::relay_tickets(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return relay_tickets_.Get(index);
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::mutable_relay_tickets(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return relay_tickets_.Mutable(index);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  relay_tickets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  relay_tickets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  relay_tickets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, const void* value, size_t size) {
  relay_tickets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline ::std::string* CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return relay_tickets_.Add();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(const ::std::string& value) {
  relay_tickets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
#if LANG_CXX11
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(::std::string&& value) {
  relay_tickets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
#endif
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  relay_tickets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(const void* value, size_t size) {
  relay_tickets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CMsgSteamDatagramCachedCredentialsForApp::relay_tickets() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return relay_tickets_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CMsgSteamDatagramCachedCredentialsForApp::mutable_relay_tickets() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return &relay_tickets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steamdatagram_5fmessages_5fauth_2eproto
