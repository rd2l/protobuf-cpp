// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient_discovery.proto

#include "steammessages_remoteclient_discovery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_5fdiscovery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientBroadcastStatus_User_steammessages_5fremoteclient_5fdiscovery_2eproto;
namespace proto {
namespace steam {
class CMsgRemoteClientBroadcastHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientBroadcastHeader> _instance;
} _CMsgRemoteClientBroadcastHeader_default_instance_;
class CMsgRemoteClientBroadcastStatus_UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientBroadcastStatus_User> _instance;
} _CMsgRemoteClientBroadcastStatus_User_default_instance_;
class CMsgRemoteClientBroadcastStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientBroadcastStatus> _instance;
} _CMsgRemoteClientBroadcastStatus_default_instance_;
class CMsgRemoteClientBroadcastDiscoveryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientBroadcastDiscovery> _instance;
} _CMsgRemoteClientBroadcastDiscovery_default_instance_;
class CMsgRemoteClientBroadcastClientIDDeconflictDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientBroadcastClientIDDeconflict> _instance;
} _CMsgRemoteClientBroadcastClientIDDeconflict_default_instance_;
class CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_TicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket> _instance;
} _CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_default_instance_;
class CMsgRemoteDeviceAuthorizationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceAuthorizationRequest> _instance;
} _CMsgRemoteDeviceAuthorizationRequest_default_instance_;
class CMsgRemoteDeviceAuthorizationCancelRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceAuthorizationCancelRequest> _instance;
} _CMsgRemoteDeviceAuthorizationCancelRequest_default_instance_;
class CMsgRemoteDeviceAuthorizationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceAuthorizationResponse> _instance;
} _CMsgRemoteDeviceAuthorizationResponse_default_instance_;
class CMsgRemoteDeviceStreamingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceStreamingRequest> _instance;
} _CMsgRemoteDeviceStreamingRequest_default_instance_;
class CMsgRemoteDeviceStreamingCancelRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceStreamingCancelRequest> _instance;
} _CMsgRemoteDeviceStreamingCancelRequest_default_instance_;
class CMsgRemoteDeviceStreamingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceStreamingResponse> _instance;
} _CMsgRemoteDeviceStreamingResponse_default_instance_;
class CMsgRemoteDeviceProofRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceProofRequest> _instance;
} _CMsgRemoteDeviceProofRequest_default_instance_;
class CMsgRemoteDeviceProofResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceProofResponse> _instance;
} _CMsgRemoteDeviceProofResponse_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgRemoteClientBroadcastHeader_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientBroadcastHeader_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientBroadcastHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientBroadcastHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientBroadcastHeader_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientBroadcastHeader_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientBroadcastStatus_User_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientBroadcastStatus_User_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientBroadcastStatus_User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientBroadcastStatus_User::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientBroadcastStatus_User_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientBroadcastStatus_User_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientBroadcastStatus_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientBroadcastStatus_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientBroadcastStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientBroadcastStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgRemoteClientBroadcastStatus_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgRemoteClientBroadcastStatus_steammessages_5fremoteclient_5fdiscovery_2eproto}, {
      &scc_info_CMsgRemoteClientBroadcastStatus_User_steammessages_5fremoteclient_5fdiscovery_2eproto.base,}};

static void InitDefaultsCMsgRemoteClientBroadcastDiscovery_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientBroadcastDiscovery_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientBroadcastDiscovery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientBroadcastDiscovery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientBroadcastDiscovery_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientBroadcastDiscovery_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientBroadcastClientIDDeconflict_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientBroadcastClientIDDeconflict_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientBroadcastClientIDDeconflict_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientBroadcastClientIDDeconflict_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteDeviceAuthorizationRequest_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteDeviceAuthorizationRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteDeviceAuthorizationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteDeviceAuthorizationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteDeviceAuthorizationRequest_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteDeviceAuthorizationRequest_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteDeviceAuthorizationCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteDeviceAuthorizationCancelRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteDeviceAuthorizationCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteDeviceAuthorizationCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteDeviceAuthorizationResponse_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteDeviceAuthorizationResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteDeviceAuthorizationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteDeviceAuthorizationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteDeviceAuthorizationResponse_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteDeviceAuthorizationResponse_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteDeviceStreamingRequest_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteDeviceStreamingRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteDeviceStreamingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteDeviceStreamingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteDeviceStreamingRequest_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteDeviceStreamingRequest_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteDeviceStreamingCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteDeviceStreamingCancelRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteDeviceStreamingCancelRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteDeviceStreamingCancelRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteDeviceStreamingCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteDeviceStreamingCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteDeviceStreamingResponse_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteDeviceStreamingResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteDeviceStreamingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteDeviceStreamingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteDeviceStreamingResponse_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteDeviceStreamingResponse_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteDeviceProofRequest_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteDeviceProofRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteDeviceProofRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteDeviceProofRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteDeviceProofRequest_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteDeviceProofRequest_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

static void InitDefaultsCMsgRemoteDeviceProofResponse_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteDeviceProofResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteDeviceProofResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteDeviceProofResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteDeviceProofResponse_steammessages_5fremoteclient_5fdiscovery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteDeviceProofResponse_steammessages_5fremoteclient_5fdiscovery_2eproto}, {}};

void InitDefaults_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientBroadcastHeader_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientBroadcastStatus_User_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientBroadcastStatus_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientBroadcastDiscovery_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientBroadcastClientIDDeconflict_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteDeviceAuthorizationRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteDeviceAuthorizationCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteDeviceAuthorizationResponse_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteDeviceStreamingRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteDeviceStreamingCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteDeviceStreamingResponse_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteDeviceProofRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteDeviceProofResponse_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steammessages_5fremoteclient_5fdiscovery_2eproto[5];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fremoteclient_5fdiscovery_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastHeader, client_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastHeader, msg_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastHeader, instance_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus_User, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus_User, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus_User, auth_key_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, min_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, connect_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, hostname_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, enabled_services_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, ostype_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, is64bit_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, users_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, euniverse_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, screen_locked_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, games_running_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, mac_addresses_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, download_lan_peer_group_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, broadcasting_active_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, vr_active_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastStatus, content_cache_port_),
  1,
  2,
  3,
  0,
  4,
  5,
  8,
  ~0u,
  6,
  7,
  9,
  10,
  ~0u,
  12,
  11,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastDiscovery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastDiscovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastDiscovery, seq_num_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastDiscovery, client_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict, client_ids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, password_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, identifier_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, payload_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, usage_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, device_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, device_model_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, device_serial_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, device_provisioning_id_),
  0,
  5,
  1,
  6,
  7,
  2,
  3,
  4,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest, device_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest, device_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationRequest, encrypted_request_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceAuthorizationResponse, steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, maximum_resolution_x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, maximum_resolution_y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, audio_channel_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, device_version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, stream_desktop_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, device_token_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, pin_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, enable_video_streaming_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, enable_audio_streaming_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, enable_input_streaming_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingRequest, network_test_),
  3,
  4,
  5,
  8,
  0,
  6,
  1,
  2,
  9,
  10,
  11,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingCancelRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingCancelRequest, request_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingResponse, port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingResponse, encrypted_session_key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceStreamingResponse, virtualhere_licensed_device_count_obsolete_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceProofRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceProofRequest, challenge_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceProofResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteDeviceProofResponse, response_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::proto::steam::CMsgRemoteClientBroadcastHeader)},
  { 11, 18, sizeof(::proto::steam::CMsgRemoteClientBroadcastStatus_User)},
  { 20, 42, sizeof(::proto::steam::CMsgRemoteClientBroadcastStatus)},
  { 59, 66, sizeof(::proto::steam::CMsgRemoteClientBroadcastDiscovery)},
  { 68, 74, sizeof(::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict)},
  { 75, 89, sizeof(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket)},
  { 98, 106, sizeof(::proto::steam::CMsgRemoteDeviceAuthorizationRequest)},
  { 109, 114, sizeof(::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest)},
  { 114, 121, sizeof(::proto::steam::CMsgRemoteDeviceAuthorizationResponse)},
  { 123, 140, sizeof(::proto::steam::CMsgRemoteDeviceStreamingRequest)},
  { 152, 158, sizeof(::proto::steam::CMsgRemoteDeviceStreamingCancelRequest)},
  { 159, 169, sizeof(::proto::steam::CMsgRemoteDeviceStreamingResponse)},
  { 174, 180, sizeof(::proto::steam::CMsgRemoteDeviceProofRequest)},
  { 181, 187, sizeof(::proto::steam::CMsgRemoteDeviceProofResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientBroadcastHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientBroadcastStatus_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientBroadcastStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientBroadcastDiscovery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientBroadcastClientIDDeconflict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteDeviceAuthorizationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteDeviceAuthorizationCancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteDeviceAuthorizationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteDeviceStreamingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteDeviceStreamingCancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteDeviceStreamingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteDeviceProofRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteDeviceProofResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto = {
  {}, AddDescriptors_steammessages_5fremoteclient_5fdiscovery_2eproto, "steammessages_remoteclient_discovery.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fremoteclient_5fdiscovery_2eproto::offsets,
  file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto, 14, file_level_enum_descriptors_steammessages_5fremoteclient_5fdiscovery_2eproto, file_level_service_descriptors_steammessages_5fremoteclient_5fdiscovery_2eproto,
};

const char descriptor_table_protodef_steammessages_5fremoteclient_5fdiscovery_2eproto[] =
  "\n*steammessages_remoteclient_discovery.p"
  "roto\022\013proto.steam\"\251\001\n\037CMsgRemoteClientBr"
  "oadcastHeader\022\021\n\tclient_id\030\001 \001(\004\022^\n\010msg_"
  "type\030\002 \001(\0162&.proto.steam.ERemoteClientBr"
  "oadcastMsg:$k_ERemoteClientBroadcastMsgD"
  "iscovery\022\023\n\013instance_id\030\003 \001(\004\"\374\003\n\037CMsgRe"
  "moteClientBroadcastStatus\022\017\n\007version\030\001 \001"
  "(\005\022\023\n\013min_version\030\002 \001(\005\022\024\n\014connect_port\030"
  "\003 \001(\r\022\020\n\010hostname\030\004 \001(\t\022\030\n\020enabled_servi"
  "ces\030\006 \001(\r\022\021\n\006ostype\030\007 \001(\005:\0010\022\026\n\007is64bit\030"
  "\010 \001(\010:\005false\022@\n\005users\030\t \003(\01321.proto.stea"
  "m.CMsgRemoteClientBroadcastStatus.User\022\021"
  "\n\teuniverse\030\013 \001(\005\022\021\n\ttimestamp\030\014 \001(\r\022\025\n\r"
  "screen_locked\030\r \001(\010\022\025\n\rgames_running\030\016 \001"
  "(\010\022\025\n\rmac_addresses\030\017 \003(\t\022\037\n\027download_la"
  "n_peer_group\030\020 \001(\r\022\033\n\023broadcasting_activ"
  "e\030\021 \001(\010\022\021\n\tvr_active\030\022 \001(\010\022\032\n\022content_ca"
  "che_port\030\023 \001(\r\032,\n\004User\022\017\n\007steamid\030\001 \001(\006\022"
  "\023\n\013auth_key_id\030\002 \001(\r\"I\n\"CMsgRemoteClient"
  "BroadcastDiscovery\022\017\n\007seq_num\030\001 \001(\r\022\022\n\nc"
  "lient_ids\030\002 \003(\004\"A\n+CMsgRemoteClientBroad"
  "castClientIDDeconflict\022\022\n\nclient_ids\030\002 \003"
  "(\004\"\333\003\n$CMsgRemoteDeviceAuthorizationRequ"
  "est\022\024\n\014device_token\030\001 \002(\014\022\023\n\013device_name"
  "\030\002 \001(\t\022\031\n\021encrypted_request\030\003 \002(\014\032\263\002\n\021CK"
  "eyEscrow_Ticket\022\020\n\010password\030\001 \001(\014\022\022\n\nide"
  "ntifier\030\002 \001(\004\022\017\n\007payload\030\003 \001(\014\022\021\n\ttimest"
  "amp\030\004 \001(\r\022r\n\005usage\030\005 \001(\0162A.proto.steam.C"
  "MsgRemoteDeviceAuthorizationRequest.EKey"
  "EscrowUsage: k_EKeyEscrowUsageStreamingD"
  "evice\022\023\n\013device_name\030\006 \001(\t\022\024\n\014device_mod"
  "el\030\007 \001(\t\022\025\n\rdevice_serial\030\010 \001(\t\022\036\n\026devic"
  "e_provisioning_id\030\t \001(\r\"7\n\017EKeyEscrowUsa"
  "ge\022$\n k_EKeyEscrowUsageStreamingDevice\020\000"
  "\",\n*CMsgRemoteDeviceAuthorizationCancelR"
  "equest\"\234\001\n%CMsgRemoteDeviceAuthorization"
  "Response\022b\n\006result\030\001 \002(\0162-.proto.steam.E"
  "RemoteDeviceAuthorizationResult:#k_ERemo"
  "teDeviceAuthorizationSuccess\022\017\n\007steamid\030"
  "\002 \001(\006\"\355\002\n CMsgRemoteDeviceStreamingReque"
  "st\022\022\n\nrequest_id\030\001 \002(\r\022\034\n\024maximum_resolu"
  "tion_x\030\002 \001(\005\022\034\n\024maximum_resolution_y\030\003 \001"
  "(\005\022\036\n\023audio_channel_count\030\004 \001(\005:\0012\022\026\n\016de"
  "vice_version\030\005 \001(\t\022\026\n\016stream_desktop\030\006 \001"
  "(\010\022\024\n\014device_token\030\007 \001(\014\022\013\n\003pin\030\010 \001(\014\022$\n"
  "\026enable_video_streaming\030\t \001(\010:\004true\022$\n\026e"
  "nable_audio_streaming\030\n \001(\010:\004true\022$\n\026ena"
  "ble_input_streaming\030\013 \001(\010:\004true\022\024\n\014netwo"
  "rk_test\030\014 \001(\010\"<\n&CMsgRemoteDeviceStreami"
  "ngCancelRequest\022\022\n\nrequest_id\030\001 \002(\r\"\364\001\n!"
  "CMsgRemoteDeviceStreamingResponse\022\022\n\nreq"
  "uest_id\030\001 \002(\r\022Z\n\006result\030\002 \002(\0162).proto.st"
  "eam.ERemoteDeviceStreamingResult:\037k_ERem"
  "oteDeviceStreamingSuccess\022\014\n\004port\030\003 \001(\r\022"
  "\035\n\025encrypted_session_key\030\004 \001(\014\0222\n*virtua"
  "lhere_licensed_device_count_OBSOLETE\030\005 \001"
  "(\005\"1\n\034CMsgRemoteDeviceProofRequest\022\021\n\tch"
  "allenge\030\001 \002(\014\"1\n\035CMsgRemoteDeviceProofRe"
  "sponse\022\020\n\010response\030\001 \002(\014*\202\004\n\031ERemoteClie"
  "ntBroadcastMsg\022(\n$k_ERemoteClientBroadca"
  "stMsgDiscovery\020\000\022%\n!k_ERemoteClientBroad"
  "castMsgStatus\020\001\022&\n\"k_ERemoteClientBroadc"
  "astMsgOffline\020\002\022\'\n#k_ERemoteDeviceAuthor"
  "izationRequest\020\003\022(\n$k_ERemoteDeviceAutho"
  "rizationResponse\020\004\022#\n\037k_ERemoteDeviceStr"
  "eamingRequest\020\005\022$\n k_ERemoteDeviceStream"
  "ingResponse\020\006\022\037\n\033k_ERemoteDeviceProofReq"
  "uest\020\007\022 \n\034k_ERemoteDeviceProofResponse\020\010"
  "\022-\n)k_ERemoteDeviceAuthorizationCancelRe"
  "quest\020\t\022)\n%k_ERemoteDeviceStreamingCance"
  "lRequest\020\n\0221\n-k_ERemoteClientBroadcastMs"
  "gClientIDDeconflict\020\013*\327\001\n\024ERemoteClientS"
  "ervice\022\036\n\032k_ERemoteClientServiceNone\020\000\022\'"
  "\n#k_ERemoteClientServiceRemoteControl\020\001\022"
  "\'\n#k_ERemoteClientServiceGameStreaming\020\002"
  "\022%\n!k_ERemoteClientServiceSiteLicense\020\004\022"
  "&\n\"k_ERemoteClientServiceContentCache\020\010*"
  "\227\003\n ERemoteDeviceAuthorizationResult\022\'\n#"
  "k_ERemoteDeviceAuthorizationSuccess\020\000\022&\n"
  "\"k_ERemoteDeviceAuthorizationDenied\020\001\022+\n"
  "\'k_ERemoteDeviceAuthorizationNotLoggedIn"
  "\020\002\022\'\n#k_ERemoteDeviceAuthorizationOfflin"
  "e\020\003\022$\n k_ERemoteDeviceAuthorizationBusy\020"
  "\004\022*\n&k_ERemoteDeviceAuthorizationInProgr"
  "ess\020\005\022(\n$k_ERemoteDeviceAuthorizationTim"
  "edOut\020\006\022&\n\"k_ERemoteDeviceAuthorizationF"
  "ailed\020\007\022(\n$k_ERemoteDeviceAuthorizationC"
  "anceled\020\010*\201\004\n\034ERemoteDeviceStreamingResu"
  "lt\022#\n\037k_ERemoteDeviceStreamingSuccess\020\000\022"
  "(\n$k_ERemoteDeviceStreamingUnauthorized\020"
  "\001\022(\n$k_ERemoteDeviceStreamingScreenLocke"
  "d\020\002\022\"\n\036k_ERemoteDeviceStreamingFailed\020\003\022"
  " \n\034k_ERemoteDeviceStreamingBusy\020\004\022&\n\"k_E"
  "RemoteDeviceStreamingInProgress\020\005\022$\n k_E"
  "RemoteDeviceStreamingCanceled\020\006\022/\n+k_ERe"
  "moteDeviceStreamingDriversNotInstalled\020\007"
  "\022$\n k_ERemoteDeviceStreamingDisabled\020\010\022."
  "\n*k_ERemoteDeviceStreamingBroadcastingAc"
  "tive\020\t\022$\n k_ERemoteDeviceStreamingVRActi"
  "ve\020\n\022\'\n#k_ERemoteDeviceStreamingPINRequi"
  "red\020\013B\002H\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fremoteclient_5fdiscovery_2eproto = {
  false, InitDefaults_steammessages_5fremoteclient_5fdiscovery_2eproto, 
  descriptor_table_protodef_steammessages_5fremoteclient_5fdiscovery_2eproto,
  "steammessages_remoteclient_discovery.proto", &assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto, 4009,
};

void AddDescriptors_steammessages_5fremoteclient_5fdiscovery_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fremoteclient_5fdiscovery_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fremoteclient_5fdiscovery_2eproto = []() { AddDescriptors_steammessages_5fremoteclient_5fdiscovery_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return file_level_enum_descriptors_steammessages_5fremoteclient_5fdiscovery_2eproto[0];
}
bool CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest::k_EKeyEscrowUsageStreamingDevice;
const CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest::EKeyEscrowUsage_MIN;
const CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest::EKeyEscrowUsage_MAX;
const int CMsgRemoteDeviceAuthorizationRequest::EKeyEscrowUsage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ERemoteClientBroadcastMsg_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return file_level_enum_descriptors_steammessages_5fremoteclient_5fdiscovery_2eproto[1];
}
bool ERemoteClientBroadcastMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERemoteClientService_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return file_level_enum_descriptors_steammessages_5fremoteclient_5fdiscovery_2eproto[2];
}
bool ERemoteClientService_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERemoteDeviceAuthorizationResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return file_level_enum_descriptors_steammessages_5fremoteclient_5fdiscovery_2eproto[3];
}
bool ERemoteDeviceAuthorizationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERemoteDeviceStreamingResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return file_level_enum_descriptors_steammessages_5fremoteclient_5fdiscovery_2eproto[4];
}
bool ERemoteDeviceStreamingResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgRemoteClientBroadcastHeader::InitAsDefaultInstance() {
}
class CMsgRemoteClientBroadcastHeader::HasBitSetters {
 public:
  static void set_has_client_id(CMsgRemoteClientBroadcastHeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_msg_type(CMsgRemoteClientBroadcastHeader* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_instance_id(CMsgRemoteClientBroadcastHeader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientBroadcastHeader::kClientIdFieldNumber;
const int CMsgRemoteClientBroadcastHeader::kMsgTypeFieldNumber;
const int CMsgRemoteClientBroadcastHeader::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientBroadcastHeader::CMsgRemoteClientBroadcastHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientBroadcastHeader)
}
CMsgRemoteClientBroadcastHeader::CMsgRemoteClientBroadcastHeader(const CMsgRemoteClientBroadcastHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientBroadcastHeader)
}

void CMsgRemoteClientBroadcastHeader::SharedCtor() {
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(msg_type_));
}

CMsgRemoteClientBroadcastHeader::~CMsgRemoteClientBroadcastHeader() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientBroadcastHeader)
  SharedDtor();
}

void CMsgRemoteClientBroadcastHeader::SharedDtor() {
}

void CMsgRemoteClientBroadcastHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientBroadcastHeader& CMsgRemoteClientBroadcastHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientBroadcastHeader_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientBroadcastHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_type_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(msg_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientBroadcastHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientBroadcastHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 client_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_client_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::ERemoteClientBroadcastMsg_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_msg_type(static_cast<::proto::steam::ERemoteClientBroadcastMsg>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 instance_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientBroadcastHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_client_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ERemoteClientBroadcastMsg_IsValid(value)) {
            set_msg_type(static_cast< ::proto::steam::ERemoteClientBroadcastMsg >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientBroadcastHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientBroadcastHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientBroadcastHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // optional uint64 instance_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientBroadcastHeader)
}

::google::protobuf::uint8* CMsgRemoteClientBroadcastHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // optional uint64 instance_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientBroadcastHeader)
  return target;
}

size_t CMsgRemoteClientBroadcastHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

    // optional uint64 instance_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }

    // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientBroadcastHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientBroadcastHeader* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientBroadcastHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientBroadcastHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientBroadcastHeader)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientBroadcastHeader::MergeFrom(const CMsgRemoteClientBroadcastHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      instance_id_ = from.instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientBroadcastHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientBroadcastHeader::CopyFrom(const CMsgRemoteClientBroadcastHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientBroadcastHeader::IsInitialized() const {
  return true;
}

void CMsgRemoteClientBroadcastHeader::Swap(CMsgRemoteClientBroadcastHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientBroadcastHeader::InternalSwap(CMsgRemoteClientBroadcastHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
  swap(instance_id_, other->instance_id_);
  swap(msg_type_, other->msg_type_);
}

::google::protobuf::Metadata CMsgRemoteClientBroadcastHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientBroadcastStatus_User::InitAsDefaultInstance() {
}
class CMsgRemoteClientBroadcastStatus_User::HasBitSetters {
 public:
  static void set_has_steamid(CMsgRemoteClientBroadcastStatus_User* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_auth_key_id(CMsgRemoteClientBroadcastStatus_User* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientBroadcastStatus_User::kSteamidFieldNumber;
const int CMsgRemoteClientBroadcastStatus_User::kAuthKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientBroadcastStatus_User::CMsgRemoteClientBroadcastStatus_User()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientBroadcastStatus.User)
}
CMsgRemoteClientBroadcastStatus_User::CMsgRemoteClientBroadcastStatus_User(const CMsgRemoteClientBroadcastStatus_User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_key_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(auth_key_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientBroadcastStatus.User)
}

void CMsgRemoteClientBroadcastStatus_User::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_key_id_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(auth_key_id_));
}

CMsgRemoteClientBroadcastStatus_User::~CMsgRemoteClientBroadcastStatus_User() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  SharedDtor();
}

void CMsgRemoteClientBroadcastStatus_User::SharedDtor() {
}

void CMsgRemoteClientBroadcastStatus_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientBroadcastStatus_User& CMsgRemoteClientBroadcastStatus_User::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientBroadcastStatus_User_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientBroadcastStatus_User::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_key_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(auth_key_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientBroadcastStatus_User::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientBroadcastStatus_User*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 auth_key_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_auth_key_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientBroadcastStatus_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auth_key_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_auth_key_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientBroadcastStatus_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 auth_key_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->auth_key_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientBroadcastStatus.User)
}

::google::protobuf::uint8* CMsgRemoteClientBroadcastStatus_User::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 auth_key_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->auth_key_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  return target;
}

size_t CMsgRemoteClientBroadcastStatus_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 auth_key_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_key_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientBroadcastStatus_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientBroadcastStatus_User* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientBroadcastStatus_User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientBroadcastStatus.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientBroadcastStatus.User)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientBroadcastStatus_User::MergeFrom(const CMsgRemoteClientBroadcastStatus_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_key_id_ = from.auth_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientBroadcastStatus_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientBroadcastStatus_User::CopyFrom(const CMsgRemoteClientBroadcastStatus_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientBroadcastStatus_User::IsInitialized() const {
  return true;
}

void CMsgRemoteClientBroadcastStatus_User::Swap(CMsgRemoteClientBroadcastStatus_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientBroadcastStatus_User::InternalSwap(CMsgRemoteClientBroadcastStatus_User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(auth_key_id_, other->auth_key_id_);
}

::google::protobuf::Metadata CMsgRemoteClientBroadcastStatus_User::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientBroadcastStatus::InitAsDefaultInstance() {
}
class CMsgRemoteClientBroadcastStatus::HasBitSetters {
 public:
  static void set_has_version(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_min_version(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_connect_port(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_hostname(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_enabled_services(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_ostype(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_is64bit(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_euniverse(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_timestamp(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_screen_locked(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_games_running(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_download_lan_peer_group(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_broadcasting_active(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_vr_active(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_content_cache_port(CMsgRemoteClientBroadcastStatus* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientBroadcastStatus::kVersionFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kMinVersionFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kConnectPortFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kHostnameFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kEnabledServicesFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kOstypeFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kIs64BitFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kUsersFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kEuniverseFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kTimestampFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kScreenLockedFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kGamesRunningFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kMacAddressesFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kDownloadLanPeerGroupFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kBroadcastingActiveFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kVrActiveFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kContentCachePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientBroadcastStatus::CMsgRemoteClientBroadcastStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientBroadcastStatus)
}
CMsgRemoteClientBroadcastStatus::CMsgRemoteClientBroadcastStatus(const CMsgRemoteClientBroadcastStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      users_(from.users_),
      mac_addresses_(from.mac_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&content_cache_port_) -
    reinterpret_cast<char*>(&version_)) + sizeof(content_cache_port_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientBroadcastStatus)
}

void CMsgRemoteClientBroadcastStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteClientBroadcastStatus_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_cache_port_) -
      reinterpret_cast<char*>(&version_)) + sizeof(content_cache_port_));
}

CMsgRemoteClientBroadcastStatus::~CMsgRemoteClientBroadcastStatus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientBroadcastStatus)
  SharedDtor();
}

void CMsgRemoteClientBroadcastStatus::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientBroadcastStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientBroadcastStatus& CMsgRemoteClientBroadcastStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientBroadcastStatus_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientBroadcastStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  mac_addresses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hostname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&version_)) + sizeof(timestamp_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&is64bit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&content_cache_port_) -
        reinterpret_cast<char*>(&is64bit_)) + sizeof(content_cache_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientBroadcastStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientBroadcastStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 min_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_min_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 connect_port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_connect_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string hostname = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteClientBroadcastStatus.hostname");
        object = msg->mutable_hostname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 enabled_services = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_enabled_services(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 ostype = 7 [default = 0];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_ostype(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is64bit = 8 [default = false];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_is64bit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgRemoteClientBroadcastStatus_User::_InternalParse;
          object = msg->add_users();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // optional int32 euniverse = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_euniverse(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool screen_locked = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_screen_locked(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool games_running = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_games_running(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string mac_addresses = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses");
          object = msg->add_mac_addresses();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      // optional uint32 download_lan_peer_group = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_download_lan_peer_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool broadcasting_active = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_broadcasting_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool vr_active = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_vr_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 content_cache_port = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_content_cache_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientBroadcastStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_min_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 connect_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_connect_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hostname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientBroadcastStatus.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 enabled_services = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_enabled_services(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enabled_services_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ostype = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_ostype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ostype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is64bit = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_is64bit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is64bit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 euniverse = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_euniverse(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &euniverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool screen_locked = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_screen_locked(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &screen_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool games_running = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_games_running(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &games_running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mac_addresses = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mac_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac_addresses(this->mac_addresses_size() - 1).data(),
            static_cast<int>(this->mac_addresses(this->mac_addresses_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 download_lan_peer_group = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_download_lan_peer_group(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_lan_peer_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcasting_active = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_broadcasting_active(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcasting_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vr_active = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_vr_active(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vr_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 content_cache_port = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_content_cache_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_cache_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientBroadcastStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientBroadcastStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientBroadcastStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 min_version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_version(), output);
  }

  // optional uint32 connect_port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connect_port(), output);
  }

  // optional string hostname = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientBroadcastStatus.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostname(), output);
  }

  // optional uint32 enabled_services = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->enabled_services(), output);
  }

  // optional int32 ostype = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ostype(), output);
  }

  // optional bool is64bit = 8 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is64bit(), output);
  }

  // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->users(static_cast<int>(i)),
      output);
  }

  // optional int32 euniverse = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->euniverse(), output);
  }

  // optional uint32 timestamp = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->timestamp(), output);
  }

  // optional bool screen_locked = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->screen_locked(), output);
  }

  // optional bool games_running = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->games_running(), output);
  }

  // repeated string mac_addresses = 15;
  for (int i = 0, n = this->mac_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_addresses(i).data(), static_cast<int>(this->mac_addresses(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->mac_addresses(i), output);
  }

  // optional uint32 download_lan_peer_group = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->download_lan_peer_group(), output);
  }

  // optional bool broadcasting_active = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->broadcasting_active(), output);
  }

  // optional bool vr_active = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->vr_active(), output);
  }

  // optional uint32 content_cache_port = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->content_cache_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientBroadcastStatus)
}

::google::protobuf::uint8* CMsgRemoteClientBroadcastStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 min_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_version(), target);
  }

  // optional uint32 connect_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connect_port(), target);
  }

  // optional string hostname = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientBroadcastStatus.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  // optional uint32 enabled_services = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->enabled_services(), target);
  }

  // optional int32 ostype = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ostype(), target);
  }

  // optional bool is64bit = 8 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is64bit(), target);
  }

  // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->users(static_cast<int>(i)), target);
  }

  // optional int32 euniverse = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->euniverse(), target);
  }

  // optional uint32 timestamp = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->timestamp(), target);
  }

  // optional bool screen_locked = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->screen_locked(), target);
  }

  // optional bool games_running = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->games_running(), target);
  }

  // repeated string mac_addresses = 15;
  for (int i = 0, n = this->mac_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_addresses(i).data(), static_cast<int>(this->mac_addresses(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->mac_addresses(i), target);
  }

  // optional uint32 download_lan_peer_group = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->download_lan_peer_group(), target);
  }

  // optional bool broadcasting_active = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->broadcasting_active(), target);
  }

  // optional bool vr_active = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->vr_active(), target);
  }

  // optional uint32 content_cache_port = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->content_cache_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientBroadcastStatus)
  return target;
}

size_t CMsgRemoteClientBroadcastStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  // repeated string mac_addresses = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mac_addresses_size());
  for (int i = 0, n = this->mac_addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mac_addresses(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string hostname = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 min_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_version());
    }

    // optional uint32 connect_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect_port());
    }

    // optional uint32 enabled_services = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enabled_services());
    }

    // optional int32 ostype = 7 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ostype());
    }

    // optional int32 euniverse = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->euniverse());
    }

    // optional uint32 timestamp = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool is64bit = 8 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool screen_locked = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool games_running = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool broadcasting_active = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional uint32 download_lan_peer_group = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_lan_peer_group());
    }

    // optional bool vr_active = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional uint32 content_cache_port = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_cache_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientBroadcastStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientBroadcastStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientBroadcastStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientBroadcastStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientBroadcastStatus)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientBroadcastStatus::MergeFrom(const CMsgRemoteClientBroadcastStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  mac_addresses_.MergeFrom(from.mac_addresses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_version_ = from.min_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      connect_port_ = from.connect_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      enabled_services_ = from.enabled_services_;
    }
    if (cached_has_bits & 0x00000020u) {
      ostype_ = from.ostype_;
    }
    if (cached_has_bits & 0x00000040u) {
      euniverse_ = from.euniverse_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      is64bit_ = from.is64bit_;
    }
    if (cached_has_bits & 0x00000200u) {
      screen_locked_ = from.screen_locked_;
    }
    if (cached_has_bits & 0x00000400u) {
      games_running_ = from.games_running_;
    }
    if (cached_has_bits & 0x00000800u) {
      broadcasting_active_ = from.broadcasting_active_;
    }
    if (cached_has_bits & 0x00001000u) {
      download_lan_peer_group_ = from.download_lan_peer_group_;
    }
    if (cached_has_bits & 0x00002000u) {
      vr_active_ = from.vr_active_;
    }
    if (cached_has_bits & 0x00004000u) {
      content_cache_port_ = from.content_cache_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientBroadcastStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientBroadcastStatus::CopyFrom(const CMsgRemoteClientBroadcastStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientBroadcastStatus::IsInitialized() const {
  return true;
}

void CMsgRemoteClientBroadcastStatus::Swap(CMsgRemoteClientBroadcastStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientBroadcastStatus::InternalSwap(CMsgRemoteClientBroadcastStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  mac_addresses_.InternalSwap(CastToBase(&other->mac_addresses_));
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(min_version_, other->min_version_);
  swap(connect_port_, other->connect_port_);
  swap(enabled_services_, other->enabled_services_);
  swap(ostype_, other->ostype_);
  swap(euniverse_, other->euniverse_);
  swap(timestamp_, other->timestamp_);
  swap(is64bit_, other->is64bit_);
  swap(screen_locked_, other->screen_locked_);
  swap(games_running_, other->games_running_);
  swap(broadcasting_active_, other->broadcasting_active_);
  swap(download_lan_peer_group_, other->download_lan_peer_group_);
  swap(vr_active_, other->vr_active_);
  swap(content_cache_port_, other->content_cache_port_);
}

::google::protobuf::Metadata CMsgRemoteClientBroadcastStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientBroadcastDiscovery::InitAsDefaultInstance() {
}
class CMsgRemoteClientBroadcastDiscovery::HasBitSetters {
 public:
  static void set_has_seq_num(CMsgRemoteClientBroadcastDiscovery* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientBroadcastDiscovery::kSeqNumFieldNumber;
const int CMsgRemoteClientBroadcastDiscovery::kClientIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientBroadcastDiscovery::CMsgRemoteClientBroadcastDiscovery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientBroadcastDiscovery)
}
CMsgRemoteClientBroadcastDiscovery::CMsgRemoteClientBroadcastDiscovery(const CMsgRemoteClientBroadcastDiscovery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      client_ids_(from.client_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_num_ = from.seq_num_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientBroadcastDiscovery)
}

void CMsgRemoteClientBroadcastDiscovery::SharedCtor() {
  seq_num_ = 0u;
}

CMsgRemoteClientBroadcastDiscovery::~CMsgRemoteClientBroadcastDiscovery() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  SharedDtor();
}

void CMsgRemoteClientBroadcastDiscovery::SharedDtor() {
}

void CMsgRemoteClientBroadcastDiscovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientBroadcastDiscovery& CMsgRemoteClientBroadcastDiscovery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientBroadcastDiscovery_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientBroadcastDiscovery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_ids_.Clear();
  seq_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientBroadcastDiscovery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientBroadcastDiscovery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 seq_num = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_seq_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 client_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_client_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_client_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientBroadcastDiscovery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seq_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_seq_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 client_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_client_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_client_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientBroadcastDiscovery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seq_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq_num(), output);
  }

  // repeated uint64 client_ids = 2;
  for (int i = 0, n = this->client_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->client_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientBroadcastDiscovery)
}

::google::protobuf::uint8* CMsgRemoteClientBroadcastDiscovery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seq_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq_num(), target);
  }

  // repeated uint64 client_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->client_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  return target;
}

size_t CMsgRemoteClientBroadcastDiscovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 client_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->client_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->client_ids_size());
    total_size += data_size;
  }

  // optional uint32 seq_num = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientBroadcastDiscovery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientBroadcastDiscovery* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientBroadcastDiscovery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientBroadcastDiscovery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientBroadcastDiscovery)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientBroadcastDiscovery::MergeFrom(const CMsgRemoteClientBroadcastDiscovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_ids_.MergeFrom(from.client_ids_);
  if (from.has_seq_num()) {
    set_seq_num(from.seq_num());
  }
}

void CMsgRemoteClientBroadcastDiscovery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientBroadcastDiscovery::CopyFrom(const CMsgRemoteClientBroadcastDiscovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientBroadcastDiscovery::IsInitialized() const {
  return true;
}

void CMsgRemoteClientBroadcastDiscovery::Swap(CMsgRemoteClientBroadcastDiscovery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientBroadcastDiscovery::InternalSwap(CMsgRemoteClientBroadcastDiscovery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_ids_.InternalSwap(&other->client_ids_);
  swap(seq_num_, other->seq_num_);
}

::google::protobuf::Metadata CMsgRemoteClientBroadcastDiscovery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientBroadcastClientIDDeconflict::InitAsDefaultInstance() {
}
class CMsgRemoteClientBroadcastClientIDDeconflict::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientBroadcastClientIDDeconflict::kClientIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientBroadcastClientIDDeconflict::CMsgRemoteClientBroadcastClientIDDeconflict()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
}
CMsgRemoteClientBroadcastClientIDDeconflict::CMsgRemoteClientBroadcastClientIDDeconflict(const CMsgRemoteClientBroadcastClientIDDeconflict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      client_ids_(from.client_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
}

void CMsgRemoteClientBroadcastClientIDDeconflict::SharedCtor() {
}

CMsgRemoteClientBroadcastClientIDDeconflict::~CMsgRemoteClientBroadcastClientIDDeconflict() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  SharedDtor();
}

void CMsgRemoteClientBroadcastClientIDDeconflict::SharedDtor() {
}

void CMsgRemoteClientBroadcastClientIDDeconflict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientBroadcastClientIDDeconflict& CMsgRemoteClientBroadcastClientIDDeconflict::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientBroadcastClientIDDeconflict_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientBroadcastClientIDDeconflict::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientBroadcastClientIDDeconflict::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientBroadcastClientIDDeconflict*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint64 client_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_client_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_client_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientBroadcastClientIDDeconflict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 client_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_client_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_client_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientBroadcastClientIDDeconflict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 client_ids = 2;
  for (int i = 0, n = this->client_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->client_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
}

::google::protobuf::uint8* CMsgRemoteClientBroadcastClientIDDeconflict::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 client_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->client_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  return target;
}

size_t CMsgRemoteClientBroadcastClientIDDeconflict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 client_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->client_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->client_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientBroadcastClientIDDeconflict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientBroadcastClientIDDeconflict* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientBroadcastClientIDDeconflict>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientBroadcastClientIDDeconflict::MergeFrom(const CMsgRemoteClientBroadcastClientIDDeconflict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_ids_.MergeFrom(from.client_ids_);
}

void CMsgRemoteClientBroadcastClientIDDeconflict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientBroadcastClientIDDeconflict::CopyFrom(const CMsgRemoteClientBroadcastClientIDDeconflict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientBroadcastClientIDDeconflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientBroadcastClientIDDeconflict::IsInitialized() const {
  return true;
}

void CMsgRemoteClientBroadcastClientIDDeconflict::Swap(CMsgRemoteClientBroadcastClientIDDeconflict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientBroadcastClientIDDeconflict::InternalSwap(CMsgRemoteClientBroadcastClientIDDeconflict* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_ids_.InternalSwap(&other->client_ids_);
}

::google::protobuf::Metadata CMsgRemoteClientBroadcastClientIDDeconflict::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::InitAsDefaultInstance() {
}
class CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::HasBitSetters {
 public:
  static void set_has_password(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_identifier(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_payload(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_usage(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_device_name(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_device_model(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_device_serial(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_device_provisioning_id(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kPasswordFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kIdentifierFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kPayloadFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kTimestampFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kUsageFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kDeviceNameFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kDeviceModelFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kDeviceSerialFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kDeviceProvisioningIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
}
CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_model()) {
    device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
  }
  device_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_serial()) {
    device_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_serial_);
  }
  ::memcpy(&identifier_, &from.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_provisioning_id_) -
    reinterpret_cast<char*>(&identifier_)) + sizeof(device_provisioning_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_provisioning_id_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(device_provisioning_id_));
}

CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::~CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  SharedDtor();
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      device_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      device_model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      device_serial_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usage_) -
        reinterpret_cast<char*>(&identifier_)) + sizeof(usage_));
  }
  device_provisioning_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes password = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 identifier = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_identifier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes payload = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_usage(static_cast<::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string device_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name");
        object = msg->mutable_device_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string device_model = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model");
        object = msg->mutable_device_model();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string device_serial = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial");
        object = msg->mutable_device_serial();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 device_provisioning_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_device_provisioning_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 identifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_identifier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_IsValid(value)) {
            set_usage(static_cast< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_model = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_model().data(), static_cast<int>(this->device_model().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_serial = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_serial().data(), static_cast<int>(this->device_serial().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device_provisioning_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_device_provisioning_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_provisioning_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->password(), output);
  }

  // optional uint64 identifier = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->identifier(), output);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->usage(), output);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_name(), output);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_model().data(), static_cast<int>(this->device_model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device_model(), output);
  }

  // optional string device_serial = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_serial().data(), static_cast<int>(this->device_serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_serial(), output);
  }

  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->device_provisioning_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
}

::google::protobuf::uint8* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->password(), target);
  }

  // optional uint64 identifier = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->identifier(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->usage(), target);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_name(), target);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_model().data(), static_cast<int>(this->device_model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device_model(), target);
  }

  // optional string device_serial = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_serial().data(), static_cast<int>(this->device_serial().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_serial(), target);
  }

  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->device_provisioning_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  return target;
}

size_t CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes password = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional string device_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional string device_model = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

    // optional string device_serial = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_serial());
    }

    // optional uint64 identifier = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->identifier());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
    }

  }
  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_provisioning_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::MergeFrom(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      device_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_serial_);
    }
    if (cached_has_bits & 0x00000020u) {
      identifier_ = from.identifier_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_device_provisioning_id(from.device_provisioning_id());
  }
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::CopyFrom(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::IsInitialized() const {
  return true;
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::Swap(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::InternalSwap(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_model_.Swap(&other->device_model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_serial_.Swap(&other->device_serial_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identifier_, other->identifier_);
  swap(timestamp_, other->timestamp_);
  swap(usage_, other->usage_);
  swap(device_provisioning_id_, other->device_provisioning_id_);
}

::google::protobuf::Metadata CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteDeviceAuthorizationRequest::InitAsDefaultInstance() {
}
class CMsgRemoteDeviceAuthorizationRequest::HasBitSetters {
 public:
  static void set_has_device_token(CMsgRemoteDeviceAuthorizationRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_device_name(CMsgRemoteDeviceAuthorizationRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_encrypted_request(CMsgRemoteDeviceAuthorizationRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceAuthorizationRequest::kDeviceTokenFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest::kDeviceNameFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest::kEncryptedRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceAuthorizationRequest::CMsgRemoteDeviceAuthorizationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
}
CMsgRemoteDeviceAuthorizationRequest::CMsgRemoteDeviceAuthorizationRequest(const CMsgRemoteDeviceAuthorizationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_token()) {
    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  encrypted_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypted_request()) {
    encrypted_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_request_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
}

void CMsgRemoteDeviceAuthorizationRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteDeviceAuthorizationRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgRemoteDeviceAuthorizationRequest::~CMsgRemoteDeviceAuthorizationRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  SharedDtor();
}

void CMsgRemoteDeviceAuthorizationRequest::SharedDtor() {
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceAuthorizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteDeviceAuthorizationRequest& CMsgRemoteDeviceAuthorizationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteDeviceAuthorizationRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteDeviceAuthorizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      device_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      device_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      encrypted_request_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteDeviceAuthorizationRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteDeviceAuthorizationRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bytes device_token = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_device_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string device_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name");
        object = msg->mutable_device_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required bytes encrypted_request = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_encrypted_request();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteDeviceAuthorizationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes device_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), static_cast<int>(this->device_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes encrypted_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteDeviceAuthorizationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes device_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->device_token(), output);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_name(), output);
  }

  // required bytes encrypted_request = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encrypted_request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceAuthorizationRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes device_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->device_token(), target);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), static_cast<int>(this->device_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }

  // required bytes encrypted_request = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encrypted_request(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  return target;
}

size_t CMsgRemoteDeviceAuthorizationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  size_t total_size = 0;

  if (has_device_token()) {
    // required bytes device_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->device_token());
  }

  if (has_encrypted_request()) {
    // required bytes encrypted_request = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypted_request());
  }

  return total_size;
}
size_t CMsgRemoteDeviceAuthorizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes device_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->device_token());

    // required bytes encrypted_request = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypted_request());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string device_name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteDeviceAuthorizationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceAuthorizationRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteDeviceAuthorizationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceAuthorizationRequest::MergeFrom(const CMsgRemoteDeviceAuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      encrypted_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_request_);
    }
  }
}

void CMsgRemoteDeviceAuthorizationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceAuthorizationRequest::CopyFrom(const CMsgRemoteDeviceAuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceAuthorizationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void CMsgRemoteDeviceAuthorizationRequest::Swap(CMsgRemoteDeviceAuthorizationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceAuthorizationRequest::InternalSwap(CMsgRemoteDeviceAuthorizationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_token_.Swap(&other->device_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_name_.Swap(&other->device_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_request_.Swap(&other->encrypted_request_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgRemoteDeviceAuthorizationRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteDeviceAuthorizationCancelRequest::InitAsDefaultInstance() {
}
class CMsgRemoteDeviceAuthorizationCancelRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceAuthorizationCancelRequest::CMsgRemoteDeviceAuthorizationCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
}
CMsgRemoteDeviceAuthorizationCancelRequest::CMsgRemoteDeviceAuthorizationCancelRequest(const CMsgRemoteDeviceAuthorizationCancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
}

void CMsgRemoteDeviceAuthorizationCancelRequest::SharedCtor() {
}

CMsgRemoteDeviceAuthorizationCancelRequest::~CMsgRemoteDeviceAuthorizationCancelRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  SharedDtor();
}

void CMsgRemoteDeviceAuthorizationCancelRequest::SharedDtor() {
}

void CMsgRemoteDeviceAuthorizationCancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteDeviceAuthorizationCancelRequest& CMsgRemoteDeviceAuthorizationCancelRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteDeviceAuthorizationCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteDeviceAuthorizationCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteDeviceAuthorizationCancelRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteDeviceAuthorizationCancelRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteDeviceAuthorizationCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteDeviceAuthorizationCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceAuthorizationCancelRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  return target;
}

size_t CMsgRemoteDeviceAuthorizationCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteDeviceAuthorizationCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceAuthorizationCancelRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteDeviceAuthorizationCancelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceAuthorizationCancelRequest::MergeFrom(const CMsgRemoteDeviceAuthorizationCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRemoteDeviceAuthorizationCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceAuthorizationCancelRequest::CopyFrom(const CMsgRemoteDeviceAuthorizationCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceAuthorizationCancelRequest::IsInitialized() const {
  return true;
}

void CMsgRemoteDeviceAuthorizationCancelRequest::Swap(CMsgRemoteDeviceAuthorizationCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceAuthorizationCancelRequest::InternalSwap(CMsgRemoteDeviceAuthorizationCancelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgRemoteDeviceAuthorizationCancelRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteDeviceAuthorizationResponse::InitAsDefaultInstance() {
}
class CMsgRemoteDeviceAuthorizationResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgRemoteDeviceAuthorizationResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid(CMsgRemoteDeviceAuthorizationResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceAuthorizationResponse::kResultFieldNumber;
const int CMsgRemoteDeviceAuthorizationResponse::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceAuthorizationResponse::CMsgRemoteDeviceAuthorizationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
}
CMsgRemoteDeviceAuthorizationResponse::CMsgRemoteDeviceAuthorizationResponse(const CMsgRemoteDeviceAuthorizationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
}

void CMsgRemoteDeviceAuthorizationResponse::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(result_));
}

CMsgRemoteDeviceAuthorizationResponse::~CMsgRemoteDeviceAuthorizationResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  SharedDtor();
}

void CMsgRemoteDeviceAuthorizationResponse::SharedDtor() {
}

void CMsgRemoteDeviceAuthorizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteDeviceAuthorizationResponse& CMsgRemoteDeviceAuthorizationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteDeviceAuthorizationResponse_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteDeviceAuthorizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteDeviceAuthorizationResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteDeviceAuthorizationResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::ERemoteDeviceAuthorizationResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::steam::ERemoteDeviceAuthorizationResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteDeviceAuthorizationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ERemoteDeviceAuthorizationResult_IsValid(value)) {
            set_result(static_cast< ::proto::steam::ERemoteDeviceAuthorizationResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteDeviceAuthorizationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
}

::google::protobuf::uint8* CMsgRemoteDeviceAuthorizationResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  return target;
}

size_t CMsgRemoteDeviceAuthorizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteDeviceAuthorizationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceAuthorizationResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteDeviceAuthorizationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceAuthorizationResponse::MergeFrom(const CMsgRemoteDeviceAuthorizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteDeviceAuthorizationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceAuthorizationResponse::CopyFrom(const CMsgRemoteDeviceAuthorizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceAuthorizationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CMsgRemoteDeviceAuthorizationResponse::Swap(CMsgRemoteDeviceAuthorizationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceAuthorizationResponse::InternalSwap(CMsgRemoteDeviceAuthorizationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgRemoteDeviceAuthorizationResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteDeviceStreamingRequest::InitAsDefaultInstance() {
}
class CMsgRemoteDeviceStreamingRequest::HasBitSetters {
 public:
  static void set_has_request_id(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_maximum_resolution_x(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_maximum_resolution_y(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_audio_channel_count(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_device_version(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stream_desktop(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_device_token(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_pin(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_enable_video_streaming(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_enable_audio_streaming(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_enable_input_streaming(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_network_test(CMsgRemoteDeviceStreamingRequest* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceStreamingRequest::kRequestIdFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kMaximumResolutionXFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kMaximumResolutionYFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kAudioChannelCountFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kDeviceVersionFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kStreamDesktopFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kDeviceTokenFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kPinFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kEnableVideoStreamingFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kEnableAudioStreamingFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kEnableInputStreamingFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kNetworkTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceStreamingRequest::CMsgRemoteDeviceStreamingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceStreamingRequest)
}
CMsgRemoteDeviceStreamingRequest::CMsgRemoteDeviceStreamingRequest(const CMsgRemoteDeviceStreamingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_version()) {
    device_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_version_);
  }
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_token()) {
    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pin()) {
    pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_input_streaming_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(enable_input_streaming_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceStreamingRequest)
}

void CMsgRemoteDeviceStreamingRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteDeviceStreamingRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  device_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_test_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(network_test_));
  audio_channel_count_ = 2;
  enable_video_streaming_ = true;
  enable_audio_streaming_ = true;
  enable_input_streaming_ = true;
}

CMsgRemoteDeviceStreamingRequest::~CMsgRemoteDeviceStreamingRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceStreamingRequest)
  SharedDtor();
}

void CMsgRemoteDeviceStreamingRequest::SharedDtor() {
  device_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceStreamingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteDeviceStreamingRequest& CMsgRemoteDeviceStreamingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteDeviceStreamingRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteDeviceStreamingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      device_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      device_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      pin_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_test_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(network_test_));
  }
  if (cached_has_bits & 0x00000f00u) {
    audio_channel_count_ = 2;
    enable_video_streaming_ = true;
    enable_audio_streaming_ = true;
    enable_input_streaming_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteDeviceStreamingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteDeviceStreamingRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 maximum_resolution_x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_maximum_resolution_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 maximum_resolution_y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_maximum_resolution_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 audio_channel_count = 4 [default = 2];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_audio_channel_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string device_version = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteDeviceStreamingRequest.device_version");
        object = msg->mutable_device_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool stream_desktop = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_stream_desktop(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes device_token = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_device_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes pin = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool enable_video_streaming = 9 [default = true];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_enable_video_streaming(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_audio_streaming = 10 [default = true];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_enable_audio_streaming(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_input_streaming = 11 [default = true];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_enable_input_streaming(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool network_test = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_network_test(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteDeviceStreamingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_request_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_resolution_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_maximum_resolution_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_resolution_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_resolution_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_maximum_resolution_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_resolution_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_channel_count = 4 [default = 2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_audio_channel_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_version().data(), static_cast<int>(this->device_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceStreamingRequest.device_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stream_desktop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_stream_desktop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_desktop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes device_token = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_video_streaming = 9 [default = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_enable_video_streaming(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_video_streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_audio_streaming = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_enable_audio_streaming(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_audio_streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_input_streaming = 11 [default = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_enable_input_streaming(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_input_streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool network_test = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_network_test(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &network_test_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceStreamingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceStreamingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteDeviceStreamingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional int32 maximum_resolution_x = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maximum_resolution_x(), output);
  }

  // optional int32 maximum_resolution_y = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maximum_resolution_y(), output);
  }

  // optional int32 audio_channel_count = 4 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->audio_channel_count(), output);
  }

  // optional string device_version = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_version().data(), static_cast<int>(this->device_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceStreamingRequest.device_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_version(), output);
  }

  // optional bool stream_desktop = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->stream_desktop(), output);
  }

  // optional bytes device_token = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->device_token(), output);
  }

  // optional bytes pin = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->pin(), output);
  }

  // optional bool enable_video_streaming = 9 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_video_streaming(), output);
  }

  // optional bool enable_audio_streaming = 10 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_audio_streaming(), output);
  }

  // optional bool enable_input_streaming = 11 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_input_streaming(), output);
  }

  // optional bool network_test = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->network_test(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceStreamingRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceStreamingRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional int32 maximum_resolution_x = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maximum_resolution_x(), target);
  }

  // optional int32 maximum_resolution_y = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maximum_resolution_y(), target);
  }

  // optional int32 audio_channel_count = 4 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->audio_channel_count(), target);
  }

  // optional string device_version = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_version().data(), static_cast<int>(this->device_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceStreamingRequest.device_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_version(), target);
  }

  // optional bool stream_desktop = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->stream_desktop(), target);
  }

  // optional bytes device_token = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->device_token(), target);
  }

  // optional bytes pin = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->pin(), target);
  }

  // optional bool enable_video_streaming = 9 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_video_streaming(), target);
  }

  // optional bool enable_audio_streaming = 10 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_audio_streaming(), target);
  }

  // optional bool enable_input_streaming = 11 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enable_input_streaming(), target);
  }

  // optional bool network_test = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->network_test(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceStreamingRequest)
  return target;
}

size_t CMsgRemoteDeviceStreamingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string device_version = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_version());
    }

    // optional bytes device_token = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_token());
    }

    // optional bytes pin = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pin());
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional int32 maximum_resolution_x = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_resolution_x());
    }

    // optional int32 maximum_resolution_y = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_resolution_y());
    }

    // optional bool stream_desktop = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool network_test = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 audio_channel_count = 4 [default = 2];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_channel_count());
    }

    // optional bool enable_video_streaming = 9 [default = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool enable_audio_streaming = 10 [default = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool enable_input_streaming = 11 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteDeviceStreamingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceStreamingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteDeviceStreamingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceStreamingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceStreamingRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceStreamingRequest::MergeFrom(const CMsgRemoteDeviceStreamingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
    }
    if (cached_has_bits & 0x00000008u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      maximum_resolution_x_ = from.maximum_resolution_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      maximum_resolution_y_ = from.maximum_resolution_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      stream_desktop_ = from.stream_desktop_;
    }
    if (cached_has_bits & 0x00000080u) {
      network_test_ = from.network_test_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      audio_channel_count_ = from.audio_channel_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      enable_video_streaming_ = from.enable_video_streaming_;
    }
    if (cached_has_bits & 0x00000400u) {
      enable_audio_streaming_ = from.enable_audio_streaming_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_input_streaming_ = from.enable_input_streaming_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteDeviceStreamingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceStreamingRequest::CopyFrom(const CMsgRemoteDeviceStreamingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceStreamingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void CMsgRemoteDeviceStreamingRequest::Swap(CMsgRemoteDeviceStreamingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceStreamingRequest::InternalSwap(CMsgRemoteDeviceStreamingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_version_.Swap(&other->device_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_token_.Swap(&other->device_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pin_.Swap(&other->pin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_id_, other->request_id_);
  swap(maximum_resolution_x_, other->maximum_resolution_x_);
  swap(maximum_resolution_y_, other->maximum_resolution_y_);
  swap(stream_desktop_, other->stream_desktop_);
  swap(network_test_, other->network_test_);
  swap(audio_channel_count_, other->audio_channel_count_);
  swap(enable_video_streaming_, other->enable_video_streaming_);
  swap(enable_audio_streaming_, other->enable_audio_streaming_);
  swap(enable_input_streaming_, other->enable_input_streaming_);
}

::google::protobuf::Metadata CMsgRemoteDeviceStreamingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteDeviceStreamingCancelRequest::InitAsDefaultInstance() {
}
class CMsgRemoteDeviceStreamingCancelRequest::HasBitSetters {
 public:
  static void set_has_request_id(CMsgRemoteDeviceStreamingCancelRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceStreamingCancelRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceStreamingCancelRequest::CMsgRemoteDeviceStreamingCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
}
CMsgRemoteDeviceStreamingCancelRequest::CMsgRemoteDeviceStreamingCancelRequest(const CMsgRemoteDeviceStreamingCancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
}

void CMsgRemoteDeviceStreamingCancelRequest::SharedCtor() {
  request_id_ = 0u;
}

CMsgRemoteDeviceStreamingCancelRequest::~CMsgRemoteDeviceStreamingCancelRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  SharedDtor();
}

void CMsgRemoteDeviceStreamingCancelRequest::SharedDtor() {
}

void CMsgRemoteDeviceStreamingCancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteDeviceStreamingCancelRequest& CMsgRemoteDeviceStreamingCancelRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteDeviceStreamingCancelRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteDeviceStreamingCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteDeviceStreamingCancelRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteDeviceStreamingCancelRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteDeviceStreamingCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_request_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteDeviceStreamingCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceStreamingCancelRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  return target;
}

size_t CMsgRemoteDeviceStreamingCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteDeviceStreamingCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceStreamingCancelRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteDeviceStreamingCancelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceStreamingCancelRequest::MergeFrom(const CMsgRemoteDeviceStreamingCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request_id()) {
    set_request_id(from.request_id());
  }
}

void CMsgRemoteDeviceStreamingCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceStreamingCancelRequest::CopyFrom(const CMsgRemoteDeviceStreamingCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceStreamingCancelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMsgRemoteDeviceStreamingCancelRequest::Swap(CMsgRemoteDeviceStreamingCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceStreamingCancelRequest::InternalSwap(CMsgRemoteDeviceStreamingCancelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(request_id_, other->request_id_);
}

::google::protobuf::Metadata CMsgRemoteDeviceStreamingCancelRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteDeviceStreamingResponse::InitAsDefaultInstance() {
}
class CMsgRemoteDeviceStreamingResponse::HasBitSetters {
 public:
  static void set_has_request_id(CMsgRemoteDeviceStreamingResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_result(CMsgRemoteDeviceStreamingResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_port(CMsgRemoteDeviceStreamingResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_encrypted_session_key(CMsgRemoteDeviceStreamingResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_virtualhere_licensed_device_count_obsolete(CMsgRemoteDeviceStreamingResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceStreamingResponse::kRequestIdFieldNumber;
const int CMsgRemoteDeviceStreamingResponse::kResultFieldNumber;
const int CMsgRemoteDeviceStreamingResponse::kPortFieldNumber;
const int CMsgRemoteDeviceStreamingResponse::kEncryptedSessionKeyFieldNumber;
const int CMsgRemoteDeviceStreamingResponse::kVirtualhereLicensedDeviceCountOBSOLETEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceStreamingResponse::CMsgRemoteDeviceStreamingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceStreamingResponse)
}
CMsgRemoteDeviceStreamingResponse::CMsgRemoteDeviceStreamingResponse(const CMsgRemoteDeviceStreamingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypted_session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypted_session_key()) {
    encrypted_session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_session_key_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtualhere_licensed_device_count_obsolete_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(virtualhere_licensed_device_count_obsolete_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceStreamingResponse)
}

void CMsgRemoteDeviceStreamingResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteDeviceStreamingResponse_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  encrypted_session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtualhere_licensed_device_count_obsolete_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(virtualhere_licensed_device_count_obsolete_));
}

CMsgRemoteDeviceStreamingResponse::~CMsgRemoteDeviceStreamingResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceStreamingResponse)
  SharedDtor();
}

void CMsgRemoteDeviceStreamingResponse::SharedDtor() {
  encrypted_session_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceStreamingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteDeviceStreamingResponse& CMsgRemoteDeviceStreamingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteDeviceStreamingResponse_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteDeviceStreamingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encrypted_session_key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtualhere_licensed_device_count_obsolete_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(virtualhere_licensed_device_count_obsolete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteDeviceStreamingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteDeviceStreamingResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::ERemoteDeviceStreamingResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::steam::ERemoteDeviceStreamingResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes encrypted_session_key = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_encrypted_session_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_virtualhere_licensed_device_count_obsolete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteDeviceStreamingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_request_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ERemoteDeviceStreamingResult_IsValid(value)) {
            set_result(static_cast< ::proto::steam::ERemoteDeviceStreamingResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encrypted_session_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_session_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_virtualhere_licensed_device_count_obsolete(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &virtualhere_licensed_device_count_obsolete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceStreamingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceStreamingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteDeviceStreamingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional bytes encrypted_session_key = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->encrypted_session_key(), output);
  }

  // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->virtualhere_licensed_device_count_obsolete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceStreamingResponse)
}

::google::protobuf::uint8* CMsgRemoteDeviceStreamingResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional bytes encrypted_session_key = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encrypted_session_key(), target);
  }

  // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->virtualhere_licensed_device_count_obsolete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceStreamingResponse)
  return target;
}

size_t CMsgRemoteDeviceStreamingResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  size_t total_size = 0;

  if (has_request_id()) {
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  if (has_result()) {
    // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t CMsgRemoteDeviceStreamingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());

    // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes encrypted_session_key = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypted_session_key());
  }

  if (cached_has_bits & 0x00000018u) {
    // optional uint32 port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->virtualhere_licensed_device_count_obsolete());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteDeviceStreamingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceStreamingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteDeviceStreamingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceStreamingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceStreamingResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceStreamingResponse::MergeFrom(const CMsgRemoteDeviceStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encrypted_session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_session_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      virtualhere_licensed_device_count_obsolete_ = from.virtualhere_licensed_device_count_obsolete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteDeviceStreamingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceStreamingResponse::CopyFrom(const CMsgRemoteDeviceStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceStreamingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void CMsgRemoteDeviceStreamingResponse::Swap(CMsgRemoteDeviceStreamingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceStreamingResponse::InternalSwap(CMsgRemoteDeviceStreamingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encrypted_session_key_.Swap(&other->encrypted_session_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_id_, other->request_id_);
  swap(result_, other->result_);
  swap(port_, other->port_);
  swap(virtualhere_licensed_device_count_obsolete_, other->virtualhere_licensed_device_count_obsolete_);
}

::google::protobuf::Metadata CMsgRemoteDeviceStreamingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteDeviceProofRequest::InitAsDefaultInstance() {
}
class CMsgRemoteDeviceProofRequest::HasBitSetters {
 public:
  static void set_has_challenge(CMsgRemoteDeviceProofRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceProofRequest::kChallengeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceProofRequest::CMsgRemoteDeviceProofRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceProofRequest)
}
CMsgRemoteDeviceProofRequest::CMsgRemoteDeviceProofRequest(const CMsgRemoteDeviceProofRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_challenge()) {
    challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceProofRequest)
}

void CMsgRemoteDeviceProofRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteDeviceProofRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgRemoteDeviceProofRequest::~CMsgRemoteDeviceProofRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceProofRequest)
  SharedDtor();
}

void CMsgRemoteDeviceProofRequest::SharedDtor() {
  challenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteDeviceProofRequest& CMsgRemoteDeviceProofRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteDeviceProofRequest_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteDeviceProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceProofRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    challenge_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteDeviceProofRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteDeviceProofRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bytes challenge = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_challenge();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteDeviceProofRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceProofRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes challenge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceProofRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceProofRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteDeviceProofRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceProofRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes challenge = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->challenge(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceProofRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceProofRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceProofRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes challenge = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->challenge(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceProofRequest)
  return target;
}

size_t CMsgRemoteDeviceProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceProofRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes challenge = 1;
  if (has_challenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->challenge());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteDeviceProofRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceProofRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteDeviceProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceProofRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceProofRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceProofRequest::MergeFrom(const CMsgRemoteDeviceProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_challenge()) {
    _has_bits_[0] |= 0x00000001u;
    challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_);
  }
}

void CMsgRemoteDeviceProofRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceProofRequest::CopyFrom(const CMsgRemoteDeviceProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceProofRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMsgRemoteDeviceProofRequest::Swap(CMsgRemoteDeviceProofRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceProofRequest::InternalSwap(CMsgRemoteDeviceProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  challenge_.Swap(&other->challenge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgRemoteDeviceProofRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteDeviceProofResponse::InitAsDefaultInstance() {
}
class CMsgRemoteDeviceProofResponse::HasBitSetters {
 public:
  static void set_has_response(CMsgRemoteDeviceProofResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceProofResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceProofResponse::CMsgRemoteDeviceProofResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceProofResponse)
}
CMsgRemoteDeviceProofResponse::CMsgRemoteDeviceProofResponse(const CMsgRemoteDeviceProofResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_response()) {
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceProofResponse)
}

void CMsgRemoteDeviceProofResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteDeviceProofResponse_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgRemoteDeviceProofResponse::~CMsgRemoteDeviceProofResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceProofResponse)
  SharedDtor();
}

void CMsgRemoteDeviceProofResponse::SharedDtor() {
  response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceProofResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteDeviceProofResponse& CMsgRemoteDeviceProofResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteDeviceProofResponse_steammessages_5fremoteclient_5fdiscovery_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteDeviceProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceProofResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    response_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteDeviceProofResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteDeviceProofResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bytes response = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_response();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteDeviceProofResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceProofResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceProofResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceProofResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteDeviceProofResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceProofResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceProofResponse)
}

::google::protobuf::uint8* CMsgRemoteDeviceProofResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceProofResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes response = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceProofResponse)
  return target;
}

size_t CMsgRemoteDeviceProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceProofResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes response = 1;
  if (has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->response());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteDeviceProofResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceProofResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteDeviceProofResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceProofResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceProofResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceProofResponse::MergeFrom(const CMsgRemoteDeviceProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    _has_bits_[0] |= 0x00000001u;
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
}

void CMsgRemoteDeviceProofResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceProofResponse::CopyFrom(const CMsgRemoteDeviceProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceProofResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMsgRemoteDeviceProofResponse::Swap(CMsgRemoteDeviceProofResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceProofResponse::InternalSwap(CMsgRemoteDeviceProofResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  response_.Swap(&other->response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgRemoteDeviceProofResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fdiscovery_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fdiscovery_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientBroadcastHeader* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientBroadcastHeader >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientBroadcastHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientBroadcastStatus_User* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientBroadcastStatus_User >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientBroadcastStatus_User >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientBroadcastStatus* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientBroadcastStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientBroadcastStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientBroadcastDiscovery* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientBroadcastDiscovery >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientBroadcastDiscovery >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientBroadcastClientIDDeconflict >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteDeviceAuthorizationRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteDeviceAuthorizationCancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteDeviceAuthorizationResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteDeviceAuthorizationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteDeviceAuthorizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteDeviceStreamingRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteDeviceStreamingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteDeviceStreamingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteDeviceStreamingCancelRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteDeviceStreamingCancelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteDeviceStreamingCancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteDeviceStreamingResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteDeviceStreamingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteDeviceStreamingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteDeviceProofRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteDeviceProofRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteDeviceProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteDeviceProofResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteDeviceProofResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteDeviceProofResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
