// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient.proto

#include "steammessages_remoteclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientAppStatus_AppUpdateInfo_steammessages_5fremoteclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientAppStatus_ShortcutInfo_steammessages_5fremoteclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientStartStream_ReservedGamepad_steammessages_5fremoteclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgRemoteClientAppStatus_AppStatus_steammessages_5fremoteclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fremoteclient_5fdiscovery_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgRemoteClientBroadcastStatus_steammessages_5fremoteclient_5fdiscovery_2eproto;
namespace proto {
namespace steam {
class CMsgRemoteClientAppStatus_AppUpdateInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAppStatus_AppUpdateInfo> _instance;
} _CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_;
class CMsgRemoteClientAppStatus_ShortcutInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAppStatus_ShortcutInfo> _instance;
} _CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_;
class CMsgRemoteClientAppStatus_AppStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAppStatus_AppStatus> _instance;
} _CMsgRemoteClientAppStatus_AppStatus_default_instance_;
class CMsgRemoteClientAppStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAppStatus> _instance;
} _CMsgRemoteClientAppStatus_default_instance_;
class CMsgRemoteClientAuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAuth> _instance;
} _CMsgRemoteClientAuth_default_instance_;
class CMsgRemoteClientAuthResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAuthResponse> _instance;
} _CMsgRemoteClientAuthResponse_default_instance_;
class CMsgRemoteClientStartStream_ReservedGamepadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientStartStream_ReservedGamepad> _instance;
} _CMsgRemoteClientStartStream_ReservedGamepad_default_instance_;
class CMsgRemoteClientStartStreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientStartStream> _instance;
} _CMsgRemoteClientStartStream_default_instance_;
class CMsgRemoteClientStartStreamResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientStartStreamResponse> _instance;
} _CMsgRemoteClientStartStreamResponse_default_instance_;
class CMsgRemoteClientPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientPing> _instance;
} _CMsgRemoteClientPing_default_instance_;
class CMsgRemoteClientPingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientPingResponse> _instance;
} _CMsgRemoteClientPingResponse_default_instance_;
class CMsgRemoteClientAcceptEULADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAcceptEULA> _instance;
} _CMsgRemoteClientAcceptEULA_default_instance_;
class CMsgRemoteClientGetControllerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientGetControllerConfig> _instance;
} _CMsgRemoteClientGetControllerConfig_default_instance_;
class CMsgRemoteClientGetControllerConfigResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientGetControllerConfigResponse> _instance;
} _CMsgRemoteClientGetControllerConfigResponse_default_instance_;
class CMsgRemoteClientStreamingEnabledDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientStreamingEnabled> _instance;
} _CMsgRemoteClientStreamingEnabled_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgRemoteClientAppStatus_AppUpdateInfo_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientAppStatus_AppUpdateInfo_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientAppStatus_AppUpdateInfo_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientAppStatus_ShortcutInfo_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientAppStatus_ShortcutInfo_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientAppStatus_ShortcutInfo_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientAppStatus_AppStatus_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientAppStatus_AppStatus_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientAppStatus_AppStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientAppStatus_AppStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgRemoteClientAppStatus_AppStatus_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgRemoteClientAppStatus_AppStatus_steammessages_5fremoteclient_2eproto}, {
      &scc_info_CMsgRemoteClientAppStatus_AppUpdateInfo_steammessages_5fremoteclient_2eproto.base,
      &scc_info_CMsgRemoteClientAppStatus_ShortcutInfo_steammessages_5fremoteclient_2eproto.base,}};

static void InitDefaultsCMsgRemoteClientAppStatus_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientAppStatus_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientAppStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientAppStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgRemoteClientAppStatus_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgRemoteClientAppStatus_steammessages_5fremoteclient_2eproto}, {
      &scc_info_CMsgRemoteClientAppStatus_AppStatus_steammessages_5fremoteclient_2eproto.base,}};

static void InitDefaultsCMsgRemoteClientAuth_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientAuth_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientAuth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientAuth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgRemoteClientAuth_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgRemoteClientAuth_steammessages_5fremoteclient_2eproto}, {
      &scc_info_CMsgRemoteClientBroadcastStatus_steammessages_5fremoteclient_5fdiscovery_2eproto.base,}};

static void InitDefaultsCMsgRemoteClientAuthResponse_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientAuthResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientAuthResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientAuthResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientAuthResponse_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientAuthResponse_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientStartStream_ReservedGamepad_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientStartStream_ReservedGamepad_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientStartStream_ReservedGamepad_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientStartStream_ReservedGamepad_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientStartStream_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientStartStream_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientStartStream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientStartStream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgRemoteClientStartStream_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgRemoteClientStartStream_steammessages_5fremoteclient_2eproto}, {
      &scc_info_CMsgRemoteClientStartStream_ReservedGamepad_steammessages_5fremoteclient_2eproto.base,}};

static void InitDefaultsCMsgRemoteClientStartStreamResponse_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientStartStreamResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientStartStreamResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientStartStreamResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientStartStreamResponse_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientStartStreamResponse_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientPing_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientPing_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientPing_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientPing_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientPingResponse_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientPingResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientPingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientPingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientPingResponse_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientPingResponse_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientAcceptEULA_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientAcceptEULA_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientAcceptEULA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientAcceptEULA::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientAcceptEULA_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientAcceptEULA_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientGetControllerConfig_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientGetControllerConfig_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientGetControllerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientGetControllerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientGetControllerConfig_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientGetControllerConfig_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientGetControllerConfigResponse_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientGetControllerConfigResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientGetControllerConfigResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientGetControllerConfigResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientGetControllerConfigResponse_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientGetControllerConfigResponse_steammessages_5fremoteclient_2eproto}, {}};

static void InitDefaultsCMsgRemoteClientStreamingEnabled_steammessages_5fremoteclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRemoteClientStreamingEnabled_default_instance_;
    new (ptr) ::proto::steam::CMsgRemoteClientStreamingEnabled();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRemoteClientStreamingEnabled::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRemoteClientStreamingEnabled_steammessages_5fremoteclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRemoteClientStreamingEnabled_steammessages_5fremoteclient_2eproto}, {}};

void InitDefaults_steammessages_5fremoteclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientAppStatus_AppUpdateInfo_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientAppStatus_ShortcutInfo_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientAppStatus_AppStatus_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientAppStatus_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientAuth_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientAuthResponse_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientStartStream_ReservedGamepad_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientStartStream_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientStartStreamResponse_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientPing_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientPingResponse_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientAcceptEULA_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientGetControllerConfig_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientGetControllerConfigResponse_steammessages_5fremoteclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRemoteClientStreamingEnabled_steammessages_5fremoteclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fremoteclient_2eproto[15];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fremoteclient_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fremoteclient_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fremoteclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, time_update_start_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_to_download_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_downloaded_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_to_process_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_processed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, estimated_seconds_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, update_result_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo, update_state_),
  3,
  0,
  1,
  2,
  5,
  7,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo, categories_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppStatus, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppStatus, app_state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppStatus, update_info_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus_AppStatus, shortcut_info_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAppStatus, status_updates_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAuth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAuth, client_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAuth, status_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAuth, instance_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAuthResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAuthResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad, controller_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad, controller_subtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, environment_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, gamepad_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, launch_option_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, lock_parental_lock_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, unlock_parental_lock_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, maximum_resolution_x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, maximum_resolution_y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, gamepads_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStream, audio_channel_count_),
  1,
  2,
  3,
  7,
  4,
  0,
  5,
  6,
  ~0u,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStreamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStreamResponse, e_launch_result_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStreamResponse, stream_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStreamResponse, launch_options_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStartStreamResponse, auth_token_),
  2,
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientPingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAcceptEULA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAcceptEULA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientAcceptEULA, app_id_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientGetControllerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientGetControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientGetControllerConfig, app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientGetControllerConfig, controller_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientGetControllerConfigResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientGetControllerConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientGetControllerConfigResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientGetControllerConfigResponse, config_vdf_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStreamingEnabled, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStreamingEnabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRemoteClientStreamingEnabled, enabled_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo)},
  { 21, 29, sizeof(::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo)},
  { 32, 41, sizeof(::proto::steam::CMsgRemoteClientAppStatus_AppStatus)},
  { 45, 51, sizeof(::proto::steam::CMsgRemoteClientAppStatus)},
  { 52, 60, sizeof(::proto::steam::CMsgRemoteClientAuth)},
  { 63, 69, sizeof(::proto::steam::CMsgRemoteClientAuthResponse)},
  { 70, 77, sizeof(::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad)},
  { 79, 94, sizeof(::proto::steam::CMsgRemoteClientStartStream)},
  { 104, 113, sizeof(::proto::steam::CMsgRemoteClientStartStreamResponse)},
  { 117, 122, sizeof(::proto::steam::CMsgRemoteClientPing)},
  { 122, 127, sizeof(::proto::steam::CMsgRemoteClientPingResponse)},
  { 127, 133, sizeof(::proto::steam::CMsgRemoteClientAcceptEULA)},
  { 134, 141, sizeof(::proto::steam::CMsgRemoteClientGetControllerConfig)},
  { 143, 150, sizeof(::proto::steam::CMsgRemoteClientGetControllerConfigResponse)},
  { 152, 158, sizeof(::proto::steam::CMsgRemoteClientStreamingEnabled)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientAppStatus_AppStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientAppStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientAuthResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientStartStream_ReservedGamepad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientStartStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientStartStreamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientPingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientAcceptEULA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientGetControllerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientGetControllerConfigResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRemoteClientStreamingEnabled_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fremoteclient_2eproto = {
  {}, AddDescriptors_steammessages_5fremoteclient_2eproto, "steammessages_remoteclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fremoteclient_2eproto::offsets,
  file_level_metadata_steammessages_5fremoteclient_2eproto, 15, file_level_enum_descriptors_steammessages_5fremoteclient_2eproto, file_level_service_descriptors_steammessages_5fremoteclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fremoteclient_2eproto[] =
  "\n steammessages_remoteclient.proto\022\013prot"
  "o.steam\032\030steammessages_base.proto\032*steam"
  "messages_remoteclient_discovery.proto\"\330\004"
  "\n\031CMsgRemoteClientAppStatus\022H\n\016status_up"
  "dates\030\001 \003(\01320.proto.steam.CMsgRemoteClie"
  "ntAppStatus.AppStatus\032\350\001\n\rAppUpdateInfo\022"
  "\031\n\021time_update_start\030\001 \001(\007\022\031\n\021bytes_to_d"
  "ownload\030\002 \001(\004\022\030\n\020bytes_downloaded\030\003 \001(\004\022"
  "\030\n\020bytes_to_process\030\004 \001(\004\022\027\n\017bytes_proce"
  "ssed\030\005 \001(\004\022\'\n\033estimated_seconds_remainin"
  "g\030\006 \001(\005:\002-1\022\025\n\rupdate_result\030\007 \001(\005\022\024\n\014up"
  "date_state\030\010 \001(\r\032>\n\014ShortcutInfo\022\014\n\004name"
  "\030\001 \001(\t\022\014\n\004icon\030\002 \001(\t\022\022\n\ncategories\030\003 \003(\t"
  "\032\305\001\n\tAppStatus\022\016\n\006app_id\030\001 \001(\r\022\021\n\tapp_st"
  "ate\030\002 \001(\r\022I\n\013update_info\030\003 \001(\01324.proto.s"
  "team.CMsgRemoteClientAppStatus.AppUpdate"
  "Info\022J\n\rshortcut_info\030\004 \001(\01323.proto.stea"
  "m.CMsgRemoteClientAppStatus.ShortcutInfo"
  "\"|\n\024CMsgRemoteClientAuth\022\021\n\tclient_id\030\001 "
  "\001(\004\022<\n\006status\030\002 \001(\0132,.proto.steam.CMsgRe"
  "moteClientBroadcastStatus\022\023\n\013instance_id"
  "\030\003 \001(\004\"2\n\034CMsgRemoteClientAuthResponse\022\022"
  "\n\007eresult\030\001 \001(\005:\0012\"\245\003\n\033CMsgRemoteClientS"
  "tartStream\022\016\n\006app_id\030\001 \001(\r\022\023\n\013environmen"
  "t\030\002 \001(\005\022\025\n\rgamepad_count\030\003 \001(\005\022\031\n\rlaunch"
  "_option\030\004 \001(\005:\002-1\022!\n\022lock_parental_lock\030"
  "\005 \001(\010:\005false\022\034\n\024unlock_parental_lock\030\006 \001"
  "(\t\022\034\n\024maximum_resolution_x\030\007 \001(\005\022\034\n\024maxi"
  "mum_resolution_y\030\010 \001(\005\022J\n\010gamepads\030\t \003(\013"
  "28.proto.steam.CMsgRemoteClientStartStre"
  "am.ReservedGamepad\022\036\n\023audio_channel_coun"
  "t\030\n \001(\005:\0012\032F\n\017ReservedGamepad\022\027\n\017control"
  "ler_type\030\001 \001(\r\022\032\n\022controller_subtype\030\002 \001"
  "(\r\"\202\001\n#CMsgRemoteClientStartStreamRespon"
  "se\022\032\n\017e_launch_result\030\001 \001(\005:\0012\022\023\n\013stream"
  "_port\030\002 \001(\r\022\026\n\016launch_options\030\003 \003(\005\022\022\n\na"
  "uth_token\030\004 \001(\014\"\026\n\024CMsgRemoteClientPing\""
  "\036\n\034CMsgRemoteClientPingResponse\",\n\032CMsgR"
  "emoteClientAcceptEULA\022\016\n\006app_id\030\001 \003(\r\"O\n"
  "#CMsgRemoteClientGetControllerConfig\022\016\n\006"
  "app_id\030\001 \001(\r\022\030\n\020controller_index\030\003 \001(\r\"U"
  "\n+CMsgRemoteClientGetControllerConfigRes"
  "ponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\022\n\nconfig_vdf\030"
  "\002 \001(\014\"3\n CMsgRemoteClientStreamingEnable"
  "d\022\017\n\007enabled\030\001 \002(\010B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fremoteclient_2eproto = {
  false, InitDefaults_steammessages_5fremoteclient_2eproto, 
  descriptor_table_protodef_steammessages_5fremoteclient_2eproto,
  "steammessages_remoteclient.proto", &assign_descriptors_table_steammessages_5fremoteclient_2eproto, 1785,
};

void AddDescriptors_steammessages_5fremoteclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_steammessages_5fbase_2eproto,
    ::AddDescriptors_steammessages_5fremoteclient_5fdiscovery_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fremoteclient_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fremoteclient_2eproto = []() { AddDescriptors_steammessages_5fremoteclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CMsgRemoteClientAppStatus_AppUpdateInfo::InitAsDefaultInstance() {
}
class CMsgRemoteClientAppStatus_AppUpdateInfo::HasBitSetters {
 public:
  static void set_has_time_update_start(CMsgRemoteClientAppStatus_AppUpdateInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_bytes_to_download(CMsgRemoteClientAppStatus_AppUpdateInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_bytes_downloaded(CMsgRemoteClientAppStatus_AppUpdateInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bytes_to_process(CMsgRemoteClientAppStatus_AppUpdateInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bytes_processed(CMsgRemoteClientAppStatus_AppUpdateInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_estimated_seconds_remaining(CMsgRemoteClientAppStatus_AppUpdateInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_update_result(CMsgRemoteClientAppStatus_AppUpdateInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_update_state(CMsgRemoteClientAppStatus_AppUpdateInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kTimeUpdateStartFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kBytesToDownloadFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kBytesDownloadedFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kBytesToProcessFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kBytesProcessedFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kEstimatedSecondsRemainingFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kUpdateResultFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kUpdateStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAppStatus_AppUpdateInfo::CMsgRemoteClientAppStatus_AppUpdateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
}
CMsgRemoteClientAppStatus_AppUpdateInfo::CMsgRemoteClientAppStatus_AppUpdateInfo(const CMsgRemoteClientAppStatus_AppUpdateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytes_to_download_, &from.bytes_to_download_,
    static_cast<size_t>(reinterpret_cast<char*>(&estimated_seconds_remaining_) -
    reinterpret_cast<char*>(&bytes_to_download_)) + sizeof(estimated_seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::SharedCtor() {
  ::memset(&bytes_to_download_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_state_) -
      reinterpret_cast<char*>(&bytes_to_download_)) + sizeof(update_state_));
  estimated_seconds_remaining_ = -1;
}

CMsgRemoteClientAppStatus_AppUpdateInfo::~CMsgRemoteClientAppStatus_AppUpdateInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  SharedDtor();
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::SharedDtor() {
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientAppStatus_AppUpdateInfo& CMsgRemoteClientAppStatus_AppUpdateInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientAppStatus_AppUpdateInfo_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientAppStatus_AppUpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bytes_to_download_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_state_) -
        reinterpret_cast<char*>(&bytes_to_download_)) + sizeof(update_state_));
    estimated_seconds_remaining_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientAppStatus_AppUpdateInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientAppStatus_AppUpdateInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 time_update_start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_time_update_start(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint64 bytes_to_download = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bytes_to_download(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_downloaded = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bytes_downloaded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_to_process = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bytes_to_process(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes_processed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bytes_processed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 estimated_seconds_remaining = 6 [default = -1];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_estimated_seconds_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 update_result = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_update_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 update_state = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_update_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientAppStatus_AppUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 time_update_start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_time_update_start(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_update_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_to_download = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bytes_to_download(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_to_download_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_downloaded = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_bytes_downloaded(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_downloaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_to_process = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_bytes_to_process(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_to_process_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_processed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_bytes_processed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 estimated_seconds_remaining = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_estimated_seconds_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_seconds_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_result = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_update_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 update_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_update_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientAppStatus_AppUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_update_start = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->time_update_start(), output);
  }

  // optional uint64 bytes_to_download = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_to_download(), output);
  }

  // optional uint64 bytes_downloaded = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bytes_downloaded(), output);
  }

  // optional uint64 bytes_to_process = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bytes_to_process(), output);
  }

  // optional uint64 bytes_processed = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bytes_processed(), output);
  }

  // optional int32 estimated_seconds_remaining = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->estimated_seconds_remaining(), output);
  }

  // optional int32 update_result = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->update_result(), output);
  }

  // optional uint32 update_state = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->update_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
}

::google::protobuf::uint8* CMsgRemoteClientAppStatus_AppUpdateInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_update_start = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->time_update_start(), target);
  }

  // optional uint64 bytes_to_download = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_to_download(), target);
  }

  // optional uint64 bytes_downloaded = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bytes_downloaded(), target);
  }

  // optional uint64 bytes_to_process = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bytes_to_process(), target);
  }

  // optional uint64 bytes_processed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bytes_processed(), target);
  }

  // optional int32 estimated_seconds_remaining = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->estimated_seconds_remaining(), target);
  }

  // optional int32 update_result = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->update_result(), target);
  }

  // optional uint32 update_state = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->update_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  return target;
}

size_t CMsgRemoteClientAppStatus_AppUpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bytes_to_download = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_to_download());
    }

    // optional uint64 bytes_downloaded = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_downloaded());
    }

    // optional uint64 bytes_to_process = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_to_process());
    }

    // optional fixed32 time_update_start = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 update_result = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_result());
    }

    // optional uint64 bytes_processed = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_processed());
    }

    // optional uint32 update_state = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_state());
    }

    // optional int32 estimated_seconds_remaining = 6 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estimated_seconds_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAppStatus_AppUpdateInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientAppStatus_AppUpdateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::MergeFrom(const CMsgRemoteClientAppStatus_AppUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bytes_to_download_ = from.bytes_to_download_;
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    if (cached_has_bits & 0x00000004u) {
      bytes_to_process_ = from.bytes_to_process_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_update_start_ = from.time_update_start_;
    }
    if (cached_has_bits & 0x00000010u) {
      update_result_ = from.update_result_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_processed_ = from.bytes_processed_;
    }
    if (cached_has_bits & 0x00000040u) {
      update_state_ = from.update_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      estimated_seconds_remaining_ = from.estimated_seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::CopyFrom(const CMsgRemoteClientAppStatus_AppUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus_AppUpdateInfo::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::Swap(CMsgRemoteClientAppStatus_AppUpdateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::InternalSwap(CMsgRemoteClientAppStatus_AppUpdateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bytes_to_download_, other->bytes_to_download_);
  swap(bytes_downloaded_, other->bytes_downloaded_);
  swap(bytes_to_process_, other->bytes_to_process_);
  swap(time_update_start_, other->time_update_start_);
  swap(update_result_, other->update_result_);
  swap(bytes_processed_, other->bytes_processed_);
  swap(update_state_, other->update_state_);
  swap(estimated_seconds_remaining_, other->estimated_seconds_remaining_);
}

::google::protobuf::Metadata CMsgRemoteClientAppStatus_AppUpdateInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientAppStatus_ShortcutInfo::InitAsDefaultInstance() {
}
class CMsgRemoteClientAppStatus_ShortcutInfo::HasBitSetters {
 public:
  static void set_has_name(CMsgRemoteClientAppStatus_ShortcutInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_icon(CMsgRemoteClientAppStatus_ShortcutInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAppStatus_ShortcutInfo::kNameFieldNumber;
const int CMsgRemoteClientAppStatus_ShortcutInfo::kIconFieldNumber;
const int CMsgRemoteClientAppStatus_ShortcutInfo::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAppStatus_ShortcutInfo::CMsgRemoteClientAppStatus_ShortcutInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
}
CMsgRemoteClientAppStatus_ShortcutInfo::CMsgRemoteClientAppStatus_ShortcutInfo(const CMsgRemoteClientAppStatus_ShortcutInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
}

void CMsgRemoteClientAppStatus_ShortcutInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteClientAppStatus_ShortcutInfo_steammessages_5fremoteclient_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgRemoteClientAppStatus_ShortcutInfo::~CMsgRemoteClientAppStatus_ShortcutInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  SharedDtor();
}

void CMsgRemoteClientAppStatus_ShortcutInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientAppStatus_ShortcutInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientAppStatus_ShortcutInfo& CMsgRemoteClientAppStatus_ShortcutInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientAppStatus_ShortcutInfo_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientAppStatus_ShortcutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientAppStatus_ShortcutInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientAppStatus_ShortcutInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string icon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon");
        object = msg->mutable_icon();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string categories = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories");
          object = msg->add_categories();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientAppStatus_ShortcutInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), static_cast<int>(this->icon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string categories = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_categories()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->categories(this->categories_size() - 1).data(),
            static_cast<int>(this->categories(this->categories_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientAppStatus_ShortcutInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icon(), output);
  }

  // repeated string categories = 3;
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->categories(i).data(), static_cast<int>(this->categories(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->categories(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
}

::google::protobuf::uint8* CMsgRemoteClientAppStatus_ShortcutInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), static_cast<int>(this->icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  // repeated string categories = 3;
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->categories(i).data(), static_cast<int>(this->categories(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->categories(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  return target;
}

size_t CMsgRemoteClientAppStatus_ShortcutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string categories = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->categories_size());
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->categories(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientAppStatus_ShortcutInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAppStatus_ShortcutInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientAppStatus_ShortcutInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAppStatus_ShortcutInfo::MergeFrom(const CMsgRemoteClientAppStatus_ShortcutInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
  }
}

void CMsgRemoteClientAppStatus_ShortcutInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAppStatus_ShortcutInfo::CopyFrom(const CMsgRemoteClientAppStatus_ShortcutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus_ShortcutInfo::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus_ShortcutInfo::Swap(CMsgRemoteClientAppStatus_ShortcutInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAppStatus_ShortcutInfo::InternalSwap(CMsgRemoteClientAppStatus_ShortcutInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  categories_.InternalSwap(CastToBase(&other->categories_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgRemoteClientAppStatus_ShortcutInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientAppStatus_AppStatus::InitAsDefaultInstance() {
  ::proto::steam::_CMsgRemoteClientAppStatus_AppStatus_default_instance_._instance.get_mutable()->update_info_ = const_cast< ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo*>(
      ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo::internal_default_instance());
  ::proto::steam::_CMsgRemoteClientAppStatus_AppStatus_default_instance_._instance.get_mutable()->shortcut_info_ = const_cast< ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo*>(
      ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo::internal_default_instance());
}
class CMsgRemoteClientAppStatus_AppStatus::HasBitSetters {
 public:
  static void set_has_app_id(CMsgRemoteClientAppStatus_AppStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_app_state(CMsgRemoteClientAppStatus_AppStatus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo& update_info(const CMsgRemoteClientAppStatus_AppStatus* msg);
  static void set_has_update_info(CMsgRemoteClientAppStatus_AppStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo& shortcut_info(const CMsgRemoteClientAppStatus_AppStatus* msg);
  static void set_has_shortcut_info(CMsgRemoteClientAppStatus_AppStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo&
CMsgRemoteClientAppStatus_AppStatus::HasBitSetters::update_info(const CMsgRemoteClientAppStatus_AppStatus* msg) {
  return *msg->update_info_;
}
const ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo&
CMsgRemoteClientAppStatus_AppStatus::HasBitSetters::shortcut_info(const CMsgRemoteClientAppStatus_AppStatus* msg) {
  return *msg->shortcut_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAppStatus_AppStatus::kAppIdFieldNumber;
const int CMsgRemoteClientAppStatus_AppStatus::kAppStateFieldNumber;
const int CMsgRemoteClientAppStatus_AppStatus::kUpdateInfoFieldNumber;
const int CMsgRemoteClientAppStatus_AppStatus::kShortcutInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAppStatus_AppStatus::CMsgRemoteClientAppStatus_AppStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
}
CMsgRemoteClientAppStatus_AppStatus::CMsgRemoteClientAppStatus_AppStatus(const CMsgRemoteClientAppStatus_AppStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_info()) {
    update_info_ = new ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo(*from.update_info_);
  } else {
    update_info_ = nullptr;
  }
  if (from.has_shortcut_info()) {
    shortcut_info_ = new ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo(*from.shortcut_info_);
  } else {
    shortcut_info_ = nullptr;
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_state_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(app_state_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
}

void CMsgRemoteClientAppStatus_AppStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteClientAppStatus_AppStatus_steammessages_5fremoteclient_2eproto.base);
  ::memset(&update_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_state_) -
      reinterpret_cast<char*>(&update_info_)) + sizeof(app_state_));
}

CMsgRemoteClientAppStatus_AppStatus::~CMsgRemoteClientAppStatus_AppStatus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  SharedDtor();
}

void CMsgRemoteClientAppStatus_AppStatus::SharedDtor() {
  if (this != internal_default_instance()) delete update_info_;
  if (this != internal_default_instance()) delete shortcut_info_;
}

void CMsgRemoteClientAppStatus_AppStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientAppStatus_AppStatus& CMsgRemoteClientAppStatus_AppStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientAppStatus_AppStatus_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientAppStatus_AppStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_info_ != nullptr);
      update_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shortcut_info_ != nullptr);
      shortcut_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_state_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(app_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientAppStatus_AppStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientAppStatus_AppStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 app_state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo::_InternalParse;
        object = msg->mutable_update_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo::_InternalParse;
        object = msg->mutable_shortcut_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientAppStatus_AppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_app_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shortcut_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientAppStatus_AppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 app_state = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_state(), output);
  }

  // optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::update_info(this), output);
  }

  // optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::shortcut_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
}

::google::protobuf::uint8* CMsgRemoteClientAppStatus_AppStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 app_state = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_state(), target);
  }

  // optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::update_info(this), target);
  }

  // optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::shortcut_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  return target;
}

size_t CMsgRemoteClientAppStatus_AppStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_info_);
    }

    // optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shortcut_info_);
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 app_state = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientAppStatus_AppStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAppStatus_AppStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientAppStatus_AppStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAppStatus_AppStatus::MergeFrom(const CMsgRemoteClientAppStatus_AppStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_info()->::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo::MergeFrom(from.update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shortcut_info()->::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo::MergeFrom(from.shortcut_info());
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_state_ = from.app_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientAppStatus_AppStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAppStatus_AppStatus::CopyFrom(const CMsgRemoteClientAppStatus_AppStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus_AppStatus::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus_AppStatus::Swap(CMsgRemoteClientAppStatus_AppStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAppStatus_AppStatus::InternalSwap(CMsgRemoteClientAppStatus_AppStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(update_info_, other->update_info_);
  swap(shortcut_info_, other->shortcut_info_);
  swap(app_id_, other->app_id_);
  swap(app_state_, other->app_state_);
}

::google::protobuf::Metadata CMsgRemoteClientAppStatus_AppStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientAppStatus::InitAsDefaultInstance() {
}
class CMsgRemoteClientAppStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAppStatus::kStatusUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAppStatus::CMsgRemoteClientAppStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAppStatus)
}
CMsgRemoteClientAppStatus::CMsgRemoteClientAppStatus(const CMsgRemoteClientAppStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      status_updates_(from.status_updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAppStatus)
}

void CMsgRemoteClientAppStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteClientAppStatus_steammessages_5fremoteclient_2eproto.base);
}

CMsgRemoteClientAppStatus::~CMsgRemoteClientAppStatus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAppStatus)
  SharedDtor();
}

void CMsgRemoteClientAppStatus::SharedDtor() {
}

void CMsgRemoteClientAppStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientAppStatus& CMsgRemoteClientAppStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientAppStatus_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientAppStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_updates_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientAppStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientAppStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgRemoteClientAppStatus_AppStatus::_InternalParse;
          object = msg->add_status_updates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientAppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAppStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_status_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAppStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAppStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientAppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->status_updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->status_updates(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAppStatus)
}

::google::protobuf::uint8* CMsgRemoteClientAppStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->status_updates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->status_updates(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAppStatus)
  return target;
}

size_t CMsgRemoteClientAppStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAppStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->status_updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->status_updates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientAppStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAppStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientAppStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAppStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAppStatus)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAppStatus::MergeFrom(const CMsgRemoteClientAppStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_updates_.MergeFrom(from.status_updates_);
}

void CMsgRemoteClientAppStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAppStatus::CopyFrom(const CMsgRemoteClientAppStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus::Swap(CMsgRemoteClientAppStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAppStatus::InternalSwap(CMsgRemoteClientAppStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&status_updates_)->InternalSwap(CastToBase(&other->status_updates_));
}

::google::protobuf::Metadata CMsgRemoteClientAppStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientAuth::InitAsDefaultInstance() {
  ::proto::steam::_CMsgRemoteClientAuth_default_instance_._instance.get_mutable()->status_ = const_cast< ::proto::steam::CMsgRemoteClientBroadcastStatus*>(
      ::proto::steam::CMsgRemoteClientBroadcastStatus::internal_default_instance());
}
class CMsgRemoteClientAuth::HasBitSetters {
 public:
  static void set_has_client_id(CMsgRemoteClientAuth* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::steam::CMsgRemoteClientBroadcastStatus& status(const CMsgRemoteClientAuth* msg);
  static void set_has_status(CMsgRemoteClientAuth* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_instance_id(CMsgRemoteClientAuth* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::steam::CMsgRemoteClientBroadcastStatus&
CMsgRemoteClientAuth::HasBitSetters::status(const CMsgRemoteClientAuth* msg) {
  return *msg->status_;
}
void CMsgRemoteClientAuth::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAuth::kClientIdFieldNumber;
const int CMsgRemoteClientAuth::kStatusFieldNumber;
const int CMsgRemoteClientAuth::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAuth::CMsgRemoteClientAuth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAuth)
}
CMsgRemoteClientAuth::CMsgRemoteClientAuth(const CMsgRemoteClientAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::proto::steam::CMsgRemoteClientBroadcastStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAuth)
}

void CMsgRemoteClientAuth::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteClientAuth_steammessages_5fremoteclient_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(instance_id_));
}

CMsgRemoteClientAuth::~CMsgRemoteClientAuth() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAuth)
  SharedDtor();
}

void CMsgRemoteClientAuth::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void CMsgRemoteClientAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientAuth& CMsgRemoteClientAuth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientAuth_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instance_id_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(instance_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientAuth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientAuth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 client_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_client_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgRemoteClientBroadcastStatus::_InternalParse;
        object = msg->mutable_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint64 instance_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAuth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_client_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAuth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  // optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::status(this), output);
  }

  // optional uint64 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAuth)
}

::google::protobuf::uint8* CMsgRemoteClientAuth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  // optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::status(this), target);
  }

  // optional uint64 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAuth)
  return target;
}

size_t CMsgRemoteClientAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAuth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional uint64 client_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

    // optional uint64 instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAuth* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAuth)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAuth::MergeFrom(const CMsgRemoteClientAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::proto::steam::CMsgRemoteClientBroadcastStatus::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAuth::CopyFrom(const CMsgRemoteClientAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAuth::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAuth::Swap(CMsgRemoteClientAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAuth::InternalSwap(CMsgRemoteClientAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(client_id_, other->client_id_);
  swap(instance_id_, other->instance_id_);
}

::google::protobuf::Metadata CMsgRemoteClientAuth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientAuthResponse::InitAsDefaultInstance() {
}
class CMsgRemoteClientAuthResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgRemoteClientAuthResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAuthResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAuthResponse::CMsgRemoteClientAuthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAuthResponse)
}
CMsgRemoteClientAuthResponse::CMsgRemoteClientAuthResponse(const CMsgRemoteClientAuthResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAuthResponse)
}

void CMsgRemoteClientAuthResponse::SharedCtor() {
  eresult_ = 2;
}

CMsgRemoteClientAuthResponse::~CMsgRemoteClientAuthResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAuthResponse)
  SharedDtor();
}

void CMsgRemoteClientAuthResponse::SharedDtor() {
}

void CMsgRemoteClientAuthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientAuthResponse& CMsgRemoteClientAuthResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientAuthResponse_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientAuthResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientAuthResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAuthResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAuthResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAuthResponse)
}

::google::protobuf::uint8* CMsgRemoteClientAuthResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAuthResponse)
  return target;
}

size_t CMsgRemoteClientAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAuthResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAuthResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientAuthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAuthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAuthResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAuthResponse::MergeFrom(const CMsgRemoteClientAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgRemoteClientAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAuthResponse::CopyFrom(const CMsgRemoteClientAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAuthResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAuthResponse::Swap(CMsgRemoteClientAuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAuthResponse::InternalSwap(CMsgRemoteClientAuthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgRemoteClientAuthResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientStartStream_ReservedGamepad::InitAsDefaultInstance() {
}
class CMsgRemoteClientStartStream_ReservedGamepad::HasBitSetters {
 public:
  static void set_has_controller_type(CMsgRemoteClientStartStream_ReservedGamepad* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_controller_subtype(CMsgRemoteClientStartStream_ReservedGamepad* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientStartStream_ReservedGamepad::kControllerTypeFieldNumber;
const int CMsgRemoteClientStartStream_ReservedGamepad::kControllerSubtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientStartStream_ReservedGamepad::CMsgRemoteClientStartStream_ReservedGamepad()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
}
CMsgRemoteClientStartStream_ReservedGamepad::CMsgRemoteClientStartStream_ReservedGamepad(const CMsgRemoteClientStartStream_ReservedGamepad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_type_, &from.controller_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_subtype_) -
    reinterpret_cast<char*>(&controller_type_)) + sizeof(controller_subtype_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
}

void CMsgRemoteClientStartStream_ReservedGamepad::SharedCtor() {
  ::memset(&controller_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_subtype_) -
      reinterpret_cast<char*>(&controller_type_)) + sizeof(controller_subtype_));
}

CMsgRemoteClientStartStream_ReservedGamepad::~CMsgRemoteClientStartStream_ReservedGamepad() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  SharedDtor();
}

void CMsgRemoteClientStartStream_ReservedGamepad::SharedDtor() {
}

void CMsgRemoteClientStartStream_ReservedGamepad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientStartStream_ReservedGamepad& CMsgRemoteClientStartStream_ReservedGamepad::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientStartStream_ReservedGamepad_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientStartStream_ReservedGamepad::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&controller_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_subtype_) -
        reinterpret_cast<char*>(&controller_type_)) + sizeof(controller_subtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientStartStream_ReservedGamepad::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientStartStream_ReservedGamepad*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 controller_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_controller_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 controller_subtype = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_controller_subtype(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientStartStream_ReservedGamepad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 controller_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_controller_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 controller_subtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_controller_subtype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_subtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientStartStream_ReservedGamepad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->controller_type(), output);
  }

  // optional uint32 controller_subtype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->controller_subtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
}

::google::protobuf::uint8* CMsgRemoteClientStartStream_ReservedGamepad::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->controller_type(), target);
  }

  // optional uint32 controller_subtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->controller_subtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  return target;
}

size_t CMsgRemoteClientStartStream_ReservedGamepad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 controller_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->controller_type());
    }

    // optional uint32 controller_subtype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->controller_subtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientStartStream_ReservedGamepad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientStartStream_ReservedGamepad* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientStartStream_ReservedGamepad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientStartStream_ReservedGamepad::MergeFrom(const CMsgRemoteClientStartStream_ReservedGamepad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      controller_type_ = from.controller_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      controller_subtype_ = from.controller_subtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientStartStream_ReservedGamepad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientStartStream_ReservedGamepad::CopyFrom(const CMsgRemoteClientStartStream_ReservedGamepad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStartStream_ReservedGamepad::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStartStream_ReservedGamepad::Swap(CMsgRemoteClientStartStream_ReservedGamepad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientStartStream_ReservedGamepad::InternalSwap(CMsgRemoteClientStartStream_ReservedGamepad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(controller_type_, other->controller_type_);
  swap(controller_subtype_, other->controller_subtype_);
}

::google::protobuf::Metadata CMsgRemoteClientStartStream_ReservedGamepad::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientStartStream::InitAsDefaultInstance() {
}
class CMsgRemoteClientStartStream::HasBitSetters {
 public:
  static void set_has_app_id(CMsgRemoteClientStartStream* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_environment(CMsgRemoteClientStartStream* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gamepad_count(CMsgRemoteClientStartStream* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_launch_option(CMsgRemoteClientStartStream* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_lock_parental_lock(CMsgRemoteClientStartStream* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_unlock_parental_lock(CMsgRemoteClientStartStream* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_maximum_resolution_x(CMsgRemoteClientStartStream* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_maximum_resolution_y(CMsgRemoteClientStartStream* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_audio_channel_count(CMsgRemoteClientStartStream* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientStartStream::kAppIdFieldNumber;
const int CMsgRemoteClientStartStream::kEnvironmentFieldNumber;
const int CMsgRemoteClientStartStream::kGamepadCountFieldNumber;
const int CMsgRemoteClientStartStream::kLaunchOptionFieldNumber;
const int CMsgRemoteClientStartStream::kLockParentalLockFieldNumber;
const int CMsgRemoteClientStartStream::kUnlockParentalLockFieldNumber;
const int CMsgRemoteClientStartStream::kMaximumResolutionXFieldNumber;
const int CMsgRemoteClientStartStream::kMaximumResolutionYFieldNumber;
const int CMsgRemoteClientStartStream::kGamepadsFieldNumber;
const int CMsgRemoteClientStartStream::kAudioChannelCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientStartStream::CMsgRemoteClientStartStream()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientStartStream)
}
CMsgRemoteClientStartStream::CMsgRemoteClientStartStream(const CMsgRemoteClientStartStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      gamepads_(from.gamepads_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unlock_parental_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_parental_lock()) {
    unlock_parental_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_parental_lock_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_channel_count_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(audio_channel_count_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientStartStream)
}

void CMsgRemoteClientStartStream::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteClientStartStream_steammessages_5fremoteclient_2eproto.base);
  unlock_parental_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_resolution_y_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(maximum_resolution_y_));
  launch_option_ = -1;
  audio_channel_count_ = 2;
}

CMsgRemoteClientStartStream::~CMsgRemoteClientStartStream() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientStartStream)
  SharedDtor();
}

void CMsgRemoteClientStartStream::SharedDtor() {
  unlock_parental_lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientStartStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientStartStream& CMsgRemoteClientStartStream::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientStartStream_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientStartStream::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientStartStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamepads_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unlock_parental_lock_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maximum_resolution_y_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(maximum_resolution_y_));
    launch_option_ = -1;
  }
  audio_channel_count_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientStartStream::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientStartStream*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 environment = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_environment(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 gamepad_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_gamepad_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 launch_option = 4 [default = -1];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_launch_option(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool lock_parental_lock = 5 [default = false];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_lock_parental_lock(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string unlock_parental_lock = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock");
        object = msg->mutable_unlock_parental_lock();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 maximum_resolution_x = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_maximum_resolution_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 maximum_resolution_y = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_maximum_resolution_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad::_InternalParse;
          object = msg->add_gamepads();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // optional int32 audio_channel_count = 10 [default = 2];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_audio_channel_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientStartStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientStartStream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 environment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_environment(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &environment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gamepad_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_gamepad_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamepad_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 launch_option = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_launch_option(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launch_option_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lock_parental_lock = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_lock_parental_lock(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_parental_lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unlock_parental_lock = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unlock_parental_lock()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unlock_parental_lock().data(), static_cast<int>(this->unlock_parental_lock().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_resolution_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_maximum_resolution_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_resolution_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_resolution_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_maximum_resolution_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_resolution_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gamepads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_channel_count = 10 [default = 2];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_audio_channel_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientStartStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientStartStream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientStartStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientStartStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 environment = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->environment(), output);
  }

  // optional int32 gamepad_count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamepad_count(), output);
  }

  // optional int32 launch_option = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->launch_option(), output);
  }

  // optional bool lock_parental_lock = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->lock_parental_lock(), output);
  }

  // optional string unlock_parental_lock = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unlock_parental_lock().data(), static_cast<int>(this->unlock_parental_lock().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->unlock_parental_lock(), output);
  }

  // optional int32 maximum_resolution_x = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maximum_resolution_x(), output);
  }

  // optional int32 maximum_resolution_y = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maximum_resolution_y(), output);
  }

  // repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gamepads_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->gamepads(static_cast<int>(i)),
      output);
  }

  // optional int32 audio_channel_count = 10 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->audio_channel_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientStartStream)
}

::google::protobuf::uint8* CMsgRemoteClientStartStream::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientStartStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 environment = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->environment(), target);
  }

  // optional int32 gamepad_count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamepad_count(), target);
  }

  // optional int32 launch_option = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->launch_option(), target);
  }

  // optional bool lock_parental_lock = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->lock_parental_lock(), target);
  }

  // optional string unlock_parental_lock = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unlock_parental_lock().data(), static_cast<int>(this->unlock_parental_lock().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unlock_parental_lock(), target);
  }

  // optional int32 maximum_resolution_x = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maximum_resolution_x(), target);
  }

  // optional int32 maximum_resolution_y = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maximum_resolution_y(), target);
  }

  // repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gamepads_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->gamepads(static_cast<int>(i)), target);
  }

  // optional int32 audio_channel_count = 10 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->audio_channel_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientStartStream)
  return target;
}

size_t CMsgRemoteClientStartStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientStartStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->gamepads_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gamepads(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unlock_parental_lock = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unlock_parental_lock());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 environment = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->environment());
    }

    // optional int32 gamepad_count = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamepad_count());
    }

    // optional bool lock_parental_lock = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 maximum_resolution_x = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_resolution_x());
    }

    // optional int32 maximum_resolution_y = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_resolution_y());
    }

    // optional int32 launch_option = 4 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launch_option());
    }

  }
  // optional int32 audio_channel_count = 10 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->audio_channel_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientStartStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientStartStream)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientStartStream* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientStartStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientStartStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientStartStream)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientStartStream::MergeFrom(const CMsgRemoteClientStartStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientStartStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamepads_.MergeFrom(from.gamepads_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unlock_parental_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_parental_lock_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      environment_ = from.environment_;
    }
    if (cached_has_bits & 0x00000008u) {
      gamepad_count_ = from.gamepad_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      lock_parental_lock_ = from.lock_parental_lock_;
    }
    if (cached_has_bits & 0x00000020u) {
      maximum_resolution_x_ = from.maximum_resolution_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      maximum_resolution_y_ = from.maximum_resolution_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      launch_option_ = from.launch_option_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_audio_channel_count(from.audio_channel_count());
  }
}

void CMsgRemoteClientStartStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientStartStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientStartStream::CopyFrom(const CMsgRemoteClientStartStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientStartStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStartStream::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStartStream::Swap(CMsgRemoteClientStartStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientStartStream::InternalSwap(CMsgRemoteClientStartStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&gamepads_)->InternalSwap(CastToBase(&other->gamepads_));
  unlock_parental_lock_.Swap(&other->unlock_parental_lock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(environment_, other->environment_);
  swap(gamepad_count_, other->gamepad_count_);
  swap(lock_parental_lock_, other->lock_parental_lock_);
  swap(maximum_resolution_x_, other->maximum_resolution_x_);
  swap(maximum_resolution_y_, other->maximum_resolution_y_);
  swap(launch_option_, other->launch_option_);
  swap(audio_channel_count_, other->audio_channel_count_);
}

::google::protobuf::Metadata CMsgRemoteClientStartStream::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientStartStreamResponse::InitAsDefaultInstance() {
}
class CMsgRemoteClientStartStreamResponse::HasBitSetters {
 public:
  static void set_has_e_launch_result(CMsgRemoteClientStartStreamResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_stream_port(CMsgRemoteClientStartStreamResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_auth_token(CMsgRemoteClientStartStreamResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientStartStreamResponse::kELaunchResultFieldNumber;
const int CMsgRemoteClientStartStreamResponse::kStreamPortFieldNumber;
const int CMsgRemoteClientStartStreamResponse::kLaunchOptionsFieldNumber;
const int CMsgRemoteClientStartStreamResponse::kAuthTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientStartStreamResponse::CMsgRemoteClientStartStreamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientStartStreamResponse)
}
CMsgRemoteClientStartStreamResponse::CMsgRemoteClientStartStreamResponse(const CMsgRemoteClientStartStreamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      launch_options_(from.launch_options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_token()) {
    auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  ::memcpy(&stream_port_, &from.stream_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&e_launch_result_) -
    reinterpret_cast<char*>(&stream_port_)) + sizeof(e_launch_result_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientStartStreamResponse)
}

void CMsgRemoteClientStartStreamResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteClientStartStreamResponse_steammessages_5fremoteclient_2eproto.base);
  auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_port_ = 0u;
  e_launch_result_ = 2;
}

CMsgRemoteClientStartStreamResponse::~CMsgRemoteClientStartStreamResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientStartStreamResponse)
  SharedDtor();
}

void CMsgRemoteClientStartStreamResponse::SharedDtor() {
  auth_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientStartStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientStartStreamResponse& CMsgRemoteClientStartStreamResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientStartStreamResponse_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientStartStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  launch_options_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auth_token_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    stream_port_ = 0u;
    e_launch_result_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientStartStreamResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientStartStreamResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 e_launch_result = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_e_launch_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 stream_port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stream_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 launch_options = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_launch_options(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_launch_options();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bytes auth_token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_auth_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientStartStreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 e_launch_result = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_e_launch_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &e_launch_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stream_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stream_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 launch_options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_launch_options())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_launch_options())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes auth_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientStartStreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientStartStreamResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientStartStreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 e_launch_result = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->e_launch_result(), output);
  }

  // optional uint32 stream_port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stream_port(), output);
  }

  // repeated int32 launch_options = 3;
  for (int i = 0, n = this->launch_options_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->launch_options(i), output);
  }

  // optional bytes auth_token = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->auth_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientStartStreamResponse)
}

::google::protobuf::uint8* CMsgRemoteClientStartStreamResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 e_launch_result = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->e_launch_result(), target);
  }

  // optional uint32 stream_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stream_port(), target);
  }

  // repeated int32 launch_options = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->launch_options_, target);

  // optional bytes auth_token = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->auth_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientStartStreamResponse)
  return target;
}

size_t CMsgRemoteClientStartStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 launch_options = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->launch_options_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->launch_options_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes auth_token = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->auth_token());
    }

    // optional uint32 stream_port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_port());
    }

    // optional int32 e_launch_result = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->e_launch_result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientStartStreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientStartStreamResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientStartStreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientStartStreamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientStartStreamResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientStartStreamResponse::MergeFrom(const CMsgRemoteClientStartStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  launch_options_.MergeFrom(from.launch_options_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      stream_port_ = from.stream_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      e_launch_result_ = from.e_launch_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientStartStreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientStartStreamResponse::CopyFrom(const CMsgRemoteClientStartStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStartStreamResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStartStreamResponse::Swap(CMsgRemoteClientStartStreamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientStartStreamResponse::InternalSwap(CMsgRemoteClientStartStreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  launch_options_.InternalSwap(&other->launch_options_);
  auth_token_.Swap(&other->auth_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stream_port_, other->stream_port_);
  swap(e_launch_result_, other->e_launch_result_);
}

::google::protobuf::Metadata CMsgRemoteClientStartStreamResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientPing::InitAsDefaultInstance() {
}
class CMsgRemoteClientPing::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientPing::CMsgRemoteClientPing()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientPing)
}
CMsgRemoteClientPing::CMsgRemoteClientPing(const CMsgRemoteClientPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientPing)
}

void CMsgRemoteClientPing::SharedCtor() {
}

CMsgRemoteClientPing::~CMsgRemoteClientPing() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientPing)
  SharedDtor();
}

void CMsgRemoteClientPing::SharedDtor() {
}

void CMsgRemoteClientPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientPing& CMsgRemoteClientPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientPing_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientPing::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientPing*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientPing)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientPing)
}

::google::protobuf::uint8* CMsgRemoteClientPing::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientPing)
  return target;
}

size_t CMsgRemoteClientPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientPing* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientPing)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientPing::MergeFrom(const CMsgRemoteClientPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRemoteClientPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientPing::CopyFrom(const CMsgRemoteClientPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientPing::IsInitialized() const {
  return true;
}

void CMsgRemoteClientPing::Swap(CMsgRemoteClientPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientPing::InternalSwap(CMsgRemoteClientPing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgRemoteClientPing::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientPingResponse::InitAsDefaultInstance() {
}
class CMsgRemoteClientPingResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientPingResponse::CMsgRemoteClientPingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientPingResponse)
}
CMsgRemoteClientPingResponse::CMsgRemoteClientPingResponse(const CMsgRemoteClientPingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientPingResponse)
}

void CMsgRemoteClientPingResponse::SharedCtor() {
}

CMsgRemoteClientPingResponse::~CMsgRemoteClientPingResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientPingResponse)
  SharedDtor();
}

void CMsgRemoteClientPingResponse::SharedDtor() {
}

void CMsgRemoteClientPingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientPingResponse& CMsgRemoteClientPingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientPingResponse_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientPingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientPingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientPingResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientPingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientPingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientPingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientPingResponse)
}

::google::protobuf::uint8* CMsgRemoteClientPingResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientPingResponse)
  return target;
}

size_t CMsgRemoteClientPingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientPingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientPingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientPingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientPingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientPingResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientPingResponse::MergeFrom(const CMsgRemoteClientPingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRemoteClientPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientPingResponse::CopyFrom(const CMsgRemoteClientPingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientPingResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientPingResponse::Swap(CMsgRemoteClientPingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientPingResponse::InternalSwap(CMsgRemoteClientPingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgRemoteClientPingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientAcceptEULA::InitAsDefaultInstance() {
}
class CMsgRemoteClientAcceptEULA::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAcceptEULA::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAcceptEULA::CMsgRemoteClientAcceptEULA()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAcceptEULA)
}
CMsgRemoteClientAcceptEULA::CMsgRemoteClientAcceptEULA(const CMsgRemoteClientAcceptEULA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      app_id_(from.app_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAcceptEULA)
}

void CMsgRemoteClientAcceptEULA::SharedCtor() {
}

CMsgRemoteClientAcceptEULA::~CMsgRemoteClientAcceptEULA() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAcceptEULA)
  SharedDtor();
}

void CMsgRemoteClientAcceptEULA::SharedDtor() {
}

void CMsgRemoteClientAcceptEULA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientAcceptEULA& CMsgRemoteClientAcceptEULA::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientAcceptEULA_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientAcceptEULA::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAcceptEULA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientAcceptEULA::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientAcceptEULA*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_app_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_app_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientAcceptEULA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAcceptEULA)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_app_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAcceptEULA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAcceptEULA)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientAcceptEULA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAcceptEULA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 app_id = 1;
  for (int i = 0, n = this->app_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->app_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAcceptEULA)
}

::google::protobuf::uint8* CMsgRemoteClientAcceptEULA::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAcceptEULA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 app_id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->app_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAcceptEULA)
  return target;
}

size_t CMsgRemoteClientAcceptEULA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAcceptEULA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 app_id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->app_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->app_id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientAcceptEULA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAcceptEULA)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAcceptEULA* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientAcceptEULA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAcceptEULA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAcceptEULA)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAcceptEULA::MergeFrom(const CMsgRemoteClientAcceptEULA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAcceptEULA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_id_.MergeFrom(from.app_id_);
}

void CMsgRemoteClientAcceptEULA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAcceptEULA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAcceptEULA::CopyFrom(const CMsgRemoteClientAcceptEULA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAcceptEULA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAcceptEULA::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAcceptEULA::Swap(CMsgRemoteClientAcceptEULA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAcceptEULA::InternalSwap(CMsgRemoteClientAcceptEULA* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_id_.InternalSwap(&other->app_id_);
}

::google::protobuf::Metadata CMsgRemoteClientAcceptEULA::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientGetControllerConfig::InitAsDefaultInstance() {
}
class CMsgRemoteClientGetControllerConfig::HasBitSetters {
 public:
  static void set_has_app_id(CMsgRemoteClientGetControllerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_controller_index(CMsgRemoteClientGetControllerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientGetControllerConfig::kAppIdFieldNumber;
const int CMsgRemoteClientGetControllerConfig::kControllerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientGetControllerConfig::CMsgRemoteClientGetControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientGetControllerConfig)
}
CMsgRemoteClientGetControllerConfig::CMsgRemoteClientGetControllerConfig(const CMsgRemoteClientGetControllerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_index_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(controller_index_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientGetControllerConfig)
}

void CMsgRemoteClientGetControllerConfig::SharedCtor() {
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_index_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(controller_index_));
}

CMsgRemoteClientGetControllerConfig::~CMsgRemoteClientGetControllerConfig() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientGetControllerConfig)
  SharedDtor();
}

void CMsgRemoteClientGetControllerConfig::SharedDtor() {
}

void CMsgRemoteClientGetControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientGetControllerConfig& CMsgRemoteClientGetControllerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientGetControllerConfig_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientGetControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_index_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(controller_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientGetControllerConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientGetControllerConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 controller_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_controller_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientGetControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 controller_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_controller_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientGetControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientGetControllerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientGetControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 controller_index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->controller_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientGetControllerConfig)
}

::google::protobuf::uint8* CMsgRemoteClientGetControllerConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 controller_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->controller_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientGetControllerConfig)
  return target;
}

size_t CMsgRemoteClientGetControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 controller_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->controller_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientGetControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientGetControllerConfig* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientGetControllerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientGetControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientGetControllerConfig)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientGetControllerConfig::MergeFrom(const CMsgRemoteClientGetControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      controller_index_ = from.controller_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientGetControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientGetControllerConfig::CopyFrom(const CMsgRemoteClientGetControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientGetControllerConfig::IsInitialized() const {
  return true;
}

void CMsgRemoteClientGetControllerConfig::Swap(CMsgRemoteClientGetControllerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientGetControllerConfig::InternalSwap(CMsgRemoteClientGetControllerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_id_, other->app_id_);
  swap(controller_index_, other->controller_index_);
}

::google::protobuf::Metadata CMsgRemoteClientGetControllerConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientGetControllerConfigResponse::InitAsDefaultInstance() {
}
class CMsgRemoteClientGetControllerConfigResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgRemoteClientGetControllerConfigResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_config_vdf(CMsgRemoteClientGetControllerConfigResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientGetControllerConfigResponse::kEresultFieldNumber;
const int CMsgRemoteClientGetControllerConfigResponse::kConfigVdfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientGetControllerConfigResponse::CMsgRemoteClientGetControllerConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
}
CMsgRemoteClientGetControllerConfigResponse::CMsgRemoteClientGetControllerConfigResponse(const CMsgRemoteClientGetControllerConfigResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_vdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_config_vdf()) {
    config_vdf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_vdf_);
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
}

void CMsgRemoteClientGetControllerConfigResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgRemoteClientGetControllerConfigResponse_steammessages_5fremoteclient_2eproto.base);
  config_vdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
}

CMsgRemoteClientGetControllerConfigResponse::~CMsgRemoteClientGetControllerConfigResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  SharedDtor();
}

void CMsgRemoteClientGetControllerConfigResponse::SharedDtor() {
  config_vdf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientGetControllerConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientGetControllerConfigResponse& CMsgRemoteClientGetControllerConfigResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientGetControllerConfigResponse_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientGetControllerConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      config_vdf_.ClearNonDefaultToEmptyNoArena();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientGetControllerConfigResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientGetControllerConfigResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes config_vdf = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_config_vdf();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientGetControllerConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes config_vdf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config_vdf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientGetControllerConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bytes config_vdf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->config_vdf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
}

::google::protobuf::uint8* CMsgRemoteClientGetControllerConfigResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional bytes config_vdf = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->config_vdf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  return target;
}

size_t CMsgRemoteClientGetControllerConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes config_vdf = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config_vdf());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientGetControllerConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientGetControllerConfigResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientGetControllerConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientGetControllerConfigResponse::MergeFrom(const CMsgRemoteClientGetControllerConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      config_vdf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_vdf_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientGetControllerConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientGetControllerConfigResponse::CopyFrom(const CMsgRemoteClientGetControllerConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientGetControllerConfigResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientGetControllerConfigResponse::Swap(CMsgRemoteClientGetControllerConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientGetControllerConfigResponse::InternalSwap(CMsgRemoteClientGetControllerConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  config_vdf_.Swap(&other->config_vdf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgRemoteClientGetControllerConfigResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRemoteClientStreamingEnabled::InitAsDefaultInstance() {
}
class CMsgRemoteClientStreamingEnabled::HasBitSetters {
 public:
  static void set_has_enabled(CMsgRemoteClientStreamingEnabled* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientStreamingEnabled::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientStreamingEnabled::CMsgRemoteClientStreamingEnabled()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientStreamingEnabled)
}
CMsgRemoteClientStreamingEnabled::CMsgRemoteClientStreamingEnabled(const CMsgRemoteClientStreamingEnabled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientStreamingEnabled)
}

void CMsgRemoteClientStreamingEnabled::SharedCtor() {
  enabled_ = false;
}

CMsgRemoteClientStreamingEnabled::~CMsgRemoteClientStreamingEnabled() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientStreamingEnabled)
  SharedDtor();
}

void CMsgRemoteClientStreamingEnabled::SharedDtor() {
}

void CMsgRemoteClientStreamingEnabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRemoteClientStreamingEnabled& CMsgRemoteClientStreamingEnabled::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRemoteClientStreamingEnabled_steammessages_5fremoteclient_2eproto.base);
  return *internal_default_instance();
}


void CMsgRemoteClientStreamingEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRemoteClientStreamingEnabled::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRemoteClientStreamingEnabled*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bool enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRemoteClientStreamingEnabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientStreamingEnabled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientStreamingEnabled)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRemoteClientStreamingEnabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientStreamingEnabled)
}

::google::protobuf::uint8* CMsgRemoteClientStreamingEnabled::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientStreamingEnabled)
  return target;
}

size_t CMsgRemoteClientStreamingEnabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRemoteClientStreamingEnabled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientStreamingEnabled* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRemoteClientStreamingEnabled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientStreamingEnabled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientStreamingEnabled)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientStreamingEnabled::MergeFrom(const CMsgRemoteClientStreamingEnabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CMsgRemoteClientStreamingEnabled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientStreamingEnabled::CopyFrom(const CMsgRemoteClientStreamingEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStreamingEnabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMsgRemoteClientStreamingEnabled::Swap(CMsgRemoteClientStreamingEnabled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientStreamingEnabled::InternalSwap(CMsgRemoteClientStreamingEnabled* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::google::protobuf::Metadata CMsgRemoteClientStreamingEnabled::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientAppStatus_AppStatus* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientAppStatus_AppStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientAppStatus_AppStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientAppStatus* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientAppStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientAppStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientAuth* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientAuth >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientAuthResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientAuthResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientAuthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientStartStream* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientStartStream >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientStartStream >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientStartStreamResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientStartStreamResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientStartStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientPing* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientPing >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientPing >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientPingResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientPingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientPingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientAcceptEULA* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientAcceptEULA >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientAcceptEULA >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientGetControllerConfig* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientGetControllerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientGetControllerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientGetControllerConfigResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientGetControllerConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientGetControllerConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRemoteClientStreamingEnabled* Arena::CreateMaybeMessage< ::proto::steam::CMsgRemoteClientStreamingEnabled >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRemoteClientStreamingEnabled >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
