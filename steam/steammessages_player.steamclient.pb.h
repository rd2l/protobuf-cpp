// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_player.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fplayer_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fplayer_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fplayer_2esteamclient_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fplayer_2esteamclient_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[39]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5fplayer_2esteamclient_2eproto();
namespace proto {
namespace steam {
class CPlayer_AcceptSSA_Request;
class CPlayer_AcceptSSA_RequestDefaultTypeInternal;
extern CPlayer_AcceptSSA_RequestDefaultTypeInternal _CPlayer_AcceptSSA_Request_default_instance_;
class CPlayer_AcceptSSA_Response;
class CPlayer_AcceptSSA_ResponseDefaultTypeInternal;
extern CPlayer_AcceptSSA_ResponseDefaultTypeInternal _CPlayer_AcceptSSA_Response_default_instance_;
class CPlayer_AddFriend_Request;
class CPlayer_AddFriend_RequestDefaultTypeInternal;
extern CPlayer_AddFriend_RequestDefaultTypeInternal _CPlayer_AddFriend_Request_default_instance_;
class CPlayer_AddFriend_Response;
class CPlayer_AddFriend_ResponseDefaultTypeInternal;
extern CPlayer_AddFriend_ResponseDefaultTypeInternal _CPlayer_AddFriend_Response_default_instance_;
class CPlayer_CommunityPreferences;
class CPlayer_CommunityPreferencesDefaultTypeInternal;
extern CPlayer_CommunityPreferencesDefaultTypeInternal _CPlayer_CommunityPreferences_default_instance_;
class CPlayer_CommunityPreferencesChanged_Notification;
class CPlayer_CommunityPreferencesChanged_NotificationDefaultTypeInternal;
extern CPlayer_CommunityPreferencesChanged_NotificationDefaultTypeInternal _CPlayer_CommunityPreferencesChanged_Notification_default_instance_;
class CPlayer_FriendNicknameChanged_Notification;
class CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal;
extern CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal _CPlayer_FriendNicknameChanged_Notification_default_instance_;
class CPlayer_GetCommunityPreferences_Request;
class CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal;
extern CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_GetCommunityPreferences_Request_default_instance_;
class CPlayer_GetCommunityPreferences_Response;
class CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal;
extern CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_GetCommunityPreferences_Response_default_instance_;
class CPlayer_GetGameBadgeLevels_Request;
class CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal;
extern CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Request_default_instance_;
class CPlayer_GetGameBadgeLevels_Response;
class CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal;
extern CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_default_instance_;
class CPlayer_GetGameBadgeLevels_Response_Badge;
class CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal;
extern CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_;
class CPlayer_GetLastPlayedTimes_Request;
class CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal;
extern CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Request_default_instance_;
class CPlayer_GetLastPlayedTimes_Response;
class CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal;
extern CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_default_instance_;
class CPlayer_GetLastPlayedTimes_Response_Game;
class CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal;
extern CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_;
class CPlayer_GetMutualFriendsForIncomingInvites_Request;
class CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal;
extern CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_;
class CPlayer_GetMutualFriendsForIncomingInvites_Response;
class CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal;
extern CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_;
class CPlayer_GetNewSteamAnnouncementState_Request;
class CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal;
extern CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Request_default_instance_;
class CPlayer_GetNewSteamAnnouncementState_Response;
class CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal;
extern CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Response_default_instance_;
class CPlayer_GetNicknameList_Request;
class CPlayer_GetNicknameList_RequestDefaultTypeInternal;
extern CPlayer_GetNicknameList_RequestDefaultTypeInternal _CPlayer_GetNicknameList_Request_default_instance_;
class CPlayer_GetNicknameList_Response;
class CPlayer_GetNicknameList_ResponseDefaultTypeInternal;
extern CPlayer_GetNicknameList_ResponseDefaultTypeInternal _CPlayer_GetNicknameList_Response_default_instance_;
class CPlayer_GetNicknameList_Response_PlayerNickname;
class CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal;
extern CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal _CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_;
class CPlayer_GetPerFriendPreferences_Request;
class CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal;
extern CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Request_default_instance_;
class CPlayer_GetPerFriendPreferences_Response;
class CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal;
extern CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Response_default_instance_;
class CPlayer_IgnoreFriend_Request;
class CPlayer_IgnoreFriend_RequestDefaultTypeInternal;
extern CPlayer_IgnoreFriend_RequestDefaultTypeInternal _CPlayer_IgnoreFriend_Request_default_instance_;
class CPlayer_IgnoreFriend_Response;
class CPlayer_IgnoreFriend_ResponseDefaultTypeInternal;
extern CPlayer_IgnoreFriend_ResponseDefaultTypeInternal _CPlayer_IgnoreFriend_Response_default_instance_;
class CPlayer_IncomingInviteMutualFriendList;
class CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal;
extern CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal _CPlayer_IncomingInviteMutualFriendList_default_instance_;
class CPlayer_LastPlayedTimes_Notification;
class CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal;
extern CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal _CPlayer_LastPlayedTimes_Notification_default_instance_;
class CPlayer_NewSteamAnnouncementState_Notification;
class CPlayer_NewSteamAnnouncementState_NotificationDefaultTypeInternal;
extern CPlayer_NewSteamAnnouncementState_NotificationDefaultTypeInternal _CPlayer_NewSteamAnnouncementState_Notification_default_instance_;
class CPlayer_PerFriendPreferencesChanged_Notification;
class CPlayer_PerFriendPreferencesChanged_NotificationDefaultTypeInternal;
extern CPlayer_PerFriendPreferencesChanged_NotificationDefaultTypeInternal _CPlayer_PerFriendPreferencesChanged_Notification_default_instance_;
class CPlayer_RemoveFriend_Request;
class CPlayer_RemoveFriend_RequestDefaultTypeInternal;
extern CPlayer_RemoveFriend_RequestDefaultTypeInternal _CPlayer_RemoveFriend_Request_default_instance_;
class CPlayer_RemoveFriend_Response;
class CPlayer_RemoveFriend_ResponseDefaultTypeInternal;
extern CPlayer_RemoveFriend_ResponseDefaultTypeInternal _CPlayer_RemoveFriend_Response_default_instance_;
class CPlayer_SetCommunityPreferences_Request;
class CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal;
extern CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_SetCommunityPreferences_Request_default_instance_;
class CPlayer_SetCommunityPreferences_Response;
class CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal;
extern CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_SetCommunityPreferences_Response_default_instance_;
class CPlayer_SetPerFriendPreferences_Request;
class CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal;
extern CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Request_default_instance_;
class CPlayer_SetPerFriendPreferences_Response;
class CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal;
extern CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Response_default_instance_;
class CPlayer_UpdateSteamAnnouncementLastRead_Request;
class CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal;
extern CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_;
class CPlayer_UpdateSteamAnnouncementLastRead_Response;
class CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal;
extern CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_;
class PerFriendPreferences;
class PerFriendPreferencesDefaultTypeInternal;
extern PerFriendPreferencesDefaultTypeInternal _PerFriendPreferences_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CPlayer_AcceptSSA_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_AcceptSSA_Request>(Arena*);
template<> ::proto::steam::CPlayer_AcceptSSA_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_AcceptSSA_Response>(Arena*);
template<> ::proto::steam::CPlayer_AddFriend_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_AddFriend_Request>(Arena*);
template<> ::proto::steam::CPlayer_AddFriend_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_AddFriend_Response>(Arena*);
template<> ::proto::steam::CPlayer_CommunityPreferences* Arena::CreateMaybeMessage<::proto::steam::CPlayer_CommunityPreferences>(Arena*);
template<> ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification* Arena::CreateMaybeMessage<::proto::steam::CPlayer_CommunityPreferencesChanged_Notification>(Arena*);
template<> ::proto::steam::CPlayer_FriendNicknameChanged_Notification* Arena::CreateMaybeMessage<::proto::steam::CPlayer_FriendNicknameChanged_Notification>(Arena*);
template<> ::proto::steam::CPlayer_GetCommunityPreferences_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetCommunityPreferences_Request>(Arena*);
template<> ::proto::steam::CPlayer_GetCommunityPreferences_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetCommunityPreferences_Response>(Arena*);
template<> ::proto::steam::CPlayer_GetGameBadgeLevels_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetGameBadgeLevels_Request>(Arena*);
template<> ::proto::steam::CPlayer_GetGameBadgeLevels_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetGameBadgeLevels_Response>(Arena*);
template<> ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge>(Arena*);
template<> ::proto::steam::CPlayer_GetLastPlayedTimes_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetLastPlayedTimes_Request>(Arena*);
template<> ::proto::steam::CPlayer_GetLastPlayedTimes_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetLastPlayedTimes_Response>(Arena*);
template<> ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game>(Arena*);
template<> ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request>(Arena*);
template<> ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response>(Arena*);
template<> ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request>(Arena*);
template<> ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response>(Arena*);
template<> ::proto::steam::CPlayer_GetNicknameList_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetNicknameList_Request>(Arena*);
template<> ::proto::steam::CPlayer_GetNicknameList_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetNicknameList_Response>(Arena*);
template<> ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname>(Arena*);
template<> ::proto::steam::CPlayer_GetPerFriendPreferences_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetPerFriendPreferences_Request>(Arena*);
template<> ::proto::steam::CPlayer_GetPerFriendPreferences_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_GetPerFriendPreferences_Response>(Arena*);
template<> ::proto::steam::CPlayer_IgnoreFriend_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_IgnoreFriend_Request>(Arena*);
template<> ::proto::steam::CPlayer_IgnoreFriend_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_IgnoreFriend_Response>(Arena*);
template<> ::proto::steam::CPlayer_IncomingInviteMutualFriendList* Arena::CreateMaybeMessage<::proto::steam::CPlayer_IncomingInviteMutualFriendList>(Arena*);
template<> ::proto::steam::CPlayer_LastPlayedTimes_Notification* Arena::CreateMaybeMessage<::proto::steam::CPlayer_LastPlayedTimes_Notification>(Arena*);
template<> ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification* Arena::CreateMaybeMessage<::proto::steam::CPlayer_NewSteamAnnouncementState_Notification>(Arena*);
template<> ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification* Arena::CreateMaybeMessage<::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification>(Arena*);
template<> ::proto::steam::CPlayer_RemoveFriend_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_RemoveFriend_Request>(Arena*);
template<> ::proto::steam::CPlayer_RemoveFriend_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_RemoveFriend_Response>(Arena*);
template<> ::proto::steam::CPlayer_SetCommunityPreferences_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_SetCommunityPreferences_Request>(Arena*);
template<> ::proto::steam::CPlayer_SetCommunityPreferences_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_SetCommunityPreferences_Response>(Arena*);
template<> ::proto::steam::CPlayer_SetPerFriendPreferences_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_SetPerFriendPreferences_Request>(Arena*);
template<> ::proto::steam::CPlayer_SetPerFriendPreferences_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_SetPerFriendPreferences_Response>(Arena*);
template<> ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request* Arena::CreateMaybeMessage<::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request>(Arena*);
template<> ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response* Arena::CreateMaybeMessage<::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response>(Arena*);
template<> ::proto::steam::PerFriendPreferences* Arena::CreateMaybeMessage<::proto::steam::PerFriendPreferences>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

enum ENotificationSetting {
  k_ENotificationSettingNotifyUseDefault = 0,
  k_ENotificationSettingAlways = 1,
  k_ENotificationSettingNever = 2
};
bool ENotificationSetting_IsValid(int value);
const ENotificationSetting ENotificationSetting_MIN = k_ENotificationSettingNotifyUseDefault;
const ENotificationSetting ENotificationSetting_MAX = k_ENotificationSettingNever;
const int ENotificationSetting_ARRAYSIZE = ENotificationSetting_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENotificationSetting_descriptor();
inline const ::std::string& ENotificationSetting_Name(ENotificationSetting value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENotificationSetting_descriptor(), value);
}
inline bool ENotificationSetting_Parse(
    const ::std::string& name, ENotificationSetting* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENotificationSetting>(
    ENotificationSetting_descriptor(), name, value);
}
// ===================================================================

class CPlayer_GetMutualFriendsForIncomingInvites_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request) */ {
 public:
  CPlayer_GetMutualFriendsForIncomingInvites_Request();
  virtual ~CPlayer_GetMutualFriendsForIncomingInvites_Request();

  CPlayer_GetMutualFriendsForIncomingInvites_Request(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from);

  inline CPlayer_GetMutualFriendsForIncomingInvites_Request& operator=(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetMutualFriendsForIncomingInvites_Request(CPlayer_GetMutualFriendsForIncomingInvites_Request&& from) noexcept
    : CPlayer_GetMutualFriendsForIncomingInvites_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetMutualFriendsForIncomingInvites_Request& operator=(CPlayer_GetMutualFriendsForIncomingInvites_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetMutualFriendsForIncomingInvites_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetMutualFriendsForIncomingInvites_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetMutualFriendsForIncomingInvites_Request*>(
               &_CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CPlayer_GetMutualFriendsForIncomingInvites_Request* other);
  friend void swap(CPlayer_GetMutualFriendsForIncomingInvites_Request& a, CPlayer_GetMutualFriendsForIncomingInvites_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetMutualFriendsForIncomingInvites_Request* New() const final {
    return CreateMaybeMessage<CPlayer_GetMutualFriendsForIncomingInvites_Request>(nullptr);
  }

  CPlayer_GetMutualFriendsForIncomingInvites_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetMutualFriendsForIncomingInvites_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from);
  void MergeFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetMutualFriendsForIncomingInvites_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_IncomingInviteMutualFriendList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_IncomingInviteMutualFriendList) */ {
 public:
  CPlayer_IncomingInviteMutualFriendList();
  virtual ~CPlayer_IncomingInviteMutualFriendList();

  CPlayer_IncomingInviteMutualFriendList(const CPlayer_IncomingInviteMutualFriendList& from);

  inline CPlayer_IncomingInviteMutualFriendList& operator=(const CPlayer_IncomingInviteMutualFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_IncomingInviteMutualFriendList(CPlayer_IncomingInviteMutualFriendList&& from) noexcept
    : CPlayer_IncomingInviteMutualFriendList() {
    *this = ::std::move(from);
  }

  inline CPlayer_IncomingInviteMutualFriendList& operator=(CPlayer_IncomingInviteMutualFriendList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_IncomingInviteMutualFriendList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_IncomingInviteMutualFriendList* internal_default_instance() {
    return reinterpret_cast<const CPlayer_IncomingInviteMutualFriendList*>(
               &_CPlayer_IncomingInviteMutualFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CPlayer_IncomingInviteMutualFriendList* other);
  friend void swap(CPlayer_IncomingInviteMutualFriendList& a, CPlayer_IncomingInviteMutualFriendList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_IncomingInviteMutualFriendList* New() const final {
    return CreateMaybeMessage<CPlayer_IncomingInviteMutualFriendList>(nullptr);
  }

  CPlayer_IncomingInviteMutualFriendList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_IncomingInviteMutualFriendList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_IncomingInviteMutualFriendList& from);
  void MergeFrom(const CPlayer_IncomingInviteMutualFriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_IncomingInviteMutualFriendList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 mutual_friend_account_ids = 2;
  int mutual_friend_account_ids_size() const;
  void clear_mutual_friend_account_ids();
  static const int kMutualFriendAccountIdsFieldNumber = 2;
  ::google::protobuf::uint32 mutual_friend_account_ids(int index) const;
  void set_mutual_friend_account_ids(int index, ::google::protobuf::uint32 value);
  void add_mutual_friend_account_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mutual_friend_account_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mutual_friend_account_ids();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_IncomingInviteMutualFriendList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mutual_friend_account_ids_;
  ::google::protobuf::uint64 steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetMutualFriendsForIncomingInvites_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response) */ {
 public:
  CPlayer_GetMutualFriendsForIncomingInvites_Response();
  virtual ~CPlayer_GetMutualFriendsForIncomingInvites_Response();

  CPlayer_GetMutualFriendsForIncomingInvites_Response(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from);

  inline CPlayer_GetMutualFriendsForIncomingInvites_Response& operator=(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetMutualFriendsForIncomingInvites_Response(CPlayer_GetMutualFriendsForIncomingInvites_Response&& from) noexcept
    : CPlayer_GetMutualFriendsForIncomingInvites_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetMutualFriendsForIncomingInvites_Response& operator=(CPlayer_GetMutualFriendsForIncomingInvites_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetMutualFriendsForIncomingInvites_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetMutualFriendsForIncomingInvites_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetMutualFriendsForIncomingInvites_Response*>(
               &_CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other);
  friend void swap(CPlayer_GetMutualFriendsForIncomingInvites_Response& a, CPlayer_GetMutualFriendsForIncomingInvites_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetMutualFriendsForIncomingInvites_Response* New() const final {
    return CreateMaybeMessage<CPlayer_GetMutualFriendsForIncomingInvites_Response>(nullptr);
  }

  CPlayer_GetMutualFriendsForIncomingInvites_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetMutualFriendsForIncomingInvites_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from);
  void MergeFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  int incoming_invite_mutual_friends_lists_size() const;
  void clear_incoming_invite_mutual_friends_lists();
  static const int kIncomingInviteMutualFriendsListsFieldNumber = 1;
  ::proto::steam::CPlayer_IncomingInviteMutualFriendList* mutable_incoming_invite_mutual_friends_lists(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_IncomingInviteMutualFriendList >*
      mutable_incoming_invite_mutual_friends_lists();
  const ::proto::steam::CPlayer_IncomingInviteMutualFriendList& incoming_invite_mutual_friends_lists(int index) const;
  ::proto::steam::CPlayer_IncomingInviteMutualFriendList* add_incoming_invite_mutual_friends_lists();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_IncomingInviteMutualFriendList >&
      incoming_invite_mutual_friends_lists() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_IncomingInviteMutualFriendList > incoming_invite_mutual_friends_lists_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetGameBadgeLevels_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetGameBadgeLevels_Request) */ {
 public:
  CPlayer_GetGameBadgeLevels_Request();
  virtual ~CPlayer_GetGameBadgeLevels_Request();

  CPlayer_GetGameBadgeLevels_Request(const CPlayer_GetGameBadgeLevels_Request& from);

  inline CPlayer_GetGameBadgeLevels_Request& operator=(const CPlayer_GetGameBadgeLevels_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetGameBadgeLevels_Request(CPlayer_GetGameBadgeLevels_Request&& from) noexcept
    : CPlayer_GetGameBadgeLevels_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetGameBadgeLevels_Request& operator=(CPlayer_GetGameBadgeLevels_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetGameBadgeLevels_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetGameBadgeLevels_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameBadgeLevels_Request*>(
               &_CPlayer_GetGameBadgeLevels_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CPlayer_GetGameBadgeLevels_Request* other);
  friend void swap(CPlayer_GetGameBadgeLevels_Request& a, CPlayer_GetGameBadgeLevels_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetGameBadgeLevels_Request* New() const final {
    return CreateMaybeMessage<CPlayer_GetGameBadgeLevels_Request>(nullptr);
  }

  CPlayer_GetGameBadgeLevels_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetGameBadgeLevels_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetGameBadgeLevels_Request& from);
  void MergeFrom(const CPlayer_GetGameBadgeLevels_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetGameBadgeLevels_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetGameBadgeLevels_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetGameBadgeLevels_Response_Badge final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge) */ {
 public:
  CPlayer_GetGameBadgeLevels_Response_Badge();
  virtual ~CPlayer_GetGameBadgeLevels_Response_Badge();

  CPlayer_GetGameBadgeLevels_Response_Badge(const CPlayer_GetGameBadgeLevels_Response_Badge& from);

  inline CPlayer_GetGameBadgeLevels_Response_Badge& operator=(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetGameBadgeLevels_Response_Badge(CPlayer_GetGameBadgeLevels_Response_Badge&& from) noexcept
    : CPlayer_GetGameBadgeLevels_Response_Badge() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetGameBadgeLevels_Response_Badge& operator=(CPlayer_GetGameBadgeLevels_Response_Badge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetGameBadgeLevels_Response_Badge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetGameBadgeLevels_Response_Badge* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameBadgeLevels_Response_Badge*>(
               &_CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CPlayer_GetGameBadgeLevels_Response_Badge* other);
  friend void swap(CPlayer_GetGameBadgeLevels_Response_Badge& a, CPlayer_GetGameBadgeLevels_Response_Badge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetGameBadgeLevels_Response_Badge* New() const final {
    return CreateMaybeMessage<CPlayer_GetGameBadgeLevels_Response_Badge>(nullptr);
  }

  CPlayer_GetGameBadgeLevels_Response_Badge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetGameBadgeLevels_Response_Badge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from);
  void MergeFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetGameBadgeLevels_Response_Badge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 series = 2;
  bool has_series() const;
  void clear_series();
  static const int kSeriesFieldNumber = 2;
  ::google::protobuf::int32 series() const;
  void set_series(::google::protobuf::int32 value);

  // optional uint32 border_color = 3;
  bool has_border_color() const;
  void clear_border_color();
  static const int kBorderColorFieldNumber = 3;
  ::google::protobuf::uint32 border_color() const;
  void set_border_color(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 series_;
  ::google::protobuf::uint32 border_color_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetGameBadgeLevels_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetGameBadgeLevels_Response) */ {
 public:
  CPlayer_GetGameBadgeLevels_Response();
  virtual ~CPlayer_GetGameBadgeLevels_Response();

  CPlayer_GetGameBadgeLevels_Response(const CPlayer_GetGameBadgeLevels_Response& from);

  inline CPlayer_GetGameBadgeLevels_Response& operator=(const CPlayer_GetGameBadgeLevels_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetGameBadgeLevels_Response(CPlayer_GetGameBadgeLevels_Response&& from) noexcept
    : CPlayer_GetGameBadgeLevels_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetGameBadgeLevels_Response& operator=(CPlayer_GetGameBadgeLevels_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetGameBadgeLevels_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetGameBadgeLevels_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameBadgeLevels_Response*>(
               &_CPlayer_GetGameBadgeLevels_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CPlayer_GetGameBadgeLevels_Response* other);
  friend void swap(CPlayer_GetGameBadgeLevels_Response& a, CPlayer_GetGameBadgeLevels_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetGameBadgeLevels_Response* New() const final {
    return CreateMaybeMessage<CPlayer_GetGameBadgeLevels_Response>(nullptr);
  }

  CPlayer_GetGameBadgeLevels_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetGameBadgeLevels_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetGameBadgeLevels_Response& from);
  void MergeFrom(const CPlayer_GetGameBadgeLevels_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetGameBadgeLevels_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetGameBadgeLevels_Response_Badge Badge;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  int badges_size() const;
  void clear_badges();
  static const int kBadgesFieldNumber = 2;
  ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* mutable_badges(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >*
      mutable_badges();
  const ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge& badges(int index) const;
  ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* add_badges();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >&
      badges() const;

  // optional uint32 player_level = 1;
  bool has_player_level() const;
  void clear_player_level();
  static const int kPlayerLevelFieldNumber = 1;
  ::google::protobuf::uint32 player_level() const;
  void set_player_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetGameBadgeLevels_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge > badges_;
  ::google::protobuf::uint32 player_level_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetLastPlayedTimes_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetLastPlayedTimes_Request) */ {
 public:
  CPlayer_GetLastPlayedTimes_Request();
  virtual ~CPlayer_GetLastPlayedTimes_Request();

  CPlayer_GetLastPlayedTimes_Request(const CPlayer_GetLastPlayedTimes_Request& from);

  inline CPlayer_GetLastPlayedTimes_Request& operator=(const CPlayer_GetLastPlayedTimes_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetLastPlayedTimes_Request(CPlayer_GetLastPlayedTimes_Request&& from) noexcept
    : CPlayer_GetLastPlayedTimes_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetLastPlayedTimes_Request& operator=(CPlayer_GetLastPlayedTimes_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetLastPlayedTimes_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetLastPlayedTimes_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetLastPlayedTimes_Request*>(
               &_CPlayer_GetLastPlayedTimes_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CPlayer_GetLastPlayedTimes_Request* other);
  friend void swap(CPlayer_GetLastPlayedTimes_Request& a, CPlayer_GetLastPlayedTimes_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetLastPlayedTimes_Request* New() const final {
    return CreateMaybeMessage<CPlayer_GetLastPlayedTimes_Request>(nullptr);
  }

  CPlayer_GetLastPlayedTimes_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetLastPlayedTimes_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetLastPlayedTimes_Request& from);
  void MergeFrom(const CPlayer_GetLastPlayedTimes_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetLastPlayedTimes_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
  bool has_min_last_played() const;
  void clear_min_last_played();
  static const int kMinLastPlayedFieldNumber = 1;
  ::google::protobuf::uint32 min_last_played() const;
  void set_min_last_played(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetLastPlayedTimes_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 min_last_played_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetLastPlayedTimes_Response_Game final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game) */ {
 public:
  CPlayer_GetLastPlayedTimes_Response_Game();
  virtual ~CPlayer_GetLastPlayedTimes_Response_Game();

  CPlayer_GetLastPlayedTimes_Response_Game(const CPlayer_GetLastPlayedTimes_Response_Game& from);

  inline CPlayer_GetLastPlayedTimes_Response_Game& operator=(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetLastPlayedTimes_Response_Game(CPlayer_GetLastPlayedTimes_Response_Game&& from) noexcept
    : CPlayer_GetLastPlayedTimes_Response_Game() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetLastPlayedTimes_Response_Game& operator=(CPlayer_GetLastPlayedTimes_Response_Game&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetLastPlayedTimes_Response_Game& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetLastPlayedTimes_Response_Game* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetLastPlayedTimes_Response_Game*>(
               &_CPlayer_GetLastPlayedTimes_Response_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CPlayer_GetLastPlayedTimes_Response_Game* other);
  friend void swap(CPlayer_GetLastPlayedTimes_Response_Game& a, CPlayer_GetLastPlayedTimes_Response_Game& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetLastPlayedTimes_Response_Game* New() const final {
    return CreateMaybeMessage<CPlayer_GetLastPlayedTimes_Response_Game>(nullptr);
  }

  CPlayer_GetLastPlayedTimes_Response_Game* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetLastPlayedTimes_Response_Game>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from);
  void MergeFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetLastPlayedTimes_Response_Game* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::int32 appid() const;
  void set_appid(::google::protobuf::int32 value);

  // optional uint32 last_playtime = 2;
  bool has_last_playtime() const;
  void clear_last_playtime();
  static const int kLastPlaytimeFieldNumber = 2;
  ::google::protobuf::uint32 last_playtime() const;
  void set_last_playtime(::google::protobuf::uint32 value);

  // optional int32 playtime_2weeks = 3;
  bool has_playtime_2weeks() const;
  void clear_playtime_2weeks();
  static const int kPlaytime2WeeksFieldNumber = 3;
  ::google::protobuf::int32 playtime_2weeks() const;
  void set_playtime_2weeks(::google::protobuf::int32 value);

  // optional int32 playtime_forever = 4;
  bool has_playtime_forever() const;
  void clear_playtime_forever();
  static const int kPlaytimeForeverFieldNumber = 4;
  ::google::protobuf::int32 playtime_forever() const;
  void set_playtime_forever(::google::protobuf::int32 value);

  // optional uint32 first_playtime = 5;
  bool has_first_playtime() const;
  void clear_first_playtime();
  static const int kFirstPlaytimeFieldNumber = 5;
  ::google::protobuf::uint32 first_playtime() const;
  void set_first_playtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 appid_;
  ::google::protobuf::uint32 last_playtime_;
  ::google::protobuf::int32 playtime_2weeks_;
  ::google::protobuf::int32 playtime_forever_;
  ::google::protobuf::uint32 first_playtime_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetLastPlayedTimes_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetLastPlayedTimes_Response) */ {
 public:
  CPlayer_GetLastPlayedTimes_Response();
  virtual ~CPlayer_GetLastPlayedTimes_Response();

  CPlayer_GetLastPlayedTimes_Response(const CPlayer_GetLastPlayedTimes_Response& from);

  inline CPlayer_GetLastPlayedTimes_Response& operator=(const CPlayer_GetLastPlayedTimes_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetLastPlayedTimes_Response(CPlayer_GetLastPlayedTimes_Response&& from) noexcept
    : CPlayer_GetLastPlayedTimes_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetLastPlayedTimes_Response& operator=(CPlayer_GetLastPlayedTimes_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetLastPlayedTimes_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetLastPlayedTimes_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetLastPlayedTimes_Response*>(
               &_CPlayer_GetLastPlayedTimes_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CPlayer_GetLastPlayedTimes_Response* other);
  friend void swap(CPlayer_GetLastPlayedTimes_Response& a, CPlayer_GetLastPlayedTimes_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetLastPlayedTimes_Response* New() const final {
    return CreateMaybeMessage<CPlayer_GetLastPlayedTimes_Response>(nullptr);
  }

  CPlayer_GetLastPlayedTimes_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetLastPlayedTimes_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetLastPlayedTimes_Response& from);
  void MergeFrom(const CPlayer_GetLastPlayedTimes_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetLastPlayedTimes_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetLastPlayedTimes_Response_Game Game;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  int games_size() const;
  void clear_games();
  static const int kGamesFieldNumber = 1;
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* mutable_games(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
      mutable_games();
  const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& games(int index) const;
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* add_games();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetLastPlayedTimes_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game > games_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_AcceptSSA_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_AcceptSSA_Request) */ {
 public:
  CPlayer_AcceptSSA_Request();
  virtual ~CPlayer_AcceptSSA_Request();

  CPlayer_AcceptSSA_Request(const CPlayer_AcceptSSA_Request& from);

  inline CPlayer_AcceptSSA_Request& operator=(const CPlayer_AcceptSSA_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_AcceptSSA_Request(CPlayer_AcceptSSA_Request&& from) noexcept
    : CPlayer_AcceptSSA_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_AcceptSSA_Request& operator=(CPlayer_AcceptSSA_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_AcceptSSA_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_AcceptSSA_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AcceptSSA_Request*>(
               &_CPlayer_AcceptSSA_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CPlayer_AcceptSSA_Request* other);
  friend void swap(CPlayer_AcceptSSA_Request& a, CPlayer_AcceptSSA_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_AcceptSSA_Request* New() const final {
    return CreateMaybeMessage<CPlayer_AcceptSSA_Request>(nullptr);
  }

  CPlayer_AcceptSSA_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_AcceptSSA_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_AcceptSSA_Request& from);
  void MergeFrom(const CPlayer_AcceptSSA_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_AcceptSSA_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_AcceptSSA_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_AcceptSSA_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_AcceptSSA_Response) */ {
 public:
  CPlayer_AcceptSSA_Response();
  virtual ~CPlayer_AcceptSSA_Response();

  CPlayer_AcceptSSA_Response(const CPlayer_AcceptSSA_Response& from);

  inline CPlayer_AcceptSSA_Response& operator=(const CPlayer_AcceptSSA_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_AcceptSSA_Response(CPlayer_AcceptSSA_Response&& from) noexcept
    : CPlayer_AcceptSSA_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_AcceptSSA_Response& operator=(CPlayer_AcceptSSA_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_AcceptSSA_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_AcceptSSA_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AcceptSSA_Response*>(
               &_CPlayer_AcceptSSA_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CPlayer_AcceptSSA_Response* other);
  friend void swap(CPlayer_AcceptSSA_Response& a, CPlayer_AcceptSSA_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_AcceptSSA_Response* New() const final {
    return CreateMaybeMessage<CPlayer_AcceptSSA_Response>(nullptr);
  }

  CPlayer_AcceptSSA_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_AcceptSSA_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_AcceptSSA_Response& from);
  void MergeFrom(const CPlayer_AcceptSSA_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_AcceptSSA_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_AcceptSSA_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNicknameList_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetNicknameList_Request) */ {
 public:
  CPlayer_GetNicknameList_Request();
  virtual ~CPlayer_GetNicknameList_Request();

  CPlayer_GetNicknameList_Request(const CPlayer_GetNicknameList_Request& from);

  inline CPlayer_GetNicknameList_Request& operator=(const CPlayer_GetNicknameList_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetNicknameList_Request(CPlayer_GetNicknameList_Request&& from) noexcept
    : CPlayer_GetNicknameList_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNicknameList_Request& operator=(CPlayer_GetNicknameList_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetNicknameList_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetNicknameList_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNicknameList_Request*>(
               &_CPlayer_GetNicknameList_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CPlayer_GetNicknameList_Request* other);
  friend void swap(CPlayer_GetNicknameList_Request& a, CPlayer_GetNicknameList_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetNicknameList_Request* New() const final {
    return CreateMaybeMessage<CPlayer_GetNicknameList_Request>(nullptr);
  }

  CPlayer_GetNicknameList_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetNicknameList_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetNicknameList_Request& from);
  void MergeFrom(const CPlayer_GetNicknameList_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetNicknameList_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetNicknameList_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNicknameList_Response_PlayerNickname final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname) */ {
 public:
  CPlayer_GetNicknameList_Response_PlayerNickname();
  virtual ~CPlayer_GetNicknameList_Response_PlayerNickname();

  CPlayer_GetNicknameList_Response_PlayerNickname(const CPlayer_GetNicknameList_Response_PlayerNickname& from);

  inline CPlayer_GetNicknameList_Response_PlayerNickname& operator=(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetNicknameList_Response_PlayerNickname(CPlayer_GetNicknameList_Response_PlayerNickname&& from) noexcept
    : CPlayer_GetNicknameList_Response_PlayerNickname() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNicknameList_Response_PlayerNickname& operator=(CPlayer_GetNicknameList_Response_PlayerNickname&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetNicknameList_Response_PlayerNickname& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetNicknameList_Response_PlayerNickname* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNicknameList_Response_PlayerNickname*>(
               &_CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CPlayer_GetNicknameList_Response_PlayerNickname* other);
  friend void swap(CPlayer_GetNicknameList_Response_PlayerNickname& a, CPlayer_GetNicknameList_Response_PlayerNickname& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetNicknameList_Response_PlayerNickname* New() const final {
    return CreateMaybeMessage<CPlayer_GetNicknameList_Response_PlayerNickname>(nullptr);
  }

  CPlayer_GetNicknameList_Response_PlayerNickname* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetNicknameList_Response_PlayerNickname>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from);
  void MergeFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetNicknameList_Response_PlayerNickname* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::uint32 accountid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNicknameList_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetNicknameList_Response) */ {
 public:
  CPlayer_GetNicknameList_Response();
  virtual ~CPlayer_GetNicknameList_Response();

  CPlayer_GetNicknameList_Response(const CPlayer_GetNicknameList_Response& from);

  inline CPlayer_GetNicknameList_Response& operator=(const CPlayer_GetNicknameList_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetNicknameList_Response(CPlayer_GetNicknameList_Response&& from) noexcept
    : CPlayer_GetNicknameList_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNicknameList_Response& operator=(CPlayer_GetNicknameList_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetNicknameList_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetNicknameList_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNicknameList_Response*>(
               &_CPlayer_GetNicknameList_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CPlayer_GetNicknameList_Response* other);
  friend void swap(CPlayer_GetNicknameList_Response& a, CPlayer_GetNicknameList_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetNicknameList_Response* New() const final {
    return CreateMaybeMessage<CPlayer_GetNicknameList_Response>(nullptr);
  }

  CPlayer_GetNicknameList_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetNicknameList_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetNicknameList_Response& from);
  void MergeFrom(const CPlayer_GetNicknameList_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetNicknameList_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetNicknameList_Response_PlayerNickname PlayerNickname;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  int nicknames_size() const;
  void clear_nicknames();
  static const int kNicknamesFieldNumber = 1;
  ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* mutable_nicknames(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >*
      mutable_nicknames();
  const ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname& nicknames(int index) const;
  ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* add_nicknames();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >&
      nicknames() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetNicknameList_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname > nicknames_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPerFriendPreferences_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetPerFriendPreferences_Request) */ {
 public:
  CPlayer_GetPerFriendPreferences_Request();
  virtual ~CPlayer_GetPerFriendPreferences_Request();

  CPlayer_GetPerFriendPreferences_Request(const CPlayer_GetPerFriendPreferences_Request& from);

  inline CPlayer_GetPerFriendPreferences_Request& operator=(const CPlayer_GetPerFriendPreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetPerFriendPreferences_Request(CPlayer_GetPerFriendPreferences_Request&& from) noexcept
    : CPlayer_GetPerFriendPreferences_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPerFriendPreferences_Request& operator=(CPlayer_GetPerFriendPreferences_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetPerFriendPreferences_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetPerFriendPreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPerFriendPreferences_Request*>(
               &_CPlayer_GetPerFriendPreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CPlayer_GetPerFriendPreferences_Request* other);
  friend void swap(CPlayer_GetPerFriendPreferences_Request& a, CPlayer_GetPerFriendPreferences_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetPerFriendPreferences_Request* New() const final {
    return CreateMaybeMessage<CPlayer_GetPerFriendPreferences_Request>(nullptr);
  }

  CPlayer_GetPerFriendPreferences_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetPerFriendPreferences_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetPerFriendPreferences_Request& from);
  void MergeFrom(const CPlayer_GetPerFriendPreferences_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPerFriendPreferences_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetPerFriendPreferences_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PerFriendPreferences final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.PerFriendPreferences) */ {
 public:
  PerFriendPreferences();
  virtual ~PerFriendPreferences();

  PerFriendPreferences(const PerFriendPreferences& from);

  inline PerFriendPreferences& operator=(const PerFriendPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerFriendPreferences(PerFriendPreferences&& from) noexcept
    : PerFriendPreferences() {
    *this = ::std::move(from);
  }

  inline PerFriendPreferences& operator=(PerFriendPreferences&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PerFriendPreferences& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerFriendPreferences* internal_default_instance() {
    return reinterpret_cast<const PerFriendPreferences*>(
               &_PerFriendPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(PerFriendPreferences* other);
  friend void swap(PerFriendPreferences& a, PerFriendPreferences& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerFriendPreferences* New() const final {
    return CreateMaybeMessage<PerFriendPreferences>(nullptr);
  }

  PerFriendPreferences* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerFriendPreferences>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerFriendPreferences& from);
  void MergeFrom(const PerFriendPreferences& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerFriendPreferences* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // optional .proto.steam.ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_notifications_showingame() const;
  void clear_notifications_showingame();
  static const int kNotificationsShowingameFieldNumber = 3;
  ::proto::steam::ENotificationSetting notifications_showingame() const;
  void set_notifications_showingame(::proto::steam::ENotificationSetting value);

  // optional .proto.steam.ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_notifications_showonline() const;
  void clear_notifications_showonline();
  static const int kNotificationsShowonlineFieldNumber = 4;
  ::proto::steam::ENotificationSetting notifications_showonline() const;
  void set_notifications_showonline(::proto::steam::ENotificationSetting value);

  // optional .proto.steam.ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_notifications_showmessages() const;
  void clear_notifications_showmessages();
  static const int kNotificationsShowmessagesFieldNumber = 5;
  ::proto::steam::ENotificationSetting notifications_showmessages() const;
  void set_notifications_showmessages(::proto::steam::ENotificationSetting value);

  // optional .proto.steam.ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_sounds_showingame() const;
  void clear_sounds_showingame();
  static const int kSoundsShowingameFieldNumber = 6;
  ::proto::steam::ENotificationSetting sounds_showingame() const;
  void set_sounds_showingame(::proto::steam::ENotificationSetting value);

  // optional .proto.steam.ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_sounds_showonline() const;
  void clear_sounds_showonline();
  static const int kSoundsShowonlineFieldNumber = 7;
  ::proto::steam::ENotificationSetting sounds_showonline() const;
  void set_sounds_showonline(::proto::steam::ENotificationSetting value);

  // optional .proto.steam.ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
  bool has_sounds_showmessages() const;
  void clear_sounds_showmessages();
  static const int kSoundsShowmessagesFieldNumber = 8;
  ::proto::steam::ENotificationSetting sounds_showmessages() const;
  void set_sounds_showmessages(::proto::steam::ENotificationSetting value);

  // @@protoc_insertion_point(class_scope:proto.steam.PerFriendPreferences)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::uint32 accountid_;
  int notifications_showingame_;
  int notifications_showonline_;
  int notifications_showmessages_;
  int sounds_showingame_;
  int sounds_showonline_;
  int sounds_showmessages_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetPerFriendPreferences_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetPerFriendPreferences_Response) */ {
 public:
  CPlayer_GetPerFriendPreferences_Response();
  virtual ~CPlayer_GetPerFriendPreferences_Response();

  CPlayer_GetPerFriendPreferences_Response(const CPlayer_GetPerFriendPreferences_Response& from);

  inline CPlayer_GetPerFriendPreferences_Response& operator=(const CPlayer_GetPerFriendPreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetPerFriendPreferences_Response(CPlayer_GetPerFriendPreferences_Response&& from) noexcept
    : CPlayer_GetPerFriendPreferences_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetPerFriendPreferences_Response& operator=(CPlayer_GetPerFriendPreferences_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetPerFriendPreferences_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetPerFriendPreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetPerFriendPreferences_Response*>(
               &_CPlayer_GetPerFriendPreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CPlayer_GetPerFriendPreferences_Response* other);
  friend void swap(CPlayer_GetPerFriendPreferences_Response& a, CPlayer_GetPerFriendPreferences_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetPerFriendPreferences_Response* New() const final {
    return CreateMaybeMessage<CPlayer_GetPerFriendPreferences_Response>(nullptr);
  }

  CPlayer_GetPerFriendPreferences_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetPerFriendPreferences_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetPerFriendPreferences_Response& from);
  void MergeFrom(const CPlayer_GetPerFriendPreferences_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetPerFriendPreferences_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.PerFriendPreferences preferences = 1;
  int preferences_size() const;
  void clear_preferences();
  static const int kPreferencesFieldNumber = 1;
  ::proto::steam::PerFriendPreferences* mutable_preferences(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::PerFriendPreferences >*
      mutable_preferences();
  const ::proto::steam::PerFriendPreferences& preferences(int index) const;
  ::proto::steam::PerFriendPreferences* add_preferences();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::PerFriendPreferences >&
      preferences() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetPerFriendPreferences_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::PerFriendPreferences > preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetPerFriendPreferences_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_SetPerFriendPreferences_Request) */ {
 public:
  CPlayer_SetPerFriendPreferences_Request();
  virtual ~CPlayer_SetPerFriendPreferences_Request();

  CPlayer_SetPerFriendPreferences_Request(const CPlayer_SetPerFriendPreferences_Request& from);

  inline CPlayer_SetPerFriendPreferences_Request& operator=(const CPlayer_SetPerFriendPreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_SetPerFriendPreferences_Request(CPlayer_SetPerFriendPreferences_Request&& from) noexcept
    : CPlayer_SetPerFriendPreferences_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetPerFriendPreferences_Request& operator=(CPlayer_SetPerFriendPreferences_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_SetPerFriendPreferences_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_SetPerFriendPreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetPerFriendPreferences_Request*>(
               &_CPlayer_SetPerFriendPreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CPlayer_SetPerFriendPreferences_Request* other);
  friend void swap(CPlayer_SetPerFriendPreferences_Request& a, CPlayer_SetPerFriendPreferences_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_SetPerFriendPreferences_Request* New() const final {
    return CreateMaybeMessage<CPlayer_SetPerFriendPreferences_Request>(nullptr);
  }

  CPlayer_SetPerFriendPreferences_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_SetPerFriendPreferences_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_SetPerFriendPreferences_Request& from);
  void MergeFrom(const CPlayer_SetPerFriendPreferences_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetPerFriendPreferences_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.PerFriendPreferences preferences = 1;
  bool has_preferences() const;
  void clear_preferences();
  static const int kPreferencesFieldNumber = 1;
  const ::proto::steam::PerFriendPreferences& preferences() const;
  ::proto::steam::PerFriendPreferences* release_preferences();
  ::proto::steam::PerFriendPreferences* mutable_preferences();
  void set_allocated_preferences(::proto::steam::PerFriendPreferences* preferences);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_SetPerFriendPreferences_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::PerFriendPreferences* preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetPerFriendPreferences_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_SetPerFriendPreferences_Response) */ {
 public:
  CPlayer_SetPerFriendPreferences_Response();
  virtual ~CPlayer_SetPerFriendPreferences_Response();

  CPlayer_SetPerFriendPreferences_Response(const CPlayer_SetPerFriendPreferences_Response& from);

  inline CPlayer_SetPerFriendPreferences_Response& operator=(const CPlayer_SetPerFriendPreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_SetPerFriendPreferences_Response(CPlayer_SetPerFriendPreferences_Response&& from) noexcept
    : CPlayer_SetPerFriendPreferences_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetPerFriendPreferences_Response& operator=(CPlayer_SetPerFriendPreferences_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_SetPerFriendPreferences_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_SetPerFriendPreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetPerFriendPreferences_Response*>(
               &_CPlayer_SetPerFriendPreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CPlayer_SetPerFriendPreferences_Response* other);
  friend void swap(CPlayer_SetPerFriendPreferences_Response& a, CPlayer_SetPerFriendPreferences_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_SetPerFriendPreferences_Response* New() const final {
    return CreateMaybeMessage<CPlayer_SetPerFriendPreferences_Response>(nullptr);
  }

  CPlayer_SetPerFriendPreferences_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_SetPerFriendPreferences_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_SetPerFriendPreferences_Response& from);
  void MergeFrom(const CPlayer_SetPerFriendPreferences_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetPerFriendPreferences_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_SetPerFriendPreferences_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_AddFriend_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_AddFriend_Request) */ {
 public:
  CPlayer_AddFriend_Request();
  virtual ~CPlayer_AddFriend_Request();

  CPlayer_AddFriend_Request(const CPlayer_AddFriend_Request& from);

  inline CPlayer_AddFriend_Request& operator=(const CPlayer_AddFriend_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_AddFriend_Request(CPlayer_AddFriend_Request&& from) noexcept
    : CPlayer_AddFriend_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_AddFriend_Request& operator=(CPlayer_AddFriend_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_AddFriend_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_AddFriend_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AddFriend_Request*>(
               &_CPlayer_AddFriend_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CPlayer_AddFriend_Request* other);
  friend void swap(CPlayer_AddFriend_Request& a, CPlayer_AddFriend_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_AddFriend_Request* New() const final {
    return CreateMaybeMessage<CPlayer_AddFriend_Request>(nullptr);
  }

  CPlayer_AddFriend_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_AddFriend_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_AddFriend_Request& from);
  void MergeFrom(const CPlayer_AddFriend_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_AddFriend_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of user to whom to send a friend invite."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_AddFriend_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_AddFriend_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_AddFriend_Response) */ {
 public:
  CPlayer_AddFriend_Response();
  virtual ~CPlayer_AddFriend_Response();

  CPlayer_AddFriend_Response(const CPlayer_AddFriend_Response& from);

  inline CPlayer_AddFriend_Response& operator=(const CPlayer_AddFriend_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_AddFriend_Response(CPlayer_AddFriend_Response&& from) noexcept
    : CPlayer_AddFriend_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_AddFriend_Response& operator=(CPlayer_AddFriend_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_AddFriend_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_AddFriend_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AddFriend_Response*>(
               &_CPlayer_AddFriend_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CPlayer_AddFriend_Response* other);
  friend void swap(CPlayer_AddFriend_Response& a, CPlayer_AddFriend_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_AddFriend_Response* New() const final {
    return CreateMaybeMessage<CPlayer_AddFriend_Response>(nullptr);
  }

  CPlayer_AddFriend_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_AddFriend_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_AddFriend_Response& from);
  void MergeFrom(const CPlayer_AddFriend_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_AddFriend_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool invite_sent = 1 [(.proto.steam.description) = "True if the operation was successful, false otherwise."];
  bool has_invite_sent() const;
  void clear_invite_sent();
  static const int kInviteSentFieldNumber = 1;
  bool invite_sent() const;
  void set_invite_sent(bool value);

  // optional uint32 friend_relationship = 2 [(.proto.steam.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
  bool has_friend_relationship() const;
  void clear_friend_relationship();
  static const int kFriendRelationshipFieldNumber = 2;
  ::google::protobuf::uint32 friend_relationship() const;
  void set_friend_relationship(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_AddFriend_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool invite_sent_;
  ::google::protobuf::uint32 friend_relationship_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_RemoveFriend_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_RemoveFriend_Request) */ {
 public:
  CPlayer_RemoveFriend_Request();
  virtual ~CPlayer_RemoveFriend_Request();

  CPlayer_RemoveFriend_Request(const CPlayer_RemoveFriend_Request& from);

  inline CPlayer_RemoveFriend_Request& operator=(const CPlayer_RemoveFriend_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_RemoveFriend_Request(CPlayer_RemoveFriend_Request&& from) noexcept
    : CPlayer_RemoveFriend_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_RemoveFriend_Request& operator=(CPlayer_RemoveFriend_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_RemoveFriend_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_RemoveFriend_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_RemoveFriend_Request*>(
               &_CPlayer_RemoveFriend_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CPlayer_RemoveFriend_Request* other);
  friend void swap(CPlayer_RemoveFriend_Request& a, CPlayer_RemoveFriend_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_RemoveFriend_Request* New() const final {
    return CreateMaybeMessage<CPlayer_RemoveFriend_Request>(nullptr);
  }

  CPlayer_RemoveFriend_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_RemoveFriend_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_RemoveFriend_Request& from);
  void MergeFrom(const CPlayer_RemoveFriend_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_RemoveFriend_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of friend to remove."];
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_RemoveFriend_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_RemoveFriend_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_RemoveFriend_Response) */ {
 public:
  CPlayer_RemoveFriend_Response();
  virtual ~CPlayer_RemoveFriend_Response();

  CPlayer_RemoveFriend_Response(const CPlayer_RemoveFriend_Response& from);

  inline CPlayer_RemoveFriend_Response& operator=(const CPlayer_RemoveFriend_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_RemoveFriend_Response(CPlayer_RemoveFriend_Response&& from) noexcept
    : CPlayer_RemoveFriend_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_RemoveFriend_Response& operator=(CPlayer_RemoveFriend_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_RemoveFriend_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_RemoveFriend_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_RemoveFriend_Response*>(
               &_CPlayer_RemoveFriend_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CPlayer_RemoveFriend_Response* other);
  friend void swap(CPlayer_RemoveFriend_Response& a, CPlayer_RemoveFriend_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_RemoveFriend_Response* New() const final {
    return CreateMaybeMessage<CPlayer_RemoveFriend_Response>(nullptr);
  }

  CPlayer_RemoveFriend_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_RemoveFriend_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_RemoveFriend_Response& from);
  void MergeFrom(const CPlayer_RemoveFriend_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_RemoveFriend_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
  bool has_friend_relationship() const;
  void clear_friend_relationship();
  static const int kFriendRelationshipFieldNumber = 1;
  ::google::protobuf::uint32 friend_relationship() const;
  void set_friend_relationship(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_RemoveFriend_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 friend_relationship_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_IgnoreFriend_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_IgnoreFriend_Request) */ {
 public:
  CPlayer_IgnoreFriend_Request();
  virtual ~CPlayer_IgnoreFriend_Request();

  CPlayer_IgnoreFriend_Request(const CPlayer_IgnoreFriend_Request& from);

  inline CPlayer_IgnoreFriend_Request& operator=(const CPlayer_IgnoreFriend_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_IgnoreFriend_Request(CPlayer_IgnoreFriend_Request&& from) noexcept
    : CPlayer_IgnoreFriend_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_IgnoreFriend_Request& operator=(CPlayer_IgnoreFriend_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_IgnoreFriend_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_IgnoreFriend_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_IgnoreFriend_Request*>(
               &_CPlayer_IgnoreFriend_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CPlayer_IgnoreFriend_Request* other);
  friend void swap(CPlayer_IgnoreFriend_Request& a, CPlayer_IgnoreFriend_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_IgnoreFriend_Request* New() const final {
    return CreateMaybeMessage<CPlayer_IgnoreFriend_Request>(nullptr);
  }

  CPlayer_IgnoreFriend_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_IgnoreFriend_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_IgnoreFriend_Request& from);
  void MergeFrom(const CPlayer_IgnoreFriend_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_IgnoreFriend_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional bool unignore = 2 [(.proto.steam.description) = "If set, remove from ignore/block list instead of adding "];
  bool has_unignore() const;
  void clear_unignore();
  static const int kUnignoreFieldNumber = 2;
  bool unignore() const;
  void set_unignore(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_IgnoreFriend_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steamid_;
  bool unignore_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_IgnoreFriend_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_IgnoreFriend_Response) */ {
 public:
  CPlayer_IgnoreFriend_Response();
  virtual ~CPlayer_IgnoreFriend_Response();

  CPlayer_IgnoreFriend_Response(const CPlayer_IgnoreFriend_Response& from);

  inline CPlayer_IgnoreFriend_Response& operator=(const CPlayer_IgnoreFriend_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_IgnoreFriend_Response(CPlayer_IgnoreFriend_Response&& from) noexcept
    : CPlayer_IgnoreFriend_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_IgnoreFriend_Response& operator=(CPlayer_IgnoreFriend_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_IgnoreFriend_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_IgnoreFriend_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_IgnoreFriend_Response*>(
               &_CPlayer_IgnoreFriend_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CPlayer_IgnoreFriend_Response* other);
  friend void swap(CPlayer_IgnoreFriend_Response& a, CPlayer_IgnoreFriend_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_IgnoreFriend_Response* New() const final {
    return CreateMaybeMessage<CPlayer_IgnoreFriend_Response>(nullptr);
  }

  CPlayer_IgnoreFriend_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_IgnoreFriend_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_IgnoreFriend_Response& from);
  void MergeFrom(const CPlayer_IgnoreFriend_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_IgnoreFriend_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
  bool has_friend_relationship() const;
  void clear_friend_relationship();
  static const int kFriendRelationshipFieldNumber = 1;
  ::google::protobuf::uint32 friend_relationship() const;
  void set_friend_relationship(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_IgnoreFriend_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 friend_relationship_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetCommunityPreferences_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetCommunityPreferences_Request) */ {
 public:
  CPlayer_GetCommunityPreferences_Request();
  virtual ~CPlayer_GetCommunityPreferences_Request();

  CPlayer_GetCommunityPreferences_Request(const CPlayer_GetCommunityPreferences_Request& from);

  inline CPlayer_GetCommunityPreferences_Request& operator=(const CPlayer_GetCommunityPreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetCommunityPreferences_Request(CPlayer_GetCommunityPreferences_Request&& from) noexcept
    : CPlayer_GetCommunityPreferences_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetCommunityPreferences_Request& operator=(CPlayer_GetCommunityPreferences_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetCommunityPreferences_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetCommunityPreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetCommunityPreferences_Request*>(
               &_CPlayer_GetCommunityPreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CPlayer_GetCommunityPreferences_Request* other);
  friend void swap(CPlayer_GetCommunityPreferences_Request& a, CPlayer_GetCommunityPreferences_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetCommunityPreferences_Request* New() const final {
    return CreateMaybeMessage<CPlayer_GetCommunityPreferences_Request>(nullptr);
  }

  CPlayer_GetCommunityPreferences_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetCommunityPreferences_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetCommunityPreferences_Request& from);
  void MergeFrom(const CPlayer_GetCommunityPreferences_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetCommunityPreferences_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetCommunityPreferences_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_CommunityPreferences final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_CommunityPreferences) */ {
 public:
  CPlayer_CommunityPreferences();
  virtual ~CPlayer_CommunityPreferences();

  CPlayer_CommunityPreferences(const CPlayer_CommunityPreferences& from);

  inline CPlayer_CommunityPreferences& operator=(const CPlayer_CommunityPreferences& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_CommunityPreferences(CPlayer_CommunityPreferences&& from) noexcept
    : CPlayer_CommunityPreferences() {
    *this = ::std::move(from);
  }

  inline CPlayer_CommunityPreferences& operator=(CPlayer_CommunityPreferences&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_CommunityPreferences& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_CommunityPreferences* internal_default_instance() {
    return reinterpret_cast<const CPlayer_CommunityPreferences*>(
               &_CPlayer_CommunityPreferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CPlayer_CommunityPreferences* other);
  friend void swap(CPlayer_CommunityPreferences& a, CPlayer_CommunityPreferences& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_CommunityPreferences* New() const final {
    return CreateMaybeMessage<CPlayer_CommunityPreferences>(nullptr);
  }

  CPlayer_CommunityPreferences* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_CommunityPreferences>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_CommunityPreferences& from);
  void MergeFrom(const CPlayer_CommunityPreferences& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_CommunityPreferences* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 timestamp_updated = 3;
  bool has_timestamp_updated() const;
  void clear_timestamp_updated();
  static const int kTimestampUpdatedFieldNumber = 3;
  ::google::protobuf::uint32 timestamp_updated() const;
  void set_timestamp_updated(::google::protobuf::uint32 value);

  // optional bool parenthesize_nicknames = 4 [default = false];
  bool has_parenthesize_nicknames() const;
  void clear_parenthesize_nicknames();
  static const int kParenthesizeNicknamesFieldNumber = 4;
  bool parenthesize_nicknames() const;
  void set_parenthesize_nicknames(bool value);

  // optional bool hide_adult_content_violence = 1 [default = true];
  bool has_hide_adult_content_violence() const;
  void clear_hide_adult_content_violence();
  static const int kHideAdultContentViolenceFieldNumber = 1;
  bool hide_adult_content_violence() const;
  void set_hide_adult_content_violence(bool value);

  // optional bool hide_adult_content_sex = 2 [default = true];
  bool has_hide_adult_content_sex() const;
  void clear_hide_adult_content_sex();
  static const int kHideAdultContentSexFieldNumber = 2;
  bool hide_adult_content_sex() const;
  void set_hide_adult_content_sex(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_CommunityPreferences)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 timestamp_updated_;
  bool parenthesize_nicknames_;
  bool hide_adult_content_violence_;
  bool hide_adult_content_sex_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetCommunityPreferences_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetCommunityPreferences_Response) */ {
 public:
  CPlayer_GetCommunityPreferences_Response();
  virtual ~CPlayer_GetCommunityPreferences_Response();

  CPlayer_GetCommunityPreferences_Response(const CPlayer_GetCommunityPreferences_Response& from);

  inline CPlayer_GetCommunityPreferences_Response& operator=(const CPlayer_GetCommunityPreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetCommunityPreferences_Response(CPlayer_GetCommunityPreferences_Response&& from) noexcept
    : CPlayer_GetCommunityPreferences_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetCommunityPreferences_Response& operator=(CPlayer_GetCommunityPreferences_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetCommunityPreferences_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetCommunityPreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetCommunityPreferences_Response*>(
               &_CPlayer_GetCommunityPreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CPlayer_GetCommunityPreferences_Response* other);
  friend void swap(CPlayer_GetCommunityPreferences_Response& a, CPlayer_GetCommunityPreferences_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetCommunityPreferences_Response* New() const final {
    return CreateMaybeMessage<CPlayer_GetCommunityPreferences_Response>(nullptr);
  }

  CPlayer_GetCommunityPreferences_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetCommunityPreferences_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetCommunityPreferences_Response& from);
  void MergeFrom(const CPlayer_GetCommunityPreferences_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetCommunityPreferences_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  bool has_preferences() const;
  void clear_preferences();
  static const int kPreferencesFieldNumber = 1;
  const ::proto::steam::CPlayer_CommunityPreferences& preferences() const;
  ::proto::steam::CPlayer_CommunityPreferences* release_preferences();
  ::proto::steam::CPlayer_CommunityPreferences* mutable_preferences();
  void set_allocated_preferences(::proto::steam::CPlayer_CommunityPreferences* preferences);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetCommunityPreferences_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CPlayer_CommunityPreferences* preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetCommunityPreferences_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_SetCommunityPreferences_Request) */ {
 public:
  CPlayer_SetCommunityPreferences_Request();
  virtual ~CPlayer_SetCommunityPreferences_Request();

  CPlayer_SetCommunityPreferences_Request(const CPlayer_SetCommunityPreferences_Request& from);

  inline CPlayer_SetCommunityPreferences_Request& operator=(const CPlayer_SetCommunityPreferences_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_SetCommunityPreferences_Request(CPlayer_SetCommunityPreferences_Request&& from) noexcept
    : CPlayer_SetCommunityPreferences_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetCommunityPreferences_Request& operator=(CPlayer_SetCommunityPreferences_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_SetCommunityPreferences_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_SetCommunityPreferences_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetCommunityPreferences_Request*>(
               &_CPlayer_SetCommunityPreferences_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CPlayer_SetCommunityPreferences_Request* other);
  friend void swap(CPlayer_SetCommunityPreferences_Request& a, CPlayer_SetCommunityPreferences_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_SetCommunityPreferences_Request* New() const final {
    return CreateMaybeMessage<CPlayer_SetCommunityPreferences_Request>(nullptr);
  }

  CPlayer_SetCommunityPreferences_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_SetCommunityPreferences_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_SetCommunityPreferences_Request& from);
  void MergeFrom(const CPlayer_SetCommunityPreferences_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetCommunityPreferences_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  bool has_preferences() const;
  void clear_preferences();
  static const int kPreferencesFieldNumber = 1;
  const ::proto::steam::CPlayer_CommunityPreferences& preferences() const;
  ::proto::steam::CPlayer_CommunityPreferences* release_preferences();
  ::proto::steam::CPlayer_CommunityPreferences* mutable_preferences();
  void set_allocated_preferences(::proto::steam::CPlayer_CommunityPreferences* preferences);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_SetCommunityPreferences_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CPlayer_CommunityPreferences* preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_SetCommunityPreferences_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_SetCommunityPreferences_Response) */ {
 public:
  CPlayer_SetCommunityPreferences_Response();
  virtual ~CPlayer_SetCommunityPreferences_Response();

  CPlayer_SetCommunityPreferences_Response(const CPlayer_SetCommunityPreferences_Response& from);

  inline CPlayer_SetCommunityPreferences_Response& operator=(const CPlayer_SetCommunityPreferences_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_SetCommunityPreferences_Response(CPlayer_SetCommunityPreferences_Response&& from) noexcept
    : CPlayer_SetCommunityPreferences_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_SetCommunityPreferences_Response& operator=(CPlayer_SetCommunityPreferences_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_SetCommunityPreferences_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_SetCommunityPreferences_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_SetCommunityPreferences_Response*>(
               &_CPlayer_SetCommunityPreferences_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CPlayer_SetCommunityPreferences_Response* other);
  friend void swap(CPlayer_SetCommunityPreferences_Response& a, CPlayer_SetCommunityPreferences_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_SetCommunityPreferences_Response* New() const final {
    return CreateMaybeMessage<CPlayer_SetCommunityPreferences_Response>(nullptr);
  }

  CPlayer_SetCommunityPreferences_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_SetCommunityPreferences_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_SetCommunityPreferences_Response& from);
  void MergeFrom(const CPlayer_SetCommunityPreferences_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_SetCommunityPreferences_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_SetCommunityPreferences_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNewSteamAnnouncementState_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request) */ {
 public:
  CPlayer_GetNewSteamAnnouncementState_Request();
  virtual ~CPlayer_GetNewSteamAnnouncementState_Request();

  CPlayer_GetNewSteamAnnouncementState_Request(const CPlayer_GetNewSteamAnnouncementState_Request& from);

  inline CPlayer_GetNewSteamAnnouncementState_Request& operator=(const CPlayer_GetNewSteamAnnouncementState_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetNewSteamAnnouncementState_Request(CPlayer_GetNewSteamAnnouncementState_Request&& from) noexcept
    : CPlayer_GetNewSteamAnnouncementState_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNewSteamAnnouncementState_Request& operator=(CPlayer_GetNewSteamAnnouncementState_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetNewSteamAnnouncementState_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetNewSteamAnnouncementState_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNewSteamAnnouncementState_Request*>(
               &_CPlayer_GetNewSteamAnnouncementState_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(CPlayer_GetNewSteamAnnouncementState_Request* other);
  friend void swap(CPlayer_GetNewSteamAnnouncementState_Request& a, CPlayer_GetNewSteamAnnouncementState_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetNewSteamAnnouncementState_Request* New() const final {
    return CreateMaybeMessage<CPlayer_GetNewSteamAnnouncementState_Request>(nullptr);
  }

  CPlayer_GetNewSteamAnnouncementState_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetNewSteamAnnouncementState_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from);
  void MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetNewSteamAnnouncementState_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 language = 1;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 1;
  ::google::protobuf::int32 language() const;
  void set_language(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 language_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_GetNewSteamAnnouncementState_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response) */ {
 public:
  CPlayer_GetNewSteamAnnouncementState_Response();
  virtual ~CPlayer_GetNewSteamAnnouncementState_Response();

  CPlayer_GetNewSteamAnnouncementState_Response(const CPlayer_GetNewSteamAnnouncementState_Response& from);

  inline CPlayer_GetNewSteamAnnouncementState_Response& operator=(const CPlayer_GetNewSteamAnnouncementState_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_GetNewSteamAnnouncementState_Response(CPlayer_GetNewSteamAnnouncementState_Response&& from) noexcept
    : CPlayer_GetNewSteamAnnouncementState_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_GetNewSteamAnnouncementState_Response& operator=(CPlayer_GetNewSteamAnnouncementState_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_GetNewSteamAnnouncementState_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_GetNewSteamAnnouncementState_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNewSteamAnnouncementState_Response*>(
               &_CPlayer_GetNewSteamAnnouncementState_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CPlayer_GetNewSteamAnnouncementState_Response* other);
  friend void swap(CPlayer_GetNewSteamAnnouncementState_Response& a, CPlayer_GetNewSteamAnnouncementState_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_GetNewSteamAnnouncementState_Response* New() const final {
    return CreateMaybeMessage<CPlayer_GetNewSteamAnnouncementState_Response>(nullptr);
  }

  CPlayer_GetNewSteamAnnouncementState_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_GetNewSteamAnnouncementState_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from);
  void MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_GetNewSteamAnnouncementState_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string announcement_headline = 2;
  bool has_announcement_headline() const;
  void clear_announcement_headline();
  static const int kAnnouncementHeadlineFieldNumber = 2;
  const ::std::string& announcement_headline() const;
  void set_announcement_headline(const ::std::string& value);
  #if LANG_CXX11
  void set_announcement_headline(::std::string&& value);
  #endif
  void set_announcement_headline(const char* value);
  void set_announcement_headline(const char* value, size_t size);
  ::std::string* mutable_announcement_headline();
  ::std::string* release_announcement_headline();
  void set_allocated_announcement_headline(::std::string* announcement_headline);

  // optional string announcement_url = 3;
  bool has_announcement_url() const;
  void clear_announcement_url();
  static const int kAnnouncementUrlFieldNumber = 3;
  const ::std::string& announcement_url() const;
  void set_announcement_url(const ::std::string& value);
  #if LANG_CXX11
  void set_announcement_url(::std::string&& value);
  #endif
  void set_announcement_url(const char* value);
  void set_announcement_url(const char* value, size_t size);
  ::std::string* mutable_announcement_url();
  ::std::string* release_announcement_url();
  void set_allocated_announcement_url(::std::string* announcement_url);

  // optional int32 state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional uint32 time_posted = 4;
  bool has_time_posted() const;
  void clear_time_posted();
  static const int kTimePostedFieldNumber = 4;
  ::google::protobuf::uint32 time_posted() const;
  void set_time_posted(::google::protobuf::uint32 value);

  // optional uint64 announcement_gid = 5;
  bool has_announcement_gid() const;
  void clear_announcement_gid();
  static const int kAnnouncementGidFieldNumber = 5;
  ::google::protobuf::uint64 announcement_gid() const;
  void set_announcement_gid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr announcement_headline_;
  ::google::protobuf::internal::ArenaStringPtr announcement_url_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::uint32 time_posted_;
  ::google::protobuf::uint64 announcement_gid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_UpdateSteamAnnouncementLastRead_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request) */ {
 public:
  CPlayer_UpdateSteamAnnouncementLastRead_Request();
  virtual ~CPlayer_UpdateSteamAnnouncementLastRead_Request();

  CPlayer_UpdateSteamAnnouncementLastRead_Request(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from);

  inline CPlayer_UpdateSteamAnnouncementLastRead_Request& operator=(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_UpdateSteamAnnouncementLastRead_Request(CPlayer_UpdateSteamAnnouncementLastRead_Request&& from) noexcept
    : CPlayer_UpdateSteamAnnouncementLastRead_Request() {
    *this = ::std::move(from);
  }

  inline CPlayer_UpdateSteamAnnouncementLastRead_Request& operator=(CPlayer_UpdateSteamAnnouncementLastRead_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_UpdateSteamAnnouncementLastRead_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_UpdateSteamAnnouncementLastRead_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_UpdateSteamAnnouncementLastRead_Request*>(
               &_CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other);
  friend void swap(CPlayer_UpdateSteamAnnouncementLastRead_Request& a, CPlayer_UpdateSteamAnnouncementLastRead_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_UpdateSteamAnnouncementLastRead_Request* New() const final {
    return CreateMaybeMessage<CPlayer_UpdateSteamAnnouncementLastRead_Request>(nullptr);
  }

  CPlayer_UpdateSteamAnnouncementLastRead_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_UpdateSteamAnnouncementLastRead_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from);
  void MergeFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 announcement_gid = 1;
  bool has_announcement_gid() const;
  void clear_announcement_gid();
  static const int kAnnouncementGidFieldNumber = 1;
  ::google::protobuf::uint64 announcement_gid() const;
  void set_announcement_gid(::google::protobuf::uint64 value);

  // optional uint32 time_posted = 2;
  bool has_time_posted() const;
  void clear_time_posted();
  static const int kTimePostedFieldNumber = 2;
  ::google::protobuf::uint32 time_posted() const;
  void set_time_posted(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 announcement_gid_;
  ::google::protobuf::uint32 time_posted_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_UpdateSteamAnnouncementLastRead_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response) */ {
 public:
  CPlayer_UpdateSteamAnnouncementLastRead_Response();
  virtual ~CPlayer_UpdateSteamAnnouncementLastRead_Response();

  CPlayer_UpdateSteamAnnouncementLastRead_Response(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from);

  inline CPlayer_UpdateSteamAnnouncementLastRead_Response& operator=(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_UpdateSteamAnnouncementLastRead_Response(CPlayer_UpdateSteamAnnouncementLastRead_Response&& from) noexcept
    : CPlayer_UpdateSteamAnnouncementLastRead_Response() {
    *this = ::std::move(from);
  }

  inline CPlayer_UpdateSteamAnnouncementLastRead_Response& operator=(CPlayer_UpdateSteamAnnouncementLastRead_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_UpdateSteamAnnouncementLastRead_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_UpdateSteamAnnouncementLastRead_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_UpdateSteamAnnouncementLastRead_Response*>(
               &_CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(CPlayer_UpdateSteamAnnouncementLastRead_Response* other);
  friend void swap(CPlayer_UpdateSteamAnnouncementLastRead_Response& a, CPlayer_UpdateSteamAnnouncementLastRead_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_UpdateSteamAnnouncementLastRead_Response* New() const final {
    return CreateMaybeMessage<CPlayer_UpdateSteamAnnouncementLastRead_Response>(nullptr);
  }

  CPlayer_UpdateSteamAnnouncementLastRead_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_UpdateSteamAnnouncementLastRead_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from);
  void MergeFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_UpdateSteamAnnouncementLastRead_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_LastPlayedTimes_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_LastPlayedTimes_Notification) */ {
 public:
  CPlayer_LastPlayedTimes_Notification();
  virtual ~CPlayer_LastPlayedTimes_Notification();

  CPlayer_LastPlayedTimes_Notification(const CPlayer_LastPlayedTimes_Notification& from);

  inline CPlayer_LastPlayedTimes_Notification& operator=(const CPlayer_LastPlayedTimes_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_LastPlayedTimes_Notification(CPlayer_LastPlayedTimes_Notification&& from) noexcept
    : CPlayer_LastPlayedTimes_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_LastPlayedTimes_Notification& operator=(CPlayer_LastPlayedTimes_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_LastPlayedTimes_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_LastPlayedTimes_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_LastPlayedTimes_Notification*>(
               &_CPlayer_LastPlayedTimes_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(CPlayer_LastPlayedTimes_Notification* other);
  friend void swap(CPlayer_LastPlayedTimes_Notification& a, CPlayer_LastPlayedTimes_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_LastPlayedTimes_Notification* New() const final {
    return CreateMaybeMessage<CPlayer_LastPlayedTimes_Notification>(nullptr);
  }

  CPlayer_LastPlayedTimes_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_LastPlayedTimes_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_LastPlayedTimes_Notification& from);
  void MergeFrom(const CPlayer_LastPlayedTimes_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_LastPlayedTimes_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  int games_size() const;
  void clear_games();
  static const int kGamesFieldNumber = 1;
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* mutable_games(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
      mutable_games();
  const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& games(int index) const;
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* add_games();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_LastPlayedTimes_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game > games_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_FriendNicknameChanged_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_FriendNicknameChanged_Notification) */ {
 public:
  CPlayer_FriendNicknameChanged_Notification();
  virtual ~CPlayer_FriendNicknameChanged_Notification();

  CPlayer_FriendNicknameChanged_Notification(const CPlayer_FriendNicknameChanged_Notification& from);

  inline CPlayer_FriendNicknameChanged_Notification& operator=(const CPlayer_FriendNicknameChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_FriendNicknameChanged_Notification(CPlayer_FriendNicknameChanged_Notification&& from) noexcept
    : CPlayer_FriendNicknameChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_FriendNicknameChanged_Notification& operator=(CPlayer_FriendNicknameChanged_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_FriendNicknameChanged_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_FriendNicknameChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_FriendNicknameChanged_Notification*>(
               &_CPlayer_FriendNicknameChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(CPlayer_FriendNicknameChanged_Notification* other);
  friend void swap(CPlayer_FriendNicknameChanged_Notification& a, CPlayer_FriendNicknameChanged_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_FriendNicknameChanged_Notification* New() const final {
    return CreateMaybeMessage<CPlayer_FriendNicknameChanged_Notification>(nullptr);
  }

  CPlayer_FriendNicknameChanged_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_FriendNicknameChanged_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_FriendNicknameChanged_Notification& from);
  void MergeFrom(const CPlayer_FriendNicknameChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_FriendNicknameChanged_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // optional bool is_echo_to_self = 3;
  bool has_is_echo_to_self() const;
  void clear_is_echo_to_self();
  static const int kIsEchoToSelfFieldNumber = 3;
  bool is_echo_to_self() const;
  void set_is_echo_to_self(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_FriendNicknameChanged_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::uint32 accountid_;
  bool is_echo_to_self_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_NewSteamAnnouncementState_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_NewSteamAnnouncementState_Notification) */ {
 public:
  CPlayer_NewSteamAnnouncementState_Notification();
  virtual ~CPlayer_NewSteamAnnouncementState_Notification();

  CPlayer_NewSteamAnnouncementState_Notification(const CPlayer_NewSteamAnnouncementState_Notification& from);

  inline CPlayer_NewSteamAnnouncementState_Notification& operator=(const CPlayer_NewSteamAnnouncementState_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_NewSteamAnnouncementState_Notification(CPlayer_NewSteamAnnouncementState_Notification&& from) noexcept
    : CPlayer_NewSteamAnnouncementState_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_NewSteamAnnouncementState_Notification& operator=(CPlayer_NewSteamAnnouncementState_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_NewSteamAnnouncementState_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_NewSteamAnnouncementState_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_NewSteamAnnouncementState_Notification*>(
               &_CPlayer_NewSteamAnnouncementState_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(CPlayer_NewSteamAnnouncementState_Notification* other);
  friend void swap(CPlayer_NewSteamAnnouncementState_Notification& a, CPlayer_NewSteamAnnouncementState_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_NewSteamAnnouncementState_Notification* New() const final {
    return CreateMaybeMessage<CPlayer_NewSteamAnnouncementState_Notification>(nullptr);
  }

  CPlayer_NewSteamAnnouncementState_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_NewSteamAnnouncementState_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_NewSteamAnnouncementState_Notification& from);
  void MergeFrom(const CPlayer_NewSteamAnnouncementState_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_NewSteamAnnouncementState_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string announcement_headline = 2;
  bool has_announcement_headline() const;
  void clear_announcement_headline();
  static const int kAnnouncementHeadlineFieldNumber = 2;
  const ::std::string& announcement_headline() const;
  void set_announcement_headline(const ::std::string& value);
  #if LANG_CXX11
  void set_announcement_headline(::std::string&& value);
  #endif
  void set_announcement_headline(const char* value);
  void set_announcement_headline(const char* value, size_t size);
  ::std::string* mutable_announcement_headline();
  ::std::string* release_announcement_headline();
  void set_allocated_announcement_headline(::std::string* announcement_headline);

  // optional string announcement_url = 3;
  bool has_announcement_url() const;
  void clear_announcement_url();
  static const int kAnnouncementUrlFieldNumber = 3;
  const ::std::string& announcement_url() const;
  void set_announcement_url(const ::std::string& value);
  #if LANG_CXX11
  void set_announcement_url(::std::string&& value);
  #endif
  void set_announcement_url(const char* value);
  void set_announcement_url(const char* value, size_t size);
  ::std::string* mutable_announcement_url();
  ::std::string* release_announcement_url();
  void set_allocated_announcement_url(::std::string* announcement_url);

  // optional int32 state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional uint32 time_posted = 4;
  bool has_time_posted() const;
  void clear_time_posted();
  static const int kTimePostedFieldNumber = 4;
  ::google::protobuf::uint32 time_posted() const;
  void set_time_posted(::google::protobuf::uint32 value);

  // optional uint64 announcement_gid = 5;
  bool has_announcement_gid() const;
  void clear_announcement_gid();
  static const int kAnnouncementGidFieldNumber = 5;
  ::google::protobuf::uint64 announcement_gid() const;
  void set_announcement_gid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr announcement_headline_;
  ::google::protobuf::internal::ArenaStringPtr announcement_url_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::uint32 time_posted_;
  ::google::protobuf::uint64 announcement_gid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_CommunityPreferencesChanged_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_CommunityPreferencesChanged_Notification) */ {
 public:
  CPlayer_CommunityPreferencesChanged_Notification();
  virtual ~CPlayer_CommunityPreferencesChanged_Notification();

  CPlayer_CommunityPreferencesChanged_Notification(const CPlayer_CommunityPreferencesChanged_Notification& from);

  inline CPlayer_CommunityPreferencesChanged_Notification& operator=(const CPlayer_CommunityPreferencesChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_CommunityPreferencesChanged_Notification(CPlayer_CommunityPreferencesChanged_Notification&& from) noexcept
    : CPlayer_CommunityPreferencesChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_CommunityPreferencesChanged_Notification& operator=(CPlayer_CommunityPreferencesChanged_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_CommunityPreferencesChanged_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_CommunityPreferencesChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_CommunityPreferencesChanged_Notification*>(
               &_CPlayer_CommunityPreferencesChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(CPlayer_CommunityPreferencesChanged_Notification* other);
  friend void swap(CPlayer_CommunityPreferencesChanged_Notification& a, CPlayer_CommunityPreferencesChanged_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_CommunityPreferencesChanged_Notification* New() const final {
    return CreateMaybeMessage<CPlayer_CommunityPreferencesChanged_Notification>(nullptr);
  }

  CPlayer_CommunityPreferencesChanged_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_CommunityPreferencesChanged_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_CommunityPreferencesChanged_Notification& from);
  void MergeFrom(const CPlayer_CommunityPreferencesChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_CommunityPreferencesChanged_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  bool has_preferences() const;
  void clear_preferences();
  static const int kPreferencesFieldNumber = 1;
  const ::proto::steam::CPlayer_CommunityPreferences& preferences() const;
  ::proto::steam::CPlayer_CommunityPreferences* release_preferences();
  ::proto::steam::CPlayer_CommunityPreferences* mutable_preferences();
  void set_allocated_preferences(::proto::steam::CPlayer_CommunityPreferences* preferences);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CPlayer_CommunityPreferences* preferences_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CPlayer_PerFriendPreferencesChanged_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification) */ {
 public:
  CPlayer_PerFriendPreferencesChanged_Notification();
  virtual ~CPlayer_PerFriendPreferencesChanged_Notification();

  CPlayer_PerFriendPreferencesChanged_Notification(const CPlayer_PerFriendPreferencesChanged_Notification& from);

  inline CPlayer_PerFriendPreferencesChanged_Notification& operator=(const CPlayer_PerFriendPreferencesChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPlayer_PerFriendPreferencesChanged_Notification(CPlayer_PerFriendPreferencesChanged_Notification&& from) noexcept
    : CPlayer_PerFriendPreferencesChanged_Notification() {
    *this = ::std::move(from);
  }

  inline CPlayer_PerFriendPreferencesChanged_Notification& operator=(CPlayer_PerFriendPreferencesChanged_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPlayer_PerFriendPreferencesChanged_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPlayer_PerFriendPreferencesChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_PerFriendPreferencesChanged_Notification*>(
               &_CPlayer_PerFriendPreferencesChanged_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(CPlayer_PerFriendPreferencesChanged_Notification* other);
  friend void swap(CPlayer_PerFriendPreferencesChanged_Notification& a, CPlayer_PerFriendPreferencesChanged_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPlayer_PerFriendPreferencesChanged_Notification* New() const final {
    return CreateMaybeMessage<CPlayer_PerFriendPreferencesChanged_Notification>(nullptr);
  }

  CPlayer_PerFriendPreferencesChanged_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPlayer_PerFriendPreferencesChanged_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPlayer_PerFriendPreferencesChanged_Notification& from);
  void MergeFrom(const CPlayer_PerFriendPreferencesChanged_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayer_PerFriendPreferencesChanged_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.PerFriendPreferences preferences = 2;
  bool has_preferences() const;
  void clear_preferences();
  static const int kPreferencesFieldNumber = 2;
  const ::proto::steam::PerFriendPreferences& preferences() const;
  ::proto::steam::PerFriendPreferences* release_preferences();
  ::proto::steam::PerFriendPreferences* mutable_preferences();
  void set_allocated_preferences(::proto::steam::PerFriendPreferences* preferences);

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::PerFriendPreferences* preferences_;
  ::google::protobuf::uint32 accountid_;
  friend struct ::TableStruct_steammessages_5fplayer_2esteamclient_2eproto;
};
// ===================================================================

class Player_Stub;

class Player : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Player() {};
 public:
  virtual ~Player();

  typedef Player_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetMutualFriendsForIncomingInvites(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request* request,
                       ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGameBadgeLevels(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetGameBadgeLevels_Request* request,
                       ::proto::steam::CPlayer_GetGameBadgeLevels_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientGetLastPlayedTimes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetLastPlayedTimes_Request* request,
                       ::proto::steam::CPlayer_GetLastPlayedTimes_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AcceptSSA(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_AcceptSSA_Request* request,
                       ::proto::steam::CPlayer_AcceptSSA_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetNicknameList(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetNicknameList_Request* request,
                       ::proto::steam::CPlayer_GetNicknameList_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPerFriendPreferences(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetPerFriendPreferences_Request* request,
                       ::proto::steam::CPlayer_GetPerFriendPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetPerFriendPreferences(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_SetPerFriendPreferences_Request* request,
                       ::proto::steam::CPlayer_SetPerFriendPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AddFriend(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_AddFriend_Request* request,
                       ::proto::steam::CPlayer_AddFriend_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveFriend(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_RemoveFriend_Request* request,
                       ::proto::steam::CPlayer_RemoveFriend_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void IgnoreFriend(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_IgnoreFriend_Request* request,
                       ::proto::steam::CPlayer_IgnoreFriend_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetCommunityPreferences(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetCommunityPreferences_Request* request,
                       ::proto::steam::CPlayer_GetCommunityPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetCommunityPreferences(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_SetCommunityPreferences_Request* request,
                       ::proto::steam::CPlayer_SetCommunityPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetNewSteamAnnouncementState(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request* request,
                       ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateSteamAnnouncementLastRead(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request* request,
                       ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Player);
};

class Player_Stub : public Player {
 public:
  Player_Stub(::google::protobuf::RpcChannel* channel);
  Player_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Player_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Player ------------------------------------------

  void GetMutualFriendsForIncomingInvites(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request* request,
                       ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response* response,
                       ::google::protobuf::Closure* done);
  void GetGameBadgeLevels(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetGameBadgeLevels_Request* request,
                       ::proto::steam::CPlayer_GetGameBadgeLevels_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientGetLastPlayedTimes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetLastPlayedTimes_Request* request,
                       ::proto::steam::CPlayer_GetLastPlayedTimes_Response* response,
                       ::google::protobuf::Closure* done);
  void AcceptSSA(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_AcceptSSA_Request* request,
                       ::proto::steam::CPlayer_AcceptSSA_Response* response,
                       ::google::protobuf::Closure* done);
  void GetNicknameList(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetNicknameList_Request* request,
                       ::proto::steam::CPlayer_GetNicknameList_Response* response,
                       ::google::protobuf::Closure* done);
  void GetPerFriendPreferences(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetPerFriendPreferences_Request* request,
                       ::proto::steam::CPlayer_GetPerFriendPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void SetPerFriendPreferences(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_SetPerFriendPreferences_Request* request,
                       ::proto::steam::CPlayer_SetPerFriendPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void AddFriend(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_AddFriend_Request* request,
                       ::proto::steam::CPlayer_AddFriend_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveFriend(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_RemoveFriend_Request* request,
                       ::proto::steam::CPlayer_RemoveFriend_Response* response,
                       ::google::protobuf::Closure* done);
  void IgnoreFriend(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_IgnoreFriend_Request* request,
                       ::proto::steam::CPlayer_IgnoreFriend_Response* response,
                       ::google::protobuf::Closure* done);
  void GetCommunityPreferences(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetCommunityPreferences_Request* request,
                       ::proto::steam::CPlayer_GetCommunityPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void SetCommunityPreferences(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_SetCommunityPreferences_Request* request,
                       ::proto::steam::CPlayer_SetCommunityPreferences_Response* response,
                       ::google::protobuf::Closure* done);
  void GetNewSteamAnnouncementState(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request* request,
                       ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response* response,
                       ::google::protobuf::Closure* done);
  void UpdateSteamAnnouncementLastRead(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request* request,
                       ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Player_Stub);
};


// -------------------------------------------------------------------

class PlayerClient_Stub;

class PlayerClient : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PlayerClient() {};
 public:
  virtual ~PlayerClient();

  typedef PlayerClient_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void NotifyLastPlayedTimes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_LastPlayedTimes_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyFriendNicknameChanged(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_FriendNicknameChanged_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyNewSteamAnnouncementState(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyCommunityPreferencesChanged(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyPerFriendPreferencesChanged(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PlayerClient);
};

class PlayerClient_Stub : public PlayerClient {
 public:
  PlayerClient_Stub(::google::protobuf::RpcChannel* channel);
  PlayerClient_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PlayerClient_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PlayerClient ------------------------------------------

  void NotifyLastPlayedTimes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_LastPlayedTimes_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyFriendNicknameChanged(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_FriendNicknameChanged_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyNewSteamAnnouncementState(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyCommunityPreferencesChanged(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyPerFriendPreferencesChanged(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PlayerClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPlayer_GetMutualFriendsForIncomingInvites_Request

// -------------------------------------------------------------------

// CPlayer_IncomingInviteMutualFriendList

// optional fixed64 steamid = 1;
inline bool CPlayer_IncomingInviteMutualFriendList::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_IncomingInviteMutualFriendList::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CPlayer_IncomingInviteMutualFriendList::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_IncomingInviteMutualFriendList.steamid)
  return steamid_;
}
inline void CPlayer_IncomingInviteMutualFriendList::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_IncomingInviteMutualFriendList.steamid)
}

// repeated uint32 mutual_friend_account_ids = 2;
inline int CPlayer_IncomingInviteMutualFriendList::mutual_friend_account_ids_size() const {
  return mutual_friend_account_ids_.size();
}
inline void CPlayer_IncomingInviteMutualFriendList::clear_mutual_friend_account_ids() {
  mutual_friend_account_ids_.Clear();
}
inline ::google::protobuf::uint32 CPlayer_IncomingInviteMutualFriendList::mutual_friend_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
  return mutual_friend_account_ids_.Get(index);
}
inline void CPlayer_IncomingInviteMutualFriendList::set_mutual_friend_account_ids(int index, ::google::protobuf::uint32 value) {
  mutual_friend_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
}
inline void CPlayer_IncomingInviteMutualFriendList::add_mutual_friend_account_ids(::google::protobuf::uint32 value) {
  mutual_friend_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CPlayer_IncomingInviteMutualFriendList::mutual_friend_account_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
  return mutual_friend_account_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CPlayer_IncomingInviteMutualFriendList::mutable_mutual_friend_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
  return &mutual_friend_account_ids_;
}

// -------------------------------------------------------------------

// CPlayer_GetMutualFriendsForIncomingInvites_Response

// repeated .proto.steam.CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
inline int CPlayer_GetMutualFriendsForIncomingInvites_Response::incoming_invite_mutual_friends_lists_size() const {
  return incoming_invite_mutual_friends_lists_.size();
}
inline void CPlayer_GetMutualFriendsForIncomingInvites_Response::clear_incoming_invite_mutual_friends_lists() {
  incoming_invite_mutual_friends_lists_.Clear();
}
inline ::proto::steam::CPlayer_IncomingInviteMutualFriendList* CPlayer_GetMutualFriendsForIncomingInvites_Response::mutable_incoming_invite_mutual_friends_lists(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return incoming_invite_mutual_friends_lists_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_IncomingInviteMutualFriendList >*
CPlayer_GetMutualFriendsForIncomingInvites_Response::mutable_incoming_invite_mutual_friends_lists() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return &incoming_invite_mutual_friends_lists_;
}
inline const ::proto::steam::CPlayer_IncomingInviteMutualFriendList& CPlayer_GetMutualFriendsForIncomingInvites_Response::incoming_invite_mutual_friends_lists(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return incoming_invite_mutual_friends_lists_.Get(index);
}
inline ::proto::steam::CPlayer_IncomingInviteMutualFriendList* CPlayer_GetMutualFriendsForIncomingInvites_Response::add_incoming_invite_mutual_friends_lists() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return incoming_invite_mutual_friends_lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_IncomingInviteMutualFriendList >&
CPlayer_GetMutualFriendsForIncomingInvites_Response::incoming_invite_mutual_friends_lists() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
  return incoming_invite_mutual_friends_lists_;
}

// -------------------------------------------------------------------

// CPlayer_GetGameBadgeLevels_Request

// optional uint32 appid = 1;
inline bool CPlayer_GetGameBadgeLevels_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CPlayer_GetGameBadgeLevels_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Request.appid)
  return appid_;
}
inline void CPlayer_GetGameBadgeLevels_Request::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Request.appid)
}

// -------------------------------------------------------------------

// CPlayer_GetGameBadgeLevels_Response_Badge

// optional int32 level = 1;
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 CPlayer_GetGameBadgeLevels_Response_Badge::level() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.level)
  return level_;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_level(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.level)
}

// optional int32 series = 2;
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::has_series() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_series() {
  series_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CPlayer_GetGameBadgeLevels_Response_Badge::series() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.series)
  return series_;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_series(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  series_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.series)
}

// optional uint32 border_color = 3;
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::has_border_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_border_color() {
  border_color_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CPlayer_GetGameBadgeLevels_Response_Badge::border_color() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
  return border_color_;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_border_color(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  border_color_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
}

// -------------------------------------------------------------------

// CPlayer_GetGameBadgeLevels_Response

// optional uint32 player_level = 1;
inline bool CPlayer_GetGameBadgeLevels_Response::has_player_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Response::clear_player_level() {
  player_level_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CPlayer_GetGameBadgeLevels_Response::player_level() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.player_level)
  return player_level_;
}
inline void CPlayer_GetGameBadgeLevels_Response::set_player_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  player_level_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.player_level)
}

// repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
inline int CPlayer_GetGameBadgeLevels_Response::badges_size() const {
  return badges_.size();
}
inline void CPlayer_GetGameBadgeLevels_Response::clear_badges() {
  badges_.Clear();
}
inline ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response::mutable_badges(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >*
CPlayer_GetGameBadgeLevels_Response::mutable_badges() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return &badges_;
}
inline const ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge& CPlayer_GetGameBadgeLevels_Response::badges(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Get(index);
}
inline ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response::add_badges() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >&
CPlayer_GetGameBadgeLevels_Response::badges() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_;
}

// -------------------------------------------------------------------

// CPlayer_GetLastPlayedTimes_Request

// optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
inline bool CPlayer_GetLastPlayedTimes_Request::has_min_last_played() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Request::clear_min_last_played() {
  min_last_played_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CPlayer_GetLastPlayedTimes_Request::min_last_played() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Request.min_last_played)
  return min_last_played_;
}
inline void CPlayer_GetLastPlayedTimes_Request::set_min_last_played(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_last_played_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Request.min_last_played)
}

// -------------------------------------------------------------------

// CPlayer_GetLastPlayedTimes_Response_Game

// optional int32 appid = 1;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_appid() {
  appid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 CPlayer_GetLastPlayedTimes_Response_Game::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.appid)
  return appid_;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_appid(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.appid)
}

// optional uint32 last_playtime = 2;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_last_playtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_last_playtime() {
  last_playtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CPlayer_GetLastPlayedTimes_Response_Game::last_playtime() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
  return last_playtime_;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_last_playtime(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  last_playtime_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
}

// optional int32 playtime_2weeks = 3;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_2weeks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_2weeks() {
  playtime_2weeks_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CPlayer_GetLastPlayedTimes_Response_Game::playtime_2weeks() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
  return playtime_2weeks_;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_2weeks(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  playtime_2weeks_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
}

// optional int32 playtime_forever = 4;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_forever() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_forever() {
  playtime_forever_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CPlayer_GetLastPlayedTimes_Response_Game::playtime_forever() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
  return playtime_forever_;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_forever(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  playtime_forever_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
}

// optional uint32 first_playtime = 5;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_first_playtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_first_playtime() {
  first_playtime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CPlayer_GetLastPlayedTimes_Response_Game::first_playtime() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.first_playtime)
  return first_playtime_;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_first_playtime(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  first_playtime_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.first_playtime)
}

// -------------------------------------------------------------------

// CPlayer_GetLastPlayedTimes_Response

// repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
inline int CPlayer_GetLastPlayedTimes_Response::games_size() const {
  return games_.size();
}
inline void CPlayer_GetLastPlayedTimes_Response::clear_games() {
  games_.Clear();
}
inline ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
CPlayer_GetLastPlayedTimes_Response::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return &games_;
}
inline const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_GetLastPlayedTimes_Response::games(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Get(index);
}
inline ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response::add_games() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
CPlayer_GetLastPlayedTimes_Response::games() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_;
}

// -------------------------------------------------------------------

// CPlayer_AcceptSSA_Request

// -------------------------------------------------------------------

// CPlayer_AcceptSSA_Response

// -------------------------------------------------------------------

// CPlayer_GetNicknameList_Request

// -------------------------------------------------------------------

// CPlayer_GetNicknameList_Response_PlayerNickname

// optional fixed32 accountid = 1;
inline bool CPlayer_GetNicknameList_Response_PlayerNickname::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CPlayer_GetNicknameList_Response_PlayerNickname::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.accountid)
  return accountid_;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_accountid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.accountid)
}

// optional string nickname = 2;
inline bool CPlayer_GetNicknameList_Response_PlayerNickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CPlayer_GetNicknameList_Response_PlayerNickname::nickname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
  return nickname_.GetNoArena();
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_nickname(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}
#if LANG_CXX11
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_nickname(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}
#endif
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}
inline ::std::string* CPlayer_GetNicknameList_Response_PlayerNickname::mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPlayer_GetNicknameList_Response_PlayerNickname::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_allocated_nickname(::std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}

// -------------------------------------------------------------------

// CPlayer_GetNicknameList_Response

// repeated .proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
inline int CPlayer_GetNicknameList_Response::nicknames_size() const {
  return nicknames_.size();
}
inline void CPlayer_GetNicknameList_Response::clear_nicknames() {
  nicknames_.Clear();
}
inline ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* CPlayer_GetNicknameList_Response::mutable_nicknames(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >*
CPlayer_GetNicknameList_Response::mutable_nicknames() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return &nicknames_;
}
inline const ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname& CPlayer_GetNicknameList_Response::nicknames(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_.Get(index);
}
inline ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* CPlayer_GetNicknameList_Response::add_nicknames() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >&
CPlayer_GetNicknameList_Response::nicknames() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_;
}

// -------------------------------------------------------------------

// CPlayer_GetPerFriendPreferences_Request

// -------------------------------------------------------------------

// PerFriendPreferences

// optional fixed32 accountid = 1;
inline bool PerFriendPreferences::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerFriendPreferences::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 PerFriendPreferences::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PerFriendPreferences.accountid)
  return accountid_;
}
inline void PerFriendPreferences::set_accountid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PerFriendPreferences.accountid)
}

// optional string nickname = 2;
inline bool PerFriendPreferences::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerFriendPreferences::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& PerFriendPreferences::nickname() const {
  // @@protoc_insertion_point(field_get:proto.steam.PerFriendPreferences.nickname)
  return nickname_.GetNoArena();
}
inline void PerFriendPreferences::set_nickname(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PerFriendPreferences.nickname)
}
#if LANG_CXX11
inline void PerFriendPreferences::set_nickname(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PerFriendPreferences.nickname)
}
#endif
inline void PerFriendPreferences::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PerFriendPreferences.nickname)
}
inline void PerFriendPreferences::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PerFriendPreferences.nickname)
}
inline ::std::string* PerFriendPreferences::mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.PerFriendPreferences.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PerFriendPreferences::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.steam.PerFriendPreferences.nickname)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerFriendPreferences::set_allocated_nickname(::std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PerFriendPreferences.nickname)
}

// optional .proto.steam.ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::has_notifications_showingame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerFriendPreferences::clear_notifications_showingame() {
  notifications_showingame_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::proto::steam::ENotificationSetting PerFriendPreferences::notifications_showingame() const {
  // @@protoc_insertion_point(field_get:proto.steam.PerFriendPreferences.notifications_showingame)
  return static_cast< ::proto::steam::ENotificationSetting >(notifications_showingame_);
}
inline void PerFriendPreferences::set_notifications_showingame(::proto::steam::ENotificationSetting value) {
  assert(::proto::steam::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  notifications_showingame_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PerFriendPreferences.notifications_showingame)
}

// optional .proto.steam.ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::has_notifications_showonline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerFriendPreferences::clear_notifications_showonline() {
  notifications_showonline_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::proto::steam::ENotificationSetting PerFriendPreferences::notifications_showonline() const {
  // @@protoc_insertion_point(field_get:proto.steam.PerFriendPreferences.notifications_showonline)
  return static_cast< ::proto::steam::ENotificationSetting >(notifications_showonline_);
}
inline void PerFriendPreferences::set_notifications_showonline(::proto::steam::ENotificationSetting value) {
  assert(::proto::steam::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  notifications_showonline_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PerFriendPreferences.notifications_showonline)
}

// optional .proto.steam.ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::has_notifications_showmessages() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerFriendPreferences::clear_notifications_showmessages() {
  notifications_showmessages_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::proto::steam::ENotificationSetting PerFriendPreferences::notifications_showmessages() const {
  // @@protoc_insertion_point(field_get:proto.steam.PerFriendPreferences.notifications_showmessages)
  return static_cast< ::proto::steam::ENotificationSetting >(notifications_showmessages_);
}
inline void PerFriendPreferences::set_notifications_showmessages(::proto::steam::ENotificationSetting value) {
  assert(::proto::steam::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  notifications_showmessages_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PerFriendPreferences.notifications_showmessages)
}

// optional .proto.steam.ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::has_sounds_showingame() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerFriendPreferences::clear_sounds_showingame() {
  sounds_showingame_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::proto::steam::ENotificationSetting PerFriendPreferences::sounds_showingame() const {
  // @@protoc_insertion_point(field_get:proto.steam.PerFriendPreferences.sounds_showingame)
  return static_cast< ::proto::steam::ENotificationSetting >(sounds_showingame_);
}
inline void PerFriendPreferences::set_sounds_showingame(::proto::steam::ENotificationSetting value) {
  assert(::proto::steam::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  sounds_showingame_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PerFriendPreferences.sounds_showingame)
}

// optional .proto.steam.ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::has_sounds_showonline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerFriendPreferences::clear_sounds_showonline() {
  sounds_showonline_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::proto::steam::ENotificationSetting PerFriendPreferences::sounds_showonline() const {
  // @@protoc_insertion_point(field_get:proto.steam.PerFriendPreferences.sounds_showonline)
  return static_cast< ::proto::steam::ENotificationSetting >(sounds_showonline_);
}
inline void PerFriendPreferences::set_sounds_showonline(::proto::steam::ENotificationSetting value) {
  assert(::proto::steam::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  sounds_showonline_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PerFriendPreferences.sounds_showonline)
}

// optional .proto.steam.ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
inline bool PerFriendPreferences::has_sounds_showmessages() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerFriendPreferences::clear_sounds_showmessages() {
  sounds_showmessages_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::proto::steam::ENotificationSetting PerFriendPreferences::sounds_showmessages() const {
  // @@protoc_insertion_point(field_get:proto.steam.PerFriendPreferences.sounds_showmessages)
  return static_cast< ::proto::steam::ENotificationSetting >(sounds_showmessages_);
}
inline void PerFriendPreferences::set_sounds_showmessages(::proto::steam::ENotificationSetting value) {
  assert(::proto::steam::ENotificationSetting_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  sounds_showmessages_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PerFriendPreferences.sounds_showmessages)
}

// -------------------------------------------------------------------

// CPlayer_GetPerFriendPreferences_Response

// repeated .proto.steam.PerFriendPreferences preferences = 1;
inline int CPlayer_GetPerFriendPreferences_Response::preferences_size() const {
  return preferences_.size();
}
inline void CPlayer_GetPerFriendPreferences_Response::clear_preferences() {
  preferences_.Clear();
}
inline ::proto::steam::PerFriendPreferences* CPlayer_GetPerFriendPreferences_Response::mutable_preferences(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetPerFriendPreferences_Response.preferences)
  return preferences_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::PerFriendPreferences >*
CPlayer_GetPerFriendPreferences_Response::mutable_preferences() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetPerFriendPreferences_Response.preferences)
  return &preferences_;
}
inline const ::proto::steam::PerFriendPreferences& CPlayer_GetPerFriendPreferences_Response::preferences(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetPerFriendPreferences_Response.preferences)
  return preferences_.Get(index);
}
inline ::proto::steam::PerFriendPreferences* CPlayer_GetPerFriendPreferences_Response::add_preferences() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetPerFriendPreferences_Response.preferences)
  return preferences_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::PerFriendPreferences >&
CPlayer_GetPerFriendPreferences_Response::preferences() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetPerFriendPreferences_Response.preferences)
  return preferences_;
}

// -------------------------------------------------------------------

// CPlayer_SetPerFriendPreferences_Request

// optional .proto.steam.PerFriendPreferences preferences = 1;
inline bool CPlayer_SetPerFriendPreferences_Request::has_preferences() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_SetPerFriendPreferences_Request::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::PerFriendPreferences& CPlayer_SetPerFriendPreferences_Request::preferences() const {
  const ::proto::steam::PerFriendPreferences* p = preferences_;
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_SetPerFriendPreferences_Request.preferences)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::PerFriendPreferences*>(
      &::proto::steam::_PerFriendPreferences_default_instance_);
}
inline ::proto::steam::PerFriendPreferences* CPlayer_SetPerFriendPreferences_Request::release_preferences() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_SetPerFriendPreferences_Request.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::PerFriendPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::proto::steam::PerFriendPreferences* CPlayer_SetPerFriendPreferences_Request::mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::PerFriendPreferences>(GetArenaNoVirtual());
    preferences_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_SetPerFriendPreferences_Request.preferences)
  return preferences_;
}
inline void CPlayer_SetPerFriendPreferences_Request::set_allocated_preferences(::proto::steam::PerFriendPreferences* preferences) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferences = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_SetPerFriendPreferences_Request.preferences)
}

// -------------------------------------------------------------------

// CPlayer_SetPerFriendPreferences_Response

// -------------------------------------------------------------------

// CPlayer_AddFriend_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of user to whom to send a friend invite."];
inline bool CPlayer_AddFriend_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_AddFriend_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CPlayer_AddFriend_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_AddFriend_Request.steamid)
  return steamid_;
}
inline void CPlayer_AddFriend_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_AddFriend_Request.steamid)
}

// -------------------------------------------------------------------

// CPlayer_AddFriend_Response

// optional bool invite_sent = 1 [(.proto.steam.description) = "True if the operation was successful, false otherwise."];
inline bool CPlayer_AddFriend_Response::has_invite_sent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_AddFriend_Response::clear_invite_sent() {
  invite_sent_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CPlayer_AddFriend_Response::invite_sent() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_AddFriend_Response.invite_sent)
  return invite_sent_;
}
inline void CPlayer_AddFriend_Response::set_invite_sent(bool value) {
  _has_bits_[0] |= 0x00000001u;
  invite_sent_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_AddFriend_Response.invite_sent)
}

// optional uint32 friend_relationship = 2 [(.proto.steam.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
inline bool CPlayer_AddFriend_Response::has_friend_relationship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_AddFriend_Response::clear_friend_relationship() {
  friend_relationship_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CPlayer_AddFriend_Response::friend_relationship() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_AddFriend_Response.friend_relationship)
  return friend_relationship_;
}
inline void CPlayer_AddFriend_Response::set_friend_relationship(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  friend_relationship_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_AddFriend_Response.friend_relationship)
}

// -------------------------------------------------------------------

// CPlayer_RemoveFriend_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of friend to remove."];
inline bool CPlayer_RemoveFriend_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_RemoveFriend_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CPlayer_RemoveFriend_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_RemoveFriend_Request.steamid)
  return steamid_;
}
inline void CPlayer_RemoveFriend_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_RemoveFriend_Request.steamid)
}

// -------------------------------------------------------------------

// CPlayer_RemoveFriend_Response

// optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
inline bool CPlayer_RemoveFriend_Response::has_friend_relationship() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_RemoveFriend_Response::clear_friend_relationship() {
  friend_relationship_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CPlayer_RemoveFriend_Response::friend_relationship() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_RemoveFriend_Response.friend_relationship)
  return friend_relationship_;
}
inline void CPlayer_RemoveFriend_Response::set_friend_relationship(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  friend_relationship_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_RemoveFriend_Response.friend_relationship)
}

// -------------------------------------------------------------------

// CPlayer_IgnoreFriend_Request

// optional fixed64 steamid = 1;
inline bool CPlayer_IgnoreFriend_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_IgnoreFriend_Request::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CPlayer_IgnoreFriend_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_IgnoreFriend_Request.steamid)
  return steamid_;
}
inline void CPlayer_IgnoreFriend_Request::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_IgnoreFriend_Request.steamid)
}

// optional bool unignore = 2 [(.proto.steam.description) = "If set, remove from ignore/block list instead of adding "];
inline bool CPlayer_IgnoreFriend_Request::has_unignore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_IgnoreFriend_Request::clear_unignore() {
  unignore_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPlayer_IgnoreFriend_Request::unignore() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_IgnoreFriend_Request.unignore)
  return unignore_;
}
inline void CPlayer_IgnoreFriend_Request::set_unignore(bool value) {
  _has_bits_[0] |= 0x00000002u;
  unignore_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_IgnoreFriend_Request.unignore)
}

// -------------------------------------------------------------------

// CPlayer_IgnoreFriend_Response

// optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
inline bool CPlayer_IgnoreFriend_Response::has_friend_relationship() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_IgnoreFriend_Response::clear_friend_relationship() {
  friend_relationship_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CPlayer_IgnoreFriend_Response::friend_relationship() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_IgnoreFriend_Response.friend_relationship)
  return friend_relationship_;
}
inline void CPlayer_IgnoreFriend_Response::set_friend_relationship(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  friend_relationship_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_IgnoreFriend_Response.friend_relationship)
}

// -------------------------------------------------------------------

// CPlayer_GetCommunityPreferences_Request

// -------------------------------------------------------------------

// CPlayer_CommunityPreferences

// optional bool hide_adult_content_violence = 1 [default = true];
inline bool CPlayer_CommunityPreferences::has_hide_adult_content_violence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayer_CommunityPreferences::clear_hide_adult_content_violence() {
  hide_adult_content_violence_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPlayer_CommunityPreferences::hide_adult_content_violence() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_CommunityPreferences.hide_adult_content_violence)
  return hide_adult_content_violence_;
}
inline void CPlayer_CommunityPreferences::set_hide_adult_content_violence(bool value) {
  _has_bits_[0] |= 0x00000004u;
  hide_adult_content_violence_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_CommunityPreferences.hide_adult_content_violence)
}

// optional bool hide_adult_content_sex = 2 [default = true];
inline bool CPlayer_CommunityPreferences::has_hide_adult_content_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPlayer_CommunityPreferences::clear_hide_adult_content_sex() {
  hide_adult_content_sex_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPlayer_CommunityPreferences::hide_adult_content_sex() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_CommunityPreferences.hide_adult_content_sex)
  return hide_adult_content_sex_;
}
inline void CPlayer_CommunityPreferences::set_hide_adult_content_sex(bool value) {
  _has_bits_[0] |= 0x00000008u;
  hide_adult_content_sex_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_CommunityPreferences.hide_adult_content_sex)
}

// optional bool parenthesize_nicknames = 4 [default = false];
inline bool CPlayer_CommunityPreferences::has_parenthesize_nicknames() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_CommunityPreferences::clear_parenthesize_nicknames() {
  parenthesize_nicknames_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPlayer_CommunityPreferences::parenthesize_nicknames() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_CommunityPreferences.parenthesize_nicknames)
  return parenthesize_nicknames_;
}
inline void CPlayer_CommunityPreferences::set_parenthesize_nicknames(bool value) {
  _has_bits_[0] |= 0x00000002u;
  parenthesize_nicknames_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_CommunityPreferences.parenthesize_nicknames)
}

// optional uint32 timestamp_updated = 3;
inline bool CPlayer_CommunityPreferences::has_timestamp_updated() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_CommunityPreferences::clear_timestamp_updated() {
  timestamp_updated_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CPlayer_CommunityPreferences::timestamp_updated() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_CommunityPreferences.timestamp_updated)
  return timestamp_updated_;
}
inline void CPlayer_CommunityPreferences::set_timestamp_updated(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_updated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_CommunityPreferences.timestamp_updated)
}

// -------------------------------------------------------------------

// CPlayer_GetCommunityPreferences_Response

// optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
inline bool CPlayer_GetCommunityPreferences_Response::has_preferences() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetCommunityPreferences_Response::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::CPlayer_CommunityPreferences& CPlayer_GetCommunityPreferences_Response::preferences() const {
  const ::proto::steam::CPlayer_CommunityPreferences* p = preferences_;
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetCommunityPreferences_Response.preferences)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CPlayer_CommunityPreferences*>(
      &::proto::steam::_CPlayer_CommunityPreferences_default_instance_);
}
inline ::proto::steam::CPlayer_CommunityPreferences* CPlayer_GetCommunityPreferences_Response::release_preferences() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_GetCommunityPreferences_Response.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CPlayer_CommunityPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::proto::steam::CPlayer_CommunityPreferences* CPlayer_GetCommunityPreferences_Response::mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CPlayer_CommunityPreferences>(GetArenaNoVirtual());
    preferences_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetCommunityPreferences_Response.preferences)
  return preferences_;
}
inline void CPlayer_GetCommunityPreferences_Response::set_allocated_preferences(::proto::steam::CPlayer_CommunityPreferences* preferences) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferences = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_GetCommunityPreferences_Response.preferences)
}

// -------------------------------------------------------------------

// CPlayer_SetCommunityPreferences_Request

// optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
inline bool CPlayer_SetCommunityPreferences_Request::has_preferences() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_SetCommunityPreferences_Request::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::CPlayer_CommunityPreferences& CPlayer_SetCommunityPreferences_Request::preferences() const {
  const ::proto::steam::CPlayer_CommunityPreferences* p = preferences_;
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_SetCommunityPreferences_Request.preferences)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CPlayer_CommunityPreferences*>(
      &::proto::steam::_CPlayer_CommunityPreferences_default_instance_);
}
inline ::proto::steam::CPlayer_CommunityPreferences* CPlayer_SetCommunityPreferences_Request::release_preferences() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_SetCommunityPreferences_Request.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CPlayer_CommunityPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::proto::steam::CPlayer_CommunityPreferences* CPlayer_SetCommunityPreferences_Request::mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CPlayer_CommunityPreferences>(GetArenaNoVirtual());
    preferences_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_SetCommunityPreferences_Request.preferences)
  return preferences_;
}
inline void CPlayer_SetCommunityPreferences_Request::set_allocated_preferences(::proto::steam::CPlayer_CommunityPreferences* preferences) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferences = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_SetCommunityPreferences_Request.preferences)
}

// -------------------------------------------------------------------

// CPlayer_SetCommunityPreferences_Response

// -------------------------------------------------------------------

// CPlayer_GetNewSteamAnnouncementState_Request

// optional int32 language = 1;
inline bool CPlayer_GetNewSteamAnnouncementState_Request::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetNewSteamAnnouncementState_Request::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 CPlayer_GetNewSteamAnnouncementState_Request::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request.language)
  return language_;
}
inline void CPlayer_GetNewSteamAnnouncementState_Request::set_language(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request.language)
}

// -------------------------------------------------------------------

// CPlayer_GetNewSteamAnnouncementState_Response

// optional int32 state = 1;
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CPlayer_GetNewSteamAnnouncementState_Response::state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.state)
  return state_;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_state(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.state)
}

// optional string announcement_headline = 2;
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_announcement_headline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_announcement_headline() {
  announcement_headline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CPlayer_GetNewSteamAnnouncementState_Response::announcement_headline() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
  return announcement_headline_.GetNoArena();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_headline(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
}
#if LANG_CXX11
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_headline(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
}
#endif
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_headline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_headline(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
}
inline ::std::string* CPlayer_GetNewSteamAnnouncementState_Response::mutable_announcement_headline() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
  return announcement_headline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPlayer_GetNewSteamAnnouncementState_Response::release_announcement_headline() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
  if (!has_announcement_headline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return announcement_headline_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_allocated_announcement_headline(::std::string* announcement_headline) {
  if (announcement_headline != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  announcement_headline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement_headline);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
}

// optional string announcement_url = 3;
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_announcement_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_announcement_url() {
  announcement_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CPlayer_GetNewSteamAnnouncementState_Response::announcement_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
  return announcement_url_.GetNoArena();
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
}
#if LANG_CXX11
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
}
#endif
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
}
inline ::std::string* CPlayer_GetNewSteamAnnouncementState_Response::mutable_announcement_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
  return announcement_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPlayer_GetNewSteamAnnouncementState_Response::release_announcement_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
  if (!has_announcement_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return announcement_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_allocated_announcement_url(::std::string* announcement_url) {
  if (announcement_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  announcement_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
}

// optional uint32 time_posted = 4;
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_time_posted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_time_posted() {
  time_posted_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CPlayer_GetNewSteamAnnouncementState_Response::time_posted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.time_posted)
  return time_posted_;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_time_posted(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  time_posted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.time_posted)
}

// optional uint64 announcement_gid = 5;
inline bool CPlayer_GetNewSteamAnnouncementState_Response::has_announcement_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::clear_announcement_gid() {
  announcement_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CPlayer_GetNewSteamAnnouncementState_Response::announcement_gid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_gid)
  return announcement_gid_;
}
inline void CPlayer_GetNewSteamAnnouncementState_Response::set_announcement_gid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  announcement_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_gid)
}

// -------------------------------------------------------------------

// CPlayer_UpdateSteamAnnouncementLastRead_Request

// optional uint64 announcement_gid = 1;
inline bool CPlayer_UpdateSteamAnnouncementLastRead_Request::has_announcement_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::clear_announcement_gid() {
  announcement_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CPlayer_UpdateSteamAnnouncementLastRead_Request::announcement_gid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request.announcement_gid)
  return announcement_gid_;
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::set_announcement_gid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  announcement_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request.announcement_gid)
}

// optional uint32 time_posted = 2;
inline bool CPlayer_UpdateSteamAnnouncementLastRead_Request::has_time_posted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::clear_time_posted() {
  time_posted_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CPlayer_UpdateSteamAnnouncementLastRead_Request::time_posted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request.time_posted)
  return time_posted_;
}
inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::set_time_posted(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_posted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request.time_posted)
}

// -------------------------------------------------------------------

// CPlayer_UpdateSteamAnnouncementLastRead_Response

// -------------------------------------------------------------------

// CPlayer_LastPlayedTimes_Notification

// repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
inline int CPlayer_LastPlayedTimes_Notification::games_size() const {
  return games_.size();
}
inline void CPlayer_LastPlayedTimes_Notification::clear_games() {
  games_.Clear();
}
inline ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_LastPlayedTimes_Notification::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
CPlayer_LastPlayedTimes_Notification::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return &games_;
}
inline const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_LastPlayedTimes_Notification::games(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_.Get(index);
}
inline ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_LastPlayedTimes_Notification::add_games() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
CPlayer_LastPlayedTimes_Notification::games() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_;
}

// -------------------------------------------------------------------

// CPlayer_FriendNicknameChanged_Notification

// optional fixed32 accountid = 1;
inline bool CPlayer_FriendNicknameChanged_Notification::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CPlayer_FriendNicknameChanged_Notification::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_FriendNicknameChanged_Notification.accountid)
  return accountid_;
}
inline void CPlayer_FriendNicknameChanged_Notification::set_accountid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_FriendNicknameChanged_Notification.accountid)
}

// optional string nickname = 2;
inline bool CPlayer_FriendNicknameChanged_Notification::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CPlayer_FriendNicknameChanged_Notification::nickname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
  return nickname_.GetNoArena();
}
inline void CPlayer_FriendNicknameChanged_Notification::set_nickname(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}
#if LANG_CXX11
inline void CPlayer_FriendNicknameChanged_Notification::set_nickname(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}
#endif
inline void CPlayer_FriendNicknameChanged_Notification::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}
inline void CPlayer_FriendNicknameChanged_Notification::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}
inline ::std::string* CPlayer_FriendNicknameChanged_Notification::mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPlayer_FriendNicknameChanged_Notification::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPlayer_FriendNicknameChanged_Notification::set_allocated_nickname(::std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}

// optional bool is_echo_to_self = 3;
inline bool CPlayer_FriendNicknameChanged_Notification::has_is_echo_to_self() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_is_echo_to_self() {
  is_echo_to_self_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPlayer_FriendNicknameChanged_Notification::is_echo_to_self() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_FriendNicknameChanged_Notification.is_echo_to_self)
  return is_echo_to_self_;
}
inline void CPlayer_FriendNicknameChanged_Notification::set_is_echo_to_self(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_echo_to_self_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_FriendNicknameChanged_Notification.is_echo_to_self)
}

// -------------------------------------------------------------------

// CPlayer_NewSteamAnnouncementState_Notification

// optional int32 state = 1;
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CPlayer_NewSteamAnnouncementState_Notification::state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.state)
  return state_;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_state(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.state)
}

// optional string announcement_headline = 2;
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_announcement_headline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_announcement_headline() {
  announcement_headline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CPlayer_NewSteamAnnouncementState_Notification::announcement_headline() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
  return announcement_headline_.GetNoArena();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_headline(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
}
#if LANG_CXX11
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_headline(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
}
#endif
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_headline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_headline(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  announcement_headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
}
inline ::std::string* CPlayer_NewSteamAnnouncementState_Notification::mutable_announcement_headline() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
  return announcement_headline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPlayer_NewSteamAnnouncementState_Notification::release_announcement_headline() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
  if (!has_announcement_headline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return announcement_headline_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_allocated_announcement_headline(::std::string* announcement_headline) {
  if (announcement_headline != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  announcement_headline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement_headline);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline)
}

// optional string announcement_url = 3;
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_announcement_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_announcement_url() {
  announcement_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CPlayer_NewSteamAnnouncementState_Notification::announcement_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
  return announcement_url_.GetNoArena();
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
}
#if LANG_CXX11
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
}
#endif
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  announcement_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
}
inline ::std::string* CPlayer_NewSteamAnnouncementState_Notification::mutable_announcement_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
  return announcement_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPlayer_NewSteamAnnouncementState_Notification::release_announcement_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
  if (!has_announcement_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return announcement_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_allocated_announcement_url(::std::string* announcement_url) {
  if (announcement_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  announcement_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announcement_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url)
}

// optional uint32 time_posted = 4;
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_time_posted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_time_posted() {
  time_posted_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CPlayer_NewSteamAnnouncementState_Notification::time_posted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.time_posted)
  return time_posted_;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_time_posted(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  time_posted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.time_posted)
}

// optional uint64 announcement_gid = 5;
inline bool CPlayer_NewSteamAnnouncementState_Notification::has_announcement_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::clear_announcement_gid() {
  announcement_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CPlayer_NewSteamAnnouncementState_Notification::announcement_gid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_gid)
  return announcement_gid_;
}
inline void CPlayer_NewSteamAnnouncementState_Notification::set_announcement_gid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  announcement_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_gid)
}

// -------------------------------------------------------------------

// CPlayer_CommunityPreferencesChanged_Notification

// optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
inline bool CPlayer_CommunityPreferencesChanged_Notification::has_preferences() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_CommunityPreferencesChanged_Notification::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::CPlayer_CommunityPreferences& CPlayer_CommunityPreferencesChanged_Notification::preferences() const {
  const ::proto::steam::CPlayer_CommunityPreferences* p = preferences_;
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_CommunityPreferencesChanged_Notification.preferences)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CPlayer_CommunityPreferences*>(
      &::proto::steam::_CPlayer_CommunityPreferences_default_instance_);
}
inline ::proto::steam::CPlayer_CommunityPreferences* CPlayer_CommunityPreferencesChanged_Notification::release_preferences() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_CommunityPreferencesChanged_Notification.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CPlayer_CommunityPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::proto::steam::CPlayer_CommunityPreferences* CPlayer_CommunityPreferencesChanged_Notification::mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CPlayer_CommunityPreferences>(GetArenaNoVirtual());
    preferences_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_CommunityPreferencesChanged_Notification.preferences)
  return preferences_;
}
inline void CPlayer_CommunityPreferencesChanged_Notification::set_allocated_preferences(::proto::steam::CPlayer_CommunityPreferences* preferences) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferences = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_CommunityPreferencesChanged_Notification.preferences)
}

// -------------------------------------------------------------------

// CPlayer_PerFriendPreferencesChanged_Notification

// optional fixed32 accountid = 1;
inline bool CPlayer_PerFriendPreferencesChanged_Notification::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CPlayer_PerFriendPreferencesChanged_Notification::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification.accountid)
  return accountid_;
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::set_accountid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification.accountid)
}

// optional .proto.steam.PerFriendPreferences preferences = 2;
inline bool CPlayer_PerFriendPreferencesChanged_Notification::has_preferences() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::clear_preferences() {
  if (preferences_ != nullptr) preferences_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::PerFriendPreferences& CPlayer_PerFriendPreferencesChanged_Notification::preferences() const {
  const ::proto::steam::PerFriendPreferences* p = preferences_;
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification.preferences)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::PerFriendPreferences*>(
      &::proto::steam::_PerFriendPreferences_default_instance_);
}
inline ::proto::steam::PerFriendPreferences* CPlayer_PerFriendPreferencesChanged_Notification::release_preferences() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification.preferences)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::PerFriendPreferences* temp = preferences_;
  preferences_ = nullptr;
  return temp;
}
inline ::proto::steam::PerFriendPreferences* CPlayer_PerFriendPreferencesChanged_Notification::mutable_preferences() {
  _has_bits_[0] |= 0x00000001u;
  if (preferences_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::PerFriendPreferences>(GetArenaNoVirtual());
    preferences_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification.preferences)
  return preferences_;
}
inline void CPlayer_PerFriendPreferencesChanged_Notification::set_allocated_preferences(::proto::steam::PerFriendPreferences* preferences) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete preferences_;
  }
  if (preferences) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferences = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preferences, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferences_ = preferences;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification.preferences)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::steam::ENotificationSetting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::ENotificationSetting>() {
  return ::proto::steam::ENotificationSetting_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5fplayer_2esteamclient_2eproto
