// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_useraccount.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fuseraccount_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fuseraccount_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fuseraccount_2esteamclient_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5fuseraccount_2esteamclient_2eproto();
namespace proto {
namespace steam {
class CAccountLinking_GetLinkedAccountInfo_Request;
class CAccountLinking_GetLinkedAccountInfo_RequestDefaultTypeInternal;
extern CAccountLinking_GetLinkedAccountInfo_RequestDefaultTypeInternal _CAccountLinking_GetLinkedAccountInfo_Request_default_instance_;
class CAccountLinking_GetLinkedAccountInfo_Response;
class CAccountLinking_GetLinkedAccountInfo_ResponseDefaultTypeInternal;
extern CAccountLinking_GetLinkedAccountInfo_ResponseDefaultTypeInternal _CAccountLinking_GetLinkedAccountInfo_Response_default_instance_;
class CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response;
class CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_ResponseDefaultTypeInternal;
extern CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_ResponseDefaultTypeInternal _CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_default_instance_;
class CUserAccount_CreateFriendInviteToken_Request;
class CUserAccount_CreateFriendInviteToken_RequestDefaultTypeInternal;
extern CUserAccount_CreateFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_CreateFriendInviteToken_Request_default_instance_;
class CUserAccount_CreateFriendInviteToken_Response;
class CUserAccount_CreateFriendInviteToken_ResponseDefaultTypeInternal;
extern CUserAccount_CreateFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_CreateFriendInviteToken_Response_default_instance_;
class CUserAccount_GetAccountLinkStatus_Request;
class CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal;
extern CUserAccount_GetAccountLinkStatus_RequestDefaultTypeInternal _CUserAccount_GetAccountLinkStatus_Request_default_instance_;
class CUserAccount_GetAccountLinkStatus_Response;
class CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal;
extern CUserAccount_GetAccountLinkStatus_ResponseDefaultTypeInternal _CUserAccount_GetAccountLinkStatus_Response_default_instance_;
class CUserAccount_GetFriendInviteTokens_Request;
class CUserAccount_GetFriendInviteTokens_RequestDefaultTypeInternal;
extern CUserAccount_GetFriendInviteTokens_RequestDefaultTypeInternal _CUserAccount_GetFriendInviteTokens_Request_default_instance_;
class CUserAccount_GetFriendInviteTokens_Response;
class CUserAccount_GetFriendInviteTokens_ResponseDefaultTypeInternal;
extern CUserAccount_GetFriendInviteTokens_ResponseDefaultTypeInternal _CUserAccount_GetFriendInviteTokens_Response_default_instance_;
class CUserAccount_RegisterCompatTool_Request;
class CUserAccount_RegisterCompatTool_RequestDefaultTypeInternal;
extern CUserAccount_RegisterCompatTool_RequestDefaultTypeInternal _CUserAccount_RegisterCompatTool_Request_default_instance_;
class CUserAccount_RegisterCompatTool_Response;
class CUserAccount_RegisterCompatTool_ResponseDefaultTypeInternal;
extern CUserAccount_RegisterCompatTool_ResponseDefaultTypeInternal _CUserAccount_RegisterCompatTool_Response_default_instance_;
class CUserAccount_RevokeFriendInviteToken_Request;
class CUserAccount_RevokeFriendInviteToken_RequestDefaultTypeInternal;
extern CUserAccount_RevokeFriendInviteToken_RequestDefaultTypeInternal _CUserAccount_RevokeFriendInviteToken_Request_default_instance_;
class CUserAccount_RevokeFriendInviteToken_Response;
class CUserAccount_RevokeFriendInviteToken_ResponseDefaultTypeInternal;
extern CUserAccount_RevokeFriendInviteToken_ResponseDefaultTypeInternal _CUserAccount_RevokeFriendInviteToken_Response_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request* Arena::CreateMaybeMessage<::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request>(Arena*);
template<> ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response* Arena::CreateMaybeMessage<::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response>(Arena*);
template<> ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* Arena::CreateMaybeMessage<::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>(Arena*);
template<> ::proto::steam::CUserAccount_CreateFriendInviteToken_Request* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_CreateFriendInviteToken_Request>(Arena*);
template<> ::proto::steam::CUserAccount_CreateFriendInviteToken_Response* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_CreateFriendInviteToken_Response>(Arena*);
template<> ::proto::steam::CUserAccount_GetAccountLinkStatus_Request* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_GetAccountLinkStatus_Request>(Arena*);
template<> ::proto::steam::CUserAccount_GetAccountLinkStatus_Response* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_GetAccountLinkStatus_Response>(Arena*);
template<> ::proto::steam::CUserAccount_GetFriendInviteTokens_Request* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_GetFriendInviteTokens_Request>(Arena*);
template<> ::proto::steam::CUserAccount_GetFriendInviteTokens_Response* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_GetFriendInviteTokens_Response>(Arena*);
template<> ::proto::steam::CUserAccount_RegisterCompatTool_Request* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_RegisterCompatTool_Request>(Arena*);
template<> ::proto::steam::CUserAccount_RegisterCompatTool_Response* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_RegisterCompatTool_Response>(Arena*);
template<> ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_RevokeFriendInviteToken_Request>(Arena*);
template<> ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response* Arena::CreateMaybeMessage<::proto::steam::CUserAccount_RevokeFriendInviteToken_Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

enum EInternalAccountType {
  k_EInternalSteamAccountType = 1,
  k_EInternalClanType = 2,
  k_EInternalAppType = 3,
  k_EInternalBroadcastChannelType = 4
};
bool EInternalAccountType_IsValid(int value);
const EInternalAccountType EInternalAccountType_MIN = k_EInternalSteamAccountType;
const EInternalAccountType EInternalAccountType_MAX = k_EInternalBroadcastChannelType;
const int EInternalAccountType_ARRAYSIZE = EInternalAccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EInternalAccountType_descriptor();
inline const ::std::string& EInternalAccountType_Name(EInternalAccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EInternalAccountType_descriptor(), value);
}
inline bool EInternalAccountType_Parse(
    const ::std::string& name, EInternalAccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EInternalAccountType>(
    EInternalAccountType_descriptor(), name, value);
}
enum EExternalAccountType {
  k_EExternalNone = 0,
  k_EExternalSteamAccount = 1,
  k_EExternalGoogleAccount = 2,
  k_EExternalFacebookAccount = 3,
  k_EExternalTwitterAccount = 4,
  k_EExternalTwitchAccount = 5,
  k_EExternalYouTubeChannelAccount = 6,
  k_EExternalFacebookPage = 7
};
bool EExternalAccountType_IsValid(int value);
const EExternalAccountType EExternalAccountType_MIN = k_EExternalNone;
const EExternalAccountType EExternalAccountType_MAX = k_EExternalFacebookPage;
const int EExternalAccountType_ARRAYSIZE = EExternalAccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EExternalAccountType_descriptor();
inline const ::std::string& EExternalAccountType_Name(EExternalAccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EExternalAccountType_descriptor(), value);
}
inline bool EExternalAccountType_Parse(
    const ::std::string& name, EExternalAccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EExternalAccountType>(
    EExternalAccountType_descriptor(), name, value);
}
// ===================================================================

class CUserAccount_GetAccountLinkStatus_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_GetAccountLinkStatus_Request) */ {
 public:
  CUserAccount_GetAccountLinkStatus_Request();
  virtual ~CUserAccount_GetAccountLinkStatus_Request();

  CUserAccount_GetAccountLinkStatus_Request(const CUserAccount_GetAccountLinkStatus_Request& from);

  inline CUserAccount_GetAccountLinkStatus_Request& operator=(const CUserAccount_GetAccountLinkStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_GetAccountLinkStatus_Request(CUserAccount_GetAccountLinkStatus_Request&& from) noexcept
    : CUserAccount_GetAccountLinkStatus_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetAccountLinkStatus_Request& operator=(CUserAccount_GetAccountLinkStatus_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_GetAccountLinkStatus_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_GetAccountLinkStatus_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetAccountLinkStatus_Request*>(
               &_CUserAccount_GetAccountLinkStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CUserAccount_GetAccountLinkStatus_Request* other);
  friend void swap(CUserAccount_GetAccountLinkStatus_Request& a, CUserAccount_GetAccountLinkStatus_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_GetAccountLinkStatus_Request* New() const final {
    return CreateMaybeMessage<CUserAccount_GetAccountLinkStatus_Request>(nullptr);
  }

  CUserAccount_GetAccountLinkStatus_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_GetAccountLinkStatus_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_GetAccountLinkStatus_Request& from);
  void MergeFrom(const CUserAccount_GetAccountLinkStatus_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetAccountLinkStatus_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_GetAccountLinkStatus_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetAccountLinkStatus_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_GetAccountLinkStatus_Response) */ {
 public:
  CUserAccount_GetAccountLinkStatus_Response();
  virtual ~CUserAccount_GetAccountLinkStatus_Response();

  CUserAccount_GetAccountLinkStatus_Response(const CUserAccount_GetAccountLinkStatus_Response& from);

  inline CUserAccount_GetAccountLinkStatus_Response& operator=(const CUserAccount_GetAccountLinkStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_GetAccountLinkStatus_Response(CUserAccount_GetAccountLinkStatus_Response&& from) noexcept
    : CUserAccount_GetAccountLinkStatus_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetAccountLinkStatus_Response& operator=(CUserAccount_GetAccountLinkStatus_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_GetAccountLinkStatus_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_GetAccountLinkStatus_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetAccountLinkStatus_Response*>(
               &_CUserAccount_GetAccountLinkStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CUserAccount_GetAccountLinkStatus_Response* other);
  friend void swap(CUserAccount_GetAccountLinkStatus_Response& a, CUserAccount_GetAccountLinkStatus_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_GetAccountLinkStatus_Response* New() const final {
    return CreateMaybeMessage<CUserAccount_GetAccountLinkStatus_Response>(nullptr);
  }

  CUserAccount_GetAccountLinkStatus_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_GetAccountLinkStatus_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_GetAccountLinkStatus_Response& from);
  void MergeFrom(const CUserAccount_GetAccountLinkStatus_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetAccountLinkStatus_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pwid = 1;
  bool has_pwid() const;
  void clear_pwid();
  static const int kPwidFieldNumber = 1;
  ::google::protobuf::uint32 pwid() const;
  void set_pwid(::google::protobuf::uint32 value);

  // optional uint32 identity_verification = 2;
  bool has_identity_verification() const;
  void clear_identity_verification();
  static const int kIdentityVerificationFieldNumber = 2;
  ::google::protobuf::uint32 identity_verification() const;
  void set_identity_verification(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_GetAccountLinkStatus_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 pwid_;
  ::google::protobuf::uint32 identity_verification_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_CreateFriendInviteToken_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_CreateFriendInviteToken_Request) */ {
 public:
  CUserAccount_CreateFriendInviteToken_Request();
  virtual ~CUserAccount_CreateFriendInviteToken_Request();

  CUserAccount_CreateFriendInviteToken_Request(const CUserAccount_CreateFriendInviteToken_Request& from);

  inline CUserAccount_CreateFriendInviteToken_Request& operator=(const CUserAccount_CreateFriendInviteToken_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_CreateFriendInviteToken_Request(CUserAccount_CreateFriendInviteToken_Request&& from) noexcept
    : CUserAccount_CreateFriendInviteToken_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_CreateFriendInviteToken_Request& operator=(CUserAccount_CreateFriendInviteToken_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_CreateFriendInviteToken_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_CreateFriendInviteToken_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_CreateFriendInviteToken_Request*>(
               &_CUserAccount_CreateFriendInviteToken_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CUserAccount_CreateFriendInviteToken_Request* other);
  friend void swap(CUserAccount_CreateFriendInviteToken_Request& a, CUserAccount_CreateFriendInviteToken_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_CreateFriendInviteToken_Request* New() const final {
    return CreateMaybeMessage<CUserAccount_CreateFriendInviteToken_Request>(nullptr);
  }

  CUserAccount_CreateFriendInviteToken_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_CreateFriendInviteToken_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_CreateFriendInviteToken_Request& from);
  void MergeFrom(const CUserAccount_CreateFriendInviteToken_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_CreateFriendInviteToken_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string invite_note = 3;
  bool has_invite_note() const;
  void clear_invite_note();
  static const int kInviteNoteFieldNumber = 3;
  const ::std::string& invite_note() const;
  void set_invite_note(const ::std::string& value);
  #if LANG_CXX11
  void set_invite_note(::std::string&& value);
  #endif
  void set_invite_note(const char* value);
  void set_invite_note(const char* value, size_t size);
  ::std::string* mutable_invite_note();
  ::std::string* release_invite_note();
  void set_allocated_invite_note(::std::string* invite_note);

  // optional uint32 invite_limit = 1;
  bool has_invite_limit() const;
  void clear_invite_limit();
  static const int kInviteLimitFieldNumber = 1;
  ::google::protobuf::uint32 invite_limit() const;
  void set_invite_limit(::google::protobuf::uint32 value);

  // optional uint32 invite_duration = 2;
  bool has_invite_duration() const;
  void clear_invite_duration();
  static const int kInviteDurationFieldNumber = 2;
  ::google::protobuf::uint32 invite_duration() const;
  void set_invite_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_CreateFriendInviteToken_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr invite_note_;
  ::google::protobuf::uint32 invite_limit_;
  ::google::protobuf::uint32 invite_duration_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_CreateFriendInviteToken_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_CreateFriendInviteToken_Response) */ {
 public:
  CUserAccount_CreateFriendInviteToken_Response();
  virtual ~CUserAccount_CreateFriendInviteToken_Response();

  CUserAccount_CreateFriendInviteToken_Response(const CUserAccount_CreateFriendInviteToken_Response& from);

  inline CUserAccount_CreateFriendInviteToken_Response& operator=(const CUserAccount_CreateFriendInviteToken_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_CreateFriendInviteToken_Response(CUserAccount_CreateFriendInviteToken_Response&& from) noexcept
    : CUserAccount_CreateFriendInviteToken_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_CreateFriendInviteToken_Response& operator=(CUserAccount_CreateFriendInviteToken_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_CreateFriendInviteToken_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_CreateFriendInviteToken_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_CreateFriendInviteToken_Response*>(
               &_CUserAccount_CreateFriendInviteToken_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CUserAccount_CreateFriendInviteToken_Response* other);
  friend void swap(CUserAccount_CreateFriendInviteToken_Response& a, CUserAccount_CreateFriendInviteToken_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_CreateFriendInviteToken_Response* New() const final {
    return CreateMaybeMessage<CUserAccount_CreateFriendInviteToken_Response>(nullptr);
  }

  CUserAccount_CreateFriendInviteToken_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_CreateFriendInviteToken_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_CreateFriendInviteToken_Response& from);
  void MergeFrom(const CUserAccount_CreateFriendInviteToken_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_CreateFriendInviteToken_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string invite_token = 1;
  bool has_invite_token() const;
  void clear_invite_token();
  static const int kInviteTokenFieldNumber = 1;
  const ::std::string& invite_token() const;
  void set_invite_token(const ::std::string& value);
  #if LANG_CXX11
  void set_invite_token(::std::string&& value);
  #endif
  void set_invite_token(const char* value);
  void set_invite_token(const char* value, size_t size);
  ::std::string* mutable_invite_token();
  ::std::string* release_invite_token();
  void set_allocated_invite_token(::std::string* invite_token);

  // optional uint64 invite_limit = 2;
  bool has_invite_limit() const;
  void clear_invite_limit();
  static const int kInviteLimitFieldNumber = 2;
  ::google::protobuf::uint64 invite_limit() const;
  void set_invite_limit(::google::protobuf::uint64 value);

  // optional uint64 invite_duration = 3;
  bool has_invite_duration() const;
  void clear_invite_duration();
  static const int kInviteDurationFieldNumber = 3;
  ::google::protobuf::uint64 invite_duration() const;
  void set_invite_duration(::google::protobuf::uint64 value);

  // optional fixed32 time_created = 4;
  bool has_time_created() const;
  void clear_time_created();
  static const int kTimeCreatedFieldNumber = 4;
  ::google::protobuf::uint32 time_created() const;
  void set_time_created(::google::protobuf::uint32 value);

  // optional bool valid = 5;
  bool has_valid() const;
  void clear_valid();
  static const int kValidFieldNumber = 5;
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_CreateFriendInviteToken_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr invite_token_;
  ::google::protobuf::uint64 invite_limit_;
  ::google::protobuf::uint64 invite_duration_;
  ::google::protobuf::uint32 time_created_;
  bool valid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetFriendInviteTokens_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_GetFriendInviteTokens_Request) */ {
 public:
  CUserAccount_GetFriendInviteTokens_Request();
  virtual ~CUserAccount_GetFriendInviteTokens_Request();

  CUserAccount_GetFriendInviteTokens_Request(const CUserAccount_GetFriendInviteTokens_Request& from);

  inline CUserAccount_GetFriendInviteTokens_Request& operator=(const CUserAccount_GetFriendInviteTokens_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_GetFriendInviteTokens_Request(CUserAccount_GetFriendInviteTokens_Request&& from) noexcept
    : CUserAccount_GetFriendInviteTokens_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetFriendInviteTokens_Request& operator=(CUserAccount_GetFriendInviteTokens_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_GetFriendInviteTokens_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_GetFriendInviteTokens_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetFriendInviteTokens_Request*>(
               &_CUserAccount_GetFriendInviteTokens_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CUserAccount_GetFriendInviteTokens_Request* other);
  friend void swap(CUserAccount_GetFriendInviteTokens_Request& a, CUserAccount_GetFriendInviteTokens_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_GetFriendInviteTokens_Request* New() const final {
    return CreateMaybeMessage<CUserAccount_GetFriendInviteTokens_Request>(nullptr);
  }

  CUserAccount_GetFriendInviteTokens_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_GetFriendInviteTokens_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_GetFriendInviteTokens_Request& from);
  void MergeFrom(const CUserAccount_GetFriendInviteTokens_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetFriendInviteTokens_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_GetFriendInviteTokens_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_GetFriendInviteTokens_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_GetFriendInviteTokens_Response) */ {
 public:
  CUserAccount_GetFriendInviteTokens_Response();
  virtual ~CUserAccount_GetFriendInviteTokens_Response();

  CUserAccount_GetFriendInviteTokens_Response(const CUserAccount_GetFriendInviteTokens_Response& from);

  inline CUserAccount_GetFriendInviteTokens_Response& operator=(const CUserAccount_GetFriendInviteTokens_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_GetFriendInviteTokens_Response(CUserAccount_GetFriendInviteTokens_Response&& from) noexcept
    : CUserAccount_GetFriendInviteTokens_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_GetFriendInviteTokens_Response& operator=(CUserAccount_GetFriendInviteTokens_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_GetFriendInviteTokens_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_GetFriendInviteTokens_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_GetFriendInviteTokens_Response*>(
               &_CUserAccount_GetFriendInviteTokens_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CUserAccount_GetFriendInviteTokens_Response* other);
  friend void swap(CUserAccount_GetFriendInviteTokens_Response& a, CUserAccount_GetFriendInviteTokens_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_GetFriendInviteTokens_Response* New() const final {
    return CreateMaybeMessage<CUserAccount_GetFriendInviteTokens_Response>(nullptr);
  }

  CUserAccount_GetFriendInviteTokens_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_GetFriendInviteTokens_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_GetFriendInviteTokens_Response& from);
  void MergeFrom(const CUserAccount_GetFriendInviteTokens_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_GetFriendInviteTokens_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CUserAccount_CreateFriendInviteToken_Response tokens = 1;
  int tokens_size() const;
  void clear_tokens();
  static const int kTokensFieldNumber = 1;
  ::proto::steam::CUserAccount_CreateFriendInviteToken_Response* mutable_tokens(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CUserAccount_CreateFriendInviteToken_Response >*
      mutable_tokens();
  const ::proto::steam::CUserAccount_CreateFriendInviteToken_Response& tokens(int index) const;
  ::proto::steam::CUserAccount_CreateFriendInviteToken_Response* add_tokens();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CUserAccount_CreateFriendInviteToken_Response >&
      tokens() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_GetFriendInviteTokens_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CUserAccount_CreateFriendInviteToken_Response > tokens_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RevokeFriendInviteToken_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_RevokeFriendInviteToken_Request) */ {
 public:
  CUserAccount_RevokeFriendInviteToken_Request();
  virtual ~CUserAccount_RevokeFriendInviteToken_Request();

  CUserAccount_RevokeFriendInviteToken_Request(const CUserAccount_RevokeFriendInviteToken_Request& from);

  inline CUserAccount_RevokeFriendInviteToken_Request& operator=(const CUserAccount_RevokeFriendInviteToken_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_RevokeFriendInviteToken_Request(CUserAccount_RevokeFriendInviteToken_Request&& from) noexcept
    : CUserAccount_RevokeFriendInviteToken_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RevokeFriendInviteToken_Request& operator=(CUserAccount_RevokeFriendInviteToken_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_RevokeFriendInviteToken_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_RevokeFriendInviteToken_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RevokeFriendInviteToken_Request*>(
               &_CUserAccount_RevokeFriendInviteToken_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CUserAccount_RevokeFriendInviteToken_Request* other);
  friend void swap(CUserAccount_RevokeFriendInviteToken_Request& a, CUserAccount_RevokeFriendInviteToken_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_RevokeFriendInviteToken_Request* New() const final {
    return CreateMaybeMessage<CUserAccount_RevokeFriendInviteToken_Request>(nullptr);
  }

  CUserAccount_RevokeFriendInviteToken_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_RevokeFriendInviteToken_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_RevokeFriendInviteToken_Request& from);
  void MergeFrom(const CUserAccount_RevokeFriendInviteToken_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_RevokeFriendInviteToken_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string invite_token = 1;
  bool has_invite_token() const;
  void clear_invite_token();
  static const int kInviteTokenFieldNumber = 1;
  const ::std::string& invite_token() const;
  void set_invite_token(const ::std::string& value);
  #if LANG_CXX11
  void set_invite_token(::std::string&& value);
  #endif
  void set_invite_token(const char* value);
  void set_invite_token(const char* value, size_t size);
  ::std::string* mutable_invite_token();
  ::std::string* release_invite_token();
  void set_allocated_invite_token(::std::string* invite_token);

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_RevokeFriendInviteToken_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr invite_token_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RevokeFriendInviteToken_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_RevokeFriendInviteToken_Response) */ {
 public:
  CUserAccount_RevokeFriendInviteToken_Response();
  virtual ~CUserAccount_RevokeFriendInviteToken_Response();

  CUserAccount_RevokeFriendInviteToken_Response(const CUserAccount_RevokeFriendInviteToken_Response& from);

  inline CUserAccount_RevokeFriendInviteToken_Response& operator=(const CUserAccount_RevokeFriendInviteToken_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_RevokeFriendInviteToken_Response(CUserAccount_RevokeFriendInviteToken_Response&& from) noexcept
    : CUserAccount_RevokeFriendInviteToken_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RevokeFriendInviteToken_Response& operator=(CUserAccount_RevokeFriendInviteToken_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_RevokeFriendInviteToken_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_RevokeFriendInviteToken_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RevokeFriendInviteToken_Response*>(
               &_CUserAccount_RevokeFriendInviteToken_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CUserAccount_RevokeFriendInviteToken_Response* other);
  friend void swap(CUserAccount_RevokeFriendInviteToken_Response& a, CUserAccount_RevokeFriendInviteToken_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_RevokeFriendInviteToken_Response* New() const final {
    return CreateMaybeMessage<CUserAccount_RevokeFriendInviteToken_Response>(nullptr);
  }

  CUserAccount_RevokeFriendInviteToken_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_RevokeFriendInviteToken_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_RevokeFriendInviteToken_Response& from);
  void MergeFrom(const CUserAccount_RevokeFriendInviteToken_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_RevokeFriendInviteToken_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_RevokeFriendInviteToken_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RegisterCompatTool_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_RegisterCompatTool_Request) */ {
 public:
  CUserAccount_RegisterCompatTool_Request();
  virtual ~CUserAccount_RegisterCompatTool_Request();

  CUserAccount_RegisterCompatTool_Request(const CUserAccount_RegisterCompatTool_Request& from);

  inline CUserAccount_RegisterCompatTool_Request& operator=(const CUserAccount_RegisterCompatTool_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_RegisterCompatTool_Request(CUserAccount_RegisterCompatTool_Request&& from) noexcept
    : CUserAccount_RegisterCompatTool_Request() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RegisterCompatTool_Request& operator=(CUserAccount_RegisterCompatTool_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_RegisterCompatTool_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_RegisterCompatTool_Request* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RegisterCompatTool_Request*>(
               &_CUserAccount_RegisterCompatTool_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CUserAccount_RegisterCompatTool_Request* other);
  friend void swap(CUserAccount_RegisterCompatTool_Request& a, CUserAccount_RegisterCompatTool_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_RegisterCompatTool_Request* New() const final {
    return CreateMaybeMessage<CUserAccount_RegisterCompatTool_Request>(nullptr);
  }

  CUserAccount_RegisterCompatTool_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_RegisterCompatTool_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_RegisterCompatTool_Request& from);
  void MergeFrom(const CUserAccount_RegisterCompatTool_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_RegisterCompatTool_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 compat_tool = 1;
  bool has_compat_tool() const;
  void clear_compat_tool();
  static const int kCompatToolFieldNumber = 1;
  ::google::protobuf::uint32 compat_tool() const;
  void set_compat_tool(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_RegisterCompatTool_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 compat_tool_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CUserAccount_RegisterCompatTool_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CUserAccount_RegisterCompatTool_Response) */ {
 public:
  CUserAccount_RegisterCompatTool_Response();
  virtual ~CUserAccount_RegisterCompatTool_Response();

  CUserAccount_RegisterCompatTool_Response(const CUserAccount_RegisterCompatTool_Response& from);

  inline CUserAccount_RegisterCompatTool_Response& operator=(const CUserAccount_RegisterCompatTool_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CUserAccount_RegisterCompatTool_Response(CUserAccount_RegisterCompatTool_Response&& from) noexcept
    : CUserAccount_RegisterCompatTool_Response() {
    *this = ::std::move(from);
  }

  inline CUserAccount_RegisterCompatTool_Response& operator=(CUserAccount_RegisterCompatTool_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CUserAccount_RegisterCompatTool_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CUserAccount_RegisterCompatTool_Response* internal_default_instance() {
    return reinterpret_cast<const CUserAccount_RegisterCompatTool_Response*>(
               &_CUserAccount_RegisterCompatTool_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CUserAccount_RegisterCompatTool_Response* other);
  friend void swap(CUserAccount_RegisterCompatTool_Response& a, CUserAccount_RegisterCompatTool_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CUserAccount_RegisterCompatTool_Response* New() const final {
    return CreateMaybeMessage<CUserAccount_RegisterCompatTool_Response>(nullptr);
  }

  CUserAccount_RegisterCompatTool_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CUserAccount_RegisterCompatTool_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CUserAccount_RegisterCompatTool_Response& from);
  void MergeFrom(const CUserAccount_RegisterCompatTool_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUserAccount_RegisterCompatTool_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CUserAccount_RegisterCompatTool_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountLinking_GetLinkedAccountInfo_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request) */ {
 public:
  CAccountLinking_GetLinkedAccountInfo_Request();
  virtual ~CAccountLinking_GetLinkedAccountInfo_Request();

  CAccountLinking_GetLinkedAccountInfo_Request(const CAccountLinking_GetLinkedAccountInfo_Request& from);

  inline CAccountLinking_GetLinkedAccountInfo_Request& operator=(const CAccountLinking_GetLinkedAccountInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CAccountLinking_GetLinkedAccountInfo_Request(CAccountLinking_GetLinkedAccountInfo_Request&& from) noexcept
    : CAccountLinking_GetLinkedAccountInfo_Request() {
    *this = ::std::move(from);
  }

  inline CAccountLinking_GetLinkedAccountInfo_Request& operator=(CAccountLinking_GetLinkedAccountInfo_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CAccountLinking_GetLinkedAccountInfo_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAccountLinking_GetLinkedAccountInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CAccountLinking_GetLinkedAccountInfo_Request*>(
               &_CAccountLinking_GetLinkedAccountInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CAccountLinking_GetLinkedAccountInfo_Request* other);
  friend void swap(CAccountLinking_GetLinkedAccountInfo_Request& a, CAccountLinking_GetLinkedAccountInfo_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CAccountLinking_GetLinkedAccountInfo_Request* New() const final {
    return CreateMaybeMessage<CAccountLinking_GetLinkedAccountInfo_Request>(nullptr);
  }

  CAccountLinking_GetLinkedAccountInfo_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CAccountLinking_GetLinkedAccountInfo_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Request& from);
  void MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountLinking_GetLinkedAccountInfo_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 account_id = 2 [(.proto.steam.description) = "Internal account ID"];
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  ::google::protobuf::uint64 account_id() const;
  void set_account_id(::google::protobuf::uint64 value);

  // optional .proto.steam.EExternalAccountType filter = 3 [default = k_EExternalNone, (.proto.steam.description) = "if specified then only return this external account type"];
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  ::proto::steam::EExternalAccountType filter() const;
  void set_filter(::proto::steam::EExternalAccountType value);

  // optional bool return_access_token = 4 [(.proto.steam.description) = "if provided and true, then returns valid access token if available. It may refresh the token. "];
  bool has_return_access_token() const;
  void clear_return_access_token();
  static const int kReturnAccessTokenFieldNumber = 4;
  bool return_access_token() const;
  void set_return_access_token(bool value);

  // optional .proto.steam.EInternalAccountType account_type = 1 [default = k_EInternalSteamAccountType];
  bool has_account_type() const;
  void clear_account_type();
  static const int kAccountTypeFieldNumber = 1;
  ::proto::steam::EInternalAccountType account_type() const;
  void set_account_type(::proto::steam::EInternalAccountType value);

  // @@protoc_insertion_point(class_scope:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 account_id_;
  int filter_;
  bool return_access_token_;
  int account_type_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response) */ {
 public:
  CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response();
  virtual ~CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response();

  CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from);

  inline CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& operator=(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response&& from) noexcept
    : CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response() {
    *this = ::std::move(from);
  }

  inline CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& operator=(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response*>(
               &_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* other);
  friend void swap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& a, CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* New() const final {
    return CreateMaybeMessage<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>(nullptr);
  }

  CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from);
  void MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string external_id = 2 [(.proto.steam.description) = "unique external account identifier"];
  bool has_external_id() const;
  void clear_external_id();
  static const int kExternalIdFieldNumber = 2;
  const ::std::string& external_id() const;
  void set_external_id(const ::std::string& value);
  #if LANG_CXX11
  void set_external_id(::std::string&& value);
  #endif
  void set_external_id(const char* value);
  void set_external_id(const char* value, size_t size);
  ::std::string* mutable_external_id();
  ::std::string* release_external_id();
  void set_allocated_external_id(::std::string* external_id);

  // optional string external_user_name = 3 [(.proto.steam.description) = "user readable; best effort"];
  bool has_external_user_name() const;
  void clear_external_user_name();
  static const int kExternalUserNameFieldNumber = 3;
  const ::std::string& external_user_name() const;
  void set_external_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_external_user_name(::std::string&& value);
  #endif
  void set_external_user_name(const char* value);
  void set_external_user_name(const char* value, size_t size);
  ::std::string* mutable_external_user_name();
  ::std::string* release_external_user_name();
  void set_allocated_external_user_name(::std::string* external_user_name);

  // optional string external_url = 4 [(.proto.steam.description) = "required for all, can be a sentinal to verify correctness"];
  bool has_external_url() const;
  void clear_external_url();
  static const int kExternalUrlFieldNumber = 4;
  const ::std::string& external_url() const;
  void set_external_url(const ::std::string& value);
  #if LANG_CXX11
  void set_external_url(::std::string&& value);
  #endif
  void set_external_url(const char* value);
  void set_external_url(const char* value, size_t size);
  ::std::string* mutable_external_url();
  ::std::string* release_external_url();
  void set_allocated_external_url(::std::string* external_url);

  // optional string access_token = 5 [(.proto.steam.description) = "provided if requeest and it was valid."];
  bool has_access_token() const;
  void clear_access_token();
  static const int kAccessTokenFieldNumber = 5;
  const ::std::string& access_token() const;
  void set_access_token(const ::std::string& value);
  #if LANG_CXX11
  void set_access_token(::std::string&& value);
  #endif
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  ::std::string* mutable_access_token();
  ::std::string* release_access_token();
  void set_allocated_access_token(::std::string* access_token);

  // optional string access_token_secret = 6 [(.proto.steam.description) = "required for OAuth v1 and signing the message, provided with access token."];
  bool has_access_token_secret() const;
  void clear_access_token_secret();
  static const int kAccessTokenSecretFieldNumber = 6;
  const ::std::string& access_token_secret() const;
  void set_access_token_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_access_token_secret(::std::string&& value);
  #endif
  void set_access_token_secret(const char* value);
  void set_access_token_secret(const char* value, size_t size);
  ::std::string* mutable_access_token_secret();
  ::std::string* release_access_token_secret();
  void set_allocated_access_token_secret(::std::string* access_token_secret);

  // optional .proto.steam.EExternalAccountType external_type = 1 [default = k_EExternalNone];
  bool has_external_type() const;
  void clear_external_type();
  static const int kExternalTypeFieldNumber = 1;
  ::proto::steam::EExternalAccountType external_type() const;
  void set_external_type(::proto::steam::EExternalAccountType value);

  // optional bool is_valid = 7 [(.proto.steam.description) = "If false, it means access token no longer work (expired, disconnected) and the link is now broken. Inform user to refresh."];
  bool has_is_valid() const;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 7;
  bool is_valid() const;
  void set_is_valid(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr external_id_;
  ::google::protobuf::internal::ArenaStringPtr external_user_name_;
  ::google::protobuf::internal::ArenaStringPtr external_url_;
  ::google::protobuf::internal::ArenaStringPtr access_token_;
  ::google::protobuf::internal::ArenaStringPtr access_token_secret_;
  int external_type_;
  bool is_valid_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CAccountLinking_GetLinkedAccountInfo_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response) */ {
 public:
  CAccountLinking_GetLinkedAccountInfo_Response();
  virtual ~CAccountLinking_GetLinkedAccountInfo_Response();

  CAccountLinking_GetLinkedAccountInfo_Response(const CAccountLinking_GetLinkedAccountInfo_Response& from);

  inline CAccountLinking_GetLinkedAccountInfo_Response& operator=(const CAccountLinking_GetLinkedAccountInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CAccountLinking_GetLinkedAccountInfo_Response(CAccountLinking_GetLinkedAccountInfo_Response&& from) noexcept
    : CAccountLinking_GetLinkedAccountInfo_Response() {
    *this = ::std::move(from);
  }

  inline CAccountLinking_GetLinkedAccountInfo_Response& operator=(CAccountLinking_GetLinkedAccountInfo_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CAccountLinking_GetLinkedAccountInfo_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAccountLinking_GetLinkedAccountInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CAccountLinking_GetLinkedAccountInfo_Response*>(
               &_CAccountLinking_GetLinkedAccountInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CAccountLinking_GetLinkedAccountInfo_Response* other);
  friend void swap(CAccountLinking_GetLinkedAccountInfo_Response& a, CAccountLinking_GetLinkedAccountInfo_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CAccountLinking_GetLinkedAccountInfo_Response* New() const final {
    return CreateMaybeMessage<CAccountLinking_GetLinkedAccountInfo_Response>(nullptr);
  }

  CAccountLinking_GetLinkedAccountInfo_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CAccountLinking_GetLinkedAccountInfo_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CAccountLinking_GetLinkedAccountInfo_Response& from);
  void MergeFrom(const CAccountLinking_GetLinkedAccountInfo_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAccountLinking_GetLinkedAccountInfo_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response CExternalAccountTuple_Response;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
  int external_accounts_size() const;
  void clear_external_accounts();
  static const int kExternalAccountsFieldNumber = 1;
  ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* mutable_external_accounts(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >*
      mutable_external_accounts();
  const ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& external_accounts(int index) const;
  ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* add_external_accounts();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >&
      external_accounts() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response > external_accounts_;
  friend struct ::TableStruct_steammessages_5fuseraccount_2esteamclient_2eproto;
};
// ===================================================================

class UserAccount_Stub;

class UserAccount : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserAccount() {};
 public:
  virtual ~UserAccount();

  typedef UserAccount_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetAccountLinkStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_GetAccountLinkStatus_Request* request,
                       ::proto::steam::CUserAccount_GetAccountLinkStatus_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateFriendInviteToken(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_CreateFriendInviteToken_Request* request,
                       ::proto::steam::CUserAccount_CreateFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriendInviteTokens(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_GetFriendInviteTokens_Request* request,
                       ::proto::steam::CUserAccount_GetFriendInviteTokens_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RevokeFriendInviteToken(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request* request,
                       ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RegisterCompatTool(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_RegisterCompatTool_Request* request,
                       ::proto::steam::CUserAccount_RegisterCompatTool_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserAccount);
};

class UserAccount_Stub : public UserAccount {
 public:
  UserAccount_Stub(::google::protobuf::RpcChannel* channel);
  UserAccount_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~UserAccount_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements UserAccount ------------------------------------------

  void GetAccountLinkStatus(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_GetAccountLinkStatus_Request* request,
                       ::proto::steam::CUserAccount_GetAccountLinkStatus_Response* response,
                       ::google::protobuf::Closure* done);
  void CreateFriendInviteToken(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_CreateFriendInviteToken_Request* request,
                       ::proto::steam::CUserAccount_CreateFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  void GetFriendInviteTokens(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_GetFriendInviteTokens_Request* request,
                       ::proto::steam::CUserAccount_GetFriendInviteTokens_Response* response,
                       ::google::protobuf::Closure* done);
  void RevokeFriendInviteToken(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_RevokeFriendInviteToken_Request* request,
                       ::proto::steam::CUserAccount_RevokeFriendInviteToken_Response* response,
                       ::google::protobuf::Closure* done);
  void RegisterCompatTool(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CUserAccount_RegisterCompatTool_Request* request,
                       ::proto::steam::CUserAccount_RegisterCompatTool_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserAccount_Stub);
};


// -------------------------------------------------------------------

class AccountLinking_Stub;

class AccountLinking : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline AccountLinking() {};
 public:
  virtual ~AccountLinking();

  typedef AccountLinking_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetLinkedAccountInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request* request,
                       ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(AccountLinking);
};

class AccountLinking_Stub : public AccountLinking {
 public:
  AccountLinking_Stub(::google::protobuf::RpcChannel* channel);
  AccountLinking_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~AccountLinking_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements AccountLinking ------------------------------------------

  void GetLinkedAccountInfo(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Request* request,
                       ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(AccountLinking_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CUserAccount_GetAccountLinkStatus_Request

// -------------------------------------------------------------------

// CUserAccount_GetAccountLinkStatus_Response

// optional uint32 pwid = 1;
inline bool CUserAccount_GetAccountLinkStatus_Response::has_pwid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CUserAccount_GetAccountLinkStatus_Response::clear_pwid() {
  pwid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CUserAccount_GetAccountLinkStatus_Response::pwid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_GetAccountLinkStatus_Response.pwid)
  return pwid_;
}
inline void CUserAccount_GetAccountLinkStatus_Response::set_pwid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pwid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_GetAccountLinkStatus_Response.pwid)
}

// optional uint32 identity_verification = 2;
inline bool CUserAccount_GetAccountLinkStatus_Response::has_identity_verification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CUserAccount_GetAccountLinkStatus_Response::clear_identity_verification() {
  identity_verification_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CUserAccount_GetAccountLinkStatus_Response::identity_verification() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_GetAccountLinkStatus_Response.identity_verification)
  return identity_verification_;
}
inline void CUserAccount_GetAccountLinkStatus_Response::set_identity_verification(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  identity_verification_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_GetAccountLinkStatus_Response.identity_verification)
}

// -------------------------------------------------------------------

// CUserAccount_CreateFriendInviteToken_Request

// optional uint32 invite_limit = 1;
inline bool CUserAccount_CreateFriendInviteToken_Request::has_invite_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CUserAccount_CreateFriendInviteToken_Request::clear_invite_limit() {
  invite_limit_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CUserAccount_CreateFriendInviteToken_Request::invite_limit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_limit)
  return invite_limit_;
}
inline void CUserAccount_CreateFriendInviteToken_Request::set_invite_limit(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  invite_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_limit)
}

// optional uint32 invite_duration = 2;
inline bool CUserAccount_CreateFriendInviteToken_Request::has_invite_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CUserAccount_CreateFriendInviteToken_Request::clear_invite_duration() {
  invite_duration_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CUserAccount_CreateFriendInviteToken_Request::invite_duration() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_duration)
  return invite_duration_;
}
inline void CUserAccount_CreateFriendInviteToken_Request::set_invite_duration(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  invite_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_duration)
}

// optional string invite_note = 3;
inline bool CUserAccount_CreateFriendInviteToken_Request::has_invite_note() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CUserAccount_CreateFriendInviteToken_Request::clear_invite_note() {
  invite_note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CUserAccount_CreateFriendInviteToken_Request::invite_note() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note)
  return invite_note_.GetNoArena();
}
inline void CUserAccount_CreateFriendInviteToken_Request::set_invite_note(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note)
}
#if LANG_CXX11
inline void CUserAccount_CreateFriendInviteToken_Request::set_invite_note(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_note_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note)
}
#endif
inline void CUserAccount_CreateFriendInviteToken_Request::set_invite_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  invite_note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note)
}
inline void CUserAccount_CreateFriendInviteToken_Request::set_invite_note(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  invite_note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note)
}
inline ::std::string* CUserAccount_CreateFriendInviteToken_Request::mutable_invite_note() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note)
  return invite_note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CUserAccount_CreateFriendInviteToken_Request::release_invite_note() {
  // @@protoc_insertion_point(field_release:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note)
  if (!has_invite_note()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return invite_note_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CUserAccount_CreateFriendInviteToken_Request::set_allocated_invite_note(::std::string* invite_note) {
  if (invite_note != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invite_note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invite_note);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CUserAccount_CreateFriendInviteToken_Request.invite_note)
}

// -------------------------------------------------------------------

// CUserAccount_CreateFriendInviteToken_Response

// optional string invite_token = 1;
inline bool CUserAccount_CreateFriendInviteToken_Response::has_invite_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_invite_token() {
  invite_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CUserAccount_CreateFriendInviteToken_Response::invite_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token)
  return invite_token_.GetNoArena();
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_invite_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token)
}
#if LANG_CXX11
inline void CUserAccount_CreateFriendInviteToken_Response::set_invite_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token)
}
#endif
inline void CUserAccount_CreateFriendInviteToken_Response::set_invite_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  invite_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token)
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_invite_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token)
}
inline ::std::string* CUserAccount_CreateFriendInviteToken_Response::mutable_invite_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token)
  return invite_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CUserAccount_CreateFriendInviteToken_Response::release_invite_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token)
  if (!has_invite_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return invite_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_allocated_invite_token(::std::string* invite_token) {
  if (invite_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invite_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invite_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_token)
}

// optional uint64 invite_limit = 2;
inline bool CUserAccount_CreateFriendInviteToken_Response::has_invite_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_invite_limit() {
  invite_limit_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CUserAccount_CreateFriendInviteToken_Response::invite_limit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_limit)
  return invite_limit_;
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_invite_limit(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  invite_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_limit)
}

// optional uint64 invite_duration = 3;
inline bool CUserAccount_CreateFriendInviteToken_Response::has_invite_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_invite_duration() {
  invite_duration_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CUserAccount_CreateFriendInviteToken_Response::invite_duration() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_duration)
  return invite_duration_;
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_invite_duration(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  invite_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_CreateFriendInviteToken_Response.invite_duration)
}

// optional fixed32 time_created = 4;
inline bool CUserAccount_CreateFriendInviteToken_Response::has_time_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CUserAccount_CreateFriendInviteToken_Response::time_created() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_CreateFriendInviteToken_Response.time_created)
  return time_created_;
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_time_created(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_CreateFriendInviteToken_Response.time_created)
}

// optional bool valid = 5;
inline bool CUserAccount_CreateFriendInviteToken_Response::has_valid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CUserAccount_CreateFriendInviteToken_Response::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CUserAccount_CreateFriendInviteToken_Response::valid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_CreateFriendInviteToken_Response.valid)
  return valid_;
}
inline void CUserAccount_CreateFriendInviteToken_Response::set_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  valid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_CreateFriendInviteToken_Response.valid)
}

// -------------------------------------------------------------------

// CUserAccount_GetFriendInviteTokens_Request

// -------------------------------------------------------------------

// CUserAccount_GetFriendInviteTokens_Response

// repeated .proto.steam.CUserAccount_CreateFriendInviteToken_Response tokens = 1;
inline int CUserAccount_GetFriendInviteTokens_Response::tokens_size() const {
  return tokens_.size();
}
inline void CUserAccount_GetFriendInviteTokens_Response::clear_tokens() {
  tokens_.Clear();
}
inline ::proto::steam::CUserAccount_CreateFriendInviteToken_Response* CUserAccount_GetFriendInviteTokens_Response::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CUserAccount_GetFriendInviteTokens_Response.tokens)
  return tokens_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CUserAccount_CreateFriendInviteToken_Response >*
CUserAccount_GetFriendInviteTokens_Response::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CUserAccount_GetFriendInviteTokens_Response.tokens)
  return &tokens_;
}
inline const ::proto::steam::CUserAccount_CreateFriendInviteToken_Response& CUserAccount_GetFriendInviteTokens_Response::tokens(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_GetFriendInviteTokens_Response.tokens)
  return tokens_.Get(index);
}
inline ::proto::steam::CUserAccount_CreateFriendInviteToken_Response* CUserAccount_GetFriendInviteTokens_Response::add_tokens() {
  // @@protoc_insertion_point(field_add:proto.steam.CUserAccount_GetFriendInviteTokens_Response.tokens)
  return tokens_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CUserAccount_CreateFriendInviteToken_Response >&
CUserAccount_GetFriendInviteTokens_Response::tokens() const {
  // @@protoc_insertion_point(field_list:proto.steam.CUserAccount_GetFriendInviteTokens_Response.tokens)
  return tokens_;
}

// -------------------------------------------------------------------

// CUserAccount_RevokeFriendInviteToken_Request

// optional string invite_token = 1;
inline bool CUserAccount_RevokeFriendInviteToken_Request::has_invite_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CUserAccount_RevokeFriendInviteToken_Request::clear_invite_token() {
  invite_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CUserAccount_RevokeFriendInviteToken_Request::invite_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token)
  return invite_token_.GetNoArena();
}
inline void CUserAccount_RevokeFriendInviteToken_Request::set_invite_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token)
}
#if LANG_CXX11
inline void CUserAccount_RevokeFriendInviteToken_Request::set_invite_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token)
}
#endif
inline void CUserAccount_RevokeFriendInviteToken_Request::set_invite_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  invite_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token)
}
inline void CUserAccount_RevokeFriendInviteToken_Request::set_invite_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  invite_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token)
}
inline ::std::string* CUserAccount_RevokeFriendInviteToken_Request::mutable_invite_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token)
  return invite_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CUserAccount_RevokeFriendInviteToken_Request::release_invite_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token)
  if (!has_invite_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return invite_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CUserAccount_RevokeFriendInviteToken_Request::set_allocated_invite_token(::std::string* invite_token) {
  if (invite_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invite_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invite_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CUserAccount_RevokeFriendInviteToken_Request.invite_token)
}

// -------------------------------------------------------------------

// CUserAccount_RevokeFriendInviteToken_Response

// -------------------------------------------------------------------

// CUserAccount_RegisterCompatTool_Request

// optional uint32 compat_tool = 1;
inline bool CUserAccount_RegisterCompatTool_Request::has_compat_tool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CUserAccount_RegisterCompatTool_Request::clear_compat_tool() {
  compat_tool_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CUserAccount_RegisterCompatTool_Request::compat_tool() const {
  // @@protoc_insertion_point(field_get:proto.steam.CUserAccount_RegisterCompatTool_Request.compat_tool)
  return compat_tool_;
}
inline void CUserAccount_RegisterCompatTool_Request::set_compat_tool(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  compat_tool_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CUserAccount_RegisterCompatTool_Request.compat_tool)
}

// -------------------------------------------------------------------

// CUserAccount_RegisterCompatTool_Response

// -------------------------------------------------------------------

// CAccountLinking_GetLinkedAccountInfo_Request

// optional .proto.steam.EInternalAccountType account_type = 1 [default = k_EInternalSteamAccountType];
inline bool CAccountLinking_GetLinkedAccountInfo_Request::has_account_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::clear_account_type() {
  account_type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::proto::steam::EInternalAccountType CAccountLinking_GetLinkedAccountInfo_Request::account_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request.account_type)
  return static_cast< ::proto::steam::EInternalAccountType >(account_type_);
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::set_account_type(::proto::steam::EInternalAccountType value) {
  assert(::proto::steam::EInternalAccountType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  account_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request.account_type)
}

// optional uint64 account_id = 2 [(.proto.steam.description) = "Internal account ID"];
inline bool CAccountLinking_GetLinkedAccountInfo_Request::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::clear_account_id() {
  account_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CAccountLinking_GetLinkedAccountInfo_Request::account_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request.account_id)
  return account_id_;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::set_account_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request.account_id)
}

// optional .proto.steam.EExternalAccountType filter = 3 [default = k_EExternalNone, (.proto.steam.description) = "if specified then only return this external account type"];
inline bool CAccountLinking_GetLinkedAccountInfo_Request::has_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::clear_filter() {
  filter_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::steam::EExternalAccountType CAccountLinking_GetLinkedAccountInfo_Request::filter() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request.filter)
  return static_cast< ::proto::steam::EExternalAccountType >(filter_);
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::set_filter(::proto::steam::EExternalAccountType value) {
  assert(::proto::steam::EExternalAccountType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  filter_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request.filter)
}

// optional bool return_access_token = 4 [(.proto.steam.description) = "if provided and true, then returns valid access token if available. It may refresh the token. "];
inline bool CAccountLinking_GetLinkedAccountInfo_Request::has_return_access_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::clear_return_access_token() {
  return_access_token_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Request::return_access_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request.return_access_token)
  return return_access_token_;
}
inline void CAccountLinking_GetLinkedAccountInfo_Request::set_return_access_token(bool value) {
  _has_bits_[0] |= 0x00000004u;
  return_access_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Request.return_access_token)
}

// -------------------------------------------------------------------

// CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response

// optional .proto.steam.EExternalAccountType external_type = 1 [default = k_EExternalNone];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_external_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_external_type() {
  external_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::proto::steam::EExternalAccountType CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::external_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_type)
  return static_cast< ::proto::steam::EExternalAccountType >(external_type_);
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_type(::proto::steam::EExternalAccountType value) {
  assert(::proto::steam::EExternalAccountType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  external_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_type)
}

// optional string external_id = 2 [(.proto.steam.description) = "unique external account identifier"];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_external_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_external_id() {
  external_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::external_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
  return external_id_.GetNoArena();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  external_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
}
#if LANG_CXX11
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  external_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
}
#endif
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  external_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  external_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_external_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
  return external_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_external_id() {
  // @@protoc_insertion_point(field_release:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
  if (!has_external_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return external_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_external_id(::std::string* external_id) {
  if (external_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  external_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_id);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_id)
}

// optional string external_user_name = 3 [(.proto.steam.description) = "user readable; best effort"];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_external_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_external_user_name() {
  external_user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::external_user_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
  return external_user_name_.GetNoArena();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_user_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  external_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
}
#if LANG_CXX11
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_user_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  external_user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
}
#endif
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  external_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_user_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  external_user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_external_user_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
  return external_user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_external_user_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
  if (!has_external_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return external_user_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_external_user_name(::std::string* external_user_name) {
  if (external_user_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  external_user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_user_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_user_name)
}

// optional string external_url = 4 [(.proto.steam.description) = "required for all, can be a sentinal to verify correctness"];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_external_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_external_url() {
  external_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::external_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
  return external_url_.GetNoArena();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
}
#if LANG_CXX11
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  external_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
}
#endif
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_external_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  external_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_external_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
  return external_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_external_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
  if (!has_external_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return external_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_external_url(::std::string* external_url) {
  if (external_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  external_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_url)
}

// optional string access_token = 5 [(.proto.steam.description) = "provided if requeest and it was valid."];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_access_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::access_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
  return access_token_.GetNoArena();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
}
#if LANG_CXX11
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  access_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
}
#endif
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_access_token() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_access_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
  if (!has_access_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return access_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_access_token(::std::string* access_token) {
  if (access_token != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token)
}

// optional string access_token_secret = 6 [(.proto.steam.description) = "required for OAuth v1 and signing the message, provided with access token."];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_access_token_secret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_access_token_secret() {
  access_token_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::access_token_secret() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
  return access_token_secret_.GetNoArena();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token_secret(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  access_token_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
}
#if LANG_CXX11
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token_secret(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  access_token_secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
}
#endif
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  access_token_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_access_token_secret(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  access_token_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::mutable_access_token_secret() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
  return access_token_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::release_access_token_secret() {
  // @@protoc_insertion_point(field_release:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
  if (!has_access_token_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return access_token_secret_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_allocated_access_token_secret(::std::string* access_token_secret) {
  if (access_token_secret != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  access_token_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token_secret);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.access_token_secret)
}

// optional bool is_valid = 7 [(.proto.steam.description) = "If false, it means access token no longer work (expired, disconnected) and the link is now broken. Inform user to refresh."];
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::has_is_valid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::clear_is_valid() {
  is_valid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::is_valid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.is_valid)
  return is_valid_;
}
inline void CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response::set_is_valid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.is_valid)
}

// -------------------------------------------------------------------

// CAccountLinking_GetLinkedAccountInfo_Response

// repeated .proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response external_accounts = 1;
inline int CAccountLinking_GetLinkedAccountInfo_Response::external_accounts_size() const {
  return external_accounts_.size();
}
inline void CAccountLinking_GetLinkedAccountInfo_Response::clear_external_accounts() {
  external_accounts_.Clear();
}
inline ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* CAccountLinking_GetLinkedAccountInfo_Response::mutable_external_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return external_accounts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >*
CAccountLinking_GetLinkedAccountInfo_Response::mutable_external_accounts() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return &external_accounts_;
}
inline const ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response& CAccountLinking_GetLinkedAccountInfo_Response::external_accounts(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return external_accounts_.Get(index);
}
inline ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response* CAccountLinking_GetLinkedAccountInfo_Response::add_external_accounts() {
  // @@protoc_insertion_point(field_add:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return external_accounts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response >&
CAccountLinking_GetLinkedAccountInfo_Response::external_accounts() const {
  // @@protoc_insertion_point(field_list:proto.steam.CAccountLinking_GetLinkedAccountInfo_Response.external_accounts)
  return external_accounts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::steam::EInternalAccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::EInternalAccountType>() {
  return ::proto::steam::EInternalAccountType_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::EExternalAccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::EExternalAccountType>() {
  return ::proto::steam::EExternalAccountType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5fuseraccount_2esteamclient_2eproto
