// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_datapublisher.steamclient.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fdatapublisher_2esteamclient_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fdatapublisher_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fdatapublisher_2esteamclient_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5fdatapublisher_2esteamclient_2eproto();
namespace proto {
namespace steam {
class CDataPublisher_ClientContentCorruptionReport_Notification;
class CDataPublisher_ClientContentCorruptionReport_NotificationDefaultTypeInternal;
extern CDataPublisher_ClientContentCorruptionReport_NotificationDefaultTypeInternal _CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_;
class CValveHWSurvey_GetSurveySchedule_Request;
class CValveHWSurvey_GetSurveySchedule_RequestDefaultTypeInternal;
extern CValveHWSurvey_GetSurveySchedule_RequestDefaultTypeInternal _CValveHWSurvey_GetSurveySchedule_Request_default_instance_;
class CValveHWSurvey_GetSurveySchedule_Response;
class CValveHWSurvey_GetSurveySchedule_ResponseDefaultTypeInternal;
extern CValveHWSurvey_GetSurveySchedule_ResponseDefaultTypeInternal _CValveHWSurvey_GetSurveySchedule_Response_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CDataPublisher_ClientContentCorruptionReport_Notification* Arena::CreateMaybeMessage<::proto::steam::CDataPublisher_ClientContentCorruptionReport_Notification>(Arena*);
template<> ::proto::steam::CValveHWSurvey_GetSurveySchedule_Request* Arena::CreateMaybeMessage<::proto::steam::CValveHWSurvey_GetSurveySchedule_Request>(Arena*);
template<> ::proto::steam::CValveHWSurvey_GetSurveySchedule_Response* Arena::CreateMaybeMessage<::proto::steam::CValveHWSurvey_GetSurveySchedule_Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

// ===================================================================

class CDataPublisher_ClientContentCorruptionReport_Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification) */ {
 public:
  CDataPublisher_ClientContentCorruptionReport_Notification();
  virtual ~CDataPublisher_ClientContentCorruptionReport_Notification();

  CDataPublisher_ClientContentCorruptionReport_Notification(const CDataPublisher_ClientContentCorruptionReport_Notification& from);

  inline CDataPublisher_ClientContentCorruptionReport_Notification& operator=(const CDataPublisher_ClientContentCorruptionReport_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDataPublisher_ClientContentCorruptionReport_Notification(CDataPublisher_ClientContentCorruptionReport_Notification&& from) noexcept
    : CDataPublisher_ClientContentCorruptionReport_Notification() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_ClientContentCorruptionReport_Notification& operator=(CDataPublisher_ClientContentCorruptionReport_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDataPublisher_ClientContentCorruptionReport_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDataPublisher_ClientContentCorruptionReport_Notification* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_ClientContentCorruptionReport_Notification*>(
               &_CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CDataPublisher_ClientContentCorruptionReport_Notification* other);
  friend void swap(CDataPublisher_ClientContentCorruptionReport_Notification& a, CDataPublisher_ClientContentCorruptionReport_Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDataPublisher_ClientContentCorruptionReport_Notification* New() const final {
    return CreateMaybeMessage<CDataPublisher_ClientContentCorruptionReport_Notification>(nullptr);
  }

  CDataPublisher_ClientContentCorruptionReport_Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDataPublisher_ClientContentCorruptionReport_Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDataPublisher_ClientContentCorruptionReport_Notification& from);
  void MergeFrom(const CDataPublisher_ClientContentCorruptionReport_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_ClientContentCorruptionReport_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string download_source = 3 [(.proto.steam.description) = "host name of download source"];
  bool has_download_source() const;
  void clear_download_source();
  static const int kDownloadSourceFieldNumber = 3;
  const ::std::string& download_source() const;
  void set_download_source(const ::std::string& value);
  #if LANG_CXX11
  void set_download_source(::std::string&& value);
  #endif
  void set_download_source(const char* value);
  void set_download_source(const char* value, size_t size);
  ::std::string* mutable_download_source();
  ::std::string* release_download_source();
  void set_allocated_download_source(::std::string* download_source);

  // optional string objectid = 4 [(.proto.steam.description) = "Chunk SHA or Manifest ID"];
  bool has_objectid() const;
  void clear_objectid();
  static const int kObjectidFieldNumber = 4;
  const ::std::string& objectid() const;
  void set_objectid(const ::std::string& value);
  #if LANG_CXX11
  void set_objectid(::std::string&& value);
  #endif
  void set_objectid(const char* value);
  void set_objectid(const char* value, size_t size);
  ::std::string* mutable_objectid();
  ::std::string* release_objectid();
  void set_allocated_objectid(::std::string* objectid);

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional uint32 depotid = 2;
  bool has_depotid() const;
  void clear_depotid();
  static const int kDepotidFieldNumber = 2;
  ::google::protobuf::uint32 depotid() const;
  void set_depotid(::google::protobuf::uint32 value);

  // optional uint32 cellid = 5 [(.proto.steam.description) = "Client Cell ID"];
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellidFieldNumber = 5;
  ::google::protobuf::uint32 cellid() const;
  void set_cellid(::google::protobuf::uint32 value);

  // optional uint32 corruption_type = 8 [(.proto.steam.description) = "See EContentCorruptionType"];
  bool has_corruption_type() const;
  void clear_corruption_type();
  static const int kCorruptionTypeFieldNumber = 8;
  ::google::protobuf::uint32 corruption_type() const;
  void set_corruption_type(::google::protobuf::uint32 value);

  // optional uint64 object_size = 7 [(.proto.steam.description) = "object size in bytes"];
  bool has_object_size() const;
  void clear_object_size();
  static const int kObjectSizeFieldNumber = 7;
  ::google::protobuf::uint64 object_size() const;
  void set_object_size(::google::protobuf::uint64 value);

  // optional bool is_manifest = 6 [(.proto.steam.description) = "The object is a manifest, not a chunk"];
  bool has_is_manifest() const;
  void clear_is_manifest();
  static const int kIsManifestFieldNumber = 6;
  bool is_manifest() const;
  void set_is_manifest(bool value);

  // optional bool used_https = 9 [(.proto.steam.description) = "the request was HTTPS"];
  bool has_used_https() const;
  void clear_used_https();
  static const int kUsedHttpsFieldNumber = 9;
  bool used_https() const;
  void set_used_https(bool value);

  // optional bool oc_proxy_detected = 10 [(.proto.steam.description) = "detected an OpenCache proxy"];
  bool has_oc_proxy_detected() const;
  void clear_oc_proxy_detected();
  static const int kOcProxyDetectedFieldNumber = 10;
  bool oc_proxy_detected() const;
  void set_oc_proxy_detected(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr download_source_;
  ::google::protobuf::internal::ArenaStringPtr objectid_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 depotid_;
  ::google::protobuf::uint32 cellid_;
  ::google::protobuf::uint32 corruption_type_;
  ::google::protobuf::uint64 object_size_;
  bool is_manifest_;
  bool used_https_;
  bool oc_proxy_detected_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CValveHWSurvey_GetSurveySchedule_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CValveHWSurvey_GetSurveySchedule_Request) */ {
 public:
  CValveHWSurvey_GetSurveySchedule_Request();
  virtual ~CValveHWSurvey_GetSurveySchedule_Request();

  CValveHWSurvey_GetSurveySchedule_Request(const CValveHWSurvey_GetSurveySchedule_Request& from);

  inline CValveHWSurvey_GetSurveySchedule_Request& operator=(const CValveHWSurvey_GetSurveySchedule_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CValveHWSurvey_GetSurveySchedule_Request(CValveHWSurvey_GetSurveySchedule_Request&& from) noexcept
    : CValveHWSurvey_GetSurveySchedule_Request() {
    *this = ::std::move(from);
  }

  inline CValveHWSurvey_GetSurveySchedule_Request& operator=(CValveHWSurvey_GetSurveySchedule_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CValveHWSurvey_GetSurveySchedule_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CValveHWSurvey_GetSurveySchedule_Request* internal_default_instance() {
    return reinterpret_cast<const CValveHWSurvey_GetSurveySchedule_Request*>(
               &_CValveHWSurvey_GetSurveySchedule_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CValveHWSurvey_GetSurveySchedule_Request* other);
  friend void swap(CValveHWSurvey_GetSurveySchedule_Request& a, CValveHWSurvey_GetSurveySchedule_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CValveHWSurvey_GetSurveySchedule_Request* New() const final {
    return CreateMaybeMessage<CValveHWSurvey_GetSurveySchedule_Request>(nullptr);
  }

  CValveHWSurvey_GetSurveySchedule_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CValveHWSurvey_GetSurveySchedule_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CValveHWSurvey_GetSurveySchedule_Request& from);
  void MergeFrom(const CValveHWSurvey_GetSurveySchedule_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CValveHWSurvey_GetSurveySchedule_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string surveydatetoken = 1;
  bool has_surveydatetoken() const;
  void clear_surveydatetoken();
  static const int kSurveydatetokenFieldNumber = 1;
  const ::std::string& surveydatetoken() const;
  void set_surveydatetoken(const ::std::string& value);
  #if LANG_CXX11
  void set_surveydatetoken(::std::string&& value);
  #endif
  void set_surveydatetoken(const char* value);
  void set_surveydatetoken(const char* value, size_t size);
  ::std::string* mutable_surveydatetoken();
  ::std::string* release_surveydatetoken();
  void set_allocated_surveydatetoken(::std::string* surveydatetoken);

  // optional fixed64 surveydatetokenversion = 2;
  bool has_surveydatetokenversion() const;
  void clear_surveydatetokenversion();
  static const int kSurveydatetokenversionFieldNumber = 2;
  ::google::protobuf::uint64 surveydatetokenversion() const;
  void set_surveydatetokenversion(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CValveHWSurvey_GetSurveySchedule_Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr surveydatetoken_;
  ::google::protobuf::uint64 surveydatetokenversion_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CValveHWSurvey_GetSurveySchedule_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CValveHWSurvey_GetSurveySchedule_Response) */ {
 public:
  CValveHWSurvey_GetSurveySchedule_Response();
  virtual ~CValveHWSurvey_GetSurveySchedule_Response();

  CValveHWSurvey_GetSurveySchedule_Response(const CValveHWSurvey_GetSurveySchedule_Response& from);

  inline CValveHWSurvey_GetSurveySchedule_Response& operator=(const CValveHWSurvey_GetSurveySchedule_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CValveHWSurvey_GetSurveySchedule_Response(CValveHWSurvey_GetSurveySchedule_Response&& from) noexcept
    : CValveHWSurvey_GetSurveySchedule_Response() {
    *this = ::std::move(from);
  }

  inline CValveHWSurvey_GetSurveySchedule_Response& operator=(CValveHWSurvey_GetSurveySchedule_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CValveHWSurvey_GetSurveySchedule_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CValveHWSurvey_GetSurveySchedule_Response* internal_default_instance() {
    return reinterpret_cast<const CValveHWSurvey_GetSurveySchedule_Response*>(
               &_CValveHWSurvey_GetSurveySchedule_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CValveHWSurvey_GetSurveySchedule_Response* other);
  friend void swap(CValveHWSurvey_GetSurveySchedule_Response& a, CValveHWSurvey_GetSurveySchedule_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CValveHWSurvey_GetSurveySchedule_Response* New() const final {
    return CreateMaybeMessage<CValveHWSurvey_GetSurveySchedule_Response>(nullptr);
  }

  CValveHWSurvey_GetSurveySchedule_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CValveHWSurvey_GetSurveySchedule_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CValveHWSurvey_GetSurveySchedule_Response& from);
  void MergeFrom(const CValveHWSurvey_GetSurveySchedule_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CValveHWSurvey_GetSurveySchedule_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 surveydatetokenversion = 2;
  bool has_surveydatetokenversion() const;
  void clear_surveydatetokenversion();
  static const int kSurveydatetokenversionFieldNumber = 2;
  ::google::protobuf::uint64 surveydatetokenversion() const;
  void set_surveydatetokenversion(::google::protobuf::uint64 value);

  // optional uint32 surveydatetoken = 1;
  bool has_surveydatetoken() const;
  void clear_surveydatetoken();
  static const int kSurveydatetokenFieldNumber = 1;
  ::google::protobuf::uint32 surveydatetoken() const;
  void set_surveydatetoken(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CValveHWSurvey_GetSurveySchedule_Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 surveydatetokenversion_;
  ::google::protobuf::uint32 surveydatetoken_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// ===================================================================

class DataPublisher_Stub;

class DataPublisher : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DataPublisher() {};
 public:
  virtual ~DataPublisher();

  typedef DataPublisher_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void ClientContentCorruptionReport(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CDataPublisher_ClientContentCorruptionReport_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DataPublisher);
};

class DataPublisher_Stub : public DataPublisher {
 public:
  DataPublisher_Stub(::google::protobuf::RpcChannel* channel);
  DataPublisher_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DataPublisher_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements DataPublisher ------------------------------------------

  void ClientContentCorruptionReport(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CDataPublisher_ClientContentCorruptionReport_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DataPublisher_Stub);
};


// -------------------------------------------------------------------

class ValveHWSurvey_Stub;

class ValveHWSurvey : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ValveHWSurvey() {};
 public:
  virtual ~ValveHWSurvey();

  typedef ValveHWSurvey_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetSurveySchedule(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CValveHWSurvey_GetSurveySchedule_Request* request,
                       ::proto::steam::CValveHWSurvey_GetSurveySchedule_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ValveHWSurvey);
};

class ValveHWSurvey_Stub : public ValveHWSurvey {
 public:
  ValveHWSurvey_Stub(::google::protobuf::RpcChannel* channel);
  ValveHWSurvey_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ValveHWSurvey_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ValveHWSurvey ------------------------------------------

  void GetSurveySchedule(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CValveHWSurvey_GetSurveySchedule_Request* request,
                       ::proto::steam::CValveHWSurvey_GetSurveySchedule_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ValveHWSurvey_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDataPublisher_ClientContentCorruptionReport_Notification

// optional uint32 appid = 1;
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDataPublisher_ClientContentCorruptionReport_Notification::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.appid)
  return appid_;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.appid)
}

// optional uint32 depotid = 2;
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_depotid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_depotid() {
  depotid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDataPublisher_ClientContentCorruptionReport_Notification::depotid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.depotid)
  return depotid_;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_depotid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  depotid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.depotid)
}

// optional string download_source = 3 [(.proto.steam.description) = "host name of download source"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_download_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_download_source() {
  download_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDataPublisher_ClientContentCorruptionReport_Notification::download_source() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
  return download_source_.GetNoArena();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_download_source(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  download_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}
#if LANG_CXX11
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_download_source(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  download_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}
#endif
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_download_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  download_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_download_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  download_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}
inline ::std::string* CDataPublisher_ClientContentCorruptionReport_Notification::mutable_download_source() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
  return download_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDataPublisher_ClientContentCorruptionReport_Notification::release_download_source() {
  // @@protoc_insertion_point(field_release:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
  if (!has_download_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return download_source_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_allocated_download_source(::std::string* download_source) {
  if (download_source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  download_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_source);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}

// optional string objectid = 4 [(.proto.steam.description) = "Chunk SHA or Manifest ID"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_objectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_objectid() {
  objectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CDataPublisher_ClientContentCorruptionReport_Notification::objectid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
  return objectid_.GetNoArena();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_objectid(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}
#if LANG_CXX11
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_objectid(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  objectid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}
#endif
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_objectid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}
inline ::std::string* CDataPublisher_ClientContentCorruptionReport_Notification::mutable_objectid() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
  return objectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDataPublisher_ClientContentCorruptionReport_Notification::release_objectid() {
  // @@protoc_insertion_point(field_release:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
  if (!has_objectid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return objectid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_allocated_objectid(::std::string* objectid) {
  if (objectid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  objectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectid);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}

// optional uint32 cellid = 5 [(.proto.steam.description) = "Client Cell ID"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_cellid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CDataPublisher_ClientContentCorruptionReport_Notification::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.cellid)
  return cellid_;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_cellid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.cellid)
}

// optional bool is_manifest = 6 [(.proto.steam.description) = "The object is a manifest, not a chunk"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_is_manifest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_is_manifest() {
  is_manifest_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::is_manifest() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.is_manifest)
  return is_manifest_;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_is_manifest(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_manifest_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.is_manifest)
}

// optional uint64 object_size = 7 [(.proto.steam.description) = "object size in bytes"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_object_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_object_size() {
  object_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CDataPublisher_ClientContentCorruptionReport_Notification::object_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.object_size)
  return object_size_;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_object_size(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  object_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.object_size)
}

// optional uint32 corruption_type = 8 [(.proto.steam.description) = "See EContentCorruptionType"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_corruption_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_corruption_type() {
  corruption_type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CDataPublisher_ClientContentCorruptionReport_Notification::corruption_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.corruption_type)
  return corruption_type_;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_corruption_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  corruption_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.corruption_type)
}

// optional bool used_https = 9 [(.proto.steam.description) = "the request was HTTPS"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_used_https() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_used_https() {
  used_https_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::used_https() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.used_https)
  return used_https_;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_used_https(bool value) {
  _has_bits_[0] |= 0x00000100u;
  used_https_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.used_https)
}

// optional bool oc_proxy_detected = 10 [(.proto.steam.description) = "detected an OpenCache proxy"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_oc_proxy_detected() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_oc_proxy_detected() {
  oc_proxy_detected_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::oc_proxy_detected() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.oc_proxy_detected)
  return oc_proxy_detected_;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_oc_proxy_detected(bool value) {
  _has_bits_[0] |= 0x00000200u;
  oc_proxy_detected_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDataPublisher_ClientContentCorruptionReport_Notification.oc_proxy_detected)
}

// -------------------------------------------------------------------

// CValveHWSurvey_GetSurveySchedule_Request

// optional string surveydatetoken = 1;
inline bool CValveHWSurvey_GetSurveySchedule_Request::has_surveydatetoken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CValveHWSurvey_GetSurveySchedule_Request::clear_surveydatetoken() {
  surveydatetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CValveHWSurvey_GetSurveySchedule_Request::surveydatetoken() const {
  // @@protoc_insertion_point(field_get:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
  return surveydatetoken_.GetNoArena();
}
inline void CValveHWSurvey_GetSurveySchedule_Request::set_surveydatetoken(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  surveydatetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
}
#if LANG_CXX11
inline void CValveHWSurvey_GetSurveySchedule_Request::set_surveydatetoken(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  surveydatetoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
}
#endif
inline void CValveHWSurvey_GetSurveySchedule_Request::set_surveydatetoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  surveydatetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
}
inline void CValveHWSurvey_GetSurveySchedule_Request::set_surveydatetoken(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  surveydatetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
}
inline ::std::string* CValveHWSurvey_GetSurveySchedule_Request::mutable_surveydatetoken() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
  return surveydatetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CValveHWSurvey_GetSurveySchedule_Request::release_surveydatetoken() {
  // @@protoc_insertion_point(field_release:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
  if (!has_surveydatetoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return surveydatetoken_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CValveHWSurvey_GetSurveySchedule_Request::set_allocated_surveydatetoken(::std::string* surveydatetoken) {
  if (surveydatetoken != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  surveydatetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), surveydatetoken);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
}

// optional fixed64 surveydatetokenversion = 2;
inline bool CValveHWSurvey_GetSurveySchedule_Request::has_surveydatetokenversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CValveHWSurvey_GetSurveySchedule_Request::clear_surveydatetokenversion() {
  surveydatetokenversion_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CValveHWSurvey_GetSurveySchedule_Request::surveydatetokenversion() const {
  // @@protoc_insertion_point(field_get:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetokenversion)
  return surveydatetokenversion_;
}
inline void CValveHWSurvey_GetSurveySchedule_Request::set_surveydatetokenversion(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  surveydatetokenversion_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CValveHWSurvey_GetSurveySchedule_Request.surveydatetokenversion)
}

// -------------------------------------------------------------------

// CValveHWSurvey_GetSurveySchedule_Response

// optional uint32 surveydatetoken = 1;
inline bool CValveHWSurvey_GetSurveySchedule_Response::has_surveydatetoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CValveHWSurvey_GetSurveySchedule_Response::clear_surveydatetoken() {
  surveydatetoken_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CValveHWSurvey_GetSurveySchedule_Response::surveydatetoken() const {
  // @@protoc_insertion_point(field_get:proto.steam.CValveHWSurvey_GetSurveySchedule_Response.surveydatetoken)
  return surveydatetoken_;
}
inline void CValveHWSurvey_GetSurveySchedule_Response::set_surveydatetoken(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  surveydatetoken_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CValveHWSurvey_GetSurveySchedule_Response.surveydatetoken)
}

// optional fixed64 surveydatetokenversion = 2;
inline bool CValveHWSurvey_GetSurveySchedule_Response::has_surveydatetokenversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CValveHWSurvey_GetSurveySchedule_Response::clear_surveydatetokenversion() {
  surveydatetokenversion_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CValveHWSurvey_GetSurveySchedule_Response::surveydatetokenversion() const {
  // @@protoc_insertion_point(field_get:proto.steam.CValveHWSurvey_GetSurveySchedule_Response.surveydatetokenversion)
  return surveydatetokenversion_;
}
inline void CValveHWSurvey_GetSurveySchedule_Response::set_surveydatetokenversion(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  surveydatetokenversion_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CValveHWSurvey_GetSurveySchedule_Response.surveydatetokenversion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5fdatapublisher_2esteamclient_2eproto
