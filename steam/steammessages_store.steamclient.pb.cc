// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_store.steamclient.proto

#include "steammessages_store.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fstore_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CStore_GetLocalizedNameForTags_Response_Tag_steammessages_5fstore_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fstore_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CStore_UserContentDescriptorPreferences_ContentDescriptor_steammessages_5fstore_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fstore_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CStore_UserPreferences_steammessages_5fstore_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fstore_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CStore_UserTagPreferences_Tag_steammessages_5fstore_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fstore_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CStore_UserContentDescriptorPreferences_steammessages_5fstore_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fstore_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CStore_UserTagPreferences_steammessages_5fstore_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CStore_GetLocalizedNameForTags_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_GetLocalizedNameForTags_Request> _instance;
} _CStore_GetLocalizedNameForTags_Request_default_instance_;
class CStore_GetLocalizedNameForTags_Response_TagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_GetLocalizedNameForTags_Response_Tag> _instance;
} _CStore_GetLocalizedNameForTags_Response_Tag_default_instance_;
class CStore_GetLocalizedNameForTags_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_GetLocalizedNameForTags_Response> _instance;
} _CStore_GetLocalizedNameForTags_Response_default_instance_;
class CStore_GetStorePreferences_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_GetStorePreferences_Request> _instance;
} _CStore_GetStorePreferences_Request_default_instance_;
class CStore_UserPreferencesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_UserPreferences> _instance;
} _CStore_UserPreferences_default_instance_;
class CStore_UserTagPreferences_TagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_UserTagPreferences_Tag> _instance;
} _CStore_UserTagPreferences_Tag_default_instance_;
class CStore_UserTagPreferencesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_UserTagPreferences> _instance;
} _CStore_UserTagPreferences_default_instance_;
class CStore_UserContentDescriptorPreferences_ContentDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_UserContentDescriptorPreferences_ContentDescriptor> _instance;
} _CStore_UserContentDescriptorPreferences_ContentDescriptor_default_instance_;
class CStore_UserContentDescriptorPreferencesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_UserContentDescriptorPreferences> _instance;
} _CStore_UserContentDescriptorPreferences_default_instance_;
class CStore_GetStorePreferences_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CStore_GetStorePreferences_Response> _instance;
} _CStore_GetStorePreferences_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCStore_GetLocalizedNameForTags_Request_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_GetLocalizedNameForTags_Request_default_instance_;
    new (ptr) ::proto::steam::CStore_GetLocalizedNameForTags_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_GetLocalizedNameForTags_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStore_GetLocalizedNameForTags_Request_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStore_GetLocalizedNameForTags_Request_steammessages_5fstore_2esteamclient_2eproto}, {}};

static void InitDefaultsCStore_GetLocalizedNameForTags_Response_Tag_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_GetLocalizedNameForTags_Response_Tag_default_instance_;
    new (ptr) ::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStore_GetLocalizedNameForTags_Response_Tag_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStore_GetLocalizedNameForTags_Response_Tag_steammessages_5fstore_2esteamclient_2eproto}, {}};

static void InitDefaultsCStore_GetLocalizedNameForTags_Response_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_GetLocalizedNameForTags_Response_default_instance_;
    new (ptr) ::proto::steam::CStore_GetLocalizedNameForTags_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_GetLocalizedNameForTags_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CStore_GetLocalizedNameForTags_Response_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCStore_GetLocalizedNameForTags_Response_steammessages_5fstore_2esteamclient_2eproto}, {
      &scc_info_CStore_GetLocalizedNameForTags_Response_Tag_steammessages_5fstore_2esteamclient_2eproto.base,}};

static void InitDefaultsCStore_GetStorePreferences_Request_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_GetStorePreferences_Request_default_instance_;
    new (ptr) ::proto::steam::CStore_GetStorePreferences_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_GetStorePreferences_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStore_GetStorePreferences_Request_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStore_GetStorePreferences_Request_steammessages_5fstore_2esteamclient_2eproto}, {}};

static void InitDefaultsCStore_UserPreferences_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_UserPreferences_default_instance_;
    new (ptr) ::proto::steam::CStore_UserPreferences();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_UserPreferences::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStore_UserPreferences_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStore_UserPreferences_steammessages_5fstore_2esteamclient_2eproto}, {}};

static void InitDefaultsCStore_UserTagPreferences_Tag_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_UserTagPreferences_Tag_default_instance_;
    new (ptr) ::proto::steam::CStore_UserTagPreferences_Tag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_UserTagPreferences_Tag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStore_UserTagPreferences_Tag_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStore_UserTagPreferences_Tag_steammessages_5fstore_2esteamclient_2eproto}, {}};

static void InitDefaultsCStore_UserTagPreferences_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_UserTagPreferences_default_instance_;
    new (ptr) ::proto::steam::CStore_UserTagPreferences();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_UserTagPreferences::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CStore_UserTagPreferences_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCStore_UserTagPreferences_steammessages_5fstore_2esteamclient_2eproto}, {
      &scc_info_CStore_UserTagPreferences_Tag_steammessages_5fstore_2esteamclient_2eproto.base,}};

static void InitDefaultsCStore_UserContentDescriptorPreferences_ContentDescriptor_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_UserContentDescriptorPreferences_ContentDescriptor_default_instance_;
    new (ptr) ::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CStore_UserContentDescriptorPreferences_ContentDescriptor_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCStore_UserContentDescriptorPreferences_ContentDescriptor_steammessages_5fstore_2esteamclient_2eproto}, {}};

static void InitDefaultsCStore_UserContentDescriptorPreferences_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_UserContentDescriptorPreferences_default_instance_;
    new (ptr) ::proto::steam::CStore_UserContentDescriptorPreferences();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_UserContentDescriptorPreferences::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CStore_UserContentDescriptorPreferences_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCStore_UserContentDescriptorPreferences_steammessages_5fstore_2esteamclient_2eproto}, {
      &scc_info_CStore_UserContentDescriptorPreferences_ContentDescriptor_steammessages_5fstore_2esteamclient_2eproto.base,}};

static void InitDefaultsCStore_GetStorePreferences_Response_steammessages_5fstore_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CStore_GetStorePreferences_Response_default_instance_;
    new (ptr) ::proto::steam::CStore_GetStorePreferences_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CStore_GetStorePreferences_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CStore_GetStorePreferences_Response_steammessages_5fstore_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCStore_GetStorePreferences_Response_steammessages_5fstore_2esteamclient_2eproto}, {
      &scc_info_CStore_UserPreferences_steammessages_5fstore_2esteamclient_2eproto.base,
      &scc_info_CStore_UserTagPreferences_steammessages_5fstore_2esteamclient_2eproto.base,
      &scc_info_CStore_UserContentDescriptorPreferences_steammessages_5fstore_2esteamclient_2eproto.base,}};

void InitDefaults_steammessages_5fstore_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_GetLocalizedNameForTags_Request_steammessages_5fstore_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_GetLocalizedNameForTags_Response_Tag_steammessages_5fstore_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_GetLocalizedNameForTags_Response_steammessages_5fstore_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_GetStorePreferences_Request_steammessages_5fstore_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_UserPreferences_steammessages_5fstore_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_UserTagPreferences_Tag_steammessages_5fstore_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_UserTagPreferences_steammessages_5fstore_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_UserContentDescriptorPreferences_ContentDescriptor_steammessages_5fstore_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_UserContentDescriptorPreferences_steammessages_5fstore_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CStore_GetStorePreferences_Response_steammessages_5fstore_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[10];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fstore_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5fstore_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Request, language_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Request, tagids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag, tagid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag, english_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag, name_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetLocalizedNameForTags_Response, tags_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetStorePreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetStorePreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, primary_language_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, secondary_languages_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, platform_windows_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, platform_mac_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, platform_linux_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, hide_adult_content_violence_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, hide_adult_content_sex_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, timestamp_updated_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, hide_store_broadcast_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserPreferences, timestamp_content_descriptor_preferences_updated_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserTagPreferences_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserTagPreferences_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserTagPreferences_Tag, tagid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserTagPreferences_Tag, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserTagPreferences_Tag, timestamp_added_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserTagPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserTagPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserTagPreferences, tags_to_exclude_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor, content_descriptorid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor, timestamp_added_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserContentDescriptorPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserContentDescriptorPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_UserContentDescriptorPreferences, content_descriptors_to_exclude_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetStorePreferences_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetStorePreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetStorePreferences_Response, preferences_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetStorePreferences_Response, tag_preferences_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CStore_GetStorePreferences_Response, content_descriptor_preferences_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::steam::CStore_GetLocalizedNameForTags_Request)},
  { 9, 17, sizeof(::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag)},
  { 20, 26, sizeof(::proto::steam::CStore_GetLocalizedNameForTags_Response)},
  { 27, 32, sizeof(::proto::steam::CStore_GetStorePreferences_Request)},
  { 32, 47, sizeof(::proto::steam::CStore_UserPreferences)},
  { 57, 65, sizeof(::proto::steam::CStore_UserTagPreferences_Tag)},
  { 68, 74, sizeof(::proto::steam::CStore_UserTagPreferences)},
  { 75, 82, sizeof(::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor)},
  { 84, 90, sizeof(::proto::steam::CStore_UserContentDescriptorPreferences)},
  { 91, 99, sizeof(::proto::steam::CStore_GetStorePreferences_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_GetLocalizedNameForTags_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_GetLocalizedNameForTags_Response_Tag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_GetLocalizedNameForTags_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_GetStorePreferences_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_UserPreferences_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_UserTagPreferences_Tag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_UserTagPreferences_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_UserContentDescriptorPreferences_ContentDescriptor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_UserContentDescriptorPreferences_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CStore_GetStorePreferences_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fstore_2esteamclient_2eproto, "steammessages_store.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fstore_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fstore_2esteamclient_2eproto, 10, file_level_enum_descriptors_steammessages_5fstore_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fstore_2esteamclient_2eproto[] =
  "\n%steammessages_store.steamclient.proto\022"
  "\013proto.steam\032,steammessages_unified_base"
  ".steamclient.proto\"J\n&CStore_GetLocalize"
  "dNameForTags_Request\022\020\n\010language\030\001 \001(\t\022\016"
  "\n\006tagids\030\002 \003(\r\"\253\001\n\'CStore_GetLocalizedNa"
  "meForTags_Response\022F\n\004tags\030\001 \003(\01328.proto"
  ".steam.CStore_GetLocalizedNameForTags_Re"
  "sponse.Tag\0328\n\003Tag\022\r\n\005tagid\030\001 \001(\r\022\024\n\014engl"
  "ish_name\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\"$\n\"CStore_G"
  "etStorePreferences_Request\"\317\002\n\026CStore_Us"
  "erPreferences\022\030\n\020primary_language\030\001 \001(\r\022"
  "\033\n\023secondary_languages\030\002 \001(\r\022\030\n\020platform"
  "_windows\030\003 \001(\010\022\024\n\014platform_mac\030\004 \001(\010\022\026\n\016"
  "platform_linux\030\005 \001(\010\022#\n\033hide_adult_conte"
  "nt_violence\030\006 \001(\010\022\036\n\026hide_adult_content_"
  "sex\030\007 \001(\010\022\031\n\021timestamp_updated\030\010 \001(\r\022\034\n\024"
  "hide_store_broadcast\030\t \001(\010\0228\n0timestamp_"
  "content_descriptor_preferences_updated\030\n"
  " \001(\005\"\235\001\n\031CStore_UserTagPreferences\022C\n\017ta"
  "gs_to_exclude\030\001 \003(\0132*.proto.steam.CStore"
  "_UserTagPreferences.Tag\032;\n\003Tag\022\r\n\005tagid\030"
  "\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\027\n\017timestamp_added\030\003"
  " \001(\r\"\345\001\n\'CStore_UserContentDescriptorPre"
  "ferences\022n\n\036content_descriptors_to_exclu"
  "de\030\001 \003(\0132F.proto.steam.CStore_UserConten"
  "tDescriptorPreferences.ContentDescriptor"
  "\032J\n\021ContentDescriptor\022\034\n\024content_descrip"
  "torid\030\001 \001(\r\022\027\n\017timestamp_added\030\002 \001(\r\"\376\001\n"
  "#CStore_GetStorePreferences_Response\0228\n\013"
  "preferences\030\001 \001(\0132#.proto.steam.CStore_U"
  "serPreferences\022\?\n\017tag_preferences\030\002 \001(\0132"
  "&.proto.steam.CStore_UserTagPreferences\022"
  "\\\n\036content_descriptor_preferences\030\003 \001(\0132"
  "4.proto.steam.CStore_UserContentDescript"
  "orPreferences2\251\003\n\005Store\022\260\001\n\027GetLocalized"
  "NameForTags\0223.proto.steam.CStore_GetLoca"
  "lizedNameForTags_Request\0324.proto.steam.C"
  "Store_GetLocalizedNameForTags_Response\"*"
  "\202\265\030&Gets tag names in a different langua"
  "ge\022\307\001\n\023GetStorePreferences\022/.proto.steam"
  ".CStore_GetStorePreferences_Request\0320.pr"
  "oto.steam.CStore_GetStorePreferences_Res"
  "ponse\"M\202\265\030IReturns the desired ratings b"
  "oard and maximum rating to show on the s"
  "tore\032#\202\265\030\037A service to access store data"
  ".B\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fstore_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fstore_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fstore_2esteamclient_2eproto,
  "steammessages_store.steamclient.proto", &assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto, 1806,
};

void AddDescriptors_steammessages_5fstore_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fstore_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fstore_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fstore_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CStore_GetLocalizedNameForTags_Request::InitAsDefaultInstance() {
}
class CStore_GetLocalizedNameForTags_Request::HasBitSetters {
 public:
  static void set_has_language(CStore_GetLocalizedNameForTags_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStore_GetLocalizedNameForTags_Request::kLanguageFieldNumber;
const int CStore_GetLocalizedNameForTags_Request::kTagidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_GetLocalizedNameForTags_Request::CStore_GetLocalizedNameForTags_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_GetLocalizedNameForTags_Request)
}
CStore_GetLocalizedNameForTags_Request::CStore_GetLocalizedNameForTags_Request(const CStore_GetLocalizedNameForTags_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tagids_(from.tagids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_GetLocalizedNameForTags_Request)
}

void CStore_GetLocalizedNameForTags_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CStore_GetLocalizedNameForTags_Request_steammessages_5fstore_2esteamclient_2eproto.base);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CStore_GetLocalizedNameForTags_Request::~CStore_GetLocalizedNameForTags_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_GetLocalizedNameForTags_Request)
  SharedDtor();
}

void CStore_GetLocalizedNameForTags_Request::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CStore_GetLocalizedNameForTags_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_GetLocalizedNameForTags_Request& CStore_GetLocalizedNameForTags_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_GetLocalizedNameForTags_Request_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_GetLocalizedNameForTags_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_GetLocalizedNameForTags_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tagids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_GetLocalizedNameForTags_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_GetLocalizedNameForTags_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CStore_GetLocalizedNameForTags_Request.language");
        object = msg->mutable_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 tagids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_tagids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_tagids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_GetLocalizedNameForTags_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_GetLocalizedNameForTags_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CStore_GetLocalizedNameForTags_Request.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tagids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_tagids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tagids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_GetLocalizedNameForTags_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_GetLocalizedNameForTags_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_GetLocalizedNameForTags_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_GetLocalizedNameForTags_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CStore_GetLocalizedNameForTags_Request.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language(), output);
  }

  // repeated uint32 tagids = 2;
  for (int i = 0, n = this->tagids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->tagids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_GetLocalizedNameForTags_Request)
}

::google::protobuf::uint8* CStore_GetLocalizedNameForTags_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_GetLocalizedNameForTags_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CStore_GetLocalizedNameForTags_Request.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }

  // repeated uint32 tagids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->tagids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_GetLocalizedNameForTags_Request)
  return target;
}

size_t CStore_GetLocalizedNameForTags_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_GetLocalizedNameForTags_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tagids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tagids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tagids_size());
    total_size += data_size;
  }

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetLocalizedNameForTags_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_GetLocalizedNameForTags_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetLocalizedNameForTags_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_GetLocalizedNameForTags_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_GetLocalizedNameForTags_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_GetLocalizedNameForTags_Request)
    MergeFrom(*source);
  }
}

void CStore_GetLocalizedNameForTags_Request::MergeFrom(const CStore_GetLocalizedNameForTags_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_GetLocalizedNameForTags_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tagids_.MergeFrom(from.tagids_);
  if (from.has_language()) {
    _has_bits_[0] |= 0x00000001u;
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void CStore_GetLocalizedNameForTags_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_GetLocalizedNameForTags_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetLocalizedNameForTags_Request::CopyFrom(const CStore_GetLocalizedNameForTags_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_GetLocalizedNameForTags_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetLocalizedNameForTags_Request::IsInitialized() const {
  return true;
}

void CStore_GetLocalizedNameForTags_Request::Swap(CStore_GetLocalizedNameForTags_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_GetLocalizedNameForTags_Request::InternalSwap(CStore_GetLocalizedNameForTags_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tagids_.InternalSwap(&other->tagids_);
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CStore_GetLocalizedNameForTags_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CStore_GetLocalizedNameForTags_Response_Tag::InitAsDefaultInstance() {
}
class CStore_GetLocalizedNameForTags_Response_Tag::HasBitSetters {
 public:
  static void set_has_tagid(CStore_GetLocalizedNameForTags_Response_Tag* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_english_name(CStore_GetLocalizedNameForTags_Response_Tag* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_name(CStore_GetLocalizedNameForTags_Response_Tag* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStore_GetLocalizedNameForTags_Response_Tag::kTagidFieldNumber;
const int CStore_GetLocalizedNameForTags_Response_Tag::kEnglishNameFieldNumber;
const int CStore_GetLocalizedNameForTags_Response_Tag::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_GetLocalizedNameForTags_Response_Tag::CStore_GetLocalizedNameForTags_Response_Tag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
}
CStore_GetLocalizedNameForTags_Response_Tag::CStore_GetLocalizedNameForTags_Response_Tag(const CStore_GetLocalizedNameForTags_Response_Tag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  english_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_english_name()) {
    english_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.english_name_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tagid_ = from.tagid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
}

void CStore_GetLocalizedNameForTags_Response_Tag::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CStore_GetLocalizedNameForTags_Response_Tag_steammessages_5fstore_2esteamclient_2eproto.base);
  english_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagid_ = 0u;
}

CStore_GetLocalizedNameForTags_Response_Tag::~CStore_GetLocalizedNameForTags_Response_Tag() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  SharedDtor();
}

void CStore_GetLocalizedNameForTags_Response_Tag::SharedDtor() {
  english_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CStore_GetLocalizedNameForTags_Response_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_GetLocalizedNameForTags_Response_Tag& CStore_GetLocalizedNameForTags_Response_Tag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_GetLocalizedNameForTags_Response_Tag_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_GetLocalizedNameForTags_Response_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      english_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  tagid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_GetLocalizedNameForTags_Response_Tag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_GetLocalizedNameForTags_Response_Tag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 tagid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tagid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string english_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CStore_GetLocalizedNameForTags_Response.Tag.english_name");
        object = msg->mutable_english_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CStore_GetLocalizedNameForTags_Response.Tag.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_GetLocalizedNameForTags_Response_Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tagid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tagid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tagid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string english_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_english_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->english_name().data(), static_cast<int>(this->english_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CStore_GetLocalizedNameForTags_Response.Tag.english_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CStore_GetLocalizedNameForTags_Response.Tag.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_GetLocalizedNameForTags_Response_Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tagid(), output);
  }

  // optional string english_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->english_name().data(), static_cast<int>(this->english_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CStore_GetLocalizedNameForTags_Response.Tag.english_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->english_name(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CStore_GetLocalizedNameForTags_Response.Tag.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
}

::google::protobuf::uint8* CStore_GetLocalizedNameForTags_Response_Tag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tagid(), target);
  }

  // optional string english_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->english_name().data(), static_cast<int>(this->english_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CStore_GetLocalizedNameForTags_Response.Tag.english_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->english_name(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CStore_GetLocalizedNameForTags_Response.Tag.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  return target;
}

size_t CStore_GetLocalizedNameForTags_Response_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string english_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->english_name());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 tagid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tagid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetLocalizedNameForTags_Response_Tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetLocalizedNameForTags_Response_Tag* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_GetLocalizedNameForTags_Response_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
    MergeFrom(*source);
  }
}

void CStore_GetLocalizedNameForTags_Response_Tag::MergeFrom(const CStore_GetLocalizedNameForTags_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      english_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.english_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      tagid_ = from.tagid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_GetLocalizedNameForTags_Response_Tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetLocalizedNameForTags_Response_Tag::CopyFrom(const CStore_GetLocalizedNameForTags_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_GetLocalizedNameForTags_Response.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetLocalizedNameForTags_Response_Tag::IsInitialized() const {
  return true;
}

void CStore_GetLocalizedNameForTags_Response_Tag::Swap(CStore_GetLocalizedNameForTags_Response_Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_GetLocalizedNameForTags_Response_Tag::InternalSwap(CStore_GetLocalizedNameForTags_Response_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  english_name_.Swap(&other->english_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tagid_, other->tagid_);
}

::google::protobuf::Metadata CStore_GetLocalizedNameForTags_Response_Tag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CStore_GetLocalizedNameForTags_Response::InitAsDefaultInstance() {
}
class CStore_GetLocalizedNameForTags_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStore_GetLocalizedNameForTags_Response::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_GetLocalizedNameForTags_Response::CStore_GetLocalizedNameForTags_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_GetLocalizedNameForTags_Response)
}
CStore_GetLocalizedNameForTags_Response::CStore_GetLocalizedNameForTags_Response(const CStore_GetLocalizedNameForTags_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_GetLocalizedNameForTags_Response)
}

void CStore_GetLocalizedNameForTags_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CStore_GetLocalizedNameForTags_Response_steammessages_5fstore_2esteamclient_2eproto.base);
}

CStore_GetLocalizedNameForTags_Response::~CStore_GetLocalizedNameForTags_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_GetLocalizedNameForTags_Response)
  SharedDtor();
}

void CStore_GetLocalizedNameForTags_Response::SharedDtor() {
}

void CStore_GetLocalizedNameForTags_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_GetLocalizedNameForTags_Response& CStore_GetLocalizedNameForTags_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_GetLocalizedNameForTags_Response_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_GetLocalizedNameForTags_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_GetLocalizedNameForTags_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_GetLocalizedNameForTags_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_GetLocalizedNameForTags_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_GetLocalizedNameForTags_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_GetLocalizedNameForTags_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_GetLocalizedNameForTags_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_GetLocalizedNameForTags_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_GetLocalizedNameForTags_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_GetLocalizedNameForTags_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tags(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_GetLocalizedNameForTags_Response)
}

::google::protobuf::uint8* CStore_GetLocalizedNameForTags_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_GetLocalizedNameForTags_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tags(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_GetLocalizedNameForTags_Response)
  return target;
}

size_t CStore_GetLocalizedNameForTags_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_GetLocalizedNameForTags_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CStore_GetLocalizedNameForTags_Response.Tag tags = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetLocalizedNameForTags_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_GetLocalizedNameForTags_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetLocalizedNameForTags_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_GetLocalizedNameForTags_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_GetLocalizedNameForTags_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_GetLocalizedNameForTags_Response)
    MergeFrom(*source);
  }
}

void CStore_GetLocalizedNameForTags_Response::MergeFrom(const CStore_GetLocalizedNameForTags_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_GetLocalizedNameForTags_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
}

void CStore_GetLocalizedNameForTags_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_GetLocalizedNameForTags_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetLocalizedNameForTags_Response::CopyFrom(const CStore_GetLocalizedNameForTags_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_GetLocalizedNameForTags_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetLocalizedNameForTags_Response::IsInitialized() const {
  return true;
}

void CStore_GetLocalizedNameForTags_Response::Swap(CStore_GetLocalizedNameForTags_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_GetLocalizedNameForTags_Response::InternalSwap(CStore_GetLocalizedNameForTags_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
}

::google::protobuf::Metadata CStore_GetLocalizedNameForTags_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CStore_GetStorePreferences_Request::InitAsDefaultInstance() {
}
class CStore_GetStorePreferences_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_GetStorePreferences_Request::CStore_GetStorePreferences_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_GetStorePreferences_Request)
}
CStore_GetStorePreferences_Request::CStore_GetStorePreferences_Request(const CStore_GetStorePreferences_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_GetStorePreferences_Request)
}

void CStore_GetStorePreferences_Request::SharedCtor() {
}

CStore_GetStorePreferences_Request::~CStore_GetStorePreferences_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_GetStorePreferences_Request)
  SharedDtor();
}

void CStore_GetStorePreferences_Request::SharedDtor() {
}

void CStore_GetStorePreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_GetStorePreferences_Request& CStore_GetStorePreferences_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_GetStorePreferences_Request_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_GetStorePreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_GetStorePreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_GetStorePreferences_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_GetStorePreferences_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_GetStorePreferences_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_GetStorePreferences_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_GetStorePreferences_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_GetStorePreferences_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_GetStorePreferences_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_GetStorePreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_GetStorePreferences_Request)
}

::google::protobuf::uint8* CStore_GetStorePreferences_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_GetStorePreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_GetStorePreferences_Request)
  return target;
}

size_t CStore_GetStorePreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_GetStorePreferences_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetStorePreferences_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_GetStorePreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetStorePreferences_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_GetStorePreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_GetStorePreferences_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_GetStorePreferences_Request)
    MergeFrom(*source);
  }
}

void CStore_GetStorePreferences_Request::MergeFrom(const CStore_GetStorePreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_GetStorePreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CStore_GetStorePreferences_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_GetStorePreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetStorePreferences_Request::CopyFrom(const CStore_GetStorePreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_GetStorePreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetStorePreferences_Request::IsInitialized() const {
  return true;
}

void CStore_GetStorePreferences_Request::Swap(CStore_GetStorePreferences_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_GetStorePreferences_Request::InternalSwap(CStore_GetStorePreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CStore_GetStorePreferences_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CStore_UserPreferences::InitAsDefaultInstance() {
}
class CStore_UserPreferences::HasBitSetters {
 public:
  static void set_has_primary_language(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_secondary_languages(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_platform_windows(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_platform_mac(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_platform_linux(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_hide_adult_content_violence(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_hide_adult_content_sex(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_timestamp_updated(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_hide_store_broadcast(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_timestamp_content_descriptor_preferences_updated(CStore_UserPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStore_UserPreferences::kPrimaryLanguageFieldNumber;
const int CStore_UserPreferences::kSecondaryLanguagesFieldNumber;
const int CStore_UserPreferences::kPlatformWindowsFieldNumber;
const int CStore_UserPreferences::kPlatformMacFieldNumber;
const int CStore_UserPreferences::kPlatformLinuxFieldNumber;
const int CStore_UserPreferences::kHideAdultContentViolenceFieldNumber;
const int CStore_UserPreferences::kHideAdultContentSexFieldNumber;
const int CStore_UserPreferences::kTimestampUpdatedFieldNumber;
const int CStore_UserPreferences::kHideStoreBroadcastFieldNumber;
const int CStore_UserPreferences::kTimestampContentDescriptorPreferencesUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_UserPreferences::CStore_UserPreferences()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_UserPreferences)
}
CStore_UserPreferences::CStore_UserPreferences(const CStore_UserPreferences& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_language_, &from.primary_language_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_content_descriptor_preferences_updated_) -
    reinterpret_cast<char*>(&primary_language_)) + sizeof(timestamp_content_descriptor_preferences_updated_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_UserPreferences)
}

void CStore_UserPreferences::SharedCtor() {
  ::memset(&primary_language_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_content_descriptor_preferences_updated_) -
      reinterpret_cast<char*>(&primary_language_)) + sizeof(timestamp_content_descriptor_preferences_updated_));
}

CStore_UserPreferences::~CStore_UserPreferences() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_UserPreferences)
  SharedDtor();
}

void CStore_UserPreferences::SharedDtor() {
}

void CStore_UserPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_UserPreferences& CStore_UserPreferences::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_UserPreferences_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_UserPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_UserPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&primary_language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hide_adult_content_sex_) -
        reinterpret_cast<char*>(&primary_language_)) + sizeof(hide_adult_content_sex_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&hide_store_broadcast_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_content_descriptor_preferences_updated_) -
        reinterpret_cast<char*>(&hide_store_broadcast_)) + sizeof(timestamp_content_descriptor_preferences_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_UserPreferences::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_UserPreferences*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 primary_language = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_primary_language(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 secondary_languages = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_secondary_languages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool platform_windows = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_platform_windows(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool platform_mac = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_platform_mac(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool platform_linux = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_platform_linux(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hide_adult_content_violence = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_hide_adult_content_violence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hide_adult_content_sex = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_hide_adult_content_sex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp_updated = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_timestamp_updated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hide_store_broadcast = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_hide_store_broadcast(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 timestamp_content_descriptor_preferences_updated = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_timestamp_content_descriptor_preferences_updated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_UserPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_UserPreferences)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 primary_language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_primary_language(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &primary_language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 secondary_languages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_secondary_languages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_languages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool platform_windows = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_platform_windows(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &platform_windows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool platform_mac = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_platform_mac(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &platform_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool platform_linux = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_platform_linux(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &platform_linux_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_adult_content_violence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_hide_adult_content_violence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_adult_content_violence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_adult_content_sex = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_hide_adult_content_sex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_adult_content_sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp_updated = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_timestamp_updated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_store_broadcast = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_hide_store_broadcast(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_store_broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timestamp_content_descriptor_preferences_updated = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_timestamp_content_descriptor_preferences_updated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_content_descriptor_preferences_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_UserPreferences)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_UserPreferences)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_UserPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_UserPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 primary_language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->primary_language(), output);
  }

  // optional uint32 secondary_languages = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->secondary_languages(), output);
  }

  // optional bool platform_windows = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->platform_windows(), output);
  }

  // optional bool platform_mac = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->platform_mac(), output);
  }

  // optional bool platform_linux = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->platform_linux(), output);
  }

  // optional bool hide_adult_content_violence = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hide_adult_content_violence(), output);
  }

  // optional bool hide_adult_content_sex = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hide_adult_content_sex(), output);
  }

  // optional uint32 timestamp_updated = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timestamp_updated(), output);
  }

  // optional bool hide_store_broadcast = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hide_store_broadcast(), output);
  }

  // optional int32 timestamp_content_descriptor_preferences_updated = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->timestamp_content_descriptor_preferences_updated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_UserPreferences)
}

::google::protobuf::uint8* CStore_UserPreferences::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_UserPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 primary_language = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->primary_language(), target);
  }

  // optional uint32 secondary_languages = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->secondary_languages(), target);
  }

  // optional bool platform_windows = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->platform_windows(), target);
  }

  // optional bool platform_mac = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->platform_mac(), target);
  }

  // optional bool platform_linux = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->platform_linux(), target);
  }

  // optional bool hide_adult_content_violence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hide_adult_content_violence(), target);
  }

  // optional bool hide_adult_content_sex = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hide_adult_content_sex(), target);
  }

  // optional uint32 timestamp_updated = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timestamp_updated(), target);
  }

  // optional bool hide_store_broadcast = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hide_store_broadcast(), target);
  }

  // optional int32 timestamp_content_descriptor_preferences_updated = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->timestamp_content_descriptor_preferences_updated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_UserPreferences)
  return target;
}

size_t CStore_UserPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_UserPreferences)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 primary_language = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->primary_language());
    }

    // optional uint32 secondary_languages = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondary_languages());
    }

    // optional bool platform_windows = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool platform_mac = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool platform_linux = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool hide_adult_content_violence = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 timestamp_updated = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp_updated());
    }

    // optional bool hide_adult_content_sex = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool hide_store_broadcast = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 timestamp_content_descriptor_preferences_updated = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp_content_descriptor_preferences_updated());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UserPreferences::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_UserPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UserPreferences* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_UserPreferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_UserPreferences)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_UserPreferences)
    MergeFrom(*source);
  }
}

void CStore_UserPreferences::MergeFrom(const CStore_UserPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_UserPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      primary_language_ = from.primary_language_;
    }
    if (cached_has_bits & 0x00000002u) {
      secondary_languages_ = from.secondary_languages_;
    }
    if (cached_has_bits & 0x00000004u) {
      platform_windows_ = from.platform_windows_;
    }
    if (cached_has_bits & 0x00000008u) {
      platform_mac_ = from.platform_mac_;
    }
    if (cached_has_bits & 0x00000010u) {
      platform_linux_ = from.platform_linux_;
    }
    if (cached_has_bits & 0x00000020u) {
      hide_adult_content_violence_ = from.hide_adult_content_violence_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_updated_ = from.timestamp_updated_;
    }
    if (cached_has_bits & 0x00000080u) {
      hide_adult_content_sex_ = from.hide_adult_content_sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      hide_store_broadcast_ = from.hide_store_broadcast_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_content_descriptor_preferences_updated_ = from.timestamp_content_descriptor_preferences_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_UserPreferences::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_UserPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UserPreferences::CopyFrom(const CStore_UserPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_UserPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UserPreferences::IsInitialized() const {
  return true;
}

void CStore_UserPreferences::Swap(CStore_UserPreferences* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_UserPreferences::InternalSwap(CStore_UserPreferences* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_language_, other->primary_language_);
  swap(secondary_languages_, other->secondary_languages_);
  swap(platform_windows_, other->platform_windows_);
  swap(platform_mac_, other->platform_mac_);
  swap(platform_linux_, other->platform_linux_);
  swap(hide_adult_content_violence_, other->hide_adult_content_violence_);
  swap(timestamp_updated_, other->timestamp_updated_);
  swap(hide_adult_content_sex_, other->hide_adult_content_sex_);
  swap(hide_store_broadcast_, other->hide_store_broadcast_);
  swap(timestamp_content_descriptor_preferences_updated_, other->timestamp_content_descriptor_preferences_updated_);
}

::google::protobuf::Metadata CStore_UserPreferences::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CStore_UserTagPreferences_Tag::InitAsDefaultInstance() {
}
class CStore_UserTagPreferences_Tag::HasBitSetters {
 public:
  static void set_has_tagid(CStore_UserTagPreferences_Tag* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CStore_UserTagPreferences_Tag* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp_added(CStore_UserTagPreferences_Tag* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStore_UserTagPreferences_Tag::kTagidFieldNumber;
const int CStore_UserTagPreferences_Tag::kNameFieldNumber;
const int CStore_UserTagPreferences_Tag::kTimestampAddedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_UserTagPreferences_Tag::CStore_UserTagPreferences_Tag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_UserTagPreferences.Tag)
}
CStore_UserTagPreferences_Tag::CStore_UserTagPreferences_Tag(const CStore_UserTagPreferences_Tag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&tagid_, &from.tagid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_added_) -
    reinterpret_cast<char*>(&tagid_)) + sizeof(timestamp_added_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_UserTagPreferences.Tag)
}

void CStore_UserTagPreferences_Tag::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CStore_UserTagPreferences_Tag_steammessages_5fstore_2esteamclient_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tagid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_added_) -
      reinterpret_cast<char*>(&tagid_)) + sizeof(timestamp_added_));
}

CStore_UserTagPreferences_Tag::~CStore_UserTagPreferences_Tag() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_UserTagPreferences.Tag)
  SharedDtor();
}

void CStore_UserTagPreferences_Tag::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CStore_UserTagPreferences_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_UserTagPreferences_Tag& CStore_UserTagPreferences_Tag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_UserTagPreferences_Tag_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_UserTagPreferences_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_UserTagPreferences.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&tagid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_added_) -
        reinterpret_cast<char*>(&tagid_)) + sizeof(timestamp_added_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_UserTagPreferences_Tag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_UserTagPreferences_Tag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 tagid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tagid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CStore_UserTagPreferences.Tag.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 timestamp_added = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp_added(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_UserTagPreferences_Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_UserTagPreferences.Tag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tagid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tagid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tagid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CStore_UserTagPreferences.Tag.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp_added = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_timestamp_added(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_added_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_UserTagPreferences.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_UserTagPreferences.Tag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_UserTagPreferences_Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_UserTagPreferences.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tagid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CStore_UserTagPreferences.Tag.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 timestamp_added = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp_added(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_UserTagPreferences.Tag)
}

::google::protobuf::uint8* CStore_UserTagPreferences_Tag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_UserTagPreferences.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tagid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CStore_UserTagPreferences.Tag.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 timestamp_added = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp_added(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_UserTagPreferences.Tag)
  return target;
}

size_t CStore_UserTagPreferences_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_UserTagPreferences.Tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 tagid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tagid());
    }

    // optional uint32 timestamp_added = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp_added());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UserTagPreferences_Tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_UserTagPreferences.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UserTagPreferences_Tag* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_UserTagPreferences_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_UserTagPreferences.Tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_UserTagPreferences.Tag)
    MergeFrom(*source);
  }
}

void CStore_UserTagPreferences_Tag::MergeFrom(const CStore_UserTagPreferences_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_UserTagPreferences.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      tagid_ = from.tagid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_added_ = from.timestamp_added_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_UserTagPreferences_Tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_UserTagPreferences.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UserTagPreferences_Tag::CopyFrom(const CStore_UserTagPreferences_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_UserTagPreferences.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UserTagPreferences_Tag::IsInitialized() const {
  return true;
}

void CStore_UserTagPreferences_Tag::Swap(CStore_UserTagPreferences_Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_UserTagPreferences_Tag::InternalSwap(CStore_UserTagPreferences_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tagid_, other->tagid_);
  swap(timestamp_added_, other->timestamp_added_);
}

::google::protobuf::Metadata CStore_UserTagPreferences_Tag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CStore_UserTagPreferences::InitAsDefaultInstance() {
}
class CStore_UserTagPreferences::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStore_UserTagPreferences::kTagsToExcludeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_UserTagPreferences::CStore_UserTagPreferences()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_UserTagPreferences)
}
CStore_UserTagPreferences::CStore_UserTagPreferences(const CStore_UserTagPreferences& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tags_to_exclude_(from.tags_to_exclude_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_UserTagPreferences)
}

void CStore_UserTagPreferences::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CStore_UserTagPreferences_steammessages_5fstore_2esteamclient_2eproto.base);
}

CStore_UserTagPreferences::~CStore_UserTagPreferences() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_UserTagPreferences)
  SharedDtor();
}

void CStore_UserTagPreferences::SharedDtor() {
}

void CStore_UserTagPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_UserTagPreferences& CStore_UserTagPreferences::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_UserTagPreferences_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_UserTagPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_UserTagPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_to_exclude_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_UserTagPreferences::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_UserTagPreferences*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CStore_UserTagPreferences.Tag tags_to_exclude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CStore_UserTagPreferences_Tag::_InternalParse;
          object = msg->add_tags_to_exclude();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_UserTagPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_UserTagPreferences)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CStore_UserTagPreferences.Tag tags_to_exclude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags_to_exclude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_UserTagPreferences)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_UserTagPreferences)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_UserTagPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_UserTagPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CStore_UserTagPreferences.Tag tags_to_exclude = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_to_exclude_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tags_to_exclude(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_UserTagPreferences)
}

::google::protobuf::uint8* CStore_UserTagPreferences::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_UserTagPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CStore_UserTagPreferences.Tag tags_to_exclude = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_to_exclude_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tags_to_exclude(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_UserTagPreferences)
  return target;
}

size_t CStore_UserTagPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_UserTagPreferences)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CStore_UserTagPreferences.Tag tags_to_exclude = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_to_exclude_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags_to_exclude(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UserTagPreferences::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_UserTagPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UserTagPreferences* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_UserTagPreferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_UserTagPreferences)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_UserTagPreferences)
    MergeFrom(*source);
  }
}

void CStore_UserTagPreferences::MergeFrom(const CStore_UserTagPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_UserTagPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_to_exclude_.MergeFrom(from.tags_to_exclude_);
}

void CStore_UserTagPreferences::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_UserTagPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UserTagPreferences::CopyFrom(const CStore_UserTagPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_UserTagPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UserTagPreferences::IsInitialized() const {
  return true;
}

void CStore_UserTagPreferences::Swap(CStore_UserTagPreferences* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_UserTagPreferences::InternalSwap(CStore_UserTagPreferences* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tags_to_exclude_)->InternalSwap(CastToBase(&other->tags_to_exclude_));
}

::google::protobuf::Metadata CStore_UserTagPreferences::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CStore_UserContentDescriptorPreferences_ContentDescriptor::InitAsDefaultInstance() {
}
class CStore_UserContentDescriptorPreferences_ContentDescriptor::HasBitSetters {
 public:
  static void set_has_content_descriptorid(CStore_UserContentDescriptorPreferences_ContentDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp_added(CStore_UserContentDescriptorPreferences_ContentDescriptor* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStore_UserContentDescriptorPreferences_ContentDescriptor::kContentDescriptoridFieldNumber;
const int CStore_UserContentDescriptorPreferences_ContentDescriptor::kTimestampAddedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_UserContentDescriptorPreferences_ContentDescriptor::CStore_UserContentDescriptorPreferences_ContentDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
}
CStore_UserContentDescriptorPreferences_ContentDescriptor::CStore_UserContentDescriptorPreferences_ContentDescriptor(const CStore_UserContentDescriptorPreferences_ContentDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&content_descriptorid_, &from.content_descriptorid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_added_) -
    reinterpret_cast<char*>(&content_descriptorid_)) + sizeof(timestamp_added_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
}

void CStore_UserContentDescriptorPreferences_ContentDescriptor::SharedCtor() {
  ::memset(&content_descriptorid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_added_) -
      reinterpret_cast<char*>(&content_descriptorid_)) + sizeof(timestamp_added_));
}

CStore_UserContentDescriptorPreferences_ContentDescriptor::~CStore_UserContentDescriptorPreferences_ContentDescriptor() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  SharedDtor();
}

void CStore_UserContentDescriptorPreferences_ContentDescriptor::SharedDtor() {
}

void CStore_UserContentDescriptorPreferences_ContentDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_UserContentDescriptorPreferences_ContentDescriptor& CStore_UserContentDescriptorPreferences_ContentDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_UserContentDescriptorPreferences_ContentDescriptor_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_UserContentDescriptorPreferences_ContentDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&content_descriptorid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_added_) -
        reinterpret_cast<char*>(&content_descriptorid_)) + sizeof(timestamp_added_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_UserContentDescriptorPreferences_ContentDescriptor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_UserContentDescriptorPreferences_ContentDescriptor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 content_descriptorid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_content_descriptorid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp_added = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp_added(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_UserContentDescriptorPreferences_ContentDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 content_descriptorid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_content_descriptorid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_descriptorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp_added = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_timestamp_added(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_added_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_UserContentDescriptorPreferences_ContentDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 content_descriptorid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->content_descriptorid(), output);
  }

  // optional uint32 timestamp_added = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp_added(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
}

::google::protobuf::uint8* CStore_UserContentDescriptorPreferences_ContentDescriptor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 content_descriptorid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->content_descriptorid(), target);
  }

  // optional uint32 timestamp_added = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp_added(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  return target;
}

size_t CStore_UserContentDescriptorPreferences_ContentDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 content_descriptorid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_descriptorid());
    }

    // optional uint32 timestamp_added = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp_added());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UserContentDescriptorPreferences_ContentDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UserContentDescriptorPreferences_ContentDescriptor* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_UserContentDescriptorPreferences_ContentDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
    MergeFrom(*source);
  }
}

void CStore_UserContentDescriptorPreferences_ContentDescriptor::MergeFrom(const CStore_UserContentDescriptorPreferences_ContentDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      content_descriptorid_ = from.content_descriptorid_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_added_ = from.timestamp_added_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CStore_UserContentDescriptorPreferences_ContentDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UserContentDescriptorPreferences_ContentDescriptor::CopyFrom(const CStore_UserContentDescriptorPreferences_ContentDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UserContentDescriptorPreferences_ContentDescriptor::IsInitialized() const {
  return true;
}

void CStore_UserContentDescriptorPreferences_ContentDescriptor::Swap(CStore_UserContentDescriptorPreferences_ContentDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_UserContentDescriptorPreferences_ContentDescriptor::InternalSwap(CStore_UserContentDescriptorPreferences_ContentDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(content_descriptorid_, other->content_descriptorid_);
  swap(timestamp_added_, other->timestamp_added_);
}

::google::protobuf::Metadata CStore_UserContentDescriptorPreferences_ContentDescriptor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CStore_UserContentDescriptorPreferences::InitAsDefaultInstance() {
}
class CStore_UserContentDescriptorPreferences::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStore_UserContentDescriptorPreferences::kContentDescriptorsToExcludeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_UserContentDescriptorPreferences::CStore_UserContentDescriptorPreferences()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_UserContentDescriptorPreferences)
}
CStore_UserContentDescriptorPreferences::CStore_UserContentDescriptorPreferences(const CStore_UserContentDescriptorPreferences& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      content_descriptors_to_exclude_(from.content_descriptors_to_exclude_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_UserContentDescriptorPreferences)
}

void CStore_UserContentDescriptorPreferences::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CStore_UserContentDescriptorPreferences_steammessages_5fstore_2esteamclient_2eproto.base);
}

CStore_UserContentDescriptorPreferences::~CStore_UserContentDescriptorPreferences() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_UserContentDescriptorPreferences)
  SharedDtor();
}

void CStore_UserContentDescriptorPreferences::SharedDtor() {
}

void CStore_UserContentDescriptorPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_UserContentDescriptorPreferences& CStore_UserContentDescriptorPreferences::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_UserContentDescriptorPreferences_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_UserContentDescriptorPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_UserContentDescriptorPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_descriptors_to_exclude_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_UserContentDescriptorPreferences::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_UserContentDescriptorPreferences*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor content_descriptors_to_exclude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor::_InternalParse;
          object = msg->add_content_descriptors_to_exclude();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_UserContentDescriptorPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_UserContentDescriptorPreferences)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor content_descriptors_to_exclude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_content_descriptors_to_exclude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_UserContentDescriptorPreferences)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_UserContentDescriptorPreferences)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_UserContentDescriptorPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_UserContentDescriptorPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor content_descriptors_to_exclude = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_descriptors_to_exclude_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->content_descriptors_to_exclude(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_UserContentDescriptorPreferences)
}

::google::protobuf::uint8* CStore_UserContentDescriptorPreferences::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_UserContentDescriptorPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor content_descriptors_to_exclude = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_descriptors_to_exclude_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->content_descriptors_to_exclude(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_UserContentDescriptorPreferences)
  return target;
}

size_t CStore_UserContentDescriptorPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_UserContentDescriptorPreferences)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CStore_UserContentDescriptorPreferences.ContentDescriptor content_descriptors_to_exclude = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->content_descriptors_to_exclude_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->content_descriptors_to_exclude(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_UserContentDescriptorPreferences::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_UserContentDescriptorPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_UserContentDescriptorPreferences* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_UserContentDescriptorPreferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_UserContentDescriptorPreferences)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_UserContentDescriptorPreferences)
    MergeFrom(*source);
  }
}

void CStore_UserContentDescriptorPreferences::MergeFrom(const CStore_UserContentDescriptorPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_UserContentDescriptorPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_descriptors_to_exclude_.MergeFrom(from.content_descriptors_to_exclude_);
}

void CStore_UserContentDescriptorPreferences::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_UserContentDescriptorPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_UserContentDescriptorPreferences::CopyFrom(const CStore_UserContentDescriptorPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_UserContentDescriptorPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_UserContentDescriptorPreferences::IsInitialized() const {
  return true;
}

void CStore_UserContentDescriptorPreferences::Swap(CStore_UserContentDescriptorPreferences* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_UserContentDescriptorPreferences::InternalSwap(CStore_UserContentDescriptorPreferences* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&content_descriptors_to_exclude_)->InternalSwap(CastToBase(&other->content_descriptors_to_exclude_));
}

::google::protobuf::Metadata CStore_UserContentDescriptorPreferences::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CStore_GetStorePreferences_Response::InitAsDefaultInstance() {
  ::proto::steam::_CStore_GetStorePreferences_Response_default_instance_._instance.get_mutable()->preferences_ = const_cast< ::proto::steam::CStore_UserPreferences*>(
      ::proto::steam::CStore_UserPreferences::internal_default_instance());
  ::proto::steam::_CStore_GetStorePreferences_Response_default_instance_._instance.get_mutable()->tag_preferences_ = const_cast< ::proto::steam::CStore_UserTagPreferences*>(
      ::proto::steam::CStore_UserTagPreferences::internal_default_instance());
  ::proto::steam::_CStore_GetStorePreferences_Response_default_instance_._instance.get_mutable()->content_descriptor_preferences_ = const_cast< ::proto::steam::CStore_UserContentDescriptorPreferences*>(
      ::proto::steam::CStore_UserContentDescriptorPreferences::internal_default_instance());
}
class CStore_GetStorePreferences_Response::HasBitSetters {
 public:
  static const ::proto::steam::CStore_UserPreferences& preferences(const CStore_GetStorePreferences_Response* msg);
  static void set_has_preferences(CStore_GetStorePreferences_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CStore_UserTagPreferences& tag_preferences(const CStore_GetStorePreferences_Response* msg);
  static void set_has_tag_preferences(CStore_GetStorePreferences_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::steam::CStore_UserContentDescriptorPreferences& content_descriptor_preferences(const CStore_GetStorePreferences_Response* msg);
  static void set_has_content_descriptor_preferences(CStore_GetStorePreferences_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::steam::CStore_UserPreferences&
CStore_GetStorePreferences_Response::HasBitSetters::preferences(const CStore_GetStorePreferences_Response* msg) {
  return *msg->preferences_;
}
const ::proto::steam::CStore_UserTagPreferences&
CStore_GetStorePreferences_Response::HasBitSetters::tag_preferences(const CStore_GetStorePreferences_Response* msg) {
  return *msg->tag_preferences_;
}
const ::proto::steam::CStore_UserContentDescriptorPreferences&
CStore_GetStorePreferences_Response::HasBitSetters::content_descriptor_preferences(const CStore_GetStorePreferences_Response* msg) {
  return *msg->content_descriptor_preferences_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CStore_GetStorePreferences_Response::kPreferencesFieldNumber;
const int CStore_GetStorePreferences_Response::kTagPreferencesFieldNumber;
const int CStore_GetStorePreferences_Response::kContentDescriptorPreferencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CStore_GetStorePreferences_Response::CStore_GetStorePreferences_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CStore_GetStorePreferences_Response)
}
CStore_GetStorePreferences_Response::CStore_GetStorePreferences_Response(const CStore_GetStorePreferences_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preferences()) {
    preferences_ = new ::proto::steam::CStore_UserPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  if (from.has_tag_preferences()) {
    tag_preferences_ = new ::proto::steam::CStore_UserTagPreferences(*from.tag_preferences_);
  } else {
    tag_preferences_ = nullptr;
  }
  if (from.has_content_descriptor_preferences()) {
    content_descriptor_preferences_ = new ::proto::steam::CStore_UserContentDescriptorPreferences(*from.content_descriptor_preferences_);
  } else {
    content_descriptor_preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CStore_GetStorePreferences_Response)
}

void CStore_GetStorePreferences_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CStore_GetStorePreferences_Response_steammessages_5fstore_2esteamclient_2eproto.base);
  ::memset(&preferences_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_descriptor_preferences_) -
      reinterpret_cast<char*>(&preferences_)) + sizeof(content_descriptor_preferences_));
}

CStore_GetStorePreferences_Response::~CStore_GetStorePreferences_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CStore_GetStorePreferences_Response)
  SharedDtor();
}

void CStore_GetStorePreferences_Response::SharedDtor() {
  if (this != internal_default_instance()) delete preferences_;
  if (this != internal_default_instance()) delete tag_preferences_;
  if (this != internal_default_instance()) delete content_descriptor_preferences_;
}

void CStore_GetStorePreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CStore_GetStorePreferences_Response& CStore_GetStorePreferences_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CStore_GetStorePreferences_Response_steammessages_5fstore_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CStore_GetStorePreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CStore_GetStorePreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(preferences_ != nullptr);
      preferences_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tag_preferences_ != nullptr);
      tag_preferences_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(content_descriptor_preferences_ != nullptr);
      content_descriptor_preferences_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CStore_GetStorePreferences_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CStore_GetStorePreferences_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CStore_UserPreferences preferences = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CStore_UserPreferences::_InternalParse;
        object = msg->mutable_preferences();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CStore_UserTagPreferences tag_preferences = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CStore_UserTagPreferences::_InternalParse;
        object = msg->mutable_tag_preferences();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.steam.CStore_UserContentDescriptorPreferences content_descriptor_preferences = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CStore_UserContentDescriptorPreferences::_InternalParse;
        object = msg->mutable_content_descriptor_preferences();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CStore_GetStorePreferences_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CStore_GetStorePreferences_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CStore_UserPreferences preferences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CStore_UserTagPreferences tag_preferences = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CStore_UserContentDescriptorPreferences content_descriptor_preferences = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_content_descriptor_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CStore_GetStorePreferences_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CStore_GetStorePreferences_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CStore_GetStorePreferences_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CStore_GetStorePreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CStore_UserPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::preferences(this), output);
  }

  // optional .proto.steam.CStore_UserTagPreferences tag_preferences = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tag_preferences(this), output);
  }

  // optional .proto.steam.CStore_UserContentDescriptorPreferences content_descriptor_preferences = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::content_descriptor_preferences(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CStore_GetStorePreferences_Response)
}

::google::protobuf::uint8* CStore_GetStorePreferences_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CStore_GetStorePreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CStore_UserPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::preferences(this), target);
  }

  // optional .proto.steam.CStore_UserTagPreferences tag_preferences = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tag_preferences(this), target);
  }

  // optional .proto.steam.CStore_UserContentDescriptorPreferences content_descriptor_preferences = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::content_descriptor_preferences(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CStore_GetStorePreferences_Response)
  return target;
}

size_t CStore_GetStorePreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CStore_GetStorePreferences_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.steam.CStore_UserPreferences preferences = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *preferences_);
    }

    // optional .proto.steam.CStore_UserTagPreferences tag_preferences = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tag_preferences_);
    }

    // optional .proto.steam.CStore_UserContentDescriptorPreferences content_descriptor_preferences = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_descriptor_preferences_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CStore_GetStorePreferences_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CStore_GetStorePreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CStore_GetStorePreferences_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CStore_GetStorePreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CStore_GetStorePreferences_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CStore_GetStorePreferences_Response)
    MergeFrom(*source);
  }
}

void CStore_GetStorePreferences_Response::MergeFrom(const CStore_GetStorePreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CStore_GetStorePreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_preferences()->::proto::steam::CStore_UserPreferences::MergeFrom(from.preferences());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tag_preferences()->::proto::steam::CStore_UserTagPreferences::MergeFrom(from.tag_preferences());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_content_descriptor_preferences()->::proto::steam::CStore_UserContentDescriptorPreferences::MergeFrom(from.content_descriptor_preferences());
    }
  }
}

void CStore_GetStorePreferences_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CStore_GetStorePreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CStore_GetStorePreferences_Response::CopyFrom(const CStore_GetStorePreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CStore_GetStorePreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStore_GetStorePreferences_Response::IsInitialized() const {
  return true;
}

void CStore_GetStorePreferences_Response::Swap(CStore_GetStorePreferences_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CStore_GetStorePreferences_Response::InternalSwap(CStore_GetStorePreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
  swap(tag_preferences_, other->tag_preferences_);
  swap(content_descriptor_preferences_, other->content_descriptor_preferences_);
}

::google::protobuf::Metadata CStore_GetStorePreferences_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fstore_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

Store::~Store() {}

const ::google::protobuf::ServiceDescriptor* Store::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fstore_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* Store::GetDescriptor() {
  return descriptor();
}

void Store::GetLocalizedNameForTags(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CStore_GetLocalizedNameForTags_Request*,
                         ::proto::steam::CStore_GetLocalizedNameForTags_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLocalizedNameForTags() not implemented.");
  done->Run();
}

void Store::GetStorePreferences(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CStore_GetStorePreferences_Request*,
                         ::proto::steam::CStore_GetStorePreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetStorePreferences() not implemented.");
  done->Run();
}

void Store::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fstore_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetLocalizedNameForTags(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CStore_GetLocalizedNameForTags_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CStore_GetLocalizedNameForTags_Response*>(response),
             done);
      break;
    case 1:
      GetStorePreferences(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CStore_GetStorePreferences_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CStore_GetStorePreferences_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Store::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CStore_GetLocalizedNameForTags_Request::default_instance();
    case 1:
      return ::proto::steam::CStore_GetStorePreferences_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Store::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CStore_GetLocalizedNameForTags_Response::default_instance();
    case 1:
      return ::proto::steam::CStore_GetStorePreferences_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Store_Stub::Store_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Store_Stub::Store_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Store_Stub::~Store_Stub() {
  if (owns_channel_) delete channel_;
}

void Store_Stub::GetLocalizedNameForTags(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CStore_GetLocalizedNameForTags_Request* request,
                              ::proto::steam::CStore_GetLocalizedNameForTags_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Store_Stub::GetStorePreferences(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CStore_GetStorePreferences_Request* request,
                              ::proto::steam::CStore_GetStorePreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_GetLocalizedNameForTags_Request* Arena::CreateMaybeMessage< ::proto::steam::CStore_GetLocalizedNameForTags_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_GetLocalizedNameForTags_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag* Arena::CreateMaybeMessage< ::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_GetLocalizedNameForTags_Response_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_GetLocalizedNameForTags_Response* Arena::CreateMaybeMessage< ::proto::steam::CStore_GetLocalizedNameForTags_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_GetLocalizedNameForTags_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_GetStorePreferences_Request* Arena::CreateMaybeMessage< ::proto::steam::CStore_GetStorePreferences_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_GetStorePreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_UserPreferences* Arena::CreateMaybeMessage< ::proto::steam::CStore_UserPreferences >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_UserPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_UserTagPreferences_Tag* Arena::CreateMaybeMessage< ::proto::steam::CStore_UserTagPreferences_Tag >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_UserTagPreferences_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_UserTagPreferences* Arena::CreateMaybeMessage< ::proto::steam::CStore_UserTagPreferences >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_UserTagPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor* Arena::CreateMaybeMessage< ::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_UserContentDescriptorPreferences_ContentDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_UserContentDescriptorPreferences* Arena::CreateMaybeMessage< ::proto::steam::CStore_UserContentDescriptorPreferences >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_UserContentDescriptorPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CStore_GetStorePreferences_Response* Arena::CreateMaybeMessage< ::proto::steam::CStore_GetStorePreferences_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CStore_GetStorePreferences_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
