// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto

#include "steamnetworkingsockets_messages_certs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
namespace proto {
namespace steam {
class CMsgSteamNetworkingIdentityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamNetworkingIdentity> _instance;
} _CMsgSteamNetworkingIdentity_default_instance_;
class CMsgSteamDatagramCertificateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramCertificate> _instance;
} _CMsgSteamDatagramCertificate_default_instance_;
class CMsgSteamDatagramCertificateSignedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramCertificateSigned> _instance;
} _CMsgSteamDatagramCertificateSigned_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamNetworkingIdentity_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamNetworkingIdentity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamNetworkingIdentity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {}};

static void InitDefaultsCMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramCertificate_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramCertificate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramCertificate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {
      &scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsCMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamDatagramCertificateSigned_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamDatagramCertificateSigned();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {}};

void InitDefaults_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamNetworkingIdentity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamNetworkingIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamNetworkingIdentity, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamNetworkingIdentity, xbox_pairwise_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamNetworkingIdentity, generic_bytes_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamNetworkingIdentity, generic_string_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamNetworkingIdentity, ipv6_and_port_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, key_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, key_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, legacy_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, identity_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, gameserver_datacenter_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, time_expiry_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificate, app_id_),
  3,
  0,
  2,
  1,
  ~0u,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificateSigned, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificateSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificateSigned, cert_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificateSigned, ca_key_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamDatagramCertificateSigned, ca_signature_),
  0,
  2,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::proto::steam::CMsgSteamNetworkingIdentity)},
  { 15, 28, sizeof(::proto::steam::CMsgSteamDatagramCertificate)},
  { 36, 44, sizeof(::proto::steam::CMsgSteamDatagramCertificateSigned)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamNetworkingIdentity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamDatagramCertificateSigned_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto = {
  {}, AddDescriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto, "steamnetworkingsockets_messages_certs.proto", schemas,
  file_default_instances, TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets,
  file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto, 3, file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto, file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};

const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto[] =
  "\n+steamnetworkingsockets_messages_certs."
  "proto\022\013proto.steam\"\217\001\n\033CMsgSteamNetworki"
  "ngIdentity\022\020\n\010steam_id\030\020 \001(\006\022\030\n\020xbox_pai"
  "rwise_id\030\021 \001(\t\022\025\n\rgeneric_bytes\030\002 \001(\014\022\026\n"
  "\016generic_string\030\003 \001(\t\022\025\n\ripv6_and_port\030\004"
  " \001(\014\"\330\002\n\034CMsgSteamDatagramCertificate\022M\n"
  "\010key_type\030\001 \001(\01622.proto.steam.CMsgSteamD"
  "atagramCertificate.EKeyType:\007INVALID\022\020\n\010"
  "key_data\030\002 \001(\014\022\027\n\017legacy_steam_id\030\004 \001(\006\022"
  ":\n\010identity\030\013 \001(\0132(.proto.steam.CMsgStea"
  "mNetworkingIdentity\022!\n\031gameserver_datace"
  "nter_ids\030\005 \003(\007\022\024\n\014time_created\030\010 \001(\007\022\023\n\013"
  "time_expiry\030\t \001(\007\022\016\n\006app_id\030\n \001(\r\"$\n\010EKe"
  "yType\022\013\n\007INVALID\020\000\022\013\n\007ED25519\020\001\"[\n\"CMsgS"
  "teamDatagramCertificateSigned\022\014\n\004cert\030\004 "
  "\001(\014\022\021\n\tca_key_id\030\005 \001(\006\022\024\n\014ca_signature\030\006"
  " \001(\014B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto = {
  false, InitDefaults_steamnetworkingsockets_5fmessages_5fcerts_2eproto, 
  descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
  "steamnetworkingsockets_messages_certs.proto", &assign_descriptors_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto, 651,
};

void AddDescriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steamnetworkingsockets_5fmessages_5fcerts_2eproto = []() { AddDescriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[0];
}
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::INVALID;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::ED25519;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MIN;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MAX;
const int CMsgSteamDatagramCertificate::EKeyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CMsgSteamNetworkingIdentity::InitAsDefaultInstance() {
}
class CMsgSteamNetworkingIdentity::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgSteamNetworkingIdentity* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_xbox_pairwise_id(CMsgSteamNetworkingIdentity* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_generic_bytes(CMsgSteamNetworkingIdentity* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_generic_string(CMsgSteamNetworkingIdentity* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ipv6_and_port(CMsgSteamNetworkingIdentity* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamNetworkingIdentity::kSteamIdFieldNumber;
const int CMsgSteamNetworkingIdentity::kXboxPairwiseIdFieldNumber;
const int CMsgSteamNetworkingIdentity::kGenericBytesFieldNumber;
const int CMsgSteamNetworkingIdentity::kGenericStringFieldNumber;
const int CMsgSteamNetworkingIdentity::kIpv6AndPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamNetworkingIdentity::CMsgSteamNetworkingIdentity()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamNetworkingIdentity)
}
CMsgSteamNetworkingIdentity::CMsgSteamNetworkingIdentity(const CMsgSteamNetworkingIdentity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  generic_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_generic_bytes()) {
    generic_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generic_bytes_);
  }
  generic_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_generic_string()) {
    generic_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generic_string_);
  }
  ipv6_and_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipv6_and_port()) {
    ipv6_and_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_and_port_);
  }
  xbox_pairwise_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_xbox_pairwise_id()) {
    xbox_pairwise_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xbox_pairwise_id_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamNetworkingIdentity)
}

void CMsgSteamNetworkingIdentity::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  generic_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generic_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_and_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xbox_pairwise_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgSteamNetworkingIdentity::~CMsgSteamNetworkingIdentity() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamNetworkingIdentity)
  SharedDtor();
}

void CMsgSteamNetworkingIdentity::SharedDtor() {
  generic_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generic_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_and_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xbox_pairwise_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamNetworkingIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingIdentity& CMsgSteamNetworkingIdentity::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamNetworkingIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      generic_bytes_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      generic_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ipv6_and_port_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      xbox_pairwise_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamNetworkingIdentity::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamNetworkingIdentity*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes generic_bytes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_generic_bytes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string generic_string = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSteamNetworkingIdentity.generic_string");
        object = msg->mutable_generic_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes ipv6_and_port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ipv6_and_port();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steam_id = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string xbox_pairwise_id = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id");
        object = msg->mutable_xbox_pairwise_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamNetworkingIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamNetworkingIdentity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes generic_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generic_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string generic_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generic_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->generic_string().data(), static_cast<int>(this->generic_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSteamNetworkingIdentity.generic_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ipv6_and_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipv6_and_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string xbox_pairwise_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xbox_pairwise_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xbox_pairwise_id().data(), static_cast<int>(this->xbox_pairwise_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamNetworkingIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamNetworkingIdentity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamNetworkingIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamNetworkingIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes generic_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->generic_bytes(), output);
  }

  // optional string generic_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generic_string().data(), static_cast<int>(this->generic_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamNetworkingIdentity.generic_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->generic_string(), output);
  }

  // optional bytes ipv6_and_port = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ipv6_and_port(), output);
  }

  // optional fixed64 steam_id = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->steam_id(), output);
  }

  // optional string xbox_pairwise_id = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xbox_pairwise_id().data(), static_cast<int>(this->xbox_pairwise_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->xbox_pairwise_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamNetworkingIdentity)
}

::google::protobuf::uint8* CMsgSteamNetworkingIdentity::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamNetworkingIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes generic_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->generic_bytes(), target);
  }

  // optional string generic_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generic_string().data(), static_cast<int>(this->generic_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamNetworkingIdentity.generic_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->generic_string(), target);
  }

  // optional bytes ipv6_and_port = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ipv6_and_port(), target);
  }

  // optional fixed64 steam_id = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->steam_id(), target);
  }

  // optional string xbox_pairwise_id = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xbox_pairwise_id().data(), static_cast<int>(this->xbox_pairwise_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSteamNetworkingIdentity.xbox_pairwise_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->xbox_pairwise_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamNetworkingIdentity)
  return target;
}

size_t CMsgSteamNetworkingIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamNetworkingIdentity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes generic_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generic_bytes());
    }

    // optional string generic_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generic_string());
    }

    // optional bytes ipv6_and_port = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ipv6_and_port());
    }

    // optional string xbox_pairwise_id = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xbox_pairwise_id());
    }

    // optional fixed64 steam_id = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingIdentity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamNetworkingIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingIdentity* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamNetworkingIdentity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamNetworkingIdentity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamNetworkingIdentity)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingIdentity::MergeFrom(const CMsgSteamNetworkingIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamNetworkingIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      generic_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generic_bytes_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      generic_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generic_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      ipv6_and_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_and_port_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      xbox_pairwise_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xbox_pairwise_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingIdentity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamNetworkingIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingIdentity::CopyFrom(const CMsgSteamNetworkingIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamNetworkingIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingIdentity::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingIdentity::Swap(CMsgSteamNetworkingIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamNetworkingIdentity::InternalSwap(CMsgSteamNetworkingIdentity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  generic_bytes_.Swap(&other->generic_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  generic_string_.Swap(&other->generic_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipv6_and_port_.Swap(&other->ipv6_and_port_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  xbox_pairwise_id_.Swap(&other->xbox_pairwise_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
}

::google::protobuf::Metadata CMsgSteamNetworkingIdentity::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
  return ::file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramCertificate::InitAsDefaultInstance() {
  ::proto::steam::_CMsgSteamDatagramCertificate_default_instance_._instance.get_mutable()->identity_ = const_cast< ::proto::steam::CMsgSteamNetworkingIdentity*>(
      ::proto::steam::CMsgSteamNetworkingIdentity::internal_default_instance());
}
class CMsgSteamDatagramCertificate::HasBitSetters {
 public:
  static void set_has_key_type(CMsgSteamDatagramCertificate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_key_data(CMsgSteamDatagramCertificate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_legacy_steam_id(CMsgSteamDatagramCertificate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::steam::CMsgSteamNetworkingIdentity& identity(const CMsgSteamDatagramCertificate* msg);
  static void set_has_identity(CMsgSteamDatagramCertificate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_created(CMsgSteamDatagramCertificate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_time_expiry(CMsgSteamDatagramCertificate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_app_id(CMsgSteamDatagramCertificate* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

const ::proto::steam::CMsgSteamNetworkingIdentity&
CMsgSteamDatagramCertificate::HasBitSetters::identity(const CMsgSteamDatagramCertificate* msg) {
  return *msg->identity_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramCertificate::kKeyTypeFieldNumber;
const int CMsgSteamDatagramCertificate::kKeyDataFieldNumber;
const int CMsgSteamDatagramCertificate::kLegacySteamIdFieldNumber;
const int CMsgSteamDatagramCertificate::kIdentityFieldNumber;
const int CMsgSteamDatagramCertificate::kGameserverDatacenterIdsFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeCreatedFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramCertificate::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramCertificate)
}
CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      gameserver_datacenter_ids_(from.gameserver_datacenter_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_data()) {
    key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
  }
  if (from.has_identity()) {
    identity_ = new ::proto::steam::CMsgSteamNetworkingIdentity(*from.identity_);
  } else {
    identity_ = nullptr;
  }
  ::memcpy(&legacy_steam_id_, &from.legacy_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&legacy_steam_id_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramCertificate)
}

void CMsgSteamDatagramCertificate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&identity_)) + sizeof(app_id_));
}

CMsgSteamDatagramCertificate::~CMsgSteamDatagramCertificate() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramCertificate)
  SharedDtor();
}

void CMsgSteamDatagramCertificate::SharedDtor() {
  key_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identity_;
}

void CMsgSteamDatagramCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserver_datacenter_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(identity_ != nullptr);
      identity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&legacy_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&legacy_steam_id_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramCertificate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramCertificate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::CMsgSteamDatagramCertificate_EKeyType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_key_type(static_cast<::proto::steam::CMsgSteamDatagramCertificate_EKeyType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes key_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 legacy_steam_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_legacy_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated fixed32 gameserver_datacenter_ids = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 45) {
          do {
            msg->add_gameserver_datacenter_ids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
            ptr += sizeof(::google::protobuf::uint32);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 45 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
        object = msg->mutable_gameserver_datacenter_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional fixed32 time_created = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_time_created(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 time_expiry = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_time_expiry(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 app_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.CMsgSteamNetworkingIdentity identity = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgSteamNetworkingIdentity::_InternalParse;
        object = msg->mutable_identity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramCertificate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::CMsgSteamDatagramCertificate_EKeyType_IsValid(value)) {
            set_key_type(static_cast< ::proto::steam::CMsgSteamDatagramCertificate_EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_legacy_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 gameserver_datacenter_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 45u, input, this->mutable_gameserver_datacenter_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_gameserver_datacenter_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_created = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_expiry = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_time_expiry(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgSteamNetworkingIdentity identity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramCertificate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_type(), output);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key_data(), output);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->legacy_steam_id(), output);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0, n = this->gameserver_datacenter_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      5, this->gameserver_datacenter_ids(i), output);
  }

  // optional fixed32 time_created = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->time_created(), output);
  }

  // optional fixed32 time_expiry = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->time_expiry(), output);
  }

  // optional uint32 app_id = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->app_id(), output);
  }

  // optional .proto.steam.CMsgSteamNetworkingIdentity identity = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::identity(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramCertificate)
}

::google::protobuf::uint8* CMsgSteamDatagramCertificate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_type(), target);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->legacy_steam_id(), target);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(5, this->gameserver_datacenter_ids_, target);

  // optional fixed32 time_created = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->time_created(), target);
  }

  // optional fixed32 time_expiry = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->time_expiry(), target);
  }

  // optional uint32 app_id = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->app_id(), target);
  }

  // optional .proto.steam.CMsgSteamNetworkingIdentity identity = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::identity(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramCertificate)
  return target;
}

size_t CMsgSteamDatagramCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramCertificate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 gameserver_datacenter_ids = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->gameserver_datacenter_ids_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->gameserver_datacenter_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes key_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional .proto.steam.CMsgSteamNetworkingIdentity identity = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identity_);
    }

    // optional fixed64 legacy_steam_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .proto.steam.CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional fixed32 time_created = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_expiry = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 app_id = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCertificate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramCertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramCertificate)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificate::MergeFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameserver_datacenter_ids_.MergeFrom(from.gameserver_datacenter_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_identity()->::proto::steam::CMsgSteamNetworkingIdentity::MergeFrom(from.identity());
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_steam_id_ = from.legacy_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_type_ = from.key_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_expiry_ = from.time_expiry_;
    }
    if (cached_has_bits & 0x00000040u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificate::CopyFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificate::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificate::Swap(CMsgSteamDatagramCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramCertificate::InternalSwap(CMsgSteamDatagramCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameserver_datacenter_ids_.InternalSwap(&other->gameserver_datacenter_ids_);
  key_data_.Swap(&other->key_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identity_, other->identity_);
  swap(legacy_steam_id_, other->legacy_steam_id_);
  swap(key_type_, other->key_type_);
  swap(time_created_, other->time_created_);
  swap(time_expiry_, other->time_expiry_);
  swap(app_id_, other->app_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramCertificate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
  return ::file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance() {
}
class CMsgSteamDatagramCertificateSigned::HasBitSetters {
 public:
  static void set_has_cert(CMsgSteamDatagramCertificateSigned* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ca_key_id(CMsgSteamDatagramCertificateSigned* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ca_signature(CMsgSteamDatagramCertificateSigned* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramCertificateSigned::kCertFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaKeyIdFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamDatagramCertificateSigned)
}
CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cert()) {
    cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
  }
  ca_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ca_signature()) {
    ca_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_signature_);
  }
  ca_key_id_ = from.ca_key_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamDatagramCertificateSigned)
}

void CMsgSteamDatagramCertificateSigned::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgSteamDatagramCertificateSigned::~CMsgSteamDatagramCertificateSigned() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamDatagramCertificateSigned)
  SharedDtor();
}

void CMsgSteamDatagramCertificateSigned::SharedDtor() {
  cert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramCertificateSigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramCertificateSigned::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCertificateSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamDatagramCertificateSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cert_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ca_signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramCertificateSigned::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamDatagramCertificateSigned*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes cert = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cert();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 ca_key_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_ca_key_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes ca_signature = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ca_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramCertificateSigned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamDatagramCertificateSigned)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cert = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ca_key_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_ca_key_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ca_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ca_signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ca_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamDatagramCertificateSigned)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamDatagramCertificateSigned)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramCertificateSigned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamDatagramCertificateSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cert(), output);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->ca_key_id(), output);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->ca_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamDatagramCertificateSigned)
}

::google::protobuf::uint8* CMsgSteamDatagramCertificateSigned::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamDatagramCertificateSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ca_signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamDatagramCertificateSigned)
  return target;
}

size_t CMsgSteamDatagramCertificateSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamDatagramCertificateSigned)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes cert = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

    // optional bytes ca_signature = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ca_signature());
    }

    // optional fixed64 ca_key_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamDatagramCertificateSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCertificateSigned* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamDatagramCertificateSigned>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamDatagramCertificateSigned)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamDatagramCertificateSigned)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamDatagramCertificateSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ca_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ca_signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      ca_key_id_ = from.ca_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateSigned::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificateSigned::Swap(CMsgSteamDatagramCertificateSigned* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramCertificateSigned::InternalSwap(CMsgSteamDatagramCertificateSigned* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cert_.Swap(&other->cert_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ca_signature_.Swap(&other->ca_signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ca_key_id_, other->ca_key_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramCertificateSigned::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
  return ::file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamNetworkingIdentity* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamNetworkingIdentity >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamNetworkingIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramCertificate* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramCertificate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamDatagramCertificateSigned* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamDatagramCertificateSigned >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamDatagramCertificateSigned >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
