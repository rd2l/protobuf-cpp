// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_friends.proto

#include "steammessages_clientserver_friends.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5ffriends_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientEmoticonList_Emoticon_steammessages_5fclientserver_5ffriends_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5ffriends_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendsGroupsList_FriendGroup_steammessages_5fclientserver_5ffriends_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5ffriends_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendsGroupsList_FriendGroupsMembership_steammessages_5fclientserver_5ffriends_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5ffriends_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendsList_Friend_steammessages_5fclientserver_5ffriends_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5ffriends_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPersonaState_Friend_ClanData_steammessages_5fclientserver_5ffriends_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5ffriends_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPersonaState_Friend_KV_steammessages_5fclientserver_5ffriends_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5ffriends_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPlayerNicknameList_PlayerNickname_steammessages_5fclientserver_5ffriends_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5ffriends_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgClientPersonaState_Friend_steammessages_5fclientserver_5ffriends_2eproto;
namespace proto {
namespace steam {
class CMsgClientFriendMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendMsg> _instance;
} _CMsgClientFriendMsg_default_instance_;
class CMsgClientFriendMsgIncomingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendMsgIncoming> _instance;
} _CMsgClientFriendMsgIncoming_default_instance_;
class CMsgClientAddFriendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAddFriend> _instance;
} _CMsgClientAddFriend_default_instance_;
class CMsgClientAddFriendResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAddFriendResponse> _instance;
} _CMsgClientAddFriendResponse_default_instance_;
class CMsgClientRemoveFriendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRemoveFriend> _instance;
} _CMsgClientRemoveFriend_default_instance_;
class CMsgClientHideFriendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientHideFriend> _instance;
} _CMsgClientHideFriend_default_instance_;
class CMsgClientFriendsList_FriendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsList_Friend> _instance;
} _CMsgClientFriendsList_Friend_default_instance_;
class CMsgClientFriendsListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsList> _instance;
} _CMsgClientFriendsList_default_instance_;
class CMsgClientFriendsGroupsList_FriendGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsGroupsList_FriendGroup> _instance;
} _CMsgClientFriendsGroupsList_FriendGroup_default_instance_;
class CMsgClientFriendsGroupsList_FriendGroupsMembershipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsGroupsList_FriendGroupsMembership> _instance;
} _CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_;
class CMsgClientFriendsGroupsListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendsGroupsList> _instance;
} _CMsgClientFriendsGroupsList_default_instance_;
class CMsgClientPlayerNicknameList_PlayerNicknameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPlayerNicknameList_PlayerNickname> _instance;
} _CMsgClientPlayerNicknameList_PlayerNickname_default_instance_;
class CMsgClientPlayerNicknameListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPlayerNicknameList> _instance;
} _CMsgClientPlayerNicknameList_default_instance_;
class CMsgClientSetPlayerNicknameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSetPlayerNickname> _instance;
} _CMsgClientSetPlayerNickname_default_instance_;
class CMsgClientSetPlayerNicknameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientSetPlayerNicknameResponse> _instance;
} _CMsgClientSetPlayerNicknameResponse_default_instance_;
class CMsgClientRequestFriendDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRequestFriendData> _instance;
} _CMsgClientRequestFriendData_default_instance_;
class CMsgClientChangeStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientChangeStatus> _instance;
} _CMsgClientChangeStatus_default_instance_;
class CMsgPersonaChangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPersonaChangeResponse> _instance;
} _CMsgPersonaChangeResponse_default_instance_;
class CMsgClientPersonaState_Friend_ClanDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPersonaState_Friend_ClanData> _instance;
} _CMsgClientPersonaState_Friend_ClanData_default_instance_;
class CMsgClientPersonaState_Friend_KVDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPersonaState_Friend_KV> _instance;
} _CMsgClientPersonaState_Friend_KV_default_instance_;
class CMsgClientPersonaState_FriendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPersonaState_Friend> _instance;
} _CMsgClientPersonaState_Friend_default_instance_;
class CMsgClientPersonaStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPersonaState> _instance;
} _CMsgClientPersonaState_default_instance_;
class CMsgClientFriendProfileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendProfileInfo> _instance;
} _CMsgClientFriendProfileInfo_default_instance_;
class CMsgClientFriendProfileInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientFriendProfileInfoResponse> _instance;
} _CMsgClientFriendProfileInfoResponse_default_instance_;
class CMsgClientCreateFriendsGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientCreateFriendsGroup> _instance;
} _CMsgClientCreateFriendsGroup_default_instance_;
class CMsgClientCreateFriendsGroupResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientCreateFriendsGroupResponse> _instance;
} _CMsgClientCreateFriendsGroupResponse_default_instance_;
class CMsgClientDeleteFriendsGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientDeleteFriendsGroup> _instance;
} _CMsgClientDeleteFriendsGroup_default_instance_;
class CMsgClientDeleteFriendsGroupResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientDeleteFriendsGroupResponse> _instance;
} _CMsgClientDeleteFriendsGroupResponse_default_instance_;
class CMsgClientManageFriendsGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientManageFriendsGroup> _instance;
} _CMsgClientManageFriendsGroup_default_instance_;
class CMsgClientManageFriendsGroupResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientManageFriendsGroupResponse> _instance;
} _CMsgClientManageFriendsGroupResponse_default_instance_;
class CMsgClientAddFriendToGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAddFriendToGroup> _instance;
} _CMsgClientAddFriendToGroup_default_instance_;
class CMsgClientAddFriendToGroupResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientAddFriendToGroupResponse> _instance;
} _CMsgClientAddFriendToGroupResponse_default_instance_;
class CMsgClientRemoveFriendFromGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRemoveFriendFromGroup> _instance;
} _CMsgClientRemoveFriendFromGroup_default_instance_;
class CMsgClientRemoveFriendFromGroupResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientRemoveFriendFromGroupResponse> _instance;
} _CMsgClientRemoveFriendFromGroupResponse_default_instance_;
class CMsgClientGetEmoticonListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientGetEmoticonList> _instance;
} _CMsgClientGetEmoticonList_default_instance_;
class CMsgClientEmoticonList_EmoticonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientEmoticonList_Emoticon> _instance;
} _CMsgClientEmoticonList_Emoticon_default_instance_;
class CMsgClientEmoticonListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientEmoticonList> _instance;
} _CMsgClientEmoticonList_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgClientFriendMsg_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientFriendMsg_default_instance_;
    new (ptr) ::proto::steam::CMsgClientFriendMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientFriendMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendMsg_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientFriendMsg_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientFriendMsgIncoming_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientFriendMsgIncoming_default_instance_;
    new (ptr) ::proto::steam::CMsgClientFriendMsgIncoming();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientFriendMsgIncoming::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendMsgIncoming_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientFriendMsgIncoming_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientAddFriend_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAddFriend_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAddFriend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAddFriend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAddFriend_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAddFriend_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientAddFriendResponse_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAddFriendResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAddFriendResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAddFriendResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAddFriendResponse_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAddFriendResponse_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientRemoveFriend_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRemoveFriend_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRemoveFriend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRemoveFriend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRemoveFriend_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientRemoveFriend_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientHideFriend_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientHideFriend_default_instance_;
    new (ptr) ::proto::steam::CMsgClientHideFriend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientHideFriend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientHideFriend_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientHideFriend_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientFriendsList_Friend_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientFriendsList_Friend_default_instance_;
    new (ptr) ::proto::steam::CMsgClientFriendsList_Friend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientFriendsList_Friend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendsList_Friend_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientFriendsList_Friend_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientFriendsList_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientFriendsList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientFriendsList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientFriendsList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientFriendsList_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientFriendsList_steammessages_5fclientserver_5ffriends_2eproto}, {
      &scc_info_CMsgClientFriendsList_Friend_steammessages_5fclientserver_5ffriends_2eproto.base,}};

static void InitDefaultsCMsgClientFriendsGroupsList_FriendGroup_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientFriendsGroupsList_FriendGroup_default_instance_;
    new (ptr) ::proto::steam::CMsgClientFriendsGroupsList_FriendGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientFriendsGroupsList_FriendGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendsGroupsList_FriendGroup_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientFriendsGroupsList_FriendGroup_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientFriendsGroupsList_FriendGroupsMembership_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_;
    new (ptr) ::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendsGroupsList_FriendGroupsMembership_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientFriendsGroupsList_FriendGroupsMembership_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientFriendsGroupsList_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientFriendsGroupsList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientFriendsGroupsList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientFriendsGroupsList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgClientFriendsGroupsList_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgClientFriendsGroupsList_steammessages_5fclientserver_5ffriends_2eproto}, {
      &scc_info_CMsgClientFriendsGroupsList_FriendGroup_steammessages_5fclientserver_5ffriends_2eproto.base,
      &scc_info_CMsgClientFriendsGroupsList_FriendGroupsMembership_steammessages_5fclientserver_5ffriends_2eproto.base,}};

static void InitDefaultsCMsgClientPlayerNicknameList_PlayerNickname_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPlayerNicknameList_PlayerNickname_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPlayerNicknameList_PlayerNickname_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPlayerNicknameList_PlayerNickname_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientPlayerNicknameList_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPlayerNicknameList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPlayerNicknameList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPlayerNicknameList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientPlayerNicknameList_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientPlayerNicknameList_steammessages_5fclientserver_5ffriends_2eproto}, {
      &scc_info_CMsgClientPlayerNicknameList_PlayerNickname_steammessages_5fclientserver_5ffriends_2eproto.base,}};

static void InitDefaultsCMsgClientSetPlayerNickname_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSetPlayerNickname_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSetPlayerNickname();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSetPlayerNickname::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSetPlayerNickname_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSetPlayerNickname_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientSetPlayerNicknameResponse_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientSetPlayerNicknameResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientSetPlayerNicknameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientSetPlayerNicknameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientSetPlayerNicknameResponse_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientSetPlayerNicknameResponse_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientRequestFriendData_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRequestFriendData_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRequestFriendData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRequestFriendData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRequestFriendData_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientRequestFriendData_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientChangeStatus_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientChangeStatus_default_instance_;
    new (ptr) ::proto::steam::CMsgClientChangeStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientChangeStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientChangeStatus_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientChangeStatus_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgPersonaChangeResponse_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgPersonaChangeResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgPersonaChangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgPersonaChangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPersonaChangeResponse_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPersonaChangeResponse_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientPersonaState_Friend_ClanData_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPersonaState_Friend_ClanData_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPersonaState_Friend_ClanData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPersonaState_Friend_ClanData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPersonaState_Friend_ClanData_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPersonaState_Friend_ClanData_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientPersonaState_Friend_KV_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPersonaState_Friend_KV_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPersonaState_Friend_KV();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPersonaState_Friend_KV::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPersonaState_Friend_KV_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPersonaState_Friend_KV_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientPersonaState_Friend_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPersonaState_Friend_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPersonaState_Friend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPersonaState_Friend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgClientPersonaState_Friend_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgClientPersonaState_Friend_steammessages_5fclientserver_5ffriends_2eproto}, {
      &scc_info_CMsgClientPersonaState_Friend_ClanData_steammessages_5fclientserver_5ffriends_2eproto.base,
      &scc_info_CMsgClientPersonaState_Friend_KV_steammessages_5fclientserver_5ffriends_2eproto.base,}};

static void InitDefaultsCMsgClientPersonaState_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientPersonaState_default_instance_;
    new (ptr) ::proto::steam::CMsgClientPersonaState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientPersonaState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientPersonaState_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientPersonaState_steammessages_5fclientserver_5ffriends_2eproto}, {
      &scc_info_CMsgClientPersonaState_Friend_steammessages_5fclientserver_5ffriends_2eproto.base,}};

static void InitDefaultsCMsgClientFriendProfileInfo_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientFriendProfileInfo_default_instance_;
    new (ptr) ::proto::steam::CMsgClientFriendProfileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientFriendProfileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendProfileInfo_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientFriendProfileInfo_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientFriendProfileInfoResponse_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientFriendProfileInfoResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientFriendProfileInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientFriendProfileInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientFriendProfileInfoResponse_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientFriendProfileInfoResponse_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientCreateFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientCreateFriendsGroup_default_instance_;
    new (ptr) ::proto::steam::CMsgClientCreateFriendsGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientCreateFriendsGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientCreateFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientCreateFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientCreateFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientCreateFriendsGroupResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientCreateFriendsGroupResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientCreateFriendsGroupResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientCreateFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientCreateFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientDeleteFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientDeleteFriendsGroup_default_instance_;
    new (ptr) ::proto::steam::CMsgClientDeleteFriendsGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientDeleteFriendsGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientDeleteFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientDeleteFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientDeleteFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientDeleteFriendsGroupResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientDeleteFriendsGroupResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientDeleteFriendsGroupResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientDeleteFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientDeleteFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientManageFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientManageFriendsGroup_default_instance_;
    new (ptr) ::proto::steam::CMsgClientManageFriendsGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientManageFriendsGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientManageFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientManageFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientManageFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientManageFriendsGroupResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientManageFriendsGroupResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientManageFriendsGroupResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientManageFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientManageFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientAddFriendToGroup_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAddFriendToGroup_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAddFriendToGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAddFriendToGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAddFriendToGroup_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAddFriendToGroup_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientAddFriendToGroupResponse_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientAddFriendToGroupResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientAddFriendToGroupResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientAddFriendToGroupResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientAddFriendToGroupResponse_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientAddFriendToGroupResponse_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientRemoveFriendFromGroup_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRemoveFriendFromGroup_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRemoveFriendFromGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRemoveFriendFromGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRemoveFriendFromGroup_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientRemoveFriendFromGroup_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientRemoveFriendFromGroupResponse_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientRemoveFriendFromGroupResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgClientRemoveFriendFromGroupResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientRemoveFriendFromGroupResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientRemoveFriendFromGroupResponse_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientRemoveFriendFromGroupResponse_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientGetEmoticonList_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientGetEmoticonList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientGetEmoticonList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientGetEmoticonList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientGetEmoticonList_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientGetEmoticonList_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientEmoticonList_Emoticon_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientEmoticonList_Emoticon_default_instance_;
    new (ptr) ::proto::steam::CMsgClientEmoticonList_Emoticon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientEmoticonList_Emoticon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientEmoticonList_Emoticon_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientEmoticonList_Emoticon_steammessages_5fclientserver_5ffriends_2eproto}, {}};

static void InitDefaultsCMsgClientEmoticonList_steammessages_5fclientserver_5ffriends_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClientEmoticonList_default_instance_;
    new (ptr) ::proto::steam::CMsgClientEmoticonList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClientEmoticonList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientEmoticonList_steammessages_5fclientserver_5ffriends_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientEmoticonList_steammessages_5fclientserver_5ffriends_2eproto}, {
      &scc_info_CMsgClientEmoticonList_Emoticon_steammessages_5fclientserver_5ffriends_2eproto.base,}};

void InitDefaults_steammessages_5fclientserver_5ffriends_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientFriendMsg_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientFriendMsgIncoming_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAddFriend_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAddFriendResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRemoveFriend_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientHideFriend_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientFriendsList_Friend_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientFriendsList_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientFriendsGroupsList_FriendGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientFriendsGroupsList_FriendGroupsMembership_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientFriendsGroupsList_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPlayerNicknameList_PlayerNickname_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPlayerNicknameList_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSetPlayerNickname_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientSetPlayerNicknameResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRequestFriendData_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientChangeStatus_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPersonaChangeResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPersonaState_Friend_ClanData_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPersonaState_Friend_KV_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPersonaState_Friend_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPersonaState_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientFriendProfileInfo_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientFriendProfileInfoResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientCreateFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientCreateFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientDeleteFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientDeleteFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientManageFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientManageFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAddFriendToGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientAddFriendToGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRemoveFriendFromGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientRemoveFriendFromGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientGetEmoticonList_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientEmoticonList_Emoticon_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientEmoticonList_steammessages_5fclientserver_5ffriends_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[37];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5ffriends_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5ffriends_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fclientserver_5ffriends_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsg, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsg, chat_entry_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsg, message_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsg, rtime32_server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsg, echo_to_sender_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsgIncoming, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsgIncoming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsgIncoming, steamid_from_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsgIncoming, chat_entry_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsgIncoming, from_limited_account_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsgIncoming, message_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendMsgIncoming, rtime32_server_timestamp_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriend, steamid_to_add_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriend, accountname_or_email_to_add_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendResponse, steam_id_added_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendResponse, persona_name_added_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriend, friendid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientHideFriend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientHideFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientHideFriend, friendid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientHideFriend, hide_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList_Friend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList_Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList_Friend, ulfriendid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList_Friend, efriendrelationship_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList, bincremental_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList, friends_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList, max_friend_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList, active_friend_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsList, friends_limit_hit_),
  1,
  ~0u,
  0,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList_FriendGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList_FriendGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList_FriendGroup, ngroupid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList_FriendGroup, strgroupname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership, ulsteamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership, ngroupid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList, bremoval_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList, bincremental_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList, friendgroups_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendsGroupsList, memberships_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname, nickname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPlayerNicknameList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPlayerNicknameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPlayerNicknameList, removal_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPlayerNicknameList, incremental_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPlayerNicknameList, nicknames_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetPlayerNickname, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetPlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetPlayerNickname, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetPlayerNickname, nickname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetPlayerNicknameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetPlayerNicknameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientSetPlayerNicknameResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestFriendData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestFriendData, persona_state_requested_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRequestFriendData, friends_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChangeStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChangeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChangeStatus, persona_state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChangeStatus, player_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChangeStatus, is_auto_generated_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChangeStatus, high_priority_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChangeStatus, persona_set_by_user_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChangeStatus, persona_state_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientChangeStatus, need_persona_response_),
  1,
  0,
  2,
  3,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPersonaChangeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPersonaChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPersonaChangeResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPersonaChangeResponse, player_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend_ClanData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend_ClanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend_ClanData, ogg_app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend_ClanData, chat_group_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend_KV, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend_KV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend_KV, key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend_KV, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, friendid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, persona_state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, game_played_app_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, game_server_ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, game_server_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, persona_state_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, online_session_instances_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, published_instance_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, persona_set_by_user_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, player_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, query_port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, steamid_source_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, avatar_hash_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, last_logoff_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, last_logon_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, last_seen_online_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, clan_rank_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, game_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, gameid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, game_data_blob_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, clan_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, clan_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, rich_presence_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, game_lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, watching_broadcast_accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, watching_broadcast_appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, watching_broadcast_viewers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState_Friend, watching_broadcast_title_),
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  17,
  16,
  1,
  18,
  19,
  20,
  22,
  2,
  21,
  3,
  6,
  4,
  ~0u,
  24,
  25,
  23,
  26,
  27,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState, status_flags_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientPersonaState, friends_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfo, steamid_friend_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, steamid_friend_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, real_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, city_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, state_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, country_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, headline_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientFriendProfileInfoResponse, summary_),
  8,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCreateFriendsGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCreateFriendsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCreateFriendsGroup, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCreateFriendsGroup, groupname_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCreateFriendsGroup, steamid_friends_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCreateFriendsGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCreateFriendsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCreateFriendsGroupResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientCreateFriendsGroupResponse, groupid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeleteFriendsGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeleteFriendsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeleteFriendsGroup, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeleteFriendsGroup, groupid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeleteFriendsGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeleteFriendsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientDeleteFriendsGroupResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientManageFriendsGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientManageFriendsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientManageFriendsGroup, groupid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientManageFriendsGroup, groupname_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientManageFriendsGroup, steamid_friends_added_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientManageFriendsGroup, steamid_friends_removed_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientManageFriendsGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientManageFriendsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientManageFriendsGroupResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendToGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendToGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendToGroup, groupid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendToGroup, steamiduser_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendToGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendToGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientAddFriendToGroupResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriendFromGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriendFromGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriendFromGroup, groupid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriendFromGroup, steamiduser_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriendFromGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriendFromGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientRemoveFriendFromGroupResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetEmoticonList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientGetEmoticonList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList_Emoticon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList_Emoticon, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList_Emoticon, count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList_Emoticon, time_last_used_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList_Emoticon, use_count_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList_Emoticon, time_received_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClientEmoticonList, emoticons_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::proto::steam::CMsgClientFriendMsg)},
  { 15, 25, sizeof(::proto::steam::CMsgClientFriendMsgIncoming)},
  { 30, 37, sizeof(::proto::steam::CMsgClientAddFriend)},
  { 39, 47, sizeof(::proto::steam::CMsgClientAddFriendResponse)},
  { 50, 56, sizeof(::proto::steam::CMsgClientRemoveFriend)},
  { 57, 64, sizeof(::proto::steam::CMsgClientHideFriend)},
  { 66, 73, sizeof(::proto::steam::CMsgClientFriendsList_Friend)},
  { 75, 85, sizeof(::proto::steam::CMsgClientFriendsList)},
  { 90, 97, sizeof(::proto::steam::CMsgClientFriendsGroupsList_FriendGroup)},
  { 99, 106, sizeof(::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership)},
  { 108, 117, sizeof(::proto::steam::CMsgClientFriendsGroupsList)},
  { 121, 128, sizeof(::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname)},
  { 130, 138, sizeof(::proto::steam::CMsgClientPlayerNicknameList)},
  { 141, 148, sizeof(::proto::steam::CMsgClientSetPlayerNickname)},
  { 150, 156, sizeof(::proto::steam::CMsgClientSetPlayerNicknameResponse)},
  { 157, 164, sizeof(::proto::steam::CMsgClientRequestFriendData)},
  { 166, 178, sizeof(::proto::steam::CMsgClientChangeStatus)},
  { 185, 192, sizeof(::proto::steam::CMsgPersonaChangeResponse)},
  { 194, 201, sizeof(::proto::steam::CMsgClientPersonaState_Friend_ClanData)},
  { 203, 210, sizeof(::proto::steam::CMsgClientPersonaState_Friend_KV)},
  { 212, 246, sizeof(::proto::steam::CMsgClientPersonaState_Friend)},
  { 275, 282, sizeof(::proto::steam::CMsgClientPersonaState)},
  { 284, 290, sizeof(::proto::steam::CMsgClientFriendProfileInfo)},
  { 291, 305, sizeof(::proto::steam::CMsgClientFriendProfileInfoResponse)},
  { 314, 322, sizeof(::proto::steam::CMsgClientCreateFriendsGroup)},
  { 325, 332, sizeof(::proto::steam::CMsgClientCreateFriendsGroupResponse)},
  { 334, 341, sizeof(::proto::steam::CMsgClientDeleteFriendsGroup)},
  { 343, 349, sizeof(::proto::steam::CMsgClientDeleteFriendsGroupResponse)},
  { 350, 359, sizeof(::proto::steam::CMsgClientManageFriendsGroup)},
  { 363, 369, sizeof(::proto::steam::CMsgClientManageFriendsGroupResponse)},
  { 370, 377, sizeof(::proto::steam::CMsgClientAddFriendToGroup)},
  { 379, 385, sizeof(::proto::steam::CMsgClientAddFriendToGroupResponse)},
  { 386, 393, sizeof(::proto::steam::CMsgClientRemoveFriendFromGroup)},
  { 395, 401, sizeof(::proto::steam::CMsgClientRemoveFriendFromGroupResponse)},
  { 402, 407, sizeof(::proto::steam::CMsgClientGetEmoticonList)},
  { 407, 417, sizeof(::proto::steam::CMsgClientEmoticonList_Emoticon)},
  { 422, 428, sizeof(::proto::steam::CMsgClientEmoticonList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientFriendMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientFriendMsgIncoming_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAddFriend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAddFriendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRemoveFriend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientHideFriend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientFriendsList_Friend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientFriendsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientFriendsGroupsList_FriendGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientFriendsGroupsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPlayerNicknameList_PlayerNickname_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPlayerNicknameList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSetPlayerNickname_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientSetPlayerNicknameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRequestFriendData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientChangeStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgPersonaChangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPersonaState_Friend_ClanData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPersonaState_Friend_KV_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPersonaState_Friend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientPersonaState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientFriendProfileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientFriendProfileInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientCreateFriendsGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientCreateFriendsGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientDeleteFriendsGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientDeleteFriendsGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientManageFriendsGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientManageFriendsGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAddFriendToGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientAddFriendToGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRemoveFriendFromGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientRemoveFriendFromGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientGetEmoticonList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientEmoticonList_Emoticon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClientEmoticonList_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto = {
  {}, AddDescriptors_steammessages_5fclientserver_5ffriends_2eproto, "steammessages_clientserver_friends.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fclientserver_5ffriends_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto, 37, file_level_enum_descriptors_steammessages_5fclientserver_5ffriends_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5ffriends_2eproto,
};

const char descriptor_table_protodef_steammessages_5fclientserver_5ffriends_2eproto[] =
  "\n(steammessages_clientserver_friends.pro"
  "to\022\013proto.steam\032\030steammessages_base.prot"
  "o\"\212\001\n\023CMsgClientFriendMsg\022\017\n\007steamid\030\001 \001"
  "(\006\022\027\n\017chat_entry_type\030\002 \001(\005\022\017\n\007message\030\003"
  " \001(\014\022 \n\030rtime32_server_timestamp\030\004 \001(\007\022\026"
  "\n\016echo_to_sender\030\005 \001(\010\"\235\001\n\033CMsgClientFri"
  "endMsgIncoming\022\024\n\014steamid_from\030\001 \001(\006\022\027\n\017"
  "chat_entry_type\030\002 \001(\005\022\034\n\024from_limited_ac"
  "count\030\003 \001(\010\022\017\n\007message\030\004 \001(\014\022 \n\030rtime32_"
  "server_timestamp\030\005 \001(\007\"R\n\023CMsgClientAddF"
  "riend\022\026\n\016steamid_to_add\030\001 \001(\006\022#\n\033account"
  "name_or_email_to_add\030\002 \001(\t\"e\n\033CMsgClient"
  "AddFriendResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\026\n"
  "\016steam_id_added\030\002 \001(\006\022\032\n\022persona_name_ad"
  "ded\030\003 \001(\t\"*\n\026CMsgClientRemoveFriend\022\020\n\010f"
  "riendid\030\001 \001(\006\"6\n\024CMsgClientHideFriend\022\020\n"
  "\010friendid\030\001 \001(\006\022\014\n\004hide\030\002 \001(\010\"\366\001\n\025CMsgCl"
  "ientFriendsList\022\024\n\014bincremental\030\001 \001(\010\022:\n"
  "\007friends\030\002 \003(\0132).proto.steam.CMsgClientF"
  "riendsList.Friend\022\030\n\020max_friend_count\030\003 "
  "\001(\r\022\033\n\023active_friend_count\030\004 \001(\r\022\031\n\021frie"
  "nds_limit_hit\030\005 \001(\010\0329\n\006Friend\022\022\n\nulfrien"
  "did\030\001 \001(\006\022\033\n\023efriendrelationship\030\002 \001(\r\"\335"
  "\002\n\033CMsgClientFriendsGroupsList\022\020\n\010bremov"
  "al\030\001 \001(\010\022\024\n\014bincremental\030\002 \001(\010\022J\n\014friend"
  "Groups\030\003 \003(\01324.proto.steam.CMsgClientFri"
  "endsGroupsList.FriendGroup\022T\n\013membership"
  "s\030\004 \003(\0132\?.proto.steam.CMsgClientFriendsG"
  "roupsList.FriendGroupsMembership\0325\n\013Frie"
  "ndGroup\022\020\n\010nGroupID\030\001 \001(\005\022\024\n\014strGroupNam"
  "e\030\002 \001(\t\032=\n\026FriendGroupsMembership\022\021\n\tulS"
  "teamID\030\001 \001(\006\022\020\n\010nGroupID\030\002 \001(\005\"\306\001\n\034CMsgC"
  "lientPlayerNicknameList\022\017\n\007removal\030\001 \001(\010"
  "\022\023\n\013incremental\030\002 \001(\010\022K\n\tnicknames\030\003 \003(\013"
  "28.proto.steam.CMsgClientPlayerNicknameL"
  "ist.PlayerNickname\0323\n\016PlayerNickname\022\017\n\007"
  "steamid\030\001 \001(\006\022\020\n\010nickname\030\003 \001(\t\"@\n\033CMsgC"
  "lientSetPlayerNickname\022\017\n\007steamid\030\001 \001(\006\022"
  "\020\n\010nickname\030\002 \001(\t\"6\n#CMsgClientSetPlayer"
  "NicknameResponse\022\017\n\007eresult\030\001 \001(\r\"O\n\033CMs"
  "gClientRequestFriendData\022\037\n\027persona_stat"
  "e_requested\030\001 \001(\r\022\017\n\007friends\030\002 \003(\006\"\327\001\n\026C"
  "MsgClientChangeStatus\022\025\n\rpersona_state\030\001"
  " \001(\r\022\023\n\013player_name\030\002 \001(\t\022\036\n\026is_auto_gen"
  "erated_name\030\003 \001(\010\022\025\n\rhigh_priority\030\004 \001(\010"
  "\022\033\n\023persona_set_by_user\030\005 \001(\010\022\036\n\023persona"
  "_state_flags\030\006 \001(\r:\0010\022\035\n\025need_persona_re"
  "sponse\030\007 \001(\010\"@\n\031CMsgPersonaChangeRespons"
  "e\022\016\n\006result\030\001 \001(\r\022\023\n\013player_name\030\002 \001(\t\"\203"
  "\010\n\026CMsgClientPersonaState\022\024\n\014status_flag"
  "s\030\001 \001(\r\022;\n\007friends\030\002 \003(\0132*.proto.steam.C"
  "MsgClientPersonaState.Friend\032\225\007\n\006Friend\022"
  "\020\n\010friendid\030\001 \001(\006\022\025\n\rpersona_state\030\002 \001(\r"
  "\022\032\n\022game_played_app_id\030\003 \001(\r\022\026\n\016game_ser"
  "ver_ip\030\004 \001(\r\022\030\n\020game_server_port\030\005 \001(\r\022\033"
  "\n\023persona_state_flags\030\006 \001(\r\022 \n\030online_se"
  "ssion_instances\030\007 \001(\r\022\035\n\025published_insta"
  "nce_id\030\010 \001(\r\022\033\n\023persona_set_by_user\030\n \001("
  "\010\022\023\n\013player_name\030\017 \001(\t\022\022\n\nquery_port\030\024 \001"
  "(\r\022\026\n\016steamid_source\030\031 \001(\006\022\023\n\013avatar_has"
  "h\030\037 \001(\014\022\023\n\013last_logoff\030- \001(\r\022\022\n\nlast_log"
  "on\030. \001(\r\022\030\n\020last_seen_online\030/ \001(\r\022\021\n\tcl"
  "an_rank\0302 \001(\r\022\021\n\tgame_name\0307 \001(\t\022\016\n\006game"
  "id\0308 \001(\006\022\026\n\016game_data_blob\030< \001(\014\022F\n\tclan"
  "_data\030@ \001(\01323.proto.steam.CMsgClientPers"
  "onaState.Friend.ClanData\022\020\n\010clan_tag\030A \001"
  "(\t\022D\n\rrich_presence\030G \003(\0132-.proto.steam."
  "CMsgClientPersonaState.Friend.KV\022\024\n\014broa"
  "dcast_id\030H \001(\006\022\025\n\rgame_lobby_id\030I \001(\006\022$\n"
  "\034watching_broadcast_accountid\030J \001(\r\022 \n\030w"
  "atching_broadcast_appid\030K \001(\r\022\"\n\032watchin"
  "g_broadcast_viewers\030L \001(\r\022 \n\030watching_br"
  "oadcast_title\030M \001(\t\0325\n\010ClanData\022\022\n\nogg_a"
  "pp_id\030\001 \001(\r\022\025\n\rchat_group_id\030\002 \001(\004\032 \n\002KV"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"5\n\033CMsgClie"
  "ntFriendProfileInfo\022\026\n\016steamid_friend\030\001 "
  "\001(\006\"\332\001\n#CMsgClientFriendProfileInfoRespo"
  "nse\022\022\n\007eresult\030\001 \001(\005:\0012\022\026\n\016steamid_frien"
  "d\030\002 \001(\006\022\024\n\014time_created\030\003 \001(\r\022\021\n\treal_na"
  "me\030\004 \001(\t\022\021\n\tcity_name\030\005 \001(\t\022\022\n\nstate_nam"
  "e\030\006 \001(\t\022\024\n\014country_name\030\007 \001(\t\022\020\n\010headlin"
  "e\030\010 \001(\t\022\017\n\007summary\030\t \001(\t\"[\n\034CMsgClientCr"
  "eateFriendsGroup\022\017\n\007steamid\030\001 \001(\006\022\021\n\tgro"
  "upname\030\002 \001(\t\022\027\n\017steamid_friends\030\003 \003(\006\"H\n"
  "$CMsgClientCreateFriendsGroupResponse\022\017\n"
  "\007eresult\030\001 \001(\r\022\017\n\007groupid\030\002 \001(\005\"@\n\034CMsgC"
  "lientDeleteFriendsGroup\022\017\n\007steamid\030\001 \001(\006"
  "\022\017\n\007groupid\030\002 \001(\005\"7\n$CMsgClientDeleteFri"
  "endsGroupResponse\022\017\n\007eresult\030\001 \001(\r\"\202\001\n\034C"
  "MsgClientManageFriendsGroup\022\017\n\007groupid\030\001"
  " \001(\005\022\021\n\tgroupname\030\002 \001(\t\022\035\n\025steamid_frien"
  "ds_added\030\003 \003(\006\022\037\n\027steamid_friends_remove"
  "d\030\004 \003(\006\"7\n$CMsgClientManageFriendsGroupR"
  "esponse\022\017\n\007eresult\030\001 \001(\r\"B\n\032CMsgClientAd"
  "dFriendToGroup\022\017\n\007groupid\030\001 \001(\005\022\023\n\013steam"
  "iduser\030\002 \001(\006\"5\n\"CMsgClientAddFriendToGro"
  "upResponse\022\017\n\007eresult\030\001 \001(\r\"G\n\037CMsgClien"
  "tRemoveFriendFromGroup\022\017\n\007groupid\030\001 \001(\005\022"
  "\023\n\013steamiduser\030\002 \001(\006\":\n\'CMsgClientRemove"
  "FriendFromGroupResponse\022\017\n\007eresult\030\001 \001(\r"
  "\"\033\n\031CMsgClientGetEmoticonList\"\304\001\n\026CMsgCl"
  "ientEmoticonList\022\?\n\temoticons\030\001 \003(\0132,.pr"
  "oto.steam.CMsgClientEmoticonList.Emotico"
  "n\032i\n\010Emoticon\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 \001"
  "(\005\022\026\n\016time_last_used\030\003 \001(\r\022\021\n\tuse_count\030"
  "\004 \001(\r\022\025\n\rtime_received\030\005 \001(\rB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5ffriends_2eproto = {
  false, InitDefaults_steammessages_5fclientserver_5ffriends_2eproto, 
  descriptor_table_protodef_steammessages_5fclientserver_5ffriends_2eproto,
  "steammessages_clientserver_friends.proto", &assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto, 4235,
};

void AddDescriptors_steammessages_5fclientserver_5ffriends_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5fbase_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fclientserver_5ffriends_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fclientserver_5ffriends_2eproto = []() { AddDescriptors_steammessages_5fclientserver_5ffriends_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CMsgClientFriendMsg::InitAsDefaultInstance() {
}
class CMsgClientFriendMsg::HasBitSetters {
 public:
  static void set_has_steamid(CMsgClientFriendMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_chat_entry_type(CMsgClientFriendMsg* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_message(CMsgClientFriendMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rtime32_server_timestamp(CMsgClientFriendMsg* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_echo_to_sender(CMsgClientFriendMsg* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendMsg::kSteamidFieldNumber;
const int CMsgClientFriendMsg::kChatEntryTypeFieldNumber;
const int CMsgClientFriendMsg::kMessageFieldNumber;
const int CMsgClientFriendMsg::kRtime32ServerTimestampFieldNumber;
const int CMsgClientFriendMsg::kEchoToSenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendMsg::CMsgClientFriendMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendMsg)
}
CMsgClientFriendMsg::CMsgClientFriendMsg(const CMsgClientFriendMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&echo_to_sender_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(echo_to_sender_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendMsg)
}

void CMsgClientFriendMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientFriendMsg_steammessages_5fclientserver_5ffriends_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&echo_to_sender_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(echo_to_sender_));
}

CMsgClientFriendMsg::~CMsgClientFriendMsg() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendMsg)
  SharedDtor();
}

void CMsgClientFriendMsg::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientFriendMsg& CMsgClientFriendMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientFriendMsg_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientFriendMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&echo_to_sender_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(echo_to_sender_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientFriendMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientFriendMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 chat_entry_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_chat_entry_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes message = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 rtime32_server_timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_rtime32_server_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bool echo_to_sender = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_echo_to_sender(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientFriendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_chat_entry_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_server_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_rtime32_server_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool echo_to_sender = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_echo_to_sender(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &echo_to_sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientFriendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->message(), output);
  }

  // optional fixed32 rtime32_server_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->rtime32_server_timestamp(), output);
  }

  // optional bool echo_to_sender = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->echo_to_sender(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendMsg)
}

::google::protobuf::uint8* CMsgClientFriendMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_entry_type(), target);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->rtime32_server_timestamp(), target);
  }

  // optional bool echo_to_sender = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->echo_to_sender(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendMsg)
  return target;
}

size_t CMsgClientFriendMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional fixed32 rtime32_server_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool echo_to_sender = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientFriendMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientFriendMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendMsg)
    MergeFrom(*source);
  }
}

void CMsgClientFriendMsg::MergeFrom(const CMsgClientFriendMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtime32_server_timestamp_ = from.rtime32_server_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      echo_to_sender_ = from.echo_to_sender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendMsg::CopyFrom(const CMsgClientFriendMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsg::IsInitialized() const {
  return true;
}

void CMsgClientFriendMsg::Swap(CMsgClientFriendMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendMsg::InternalSwap(CMsgClientFriendMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(chat_entry_type_, other->chat_entry_type_);
  swap(rtime32_server_timestamp_, other->rtime32_server_timestamp_);
  swap(echo_to_sender_, other->echo_to_sender_);
}

::google::protobuf::Metadata CMsgClientFriendMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientFriendMsgIncoming::InitAsDefaultInstance() {
}
class CMsgClientFriendMsgIncoming::HasBitSetters {
 public:
  static void set_has_steamid_from(CMsgClientFriendMsgIncoming* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_chat_entry_type(CMsgClientFriendMsgIncoming* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_from_limited_account(CMsgClientFriendMsgIncoming* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_message(CMsgClientFriendMsgIncoming* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rtime32_server_timestamp(CMsgClientFriendMsgIncoming* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendMsgIncoming::kSteamidFromFieldNumber;
const int CMsgClientFriendMsgIncoming::kChatEntryTypeFieldNumber;
const int CMsgClientFriendMsgIncoming::kFromLimitedAccountFieldNumber;
const int CMsgClientFriendMsgIncoming::kMessageFieldNumber;
const int CMsgClientFriendMsgIncoming::kRtime32ServerTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendMsgIncoming)
}
CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming(const CMsgClientFriendMsgIncoming& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&steamid_from_, &from.steamid_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime32_server_timestamp_) -
    reinterpret_cast<char*>(&steamid_from_)) + sizeof(rtime32_server_timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendMsgIncoming)
}

void CMsgClientFriendMsgIncoming::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientFriendMsgIncoming_steammessages_5fclientserver_5ffriends_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtime32_server_timestamp_) -
      reinterpret_cast<char*>(&steamid_from_)) + sizeof(rtime32_server_timestamp_));
}

CMsgClientFriendMsgIncoming::~CMsgClientFriendMsgIncoming() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendMsgIncoming)
  SharedDtor();
}

void CMsgClientFriendMsgIncoming::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendMsgIncoming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientFriendMsgIncoming& CMsgClientFriendMsgIncoming::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientFriendMsgIncoming_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientFriendMsgIncoming::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendMsgIncoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steamid_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime32_server_timestamp_) -
        reinterpret_cast<char*>(&steamid_from_)) + sizeof(rtime32_server_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientFriendMsgIncoming::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientFriendMsgIncoming*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_from = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid_from(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 chat_entry_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_chat_entry_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool from_limited_account = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_from_limited_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes message = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 rtime32_server_timestamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_rtime32_server_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientFriendMsgIncoming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendMsgIncoming)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid_from(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_chat_entry_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_limited_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_from_limited_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_limited_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 rtime32_server_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_rtime32_server_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendMsgIncoming)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendMsgIncoming)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientFriendMsgIncoming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendMsgIncoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_from = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_from(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional bool from_limited_account = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_limited_account(), output);
  }

  // optional bytes message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->message(), output);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_server_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendMsgIncoming)
}

::google::protobuf::uint8* CMsgClientFriendMsgIncoming::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendMsgIncoming)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_from = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_from(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_entry_type(), target);
  }

  // optional bool from_limited_account = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_limited_account(), target);
  }

  // optional bytes message = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rtime32_server_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendMsgIncoming)
  return target;
}

size_t CMsgClientFriendMsgIncoming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendMsgIncoming)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional fixed64 steamid_from = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional bool from_limited_account = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional fixed32 rtime32_server_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientFriendMsgIncoming::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendMsgIncoming)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendMsgIncoming* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientFriendMsgIncoming>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendMsgIncoming)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendMsgIncoming)
    MergeFrom(*source);
  }
}

void CMsgClientFriendMsgIncoming::MergeFrom(const CMsgClientFriendMsgIncoming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendMsgIncoming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_from_ = from.steamid_from_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_limited_account_ = from.from_limited_account_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtime32_server_timestamp_ = from.rtime32_server_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendMsgIncoming::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendMsgIncoming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendMsgIncoming::CopyFrom(const CMsgClientFriendMsgIncoming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendMsgIncoming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsgIncoming::IsInitialized() const {
  return true;
}

void CMsgClientFriendMsgIncoming::Swap(CMsgClientFriendMsgIncoming* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendMsgIncoming::InternalSwap(CMsgClientFriendMsgIncoming* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_from_, other->steamid_from_);
  swap(chat_entry_type_, other->chat_entry_type_);
  swap(from_limited_account_, other->from_limited_account_);
  swap(rtime32_server_timestamp_, other->rtime32_server_timestamp_);
}

::google::protobuf::Metadata CMsgClientFriendMsgIncoming::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAddFriend::InitAsDefaultInstance() {
}
class CMsgClientAddFriend::HasBitSetters {
 public:
  static void set_has_steamid_to_add(CMsgClientAddFriend* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_accountname_or_email_to_add(CMsgClientAddFriend* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAddFriend::kSteamidToAddFieldNumber;
const int CMsgClientAddFriend::kAccountnameOrEmailToAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAddFriend::CMsgClientAddFriend()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAddFriend)
}
CMsgClientAddFriend::CMsgClientAddFriend(const CMsgClientAddFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountname_or_email_to_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_accountname_or_email_to_add()) {
    accountname_or_email_to_add_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountname_or_email_to_add_);
  }
  steamid_to_add_ = from.steamid_to_add_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAddFriend)
}

void CMsgClientAddFriend::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAddFriend_steammessages_5fclientserver_5ffriends_2eproto.base);
  accountname_or_email_to_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_to_add_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientAddFriend::~CMsgClientAddFriend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAddFriend)
  SharedDtor();
}

void CMsgClientAddFriend::SharedDtor() {
  accountname_or_email_to_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAddFriend& CMsgClientAddFriend::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAddFriend_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAddFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    accountname_or_email_to_add_.ClearNonDefaultToEmptyNoArena();
  }
  steamid_to_add_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAddFriend::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAddFriend*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_to_add = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid_to_add(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string accountname_or_email_to_add = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientAddFriend.accountname_or_email_to_add");
        object = msg->mutable_accountname_or_email_to_add();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAddFriend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_to_add = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid_to_add(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_to_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string accountname_or_email_to_add = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname_or_email_to_add()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountname_or_email_to_add().data(), static_cast<int>(this->accountname_or_email_to_add().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAddFriend.accountname_or_email_to_add");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAddFriend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAddFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_to_add = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_to_add(), output);
  }

  // optional string accountname_or_email_to_add = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname_or_email_to_add().data(), static_cast<int>(this->accountname_or_email_to_add().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAddFriend.accountname_or_email_to_add");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accountname_or_email_to_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAddFriend)
}

::google::protobuf::uint8* CMsgClientAddFriend::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAddFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_to_add = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_to_add(), target);
  }

  // optional string accountname_or_email_to_add = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname_or_email_to_add().data(), static_cast<int>(this->accountname_or_email_to_add().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAddFriend.accountname_or_email_to_add");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountname_or_email_to_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAddFriend)
  return target;
}

size_t CMsgClientAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAddFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string accountname_or_email_to_add = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname_or_email_to_add());
    }

    // optional fixed64 steamid_to_add = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAddFriend* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAddFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAddFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAddFriend)
    MergeFrom(*source);
  }
}

void CMsgClientAddFriend::MergeFrom(const CMsgClientAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      accountname_or_email_to_add_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountname_or_email_to_add_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_to_add_ = from.steamid_to_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriend::CopyFrom(const CMsgClientAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriend::IsInitialized() const {
  return true;
}

void CMsgClientAddFriend::Swap(CMsgClientAddFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAddFriend::InternalSwap(CMsgClientAddFriend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accountname_or_email_to_add_.Swap(&other->accountname_or_email_to_add_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_to_add_, other->steamid_to_add_);
}

::google::protobuf::Metadata CMsgClientAddFriend::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAddFriendResponse::InitAsDefaultInstance() {
}
class CMsgClientAddFriendResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientAddFriendResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steam_id_added(CMsgClientAddFriendResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_persona_name_added(CMsgClientAddFriendResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAddFriendResponse::kEresultFieldNumber;
const int CMsgClientAddFriendResponse::kSteamIdAddedFieldNumber;
const int CMsgClientAddFriendResponse::kPersonaNameAddedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAddFriendResponse::CMsgClientAddFriendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAddFriendResponse)
}
CMsgClientAddFriendResponse::CMsgClientAddFriendResponse(const CMsgClientAddFriendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_added_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name_added()) {
    persona_name_added_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_added_);
  }
  ::memcpy(&steam_id_added_, &from.steam_id_added_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_added_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAddFriendResponse)
}

void CMsgClientAddFriendResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientAddFriendResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  persona_name_added_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_added_ = PROTOBUF_ULONGLONG(0);
  eresult_ = 2;
}

CMsgClientAddFriendResponse::~CMsgClientAddFriendResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAddFriendResponse)
  SharedDtor();
}

void CMsgClientAddFriendResponse::SharedDtor() {
  persona_name_added_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAddFriendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAddFriendResponse& CMsgClientAddFriendResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAddFriendResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAddFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAddFriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_added_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    steam_id_added_ = PROTOBUF_ULONGLONG(0);
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAddFriendResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAddFriendResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id_added = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id_added(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name_added = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientAddFriendResponse.persona_name_added");
        object = msg->mutable_persona_name_added();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAddFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAddFriendResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id_added = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id_added(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_added_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name_added = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name_added()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name_added().data(), static_cast<int>(this->persona_name_added().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientAddFriendResponse.persona_name_added");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAddFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAddFriendResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAddFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAddFriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steam_id_added = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_added(), output);
  }

  // optional string persona_name_added = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name_added().data(), static_cast<int>(this->persona_name_added().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAddFriendResponse.persona_name_added");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->persona_name_added(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAddFriendResponse)
}

::google::protobuf::uint8* CMsgClientAddFriendResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAddFriendResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steam_id_added = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_added(), target);
  }

  // optional string persona_name_added = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name_added().data(), static_cast<int>(this->persona_name_added().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientAddFriendResponse.persona_name_added");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name_added(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAddFriendResponse)
  return target;
}

size_t CMsgClientAddFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAddFriendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string persona_name_added = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name_added());
    }

    // optional fixed64 steam_id_added = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAddFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAddFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAddFriendResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAddFriendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAddFriendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAddFriendResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAddFriendResponse::MergeFrom(const CMsgClientAddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAddFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_added_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_added_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_added_ = from.steam_id_added_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAddFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriendResponse::CopyFrom(const CMsgClientAddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendResponse::IsInitialized() const {
  return true;
}

void CMsgClientAddFriendResponse::Swap(CMsgClientAddFriendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAddFriendResponse::InternalSwap(CMsgClientAddFriendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_added_.Swap(&other->persona_name_added_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_added_, other->steam_id_added_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientAddFriendResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRemoveFriend::InitAsDefaultInstance() {
}
class CMsgClientRemoveFriend::HasBitSetters {
 public:
  static void set_has_friendid(CMsgClientRemoveFriend* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRemoveFriend::kFriendidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRemoveFriend::CMsgClientRemoveFriend()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRemoveFriend)
}
CMsgClientRemoveFriend::CMsgClientRemoveFriend(const CMsgClientRemoveFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friendid_ = from.friendid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRemoveFriend)
}

void CMsgClientRemoveFriend::SharedCtor() {
  friendid_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientRemoveFriend::~CMsgClientRemoveFriend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRemoveFriend)
  SharedDtor();
}

void CMsgClientRemoveFriend::SharedDtor() {
}

void CMsgClientRemoveFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRemoveFriend& CMsgClientRemoveFriend::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRemoveFriend_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRemoveFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRemoveFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friendid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRemoveFriend::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRemoveFriend*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_friendid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRemoveFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRemoveFriend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_friendid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRemoveFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRemoveFriend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRemoveFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRemoveFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRemoveFriend)
}

::google::protobuf::uint8* CMsgClientRemoveFriend::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRemoveFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friendid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRemoveFriend)
  return target;
}

size_t CMsgClientRemoveFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRemoveFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 friendid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRemoveFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRemoveFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRemoveFriend* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRemoveFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRemoveFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRemoveFriend)
    MergeFrom(*source);
  }
}

void CMsgClientRemoveFriend::MergeFrom(const CMsgClientRemoveFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRemoveFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_friendid()) {
    set_friendid(from.friendid());
  }
}

void CMsgClientRemoveFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRemoveFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRemoveFriend::CopyFrom(const CMsgClientRemoveFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRemoveFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriend::IsInitialized() const {
  return true;
}

void CMsgClientRemoveFriend::Swap(CMsgClientRemoveFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRemoveFriend::InternalSwap(CMsgClientRemoveFriend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(friendid_, other->friendid_);
}

::google::protobuf::Metadata CMsgClientRemoveFriend::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientHideFriend::InitAsDefaultInstance() {
}
class CMsgClientHideFriend::HasBitSetters {
 public:
  static void set_has_friendid(CMsgClientHideFriend* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hide(CMsgClientHideFriend* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientHideFriend::kFriendidFieldNumber;
const int CMsgClientHideFriend::kHideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientHideFriend::CMsgClientHideFriend()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientHideFriend)
}
CMsgClientHideFriend::CMsgClientHideFriend(const CMsgClientHideFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&friendid_, &from.friendid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_) -
    reinterpret_cast<char*>(&friendid_)) + sizeof(hide_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientHideFriend)
}

void CMsgClientHideFriend::SharedCtor() {
  ::memset(&friendid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_) -
      reinterpret_cast<char*>(&friendid_)) + sizeof(hide_));
}

CMsgClientHideFriend::~CMsgClientHideFriend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientHideFriend)
  SharedDtor();
}

void CMsgClientHideFriend::SharedDtor() {
}

void CMsgClientHideFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientHideFriend& CMsgClientHideFriend::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientHideFriend_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientHideFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientHideFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&friendid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hide_) -
        reinterpret_cast<char*>(&friendid_)) + sizeof(hide_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientHideFriend::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientHideFriend*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_friendid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool hide = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hide(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientHideFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientHideFriend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_friendid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hide(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientHideFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientHideFriend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientHideFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientHideFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  // optional bool hide = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientHideFriend)
}

::google::protobuf::uint8* CMsgClientHideFriend::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientHideFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friendid(), target);
  }

  // optional bool hide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientHideFriend)
  return target;
}

size_t CMsgClientHideFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientHideFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 friendid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool hide = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientHideFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientHideFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientHideFriend* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientHideFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientHideFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientHideFriend)
    MergeFrom(*source);
  }
}

void CMsgClientHideFriend::MergeFrom(const CMsgClientHideFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientHideFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      friendid_ = from.friendid_;
    }
    if (cached_has_bits & 0x00000002u) {
      hide_ = from.hide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientHideFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientHideFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHideFriend::CopyFrom(const CMsgClientHideFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientHideFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHideFriend::IsInitialized() const {
  return true;
}

void CMsgClientHideFriend::Swap(CMsgClientHideFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientHideFriend::InternalSwap(CMsgClientHideFriend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(friendid_, other->friendid_);
  swap(hide_, other->hide_);
}

::google::protobuf::Metadata CMsgClientHideFriend::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientFriendsList_Friend::InitAsDefaultInstance() {
}
class CMsgClientFriendsList_Friend::HasBitSetters {
 public:
  static void set_has_ulfriendid(CMsgClientFriendsList_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_efriendrelationship(CMsgClientFriendsList_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsList_Friend::kUlfriendidFieldNumber;
const int CMsgClientFriendsList_Friend::kEfriendrelationshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsList.Friend)
}
CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend(const CMsgClientFriendsList_Friend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ulfriendid_, &from.ulfriendid_,
    static_cast<size_t>(reinterpret_cast<char*>(&efriendrelationship_) -
    reinterpret_cast<char*>(&ulfriendid_)) + sizeof(efriendrelationship_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsList.Friend)
}

void CMsgClientFriendsList_Friend::SharedCtor() {
  ::memset(&ulfriendid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&efriendrelationship_) -
      reinterpret_cast<char*>(&ulfriendid_)) + sizeof(efriendrelationship_));
}

CMsgClientFriendsList_Friend::~CMsgClientFriendsList_Friend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsList.Friend)
  SharedDtor();
}

void CMsgClientFriendsList_Friend::SharedDtor() {
}

void CMsgClientFriendsList_Friend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientFriendsList_Friend& CMsgClientFriendsList_Friend::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientFriendsList_Friend_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientFriendsList_Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsList.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ulfriendid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&efriendrelationship_) -
        reinterpret_cast<char*>(&ulfriendid_)) + sizeof(efriendrelationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientFriendsList_Friend::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientFriendsList_Friend*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 ulfriendid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_ulfriendid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 efriendrelationship = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_efriendrelationship(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientFriendsList_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsList.Friend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ulfriendid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_ulfriendid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ulfriendid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 efriendrelationship = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_efriendrelationship(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &efriendrelationship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsList.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsList.Friend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientFriendsList_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsList.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulfriendid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ulfriendid(), output);
  }

  // optional uint32 efriendrelationship = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->efriendrelationship(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsList.Friend)
}

::google::protobuf::uint8* CMsgClientFriendsList_Friend::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsList.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulfriendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->ulfriendid(), target);
  }

  // optional uint32 efriendrelationship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->efriendrelationship(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsList.Friend)
  return target;
}

size_t CMsgClientFriendsList_Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsList.Friend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 ulfriendid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 efriendrelationship = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->efriendrelationship());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientFriendsList_Friend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsList.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsList_Friend* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientFriendsList_Friend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsList.Friend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsList.Friend)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsList_Friend::MergeFrom(const CMsgClientFriendsList_Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsList.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ulfriendid_ = from.ulfriendid_;
    }
    if (cached_has_bits & 0x00000002u) {
      efriendrelationship_ = from.efriendrelationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsList_Friend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsList.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsList_Friend::CopyFrom(const CMsgClientFriendsList_Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsList.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList_Friend::IsInitialized() const {
  return true;
}

void CMsgClientFriendsList_Friend::Swap(CMsgClientFriendsList_Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsList_Friend::InternalSwap(CMsgClientFriendsList_Friend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ulfriendid_, other->ulfriendid_);
  swap(efriendrelationship_, other->efriendrelationship_);
}

::google::protobuf::Metadata CMsgClientFriendsList_Friend::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientFriendsList::InitAsDefaultInstance() {
}
class CMsgClientFriendsList::HasBitSetters {
 public:
  static void set_has_bincremental(CMsgClientFriendsList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_max_friend_count(CMsgClientFriendsList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_active_friend_count(CMsgClientFriendsList* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_friends_limit_hit(CMsgClientFriendsList* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsList::kBincrementalFieldNumber;
const int CMsgClientFriendsList::kFriendsFieldNumber;
const int CMsgClientFriendsList::kMaxFriendCountFieldNumber;
const int CMsgClientFriendsList::kActiveFriendCountFieldNumber;
const int CMsgClientFriendsList::kFriendsLimitHitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsList::CMsgClientFriendsList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsList)
}
CMsgClientFriendsList::CMsgClientFriendsList(const CMsgClientFriendsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_friend_count_, &from.max_friend_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_friend_count_) -
    reinterpret_cast<char*>(&max_friend_count_)) + sizeof(active_friend_count_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsList)
}

void CMsgClientFriendsList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientFriendsList_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::memset(&max_friend_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_friend_count_) -
      reinterpret_cast<char*>(&max_friend_count_)) + sizeof(active_friend_count_));
}

CMsgClientFriendsList::~CMsgClientFriendsList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsList)
  SharedDtor();
}

void CMsgClientFriendsList::SharedDtor() {
}

void CMsgClientFriendsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientFriendsList& CMsgClientFriendsList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientFriendsList_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientFriendsList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&max_friend_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_friend_count_) -
        reinterpret_cast<char*>(&max_friend_count_)) + sizeof(active_friend_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientFriendsList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientFriendsList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool bincremental = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bincremental(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientFriendsList_Friend::_InternalParse;
          object = msg->add_friends();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 max_friend_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_max_friend_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 active_friend_count = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_active_friend_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool friends_limit_hit = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_friends_limit_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bincremental = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bincremental(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bincremental_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_friend_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_max_friend_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_friend_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_friend_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_active_friend_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_friend_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool friends_limit_hit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_friends_limit_hit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friends_limit_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bincremental = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bincremental(), output);
  }

  // repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->friends(static_cast<int>(i)),
      output);
  }

  // optional uint32 max_friend_count = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_friend_count(), output);
  }

  // optional uint32 active_friend_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->active_friend_count(), output);
  }

  // optional bool friends_limit_hit = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->friends_limit_hit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsList)
}

::google::protobuf::uint8* CMsgClientFriendsList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bincremental = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bincremental(), target);
  }

  // repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->friends(static_cast<int>(i)), target);
  }

  // optional uint32 max_friend_count = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_friend_count(), target);
  }

  // optional uint32 active_friend_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->active_friend_count(), target);
  }

  // optional bool friends_limit_hit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->friends_limit_hit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsList)
  return target;
}

size_t CMsgClientFriendsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientFriendsList.Friend friends = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->friends_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->friends(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 max_friend_count = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_friend_count());
    }

    // optional bool bincremental = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool friends_limit_hit = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 active_friend_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_friend_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientFriendsList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsList)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsList::MergeFrom(const CMsgClientFriendsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      max_friend_count_ = from.max_friend_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      bincremental_ = from.bincremental_;
    }
    if (cached_has_bits & 0x00000004u) {
      friends_limit_hit_ = from.friends_limit_hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_friend_count_ = from.active_friend_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsList::CopyFrom(const CMsgClientFriendsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList::IsInitialized() const {
  return true;
}

void CMsgClientFriendsList::Swap(CMsgClientFriendsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsList::InternalSwap(CMsgClientFriendsList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&friends_)->InternalSwap(CastToBase(&other->friends_));
  swap(max_friend_count_, other->max_friend_count_);
  swap(bincremental_, other->bincremental_);
  swap(friends_limit_hit_, other->friends_limit_hit_);
  swap(active_friend_count_, other->active_friend_count_);
}

::google::protobuf::Metadata CMsgClientFriendsList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientFriendsGroupsList_FriendGroup::InitAsDefaultInstance() {
}
class CMsgClientFriendsGroupsList_FriendGroup::HasBitSetters {
 public:
  static void set_has_ngroupid(CMsgClientFriendsGroupsList_FriendGroup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_strgroupname(CMsgClientFriendsGroupsList_FriendGroup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsGroupsList_FriendGroup::kNGroupIDFieldNumber;
const int CMsgClientFriendsGroupsList_FriendGroup::kStrGroupNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
}
CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup(const CMsgClientFriendsGroupsList_FriendGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strgroupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strgroupname()) {
    strgroupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strgroupname_);
  }
  ngroupid_ = from.ngroupid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
}

void CMsgClientFriendsGroupsList_FriendGroup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientFriendsGroupsList_FriendGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  strgroupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ngroupid_ = 0;
}

CMsgClientFriendsGroupsList_FriendGroup::~CMsgClientFriendsGroupsList_FriendGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  SharedDtor();
}

void CMsgClientFriendsGroupsList_FriendGroup::SharedDtor() {
  strgroupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendsGroupsList_FriendGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientFriendsGroupsList_FriendGroup& CMsgClientFriendsGroupsList_FriendGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientFriendsGroupsList_FriendGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientFriendsGroupsList_FriendGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strgroupname_.ClearNonDefaultToEmptyNoArena();
  }
  ngroupid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientFriendsGroupsList_FriendGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientFriendsGroupsList_FriendGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 nGroupID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ngroupid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string strGroupName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName");
        object = msg->mutable_strgroupname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientFriendsGroupsList_FriendGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nGroupID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ngroupid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string strGroupName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgroupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strgroupname().data(), static_cast<int>(this->strgroupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientFriendsGroupsList_FriendGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nGroupID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ngroupid(), output);
  }

  // optional string strGroupName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strgroupname().data(), static_cast<int>(this->strgroupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strgroupname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
}

::google::protobuf::uint8* CMsgClientFriendsGroupsList_FriendGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nGroupID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ngroupid(), target);
  }

  // optional string strGroupName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strgroupname().data(), static_cast<int>(this->strgroupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendsGroupsList.FriendGroup.strGroupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strgroupname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  return target;
}

size_t CMsgClientFriendsGroupsList_FriendGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strGroupName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strgroupname());
    }

    // optional int32 nGroupID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientFriendsGroupsList_FriendGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsGroupsList_FriendGroup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientFriendsGroupsList_FriendGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsGroupsList_FriendGroup::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      strgroupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strgroupname_);
    }
    if (cached_has_bits & 0x00000002u) {
      ngroupid_ = from.ngroupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsGroupsList_FriendGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroup::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroup::IsInitialized() const {
  return true;
}

void CMsgClientFriendsGroupsList_FriendGroup::Swap(CMsgClientFriendsGroupsList_FriendGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsGroupsList_FriendGroup::InternalSwap(CMsgClientFriendsGroupsList_FriendGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strgroupname_.Swap(&other->strgroupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ngroupid_, other->ngroupid_);
}

::google::protobuf::Metadata CMsgClientFriendsGroupsList_FriendGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientFriendsGroupsList_FriendGroupsMembership::InitAsDefaultInstance() {
}
class CMsgClientFriendsGroupsList_FriendGroupsMembership::HasBitSetters {
 public:
  static void set_has_ulsteamid(CMsgClientFriendsGroupsList_FriendGroupsMembership* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ngroupid(CMsgClientFriendsGroupsList_FriendGroupsMembership* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsGroupsList_FriendGroupsMembership::kUlSteamIDFieldNumber;
const int CMsgClientFriendsGroupsList_FriendGroupsMembership::kNGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
}
CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ulsteamid_, &from.ulsteamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ngroupid_) -
    reinterpret_cast<char*>(&ulsteamid_)) + sizeof(ngroupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedCtor() {
  ::memset(&ulsteamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ngroupid_) -
      reinterpret_cast<char*>(&ulsteamid_)) + sizeof(ngroupid_));
}

CMsgClientFriendsGroupsList_FriendGroupsMembership::~CMsgClientFriendsGroupsList_FriendGroupsMembership() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  SharedDtor();
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedDtor() {
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientFriendsGroupsList_FriendGroupsMembership& CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientFriendsGroupsList_FriendGroupsMembership_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientFriendsGroupsList_FriendGroupsMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ulsteamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ngroupid_) -
        reinterpret_cast<char*>(&ulsteamid_)) + sizeof(ngroupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientFriendsGroupsList_FriendGroupsMembership::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientFriendsGroupsList_FriendGroupsMembership*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 ulSteamID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_ulsteamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 nGroupID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ngroupid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientFriendsGroupsList_FriendGroupsMembership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ulSteamID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_ulsteamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ulsteamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nGroupID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ngroupid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulSteamID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ulsteamid(), output);
  }

  // optional int32 nGroupID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ngroupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
}

::google::protobuf::uint8* CMsgClientFriendsGroupsList_FriendGroupsMembership::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulSteamID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->ulsteamid(), target);
  }

  // optional int32 nGroupID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ngroupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  return target;
}

size_t CMsgClientFriendsGroupsList_FriendGroupsMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 ulSteamID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 nGroupID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsGroupsList_FriendGroupsMembership* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientFriendsGroupsList_FriendGroupsMembership>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ulsteamid_ = from.ulsteamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ngroupid_ = from.ngroupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroupsMembership::IsInitialized() const {
  return true;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::Swap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::InternalSwap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ulsteamid_, other->ulsteamid_);
  swap(ngroupid_, other->ngroupid_);
}

::google::protobuf::Metadata CMsgClientFriendsGroupsList_FriendGroupsMembership::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientFriendsGroupsList::InitAsDefaultInstance() {
}
class CMsgClientFriendsGroupsList::HasBitSetters {
 public:
  static void set_has_bremoval(CMsgClientFriendsGroupsList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_bincremental(CMsgClientFriendsGroupsList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendsGroupsList::kBremovalFieldNumber;
const int CMsgClientFriendsGroupsList::kBincrementalFieldNumber;
const int CMsgClientFriendsGroupsList::kFriendGroupsFieldNumber;
const int CMsgClientFriendsGroupsList::kMembershipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendsGroupsList)
}
CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList(const CMsgClientFriendsGroupsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      friendgroups_(from.friendgroups_),
      memberships_(from.memberships_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bremoval_, &from.bremoval_,
    static_cast<size_t>(reinterpret_cast<char*>(&bincremental_) -
    reinterpret_cast<char*>(&bremoval_)) + sizeof(bincremental_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendsGroupsList)
}

void CMsgClientFriendsGroupsList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientFriendsGroupsList_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::memset(&bremoval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bincremental_) -
      reinterpret_cast<char*>(&bremoval_)) + sizeof(bincremental_));
}

CMsgClientFriendsGroupsList::~CMsgClientFriendsGroupsList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendsGroupsList)
  SharedDtor();
}

void CMsgClientFriendsGroupsList::SharedDtor() {
}

void CMsgClientFriendsGroupsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientFriendsGroupsList& CMsgClientFriendsGroupsList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientFriendsGroupsList_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientFriendsGroupsList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendsGroupsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friendgroups_.Clear();
  memberships_.Clear();
  ::memset(&bremoval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bincremental_) -
      reinterpret_cast<char*>(&bremoval_)) + sizeof(bincremental_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientFriendsGroupsList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientFriendsGroupsList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool bremoval = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bremoval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bincremental = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bincremental(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientFriendsGroupsList_FriendGroup::_InternalParse;
          object = msg->add_friendgroups();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership::_InternalParse;
          object = msg->add_memberships();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientFriendsGroupsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendsGroupsList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bremoval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bremoval(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bremoval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bincremental = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bincremental(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bincremental_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_friendgroups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_memberships()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendsGroupsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendsGroupsList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientFriendsGroupsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendsGroupsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bremoval = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bremoval(), output);
  }

  // optional bool bincremental = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bincremental(), output);
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friendgroups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->friendgroups(static_cast<int>(i)),
      output);
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memberships_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->memberships(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendsGroupsList)
}

::google::protobuf::uint8* CMsgClientFriendsGroupsList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendsGroupsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bremoval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bremoval(), target);
  }

  // optional bool bincremental = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bincremental(), target);
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friendgroups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->friendgroups(static_cast<int>(i)), target);
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memberships_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->memberships(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendsGroupsList)
  return target;
}

size_t CMsgClientFriendsGroupsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendsGroupsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->friendgroups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->friendgroups(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->memberships_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->memberships(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bremoval = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool bincremental = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientFriendsGroupsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendsGroupsList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendsGroupsList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientFriendsGroupsList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendsGroupsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendsGroupsList)
    MergeFrom(*source);
  }
}

void CMsgClientFriendsGroupsList::MergeFrom(const CMsgClientFriendsGroupsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendsGroupsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friendgroups_.MergeFrom(from.friendgroups_);
  memberships_.MergeFrom(from.memberships_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bremoval_ = from.bremoval_;
    }
    if (cached_has_bits & 0x00000002u) {
      bincremental_ = from.bincremental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientFriendsGroupsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendsGroupsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList::CopyFrom(const CMsgClientFriendsGroupsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendsGroupsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList::IsInitialized() const {
  return true;
}

void CMsgClientFriendsGroupsList::Swap(CMsgClientFriendsGroupsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendsGroupsList::InternalSwap(CMsgClientFriendsGroupsList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&friendgroups_)->InternalSwap(CastToBase(&other->friendgroups_));
  CastToBase(&memberships_)->InternalSwap(CastToBase(&other->memberships_));
  swap(bremoval_, other->bremoval_);
  swap(bincremental_, other->bincremental_);
}

::google::protobuf::Metadata CMsgClientFriendsGroupsList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPlayerNicknameList_PlayerNickname::InitAsDefaultInstance() {
}
class CMsgClientPlayerNicknameList_PlayerNickname::HasBitSetters {
 public:
  static void set_has_steamid(CMsgClientPlayerNicknameList_PlayerNickname* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_nickname(CMsgClientPlayerNicknameList_PlayerNickname* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPlayerNicknameList_PlayerNickname::kSteamidFieldNumber;
const int CMsgClientPlayerNicknameList_PlayerNickname::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
}
CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname(const CMsgClientPlayerNicknameList_PlayerNickname& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
}

void CMsgClientPlayerNicknameList_PlayerNickname::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPlayerNicknameList_PlayerNickname_steammessages_5fclientserver_5ffriends_2eproto.base);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientPlayerNicknameList_PlayerNickname::~CMsgClientPlayerNicknameList_PlayerNickname() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  SharedDtor();
}

void CMsgClientPlayerNicknameList_PlayerNickname::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPlayerNicknameList_PlayerNickname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPlayerNicknameList_PlayerNickname& CMsgClientPlayerNicknameList_PlayerNickname::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPlayerNicknameList_PlayerNickname_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPlayerNicknameList_PlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmptyNoArena();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPlayerNicknameList_PlayerNickname::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPlayerNicknameList_PlayerNickname*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string nickname = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname");
        object = msg->mutable_nickname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPlayerNicknameList_PlayerNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPlayerNicknameList_PlayerNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
}

::google::protobuf::uint8* CMsgClientPlayerNicknameList_PlayerNickname::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPlayerNicknameList.PlayerNickname.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  return target;
}

size_t CMsgClientPlayerNicknameList_PlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPlayerNicknameList_PlayerNickname::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPlayerNicknameList_PlayerNickname* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPlayerNicknameList_PlayerNickname>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
    MergeFrom(*source);
  }
}

void CMsgClientPlayerNicknameList_PlayerNickname::MergeFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPlayerNicknameList_PlayerNickname::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList_PlayerNickname::CopyFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPlayerNicknameList.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList_PlayerNickname::IsInitialized() const {
  return true;
}

void CMsgClientPlayerNicknameList_PlayerNickname::Swap(CMsgClientPlayerNicknameList_PlayerNickname* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPlayerNicknameList_PlayerNickname::InternalSwap(CMsgClientPlayerNicknameList_PlayerNickname* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CMsgClientPlayerNicknameList_PlayerNickname::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPlayerNicknameList::InitAsDefaultInstance() {
}
class CMsgClientPlayerNicknameList::HasBitSetters {
 public:
  static void set_has_removal(CMsgClientPlayerNicknameList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_incremental(CMsgClientPlayerNicknameList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPlayerNicknameList::kRemovalFieldNumber;
const int CMsgClientPlayerNicknameList::kIncrementalFieldNumber;
const int CMsgClientPlayerNicknameList::kNicknamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPlayerNicknameList)
}
CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList(const CMsgClientPlayerNicknameList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      nicknames_(from.nicknames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&removal_, &from.removal_,
    static_cast<size_t>(reinterpret_cast<char*>(&incremental_) -
    reinterpret_cast<char*>(&removal_)) + sizeof(incremental_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPlayerNicknameList)
}

void CMsgClientPlayerNicknameList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPlayerNicknameList_steammessages_5fclientserver_5ffriends_2eproto.base);
  ::memset(&removal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incremental_) -
      reinterpret_cast<char*>(&removal_)) + sizeof(incremental_));
}

CMsgClientPlayerNicknameList::~CMsgClientPlayerNicknameList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPlayerNicknameList)
  SharedDtor();
}

void CMsgClientPlayerNicknameList::SharedDtor() {
}

void CMsgClientPlayerNicknameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPlayerNicknameList& CMsgClientPlayerNicknameList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPlayerNicknameList_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPlayerNicknameList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPlayerNicknameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nicknames_.Clear();
  ::memset(&removal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incremental_) -
      reinterpret_cast<char*>(&removal_)) + sizeof(incremental_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPlayerNicknameList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPlayerNicknameList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool removal = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_removal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool incremental = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_incremental(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname::_InternalParse;
          object = msg->add_nicknames();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPlayerNicknameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPlayerNicknameList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool removal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_removal(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incremental = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_incremental(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nicknames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPlayerNicknameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPlayerNicknameList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPlayerNicknameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPlayerNicknameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool removal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->removal(), output);
  }

  // optional bool incremental = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->incremental(), output);
  }

  // repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nicknames_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->nicknames(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPlayerNicknameList)
}

::google::protobuf::uint8* CMsgClientPlayerNicknameList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPlayerNicknameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool removal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->removal(), target);
  }

  // optional bool incremental = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->incremental(), target);
  }

  // repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nicknames_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->nicknames(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPlayerNicknameList)
  return target;
}

size_t CMsgClientPlayerNicknameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPlayerNicknameList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->nicknames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nicknames(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool removal = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool incremental = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPlayerNicknameList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPlayerNicknameList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPlayerNicknameList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPlayerNicknameList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPlayerNicknameList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPlayerNicknameList)
    MergeFrom(*source);
  }
}

void CMsgClientPlayerNicknameList::MergeFrom(const CMsgClientPlayerNicknameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPlayerNicknameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nicknames_.MergeFrom(from.nicknames_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      removal_ = from.removal_;
    }
    if (cached_has_bits & 0x00000002u) {
      incremental_ = from.incremental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPlayerNicknameList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPlayerNicknameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList::CopyFrom(const CMsgClientPlayerNicknameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPlayerNicknameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList::IsInitialized() const {
  return true;
}

void CMsgClientPlayerNicknameList::Swap(CMsgClientPlayerNicknameList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPlayerNicknameList::InternalSwap(CMsgClientPlayerNicknameList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&nicknames_)->InternalSwap(CastToBase(&other->nicknames_));
  swap(removal_, other->removal_);
  swap(incremental_, other->incremental_);
}

::google::protobuf::Metadata CMsgClientPlayerNicknameList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSetPlayerNickname::InitAsDefaultInstance() {
}
class CMsgClientSetPlayerNickname::HasBitSetters {
 public:
  static void set_has_steamid(CMsgClientSetPlayerNickname* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_nickname(CMsgClientSetPlayerNickname* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSetPlayerNickname::kSteamidFieldNumber;
const int CMsgClientSetPlayerNickname::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSetPlayerNickname)
}
CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname(const CMsgClientSetPlayerNickname& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSetPlayerNickname)
}

void CMsgClientSetPlayerNickname::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientSetPlayerNickname_steammessages_5fclientserver_5ffriends_2eproto.base);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientSetPlayerNickname::~CMsgClientSetPlayerNickname() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSetPlayerNickname)
  SharedDtor();
}

void CMsgClientSetPlayerNickname::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientSetPlayerNickname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSetPlayerNickname& CMsgClientSetPlayerNickname::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSetPlayerNickname_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSetPlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSetPlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmptyNoArena();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSetPlayerNickname::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSetPlayerNickname*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string nickname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientSetPlayerNickname.nickname");
        object = msg->mutable_nickname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSetPlayerNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSetPlayerNickname)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientSetPlayerNickname.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSetPlayerNickname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSetPlayerNickname)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSetPlayerNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSetPlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientSetPlayerNickname.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSetPlayerNickname)
}

::google::protobuf::uint8* CMsgClientSetPlayerNickname::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSetPlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientSetPlayerNickname.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSetPlayerNickname)
  return target;
}

size_t CMsgClientSetPlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSetPlayerNickname)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSetPlayerNickname::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSetPlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSetPlayerNickname* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSetPlayerNickname>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSetPlayerNickname)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSetPlayerNickname)
    MergeFrom(*source);
  }
}

void CMsgClientSetPlayerNickname::MergeFrom(const CMsgClientSetPlayerNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSetPlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSetPlayerNickname::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSetPlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetPlayerNickname::CopyFrom(const CMsgClientSetPlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSetPlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNickname::IsInitialized() const {
  return true;
}

void CMsgClientSetPlayerNickname::Swap(CMsgClientSetPlayerNickname* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSetPlayerNickname::InternalSwap(CMsgClientSetPlayerNickname* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CMsgClientSetPlayerNickname::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientSetPlayerNicknameResponse::InitAsDefaultInstance() {
}
class CMsgClientSetPlayerNicknameResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientSetPlayerNicknameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientSetPlayerNicknameResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientSetPlayerNicknameResponse)
}
CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse(const CMsgClientSetPlayerNicknameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientSetPlayerNicknameResponse)
}

void CMsgClientSetPlayerNicknameResponse::SharedCtor() {
  eresult_ = 0u;
}

CMsgClientSetPlayerNicknameResponse::~CMsgClientSetPlayerNicknameResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientSetPlayerNicknameResponse)
  SharedDtor();
}

void CMsgClientSetPlayerNicknameResponse::SharedDtor() {
}

void CMsgClientSetPlayerNicknameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientSetPlayerNicknameResponse& CMsgClientSetPlayerNicknameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientSetPlayerNicknameResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientSetPlayerNicknameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientSetPlayerNicknameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientSetPlayerNicknameResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientSetPlayerNicknameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientSetPlayerNicknameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientSetPlayerNicknameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientSetPlayerNicknameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientSetPlayerNicknameResponse)
}

::google::protobuf::uint8* CMsgClientSetPlayerNicknameResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientSetPlayerNicknameResponse)
  return target;
}

size_t CMsgClientSetPlayerNicknameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSetPlayerNicknameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSetPlayerNicknameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientSetPlayerNicknameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientSetPlayerNicknameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientSetPlayerNicknameResponse)
    MergeFrom(*source);
  }
}

void CMsgClientSetPlayerNicknameResponse::MergeFrom(const CMsgClientSetPlayerNicknameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientSetPlayerNicknameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetPlayerNicknameResponse::CopyFrom(const CMsgClientSetPlayerNicknameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientSetPlayerNicknameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNicknameResponse::IsInitialized() const {
  return true;
}

void CMsgClientSetPlayerNicknameResponse::Swap(CMsgClientSetPlayerNicknameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientSetPlayerNicknameResponse::InternalSwap(CMsgClientSetPlayerNicknameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientSetPlayerNicknameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRequestFriendData::InitAsDefaultInstance() {
}
class CMsgClientRequestFriendData::HasBitSetters {
 public:
  static void set_has_persona_state_requested(CMsgClientRequestFriendData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRequestFriendData::kPersonaStateRequestedFieldNumber;
const int CMsgClientRequestFriendData::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRequestFriendData::CMsgClientRequestFriendData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRequestFriendData)
}
CMsgClientRequestFriendData::CMsgClientRequestFriendData(const CMsgClientRequestFriendData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_state_requested_ = from.persona_state_requested_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRequestFriendData)
}

void CMsgClientRequestFriendData::SharedCtor() {
  persona_state_requested_ = 0u;
}

CMsgClientRequestFriendData::~CMsgClientRequestFriendData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRequestFriendData)
  SharedDtor();
}

void CMsgClientRequestFriendData::SharedDtor() {
}

void CMsgClientRequestFriendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRequestFriendData& CMsgClientRequestFriendData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRequestFriendData_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRequestFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRequestFriendData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  persona_state_requested_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRequestFriendData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRequestFriendData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 persona_state_requested = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_persona_state_requested(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated fixed64 friends = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_friends(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_friends();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRequestFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRequestFriendData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 persona_state_requested = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_persona_state_requested(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 friends = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_friends())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_friends())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRequestFriendData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRequestFriendData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRequestFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRequestFriendData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state_requested = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->persona_state_requested(), output);
  }

  // repeated fixed64 friends = 2;
  for (int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->friends(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRequestFriendData)
}

::google::protobuf::uint8* CMsgClientRequestFriendData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRequestFriendData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state_requested = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->persona_state_requested(), target);
  }

  // repeated fixed64 friends = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->friends_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRequestFriendData)
  return target;
}

size_t CMsgClientRequestFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRequestFriendData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 friends = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->friends_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->friends_size());
    total_size += data_size;
  }

  // optional uint32 persona_state_requested = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->persona_state_requested());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestFriendData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRequestFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestFriendData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRequestFriendData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRequestFriendData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRequestFriendData)
    MergeFrom(*source);
  }
}

void CMsgClientRequestFriendData::MergeFrom(const CMsgClientRequestFriendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRequestFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.has_persona_state_requested()) {
    set_persona_state_requested(from.persona_state_requested());
  }
}

void CMsgClientRequestFriendData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRequestFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestFriendData::CopyFrom(const CMsgClientRequestFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRequestFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFriendData::IsInitialized() const {
  return true;
}

void CMsgClientRequestFriendData::Swap(CMsgClientRequestFriendData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRequestFriendData::InternalSwap(CMsgClientRequestFriendData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friends_.InternalSwap(&other->friends_);
  swap(persona_state_requested_, other->persona_state_requested_);
}

::google::protobuf::Metadata CMsgClientRequestFriendData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientChangeStatus::InitAsDefaultInstance() {
}
class CMsgClientChangeStatus::HasBitSetters {
 public:
  static void set_has_persona_state(CMsgClientChangeStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_name(CMsgClientChangeStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_auto_generated_name(CMsgClientChangeStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_high_priority(CMsgClientChangeStatus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_persona_set_by_user(CMsgClientChangeStatus* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_persona_state_flags(CMsgClientChangeStatus* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_need_persona_response(CMsgClientChangeStatus* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientChangeStatus::kPersonaStateFieldNumber;
const int CMsgClientChangeStatus::kPlayerNameFieldNumber;
const int CMsgClientChangeStatus::kIsAutoGeneratedNameFieldNumber;
const int CMsgClientChangeStatus::kHighPriorityFieldNumber;
const int CMsgClientChangeStatus::kPersonaSetByUserFieldNumber;
const int CMsgClientChangeStatus::kPersonaStateFlagsFieldNumber;
const int CMsgClientChangeStatus::kNeedPersonaResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientChangeStatus::CMsgClientChangeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientChangeStatus)
}
CMsgClientChangeStatus::CMsgClientChangeStatus(const CMsgClientChangeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  ::memcpy(&persona_state_, &from.persona_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&persona_state_flags_) -
    reinterpret_cast<char*>(&persona_state_)) + sizeof(persona_state_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientChangeStatus)
}

void CMsgClientChangeStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientChangeStatus_steammessages_5fclientserver_5ffriends_2eproto.base);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&persona_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persona_state_flags_) -
      reinterpret_cast<char*>(&persona_state_)) + sizeof(persona_state_flags_));
}

CMsgClientChangeStatus::~CMsgClientChangeStatus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientChangeStatus)
  SharedDtor();
}

void CMsgClientChangeStatus::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientChangeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientChangeStatus& CMsgClientChangeStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientChangeStatus_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientChangeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientChangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&persona_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&persona_state_flags_) -
        reinterpret_cast<char*>(&persona_state_)) + sizeof(persona_state_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientChangeStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientChangeStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 persona_state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_persona_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientChangeStatus.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_auto_generated_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_auto_generated_name(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool high_priority = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_high_priority(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool persona_set_by_user = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_persona_set_by_user(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 persona_state_flags = 6 [default = 0];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_persona_state_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool need_persona_response = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_need_persona_response(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientChangeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientChangeStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 persona_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_persona_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientChangeStatus.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_auto_generated_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_auto_generated_name(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_generated_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_high_priority(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persona_set_by_user = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_persona_set_by_user(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_set_by_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 persona_state_flags = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_persona_state_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_persona_response = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_need_persona_response(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_persona_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientChangeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientChangeStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientChangeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientChangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->persona_state(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientChangeStatus.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional bool is_auto_generated_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_auto_generated_name(), output);
  }

  // optional bool high_priority = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->high_priority(), output);
  }

  // optional bool persona_set_by_user = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->persona_set_by_user(), output);
  }

  // optional uint32 persona_state_flags = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->persona_state_flags(), output);
  }

  // optional bool need_persona_response = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->need_persona_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientChangeStatus)
}

::google::protobuf::uint8* CMsgClientChangeStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientChangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->persona_state(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientChangeStatus.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional bool is_auto_generated_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_auto_generated_name(), target);
  }

  // optional bool high_priority = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->high_priority(), target);
  }

  // optional bool persona_set_by_user = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->persona_set_by_user(), target);
  }

  // optional uint32 persona_state_flags = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->persona_state_flags(), target);
  }

  // optional bool need_persona_response = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->need_persona_response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientChangeStatus)
  return target;
}

size_t CMsgClientChangeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientChangeStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 persona_state = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state());
    }

    // optional bool is_auto_generated_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool high_priority = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool persona_set_by_user = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool need_persona_response = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 persona_state_flags = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientChangeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientChangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientChangeStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientChangeStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientChangeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientChangeStatus)
    MergeFrom(*source);
  }
}

void CMsgClientChangeStatus::MergeFrom(const CMsgClientChangeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientChangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      persona_state_ = from.persona_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_auto_generated_name_ = from.is_auto_generated_name_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_priority_ = from.high_priority_;
    }
    if (cached_has_bits & 0x00000010u) {
      persona_set_by_user_ = from.persona_set_by_user_;
    }
    if (cached_has_bits & 0x00000020u) {
      need_persona_response_ = from.need_persona_response_;
    }
    if (cached_has_bits & 0x00000040u) {
      persona_state_flags_ = from.persona_state_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientChangeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientChangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChangeStatus::CopyFrom(const CMsgClientChangeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientChangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChangeStatus::IsInitialized() const {
  return true;
}

void CMsgClientChangeStatus::Swap(CMsgClientChangeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientChangeStatus::InternalSwap(CMsgClientChangeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(persona_state_, other->persona_state_);
  swap(is_auto_generated_name_, other->is_auto_generated_name_);
  swap(high_priority_, other->high_priority_);
  swap(persona_set_by_user_, other->persona_set_by_user_);
  swap(need_persona_response_, other->need_persona_response_);
  swap(persona_state_flags_, other->persona_state_flags_);
}

::google::protobuf::Metadata CMsgClientChangeStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPersonaChangeResponse::InitAsDefaultInstance() {
}
class CMsgPersonaChangeResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgPersonaChangeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_name(CMsgPersonaChangeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPersonaChangeResponse::kResultFieldNumber;
const int CMsgPersonaChangeResponse::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPersonaChangeResponse::CMsgPersonaChangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPersonaChangeResponse)
}
CMsgPersonaChangeResponse::CMsgPersonaChangeResponse(const CMsgPersonaChangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPersonaChangeResponse)
}

void CMsgPersonaChangeResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPersonaChangeResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0u;
}

CMsgPersonaChangeResponse::~CMsgPersonaChangeResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPersonaChangeResponse)
  SharedDtor();
}

void CMsgPersonaChangeResponse::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPersonaChangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPersonaChangeResponse& CMsgPersonaChangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPersonaChangeResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgPersonaChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPersonaChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPersonaChangeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPersonaChangeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgPersonaChangeResponse.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPersonaChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPersonaChangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPersonaChangeResponse.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPersonaChangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPersonaChangeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPersonaChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPersonaChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPersonaChangeResponse.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPersonaChangeResponse)
}

::google::protobuf::uint8* CMsgPersonaChangeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPersonaChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPersonaChangeResponse.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPersonaChangeResponse)
  return target;
}

size_t CMsgPersonaChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPersonaChangeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPersonaChangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPersonaChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPersonaChangeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPersonaChangeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPersonaChangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPersonaChangeResponse)
    MergeFrom(*source);
  }
}

void CMsgPersonaChangeResponse::MergeFrom(const CMsgPersonaChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPersonaChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPersonaChangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPersonaChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPersonaChangeResponse::CopyFrom(const CMsgPersonaChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPersonaChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPersonaChangeResponse::IsInitialized() const {
  return true;
}

void CMsgPersonaChangeResponse::Swap(CMsgPersonaChangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPersonaChangeResponse::InternalSwap(CMsgPersonaChangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgPersonaChangeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPersonaState_Friend_ClanData::InitAsDefaultInstance() {
}
class CMsgClientPersonaState_Friend_ClanData::HasBitSetters {
 public:
  static void set_has_ogg_app_id(CMsgClientPersonaState_Friend_ClanData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_chat_group_id(CMsgClientPersonaState_Friend_ClanData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPersonaState_Friend_ClanData::kOggAppIdFieldNumber;
const int CMsgClientPersonaState_Friend_ClanData::kChatGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPersonaState_Friend_ClanData::CMsgClientPersonaState_Friend_ClanData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPersonaState.Friend.ClanData)
}
CMsgClientPersonaState_Friend_ClanData::CMsgClientPersonaState_Friend_ClanData(const CMsgClientPersonaState_Friend_ClanData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ogg_app_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ogg_app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPersonaState.Friend.ClanData)
}

void CMsgClientPersonaState_Friend_ClanData::SharedCtor() {
  ::memset(&chat_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ogg_app_id_) -
      reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ogg_app_id_));
}

CMsgClientPersonaState_Friend_ClanData::~CMsgClientPersonaState_Friend_ClanData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  SharedDtor();
}

void CMsgClientPersonaState_Friend_ClanData::SharedDtor() {
}

void CMsgClientPersonaState_Friend_ClanData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPersonaState_Friend_ClanData& CMsgClientPersonaState_Friend_ClanData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPersonaState_Friend_ClanData_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPersonaState_Friend_ClanData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ogg_app_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ogg_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPersonaState_Friend_ClanData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPersonaState_Friend_ClanData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ogg_app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ogg_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 chat_group_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_chat_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPersonaState_Friend_ClanData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ogg_app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ogg_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ogg_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chat_group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_chat_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPersonaState_Friend_ClanData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ogg_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ogg_app_id(), output);
  }

  // optional uint64 chat_group_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPersonaState.Friend.ClanData)
}

::google::protobuf::uint8* CMsgClientPersonaState_Friend_ClanData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ogg_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ogg_app_id(), target);
  }

  // optional uint64 chat_group_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  return target;
}

size_t CMsgClientPersonaState_Friend_ClanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

    // optional uint32 ogg_app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ogg_app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPersonaState_Friend_ClanData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPersonaState_Friend_ClanData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPersonaState_Friend_ClanData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPersonaState.Friend.ClanData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPersonaState.Friend.ClanData)
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState_Friend_ClanData::MergeFrom(const CMsgClientPersonaState_Friend_ClanData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ogg_app_id_ = from.ogg_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPersonaState_Friend_ClanData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend_ClanData::CopyFrom(const CMsgClientPersonaState_Friend_ClanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPersonaState.Friend.ClanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend_ClanData::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState_Friend_ClanData::Swap(CMsgClientPersonaState_Friend_ClanData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPersonaState_Friend_ClanData::InternalSwap(CMsgClientPersonaState_Friend_ClanData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_group_id_, other->chat_group_id_);
  swap(ogg_app_id_, other->ogg_app_id_);
}

::google::protobuf::Metadata CMsgClientPersonaState_Friend_ClanData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPersonaState_Friend_KV::InitAsDefaultInstance() {
}
class CMsgClientPersonaState_Friend_KV::HasBitSetters {
 public:
  static void set_has_key(CMsgClientPersonaState_Friend_KV* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgClientPersonaState_Friend_KV* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPersonaState_Friend_KV::kKeyFieldNumber;
const int CMsgClientPersonaState_Friend_KV::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPersonaState_Friend_KV::CMsgClientPersonaState_Friend_KV()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPersonaState.Friend.KV)
}
CMsgClientPersonaState_Friend_KV::CMsgClientPersonaState_Friend_KV(const CMsgClientPersonaState_Friend_KV& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPersonaState.Friend.KV)
}

void CMsgClientPersonaState_Friend_KV::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPersonaState_Friend_KV_steammessages_5fclientserver_5ffriends_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgClientPersonaState_Friend_KV::~CMsgClientPersonaState_Friend_KV() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPersonaState.Friend.KV)
  SharedDtor();
}

void CMsgClientPersonaState_Friend_KV::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPersonaState_Friend_KV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPersonaState_Friend_KV& CMsgClientPersonaState_Friend_KV::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPersonaState_Friend_KV_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPersonaState_Friend_KV::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPersonaState.Friend.KV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPersonaState_Friend_KV::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPersonaState_Friend_KV*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientPersonaState.Friend.KV.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientPersonaState.Friend.KV.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPersonaState_Friend_KV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPersonaState.Friend.KV)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.KV.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.KV.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPersonaState.Friend.KV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPersonaState.Friend.KV)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPersonaState_Friend_KV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPersonaState.Friend.KV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.KV.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.KV.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPersonaState.Friend.KV)
}

::google::protobuf::uint8* CMsgClientPersonaState_Friend_KV::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPersonaState.Friend.KV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.KV.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.KV.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPersonaState.Friend.KV)
  return target;
}

size_t CMsgClientPersonaState_Friend_KV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPersonaState.Friend.KV)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPersonaState_Friend_KV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPersonaState.Friend.KV)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPersonaState_Friend_KV* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPersonaState_Friend_KV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPersonaState.Friend.KV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPersonaState.Friend.KV)
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState_Friend_KV::MergeFrom(const CMsgClientPersonaState_Friend_KV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPersonaState.Friend.KV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgClientPersonaState_Friend_KV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPersonaState.Friend.KV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend_KV::CopyFrom(const CMsgClientPersonaState_Friend_KV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPersonaState.Friend.KV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend_KV::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState_Friend_KV::Swap(CMsgClientPersonaState_Friend_KV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPersonaState_Friend_KV::InternalSwap(CMsgClientPersonaState_Friend_KV* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgClientPersonaState_Friend_KV::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPersonaState_Friend::InitAsDefaultInstance() {
  ::proto::steam::_CMsgClientPersonaState_Friend_default_instance_._instance.get_mutable()->clan_data_ = const_cast< ::proto::steam::CMsgClientPersonaState_Friend_ClanData*>(
      ::proto::steam::CMsgClientPersonaState_Friend_ClanData::internal_default_instance());
}
class CMsgClientPersonaState_Friend::HasBitSetters {
 public:
  static void set_has_friendid(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_persona_state(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_game_played_app_id(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_game_server_ip(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_game_server_port(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_persona_state_flags(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_online_session_instances(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_published_instance_id(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_persona_set_by_user(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_player_name(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_query_port(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_steamid_source(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_avatar_hash(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_last_logoff(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_last_logon(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_last_seen_online(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_clan_rank(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_game_name(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gameid(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_game_data_blob(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::steam::CMsgClientPersonaState_Friend_ClanData& clan_data(const CMsgClientPersonaState_Friend* msg);
  static void set_has_clan_data(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_clan_tag(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_broadcast_id(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_game_lobby_id(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_watching_broadcast_accountid(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_watching_broadcast_appid(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_watching_broadcast_viewers(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_watching_broadcast_title(CMsgClientPersonaState_Friend* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::proto::steam::CMsgClientPersonaState_Friend_ClanData&
CMsgClientPersonaState_Friend::HasBitSetters::clan_data(const CMsgClientPersonaState_Friend* msg) {
  return *msg->clan_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPersonaState_Friend::kFriendidFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaStateFieldNumber;
const int CMsgClientPersonaState_Friend::kGamePlayedAppIdFieldNumber;
const int CMsgClientPersonaState_Friend::kGameServerIpFieldNumber;
const int CMsgClientPersonaState_Friend::kGameServerPortFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaStateFlagsFieldNumber;
const int CMsgClientPersonaState_Friend::kOnlineSessionInstancesFieldNumber;
const int CMsgClientPersonaState_Friend::kPublishedInstanceIdFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaSetByUserFieldNumber;
const int CMsgClientPersonaState_Friend::kPlayerNameFieldNumber;
const int CMsgClientPersonaState_Friend::kQueryPortFieldNumber;
const int CMsgClientPersonaState_Friend::kSteamidSourceFieldNumber;
const int CMsgClientPersonaState_Friend::kAvatarHashFieldNumber;
const int CMsgClientPersonaState_Friend::kLastLogoffFieldNumber;
const int CMsgClientPersonaState_Friend::kLastLogonFieldNumber;
const int CMsgClientPersonaState_Friend::kLastSeenOnlineFieldNumber;
const int CMsgClientPersonaState_Friend::kClanRankFieldNumber;
const int CMsgClientPersonaState_Friend::kGameNameFieldNumber;
const int CMsgClientPersonaState_Friend::kGameidFieldNumber;
const int CMsgClientPersonaState_Friend::kGameDataBlobFieldNumber;
const int CMsgClientPersonaState_Friend::kClanDataFieldNumber;
const int CMsgClientPersonaState_Friend::kClanTagFieldNumber;
const int CMsgClientPersonaState_Friend::kRichPresenceFieldNumber;
const int CMsgClientPersonaState_Friend::kBroadcastIdFieldNumber;
const int CMsgClientPersonaState_Friend::kGameLobbyIdFieldNumber;
const int CMsgClientPersonaState_Friend::kWatchingBroadcastAccountidFieldNumber;
const int CMsgClientPersonaState_Friend::kWatchingBroadcastAppidFieldNumber;
const int CMsgClientPersonaState_Friend::kWatchingBroadcastViewersFieldNumber;
const int CMsgClientPersonaState_Friend::kWatchingBroadcastTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPersonaState.Friend)
}
CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend(const CMsgClientPersonaState_Friend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rich_presence_(from.rich_presence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  avatar_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatar_hash()) {
    avatar_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_hash_);
  }
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  game_data_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_data_blob()) {
    game_data_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_blob_);
  }
  clan_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clan_tag()) {
    clan_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_tag_);
  }
  watching_broadcast_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_watching_broadcast_title()) {
    watching_broadcast_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.watching_broadcast_title_);
  }
  if (from.has_clan_data()) {
    clan_data_ = new ::proto::steam::CMsgClientPersonaState_Friend_ClanData(*from.clan_data_);
  } else {
    clan_data_ = nullptr;
  }
  ::memcpy(&friendid_, &from.friendid_,
    static_cast<size_t>(reinterpret_cast<char*>(&watching_broadcast_viewers_) -
    reinterpret_cast<char*>(&friendid_)) + sizeof(watching_broadcast_viewers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPersonaState.Friend)
}

void CMsgClientPersonaState_Friend::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPersonaState_Friend_steammessages_5fclientserver_5ffriends_2eproto.base);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  watching_broadcast_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clan_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watching_broadcast_viewers_) -
      reinterpret_cast<char*>(&clan_data_)) + sizeof(watching_broadcast_viewers_));
}

CMsgClientPersonaState_Friend::~CMsgClientPersonaState_Friend() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPersonaState.Friend)
  SharedDtor();
}

void CMsgClientPersonaState_Friend::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  watching_broadcast_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clan_data_;
}

void CMsgClientPersonaState_Friend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPersonaState_Friend& CMsgClientPersonaState_Friend::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPersonaState_Friend_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPersonaState_Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPersonaState.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rich_presence_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      player_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      avatar_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      game_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      game_data_blob_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      clan_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      watching_broadcast_title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(clan_data_ != nullptr);
      clan_data_->Clear();
    }
  }
  friendid_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&persona_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&persona_set_by_user_) -
        reinterpret_cast<char*>(&persona_state_)) + sizeof(persona_set_by_user_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&steamid_source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watching_broadcast_accountid_) -
        reinterpret_cast<char*>(&steamid_source_)) + sizeof(watching_broadcast_accountid_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watching_broadcast_viewers_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(watching_broadcast_viewers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPersonaState_Friend::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPersonaState_Friend*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_friendid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 persona_state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_persona_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_played_app_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_game_played_app_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_server_ip = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_game_server_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_server_port = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_game_server_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 persona_state_flags = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_persona_state_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 online_session_instances = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_online_session_instances(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 published_instance_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_published_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool persona_set_by_user = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_persona_set_by_user(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string player_name = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientPersonaState.Friend.player_name");
        object = msg->mutable_player_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 query_port = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_query_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid_source = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 201) goto handle_unusual;
        msg->set_steamid_source(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes avatar_hash = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_avatar_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 last_logoff = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_last_logoff(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_logon = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_last_logon(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_seen_online = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_last_seen_online(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 clan_rank = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_clan_rank(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string game_name = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientPersonaState.Friend.game_name");
        object = msg->mutable_game_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 gameid = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        msg->set_gameid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes game_data_blob = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_game_data_blob();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.steam.CMsgClientPersonaState.Friend.ClanData clan_data = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgClientPersonaState_Friend_ClanData::_InternalParse;
        object = msg->mutable_clan_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional string clan_tag = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientPersonaState.Friend.clan_tag");
        object = msg->mutable_clan_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CMsgClientPersonaState.Friend.KV rich_presence = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPersonaState_Friend_KV::_InternalParse;
          object = msg->add_rich_presence();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1210 && (ptr += 2));
        break;
      }
      // optional fixed64 broadcast_id = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_broadcast_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 game_lobby_id = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_game_lobby_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 watching_broadcast_accountid = 74;
      case 74: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_watching_broadcast_accountid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 watching_broadcast_appid = 75;
      case 75: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_watching_broadcast_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 watching_broadcast_viewers = 76;
      case 76: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_watching_broadcast_viewers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string watching_broadcast_title = 77;
      case 77: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientPersonaState.Friend.watching_broadcast_title");
        object = msg->mutable_watching_broadcast_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPersonaState_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPersonaState.Friend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_friendid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 persona_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_persona_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_played_app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_game_played_app_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_played_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_game_server_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_game_server_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 persona_state_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_persona_state_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 online_session_instances = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_online_session_instances(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_session_instances_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 published_instance_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_published_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &published_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persona_set_by_user = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_persona_set_by_user(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_set_by_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), static_cast<int>(this->player_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query_port = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_query_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_source = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (201 & 0xFF)) {
          HasBitSetters::set_has_steamid_source(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes avatar_hash = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (250 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_logoff = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_last_logoff(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logoff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_logon = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          HasBitSetters::set_has_last_logon(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_seen_online = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (376 & 0xFF)) {
          HasBitSetters::set_has_last_seen_online(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_seen_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clan_rank = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {
          HasBitSetters::set_has_clan_rank(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clan_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (442 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), static_cast<int>(this->game_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameid = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (449 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes game_data_blob = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (482 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgClientPersonaState.Friend.ClanData clan_data = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (514 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clan_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string clan_tag = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (522 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clan_tag().data(), static_cast<int>(this->clan_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.clan_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPersonaState.Friend.KV rich_presence = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (570 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rich_presence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (577 & 0xFF)) {
          HasBitSetters::set_has_broadcast_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_lobby_id = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (585 & 0xFF)) {
          HasBitSetters::set_has_game_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 watching_broadcast_accountid = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (592 & 0xFF)) {
          HasBitSetters::set_has_watching_broadcast_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 watching_broadcast_appid = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (600 & 0xFF)) {
          HasBitSetters::set_has_watching_broadcast_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 watching_broadcast_viewers = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (608 & 0xFF)) {
          HasBitSetters::set_has_watching_broadcast_viewers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string watching_broadcast_title = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (618 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_watching_broadcast_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->watching_broadcast_title().data(), static_cast<int>(this->watching_broadcast_title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientPersonaState.Friend.watching_broadcast_title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPersonaState.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPersonaState.Friend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPersonaState_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPersonaState.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  // optional uint32 persona_state = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->persona_state(), output);
  }

  // optional uint32 game_played_app_id = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_played_app_id(), output);
  }

  // optional uint32 game_server_ip = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_server_port(), output);
  }

  // optional uint32 persona_state_flags = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->persona_state_flags(), output);
  }

  // optional uint32 online_session_instances = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->online_session_instances(), output);
  }

  // optional uint32 published_instance_id = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->published_instance_id(), output);
  }

  // optional bool persona_set_by_user = 10;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->persona_set_by_user(), output);
  }

  // optional string player_name = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->player_name(), output);
  }

  // optional uint32 query_port = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->query_port(), output);
  }

  // optional fixed64 steamid_source = 25;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->steamid_source(), output);
  }

  // optional bytes avatar_hash = 31;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      31, this->avatar_hash(), output);
  }

  // optional uint32 last_logoff = 45;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->last_logoff(), output);
  }

  // optional uint32 last_logon = 46;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->last_logon(), output);
  }

  // optional uint32 last_seen_online = 47;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->last_seen_online(), output);
  }

  // optional uint32 clan_rank = 50;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->clan_rank(), output);
  }

  // optional string game_name = 55;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->game_name(), output);
  }

  // optional fixed64 gameid = 56;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(56, this->gameid(), output);
  }

  // optional bytes game_data_blob = 60;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      60, this->game_data_blob(), output);
  }

  // optional .proto.steam.CMsgClientPersonaState.Friend.ClanData clan_data = 64;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, HasBitSetters::clan_data(this), output);
  }

  // optional string clan_tag = 65;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan_tag().data(), static_cast<int>(this->clan_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.clan_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      65, this->clan_tag(), output);
  }

  // repeated .proto.steam.CMsgClientPersonaState.Friend.KV rich_presence = 71;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rich_presence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71,
      this->rich_presence(static_cast<int>(i)),
      output);
  }

  // optional fixed64 broadcast_id = 72;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(72, this->broadcast_id(), output);
  }

  // optional fixed64 game_lobby_id = 73;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(73, this->game_lobby_id(), output);
  }

  // optional uint32 watching_broadcast_accountid = 74;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->watching_broadcast_accountid(), output);
  }

  // optional uint32 watching_broadcast_appid = 75;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->watching_broadcast_appid(), output);
  }

  // optional uint32 watching_broadcast_viewers = 76;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->watching_broadcast_viewers(), output);
  }

  // optional string watching_broadcast_title = 77;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->watching_broadcast_title().data(), static_cast<int>(this->watching_broadcast_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.watching_broadcast_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      77, this->watching_broadcast_title(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPersonaState.Friend)
}

::google::protobuf::uint8* CMsgClientPersonaState_Friend::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPersonaState.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friendid(), target);
  }

  // optional uint32 persona_state = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->persona_state(), target);
  }

  // optional uint32 game_played_app_id = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_played_app_id(), target);
  }

  // optional uint32 game_server_ip = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_server_ip(), target);
  }

  // optional uint32 game_server_port = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_server_port(), target);
  }

  // optional uint32 persona_state_flags = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->persona_state_flags(), target);
  }

  // optional uint32 online_session_instances = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->online_session_instances(), target);
  }

  // optional uint32 published_instance_id = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->published_instance_id(), target);
  }

  // optional bool persona_set_by_user = 10;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->persona_set_by_user(), target);
  }

  // optional string player_name = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), static_cast<int>(this->player_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->player_name(), target);
  }

  // optional uint32 query_port = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->query_port(), target);
  }

  // optional fixed64 steamid_source = 25;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(25, this->steamid_source(), target);
  }

  // optional bytes avatar_hash = 31;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        31, this->avatar_hash(), target);
  }

  // optional uint32 last_logoff = 45;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->last_logoff(), target);
  }

  // optional uint32 last_logon = 46;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->last_logon(), target);
  }

  // optional uint32 last_seen_online = 47;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->last_seen_online(), target);
  }

  // optional uint32 clan_rank = 50;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->clan_rank(), target);
  }

  // optional string game_name = 55;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->game_name(), target);
  }

  // optional fixed64 gameid = 56;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(56, this->gameid(), target);
  }

  // optional bytes game_data_blob = 60;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->game_data_blob(), target);
  }

  // optional .proto.steam.CMsgClientPersonaState.Friend.ClanData clan_data = 64;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        64, HasBitSetters::clan_data(this), target);
  }

  // optional string clan_tag = 65;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan_tag().data(), static_cast<int>(this->clan_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.clan_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        65, this->clan_tag(), target);
  }

  // repeated .proto.steam.CMsgClientPersonaState.Friend.KV rich_presence = 71;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rich_presence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        71, this->rich_presence(static_cast<int>(i)), target);
  }

  // optional fixed64 broadcast_id = 72;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(72, this->broadcast_id(), target);
  }

  // optional fixed64 game_lobby_id = 73;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(73, this->game_lobby_id(), target);
  }

  // optional uint32 watching_broadcast_accountid = 74;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->watching_broadcast_accountid(), target);
  }

  // optional uint32 watching_broadcast_appid = 75;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->watching_broadcast_appid(), target);
  }

  // optional uint32 watching_broadcast_viewers = 76;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->watching_broadcast_viewers(), target);
  }

  // optional string watching_broadcast_title = 77;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->watching_broadcast_title().data(), static_cast<int>(this->watching_broadcast_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientPersonaState.Friend.watching_broadcast_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        77, this->watching_broadcast_title(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPersonaState.Friend)
  return target;
}

size_t CMsgClientPersonaState_Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPersonaState.Friend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPersonaState.Friend.KV rich_presence = 71;
  {
    unsigned int count = static_cast<unsigned int>(this->rich_presence_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rich_presence(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string player_name = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional bytes avatar_hash = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar_hash());
    }

    // optional string game_name = 55;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional bytes game_data_blob = 60;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data_blob());
    }

    // optional string clan_tag = 65;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan_tag());
    }

    // optional string watching_broadcast_title = 77;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->watching_broadcast_title());
    }

    // optional .proto.steam.CMsgClientPersonaState.Friend.ClanData clan_data = 64;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *clan_data_);
    }

    // optional fixed64 friendid = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 persona_state = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state());
    }

    // optional uint32 game_played_app_id = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_played_app_id());
    }

    // optional uint32 game_server_ip = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional uint32 game_server_port = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

    // optional uint32 persona_state_flags = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state_flags());
    }

    // optional uint32 online_session_instances = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_session_instances());
    }

    // optional uint32 published_instance_id = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->published_instance_id());
    }

    // optional bool persona_set_by_user = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 steamid_source = 25;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional uint32 query_port = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_port());
    }

    // optional uint32 last_logoff = 45;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logoff());
    }

    // optional uint32 last_logon = 46;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logon());
    }

    // optional uint32 last_seen_online = 47;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_seen_online());
    }

    // optional fixed64 gameid = 56;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional uint32 clan_rank = 50;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clan_rank());
    }

    // optional uint32 watching_broadcast_accountid = 74;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_accountid());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional fixed64 broadcast_id = 72;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional fixed64 game_lobby_id = 73;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional uint32 watching_broadcast_appid = 75;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_appid());
    }

    // optional uint32 watching_broadcast_viewers = 76;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_viewers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPersonaState_Friend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPersonaState.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPersonaState_Friend* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPersonaState_Friend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPersonaState.Friend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPersonaState.Friend)
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState_Friend::MergeFrom(const CMsgClientPersonaState_Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPersonaState.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rich_presence_.MergeFrom(from.rich_presence_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      avatar_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      game_data_blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_blob_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      clan_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_tag_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      watching_broadcast_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.watching_broadcast_title_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_clan_data()->::proto::steam::CMsgClientPersonaState_Friend_ClanData::MergeFrom(from.clan_data());
    }
    if (cached_has_bits & 0x00000080u) {
      friendid_ = from.friendid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      persona_state_ = from.persona_state_;
    }
    if (cached_has_bits & 0x00000200u) {
      game_played_app_id_ = from.game_played_app_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_server_ip_ = from.game_server_ip_;
    }
    if (cached_has_bits & 0x00000800u) {
      game_server_port_ = from.game_server_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      persona_state_flags_ = from.persona_state_flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      online_session_instances_ = from.online_session_instances_;
    }
    if (cached_has_bits & 0x00004000u) {
      published_instance_id_ = from.published_instance_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      persona_set_by_user_ = from.persona_set_by_user_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      steamid_source_ = from.steamid_source_;
    }
    if (cached_has_bits & 0x00020000u) {
      query_port_ = from.query_port_;
    }
    if (cached_has_bits & 0x00040000u) {
      last_logoff_ = from.last_logoff_;
    }
    if (cached_has_bits & 0x00080000u) {
      last_logon_ = from.last_logon_;
    }
    if (cached_has_bits & 0x00100000u) {
      last_seen_online_ = from.last_seen_online_;
    }
    if (cached_has_bits & 0x00200000u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00400000u) {
      clan_rank_ = from.clan_rank_;
    }
    if (cached_has_bits & 0x00800000u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x02000000u) {
      game_lobby_id_ = from.game_lobby_id_;
    }
    if (cached_has_bits & 0x04000000u) {
      watching_broadcast_appid_ = from.watching_broadcast_appid_;
    }
    if (cached_has_bits & 0x08000000u) {
      watching_broadcast_viewers_ = from.watching_broadcast_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientPersonaState_Friend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPersonaState.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend::CopyFrom(const CMsgClientPersonaState_Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPersonaState.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState_Friend::Swap(CMsgClientPersonaState_Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPersonaState_Friend::InternalSwap(CMsgClientPersonaState_Friend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&rich_presence_)->InternalSwap(CastToBase(&other->rich_presence_));
  player_name_.Swap(&other->player_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_hash_.Swap(&other->avatar_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_name_.Swap(&other->game_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_data_blob_.Swap(&other->game_data_blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clan_tag_.Swap(&other->clan_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  watching_broadcast_title_.Swap(&other->watching_broadcast_title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clan_data_, other->clan_data_);
  swap(friendid_, other->friendid_);
  swap(persona_state_, other->persona_state_);
  swap(game_played_app_id_, other->game_played_app_id_);
  swap(game_server_ip_, other->game_server_ip_);
  swap(game_server_port_, other->game_server_port_);
  swap(persona_state_flags_, other->persona_state_flags_);
  swap(online_session_instances_, other->online_session_instances_);
  swap(published_instance_id_, other->published_instance_id_);
  swap(persona_set_by_user_, other->persona_set_by_user_);
  swap(steamid_source_, other->steamid_source_);
  swap(query_port_, other->query_port_);
  swap(last_logoff_, other->last_logoff_);
  swap(last_logon_, other->last_logon_);
  swap(last_seen_online_, other->last_seen_online_);
  swap(gameid_, other->gameid_);
  swap(clan_rank_, other->clan_rank_);
  swap(watching_broadcast_accountid_, other->watching_broadcast_accountid_);
  swap(broadcast_id_, other->broadcast_id_);
  swap(game_lobby_id_, other->game_lobby_id_);
  swap(watching_broadcast_appid_, other->watching_broadcast_appid_);
  swap(watching_broadcast_viewers_, other->watching_broadcast_viewers_);
}

::google::protobuf::Metadata CMsgClientPersonaState_Friend::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPersonaState::InitAsDefaultInstance() {
}
class CMsgClientPersonaState::HasBitSetters {
 public:
  static void set_has_status_flags(CMsgClientPersonaState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPersonaState::kStatusFlagsFieldNumber;
const int CMsgClientPersonaState::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPersonaState::CMsgClientPersonaState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientPersonaState)
}
CMsgClientPersonaState::CMsgClientPersonaState(const CMsgClientPersonaState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_flags_ = from.status_flags_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientPersonaState)
}

void CMsgClientPersonaState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientPersonaState_steammessages_5fclientserver_5ffriends_2eproto.base);
  status_flags_ = 0u;
}

CMsgClientPersonaState::~CMsgClientPersonaState() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientPersonaState)
  SharedDtor();
}

void CMsgClientPersonaState::SharedDtor() {
}

void CMsgClientPersonaState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPersonaState& CMsgClientPersonaState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPersonaState_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPersonaState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientPersonaState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  status_flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPersonaState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPersonaState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 status_flags = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_status_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientPersonaState_Friend::_InternalParse;
          object = msg->add_friends();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPersonaState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientPersonaState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status_flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_status_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientPersonaState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientPersonaState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPersonaState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientPersonaState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_flags(), output);
  }

  // repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->friends(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientPersonaState)
}

::google::protobuf::uint8* CMsgClientPersonaState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientPersonaState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_flags(), target);
  }

  // repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->friends(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientPersonaState)
  return target;
}

size_t CMsgClientPersonaState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientPersonaState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientPersonaState.Friend friends = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->friends_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->friends(static_cast<int>(i)));
    }
  }

  // optional uint32 status_flags = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPersonaState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientPersonaState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPersonaState* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPersonaState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientPersonaState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientPersonaState)
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState::MergeFrom(const CMsgClientPersonaState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientPersonaState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.has_status_flags()) {
    set_status_flags(from.status_flags());
  }
}

void CMsgClientPersonaState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientPersonaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState::CopyFrom(const CMsgClientPersonaState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientPersonaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState::Swap(CMsgClientPersonaState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPersonaState::InternalSwap(CMsgClientPersonaState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&friends_)->InternalSwap(CastToBase(&other->friends_));
  swap(status_flags_, other->status_flags_);
}

::google::protobuf::Metadata CMsgClientPersonaState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientFriendProfileInfo::InitAsDefaultInstance() {
}
class CMsgClientFriendProfileInfo::HasBitSetters {
 public:
  static void set_has_steamid_friend(CMsgClientFriendProfileInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendProfileInfo::kSteamidFriendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendProfileInfo)
}
CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo(const CMsgClientFriendProfileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_friend_ = from.steamid_friend_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendProfileInfo)
}

void CMsgClientFriendProfileInfo::SharedCtor() {
  steamid_friend_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientFriendProfileInfo::~CMsgClientFriendProfileInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendProfileInfo)
  SharedDtor();
}

void CMsgClientFriendProfileInfo::SharedDtor() {
}

void CMsgClientFriendProfileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientFriendProfileInfo& CMsgClientFriendProfileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientFriendProfileInfo_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientFriendProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_friend_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientFriendProfileInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientFriendProfileInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid_friend = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid_friend(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientFriendProfileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendProfileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_friend = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid_friend(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendProfileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendProfileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientFriendProfileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_friend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendProfileInfo)
}

::google::protobuf::uint8* CMsgClientFriendProfileInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendProfileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_friend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendProfileInfo)
  return target;
}

size_t CMsgClientFriendProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendProfileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid_friend = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientFriendProfileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendProfileInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientFriendProfileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendProfileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendProfileInfo)
    MergeFrom(*source);
  }
}

void CMsgClientFriendProfileInfo::MergeFrom(const CMsgClientFriendProfileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid_friend()) {
    set_steamid_friend(from.steamid_friend());
  }
}

void CMsgClientFriendProfileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfo::CopyFrom(const CMsgClientFriendProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfo::IsInitialized() const {
  return true;
}

void CMsgClientFriendProfileInfo::Swap(CMsgClientFriendProfileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendProfileInfo::InternalSwap(CMsgClientFriendProfileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_friend_, other->steamid_friend_);
}

::google::protobuf::Metadata CMsgClientFriendProfileInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientFriendProfileInfoResponse::InitAsDefaultInstance() {
}
class CMsgClientFriendProfileInfoResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientFriendProfileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_steamid_friend(CMsgClientFriendProfileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_time_created(CMsgClientFriendProfileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_real_name(CMsgClientFriendProfileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_city_name(CMsgClientFriendProfileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_state_name(CMsgClientFriendProfileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_country_name(CMsgClientFriendProfileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_headline(CMsgClientFriendProfileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_summary(CMsgClientFriendProfileInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientFriendProfileInfoResponse::kEresultFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kSteamidFriendFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kTimeCreatedFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kRealNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kCityNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kStateNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kCountryNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kHeadlineFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kSummaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientFriendProfileInfoResponse)
}
CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse(const CMsgClientFriendProfileInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_real_name()) {
    real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.real_name_);
  }
  city_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city_name()) {
    city_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_name_);
  }
  state_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_state_name()) {
    state_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_name_);
  }
  country_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_name()) {
    country_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_name_);
  }
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headline()) {
    headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
  }
  summary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_summary()) {
    summary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summary_);
  }
  ::memcpy(&steamid_friend_, &from.steamid_friend_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_friend_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientFriendProfileInfoResponse)
}

void CMsgClientFriendProfileInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientFriendProfileInfoResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_friend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_created_) -
      reinterpret_cast<char*>(&steamid_friend_)) + sizeof(time_created_));
  eresult_ = 2;
}

CMsgClientFriendProfileInfoResponse::~CMsgClientFriendProfileInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientFriendProfileInfoResponse)
  SharedDtor();
}

void CMsgClientFriendProfileInfoResponse::SharedDtor() {
  real_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendProfileInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientFriendProfileInfoResponse& CMsgClientFriendProfileInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientFriendProfileInfoResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientFriendProfileInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      real_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      city_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      state_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      country_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      headline_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      summary_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&steamid_friend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_created_) -
        reinterpret_cast<char*>(&steamid_friend_)) + sizeof(time_created_));
  }
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientFriendProfileInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientFriendProfileInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid_friend = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamid_friend(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 time_created = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_time_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string real_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientFriendProfileInfoResponse.real_name");
        object = msg->mutable_real_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string city_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientFriendProfileInfoResponse.city_name");
        object = msg->mutable_city_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string state_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientFriendProfileInfoResponse.state_name");
        object = msg->mutable_state_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string country_name = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientFriendProfileInfoResponse.country_name");
        object = msg->mutable_country_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string headline = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientFriendProfileInfoResponse.headline");
        object = msg->mutable_headline();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string summary = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientFriendProfileInfoResponse.summary");
        object = msg->mutable_summary();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientFriendProfileInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_friend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamid_friend(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string real_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_name().data(), static_cast<int>(this->real_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.real_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string city_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city_name().data(), static_cast<int>(this->city_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.city_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string state_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state_name().data(), static_cast<int>(this->state_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.state_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_name().data(), static_cast<int>(this->country_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.country_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string headline = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headline().data(), static_cast<int>(this->headline().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.headline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string summary = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), static_cast<int>(this->summary().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientFriendProfileInfoResponse.summary");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientFriendProfileInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientFriendProfileInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientFriendProfileInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid_friend = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_friend(), output);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_created(), output);
  }

  // optional string real_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), static_cast<int>(this->real_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->real_name(), output);
  }

  // optional string city_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city_name().data(), static_cast<int>(this->city_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.city_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->city_name(), output);
  }

  // optional string state_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_name().data(), static_cast<int>(this->state_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.state_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->state_name(), output);
  }

  // optional string country_name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_name().data(), static_cast<int>(this->country_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.country_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->country_name(), output);
  }

  // optional string headline = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), static_cast<int>(this->headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.headline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->headline(), output);
  }

  // optional string summary = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), static_cast<int>(this->summary().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->summary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientFriendProfileInfoResponse)
}

::google::protobuf::uint8* CMsgClientFriendProfileInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steamid_friend = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_friend(), target);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_created(), target);
  }

  // optional string real_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_name().data(), static_cast<int>(this->real_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.real_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->real_name(), target);
  }

  // optional string city_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city_name().data(), static_cast<int>(this->city_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.city_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city_name(), target);
  }

  // optional string state_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_name().data(), static_cast<int>(this->state_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.state_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->state_name(), target);
  }

  // optional string country_name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_name().data(), static_cast<int>(this->country_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.country_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country_name(), target);
  }

  // optional string headline = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headline().data(), static_cast<int>(this->headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.headline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->headline(), target);
  }

  // optional string summary = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), static_cast<int>(this->summary().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientFriendProfileInfoResponse.summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->summary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientFriendProfileInfoResponse)
  return target;
}

size_t CMsgClientFriendProfileInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string real_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

    // optional string city_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_name());
    }

    // optional string state_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_name());
    }

    // optional string country_name = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_name());
    }

    // optional string headline = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

    // optional string summary = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional fixed64 steamid_friend = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

  }
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientFriendProfileInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientFriendProfileInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientFriendProfileInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientFriendProfileInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientFriendProfileInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgClientFriendProfileInfoResponse::MergeFrom(const CMsgClientFriendProfileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.real_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      city_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      state_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      country_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      summary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summary_);
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_friend_ = from.steamid_friend_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_eresult(from.eresult());
  }
}

void CMsgClientFriendProfileInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfoResponse::CopyFrom(const CMsgClientFriendProfileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientFriendProfileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientFriendProfileInfoResponse::Swap(CMsgClientFriendProfileInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientFriendProfileInfoResponse::InternalSwap(CMsgClientFriendProfileInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  real_name_.Swap(&other->real_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_name_.Swap(&other->city_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_name_.Swap(&other->state_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_name_.Swap(&other->country_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headline_.Swap(&other->headline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  summary_.Swap(&other->summary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_friend_, other->steamid_friend_);
  swap(time_created_, other->time_created_);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientFriendProfileInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientCreateFriendsGroup::InitAsDefaultInstance() {
}
class CMsgClientCreateFriendsGroup::HasBitSetters {
 public:
  static void set_has_steamid(CMsgClientCreateFriendsGroup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_groupname(CMsgClientCreateFriendsGroup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientCreateFriendsGroup::kSteamidFieldNumber;
const int CMsgClientCreateFriendsGroup::kGroupnameFieldNumber;
const int CMsgClientCreateFriendsGroup::kSteamidFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientCreateFriendsGroup)
}
CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup(const CMsgClientCreateFriendsGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steamid_friends_(from.steamid_friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientCreateFriendsGroup)
}

void CMsgClientCreateFriendsGroup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientCreateFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientCreateFriendsGroup::~CMsgClientCreateFriendsGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientCreateFriendsGroup)
  SharedDtor();
}

void CMsgClientCreateFriendsGroup::SharedDtor() {
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientCreateFriendsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientCreateFriendsGroup& CMsgClientCreateFriendsGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientCreateFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientCreateFriendsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientCreateFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_friends_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    groupname_.ClearNonDefaultToEmptyNoArena();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientCreateFriendsGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientCreateFriendsGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string groupname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientCreateFriendsGroup.groupname");
        object = msg->mutable_groupname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated fixed64 steamid_friends = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 25) {
          do {
            msg->add_steamid_friends(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 25 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steamid_friends();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientCreateFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientCreateFriendsGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientCreateFriendsGroup.groupname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamid_friends = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_steamid_friends())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_friends())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientCreateFriendsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientCreateFriendsGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientCreateFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientCreateFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientCreateFriendsGroup.groupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // repeated fixed64 steamid_friends = 3;
  for (int i = 0, n = this->steamid_friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steamid_friends(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientCreateFriendsGroup)
}

::google::protobuf::uint8* CMsgClientCreateFriendsGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientCreateFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientCreateFriendsGroup.groupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // repeated fixed64 steamid_friends = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->steamid_friends_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientCreateFriendsGroup)
  return target;
}

size_t CMsgClientCreateFriendsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientCreateFriendsGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_friends = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->steamid_friends_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamid_friends_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string groupname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientCreateFriendsGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientCreateFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientCreateFriendsGroup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientCreateFriendsGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientCreateFriendsGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientCreateFriendsGroup)
    MergeFrom(*source);
  }
}

void CMsgClientCreateFriendsGroup::MergeFrom(const CMsgClientCreateFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientCreateFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_friends_.MergeFrom(from.steamid_friends_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientCreateFriendsGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientCreateFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroup::CopyFrom(const CMsgClientCreateFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientCreateFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroup::IsInitialized() const {
  return true;
}

void CMsgClientCreateFriendsGroup::Swap(CMsgClientCreateFriendsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientCreateFriendsGroup::InternalSwap(CMsgClientCreateFriendsGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_friends_.InternalSwap(&other->steamid_friends_);
  groupname_.Swap(&other->groupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CMsgClientCreateFriendsGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientCreateFriendsGroupResponse::InitAsDefaultInstance() {
}
class CMsgClientCreateFriendsGroupResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientCreateFriendsGroupResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_groupid(CMsgClientCreateFriendsGroupResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientCreateFriendsGroupResponse::kEresultFieldNumber;
const int CMsgClientCreateFriendsGroupResponse::kGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientCreateFriendsGroupResponse)
}
CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse(const CMsgClientCreateFriendsGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eresult_, &from.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientCreateFriendsGroupResponse)
}

void CMsgClientCreateFriendsGroupResponse::SharedCtor() {
  ::memset(&eresult_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&eresult_)) + sizeof(groupid_));
}

CMsgClientCreateFriendsGroupResponse::~CMsgClientCreateFriendsGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientCreateFriendsGroupResponse)
  SharedDtor();
}

void CMsgClientCreateFriendsGroupResponse::SharedDtor() {
}

void CMsgClientCreateFriendsGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientCreateFriendsGroupResponse& CMsgClientCreateFriendsGroupResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientCreateFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientCreateFriendsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&eresult_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&eresult_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientCreateFriendsGroupResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientCreateFriendsGroupResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 groupid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_groupid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientCreateFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_groupid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientCreateFriendsGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientCreateFriendsGroupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientCreateFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientCreateFriendsGroupResponse)
}

::google::protobuf::uint8* CMsgClientCreateFriendsGroupResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientCreateFriendsGroupResponse)
  return target;
}

size_t CMsgClientCreateFriendsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 eresult = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional int32 groupid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientCreateFriendsGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientCreateFriendsGroupResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientCreateFriendsGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientCreateFriendsGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientCreateFriendsGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientCreateFriendsGroupResponse::MergeFrom(const CMsgClientCreateFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientCreateFriendsGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroupResponse::CopyFrom(const CMsgClientCreateFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientCreateFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientCreateFriendsGroupResponse::Swap(CMsgClientCreateFriendsGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientCreateFriendsGroupResponse::InternalSwap(CMsgClientCreateFriendsGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
  swap(groupid_, other->groupid_);
}

::google::protobuf::Metadata CMsgClientCreateFriendsGroupResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientDeleteFriendsGroup::InitAsDefaultInstance() {
}
class CMsgClientDeleteFriendsGroup::HasBitSetters {
 public:
  static void set_has_steamid(CMsgClientDeleteFriendsGroup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_groupid(CMsgClientDeleteFriendsGroup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientDeleteFriendsGroup::kSteamidFieldNumber;
const int CMsgClientDeleteFriendsGroup::kGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientDeleteFriendsGroup)
}
CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup(const CMsgClientDeleteFriendsGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientDeleteFriendsGroup)
}

void CMsgClientDeleteFriendsGroup::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(groupid_));
}

CMsgClientDeleteFriendsGroup::~CMsgClientDeleteFriendsGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientDeleteFriendsGroup)
  SharedDtor();
}

void CMsgClientDeleteFriendsGroup::SharedDtor() {
}

void CMsgClientDeleteFriendsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientDeleteFriendsGroup& CMsgClientDeleteFriendsGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientDeleteFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientDeleteFriendsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientDeleteFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientDeleteFriendsGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientDeleteFriendsGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 groupid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_groupid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientDeleteFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientDeleteFriendsGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_groupid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientDeleteFriendsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientDeleteFriendsGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientDeleteFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientDeleteFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientDeleteFriendsGroup)
}

::google::protobuf::uint8* CMsgClientDeleteFriendsGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientDeleteFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientDeleteFriendsGroup)
  return target;
}

size_t CMsgClientDeleteFriendsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientDeleteFriendsGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientDeleteFriendsGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientDeleteFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientDeleteFriendsGroup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientDeleteFriendsGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientDeleteFriendsGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientDeleteFriendsGroup)
    MergeFrom(*source);
  }
}

void CMsgClientDeleteFriendsGroup::MergeFrom(const CMsgClientDeleteFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientDeleteFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientDeleteFriendsGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientDeleteFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroup::CopyFrom(const CMsgClientDeleteFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientDeleteFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroup::IsInitialized() const {
  return true;
}

void CMsgClientDeleteFriendsGroup::Swap(CMsgClientDeleteFriendsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientDeleteFriendsGroup::InternalSwap(CMsgClientDeleteFriendsGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(groupid_, other->groupid_);
}

::google::protobuf::Metadata CMsgClientDeleteFriendsGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientDeleteFriendsGroupResponse::InitAsDefaultInstance() {
}
class CMsgClientDeleteFriendsGroupResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientDeleteFriendsGroupResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientDeleteFriendsGroupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientDeleteFriendsGroupResponse)
}
CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse(const CMsgClientDeleteFriendsGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientDeleteFriendsGroupResponse)
}

void CMsgClientDeleteFriendsGroupResponse::SharedCtor() {
  eresult_ = 0u;
}

CMsgClientDeleteFriendsGroupResponse::~CMsgClientDeleteFriendsGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  SharedDtor();
}

void CMsgClientDeleteFriendsGroupResponse::SharedDtor() {
}

void CMsgClientDeleteFriendsGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientDeleteFriendsGroupResponse& CMsgClientDeleteFriendsGroupResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientDeleteFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientDeleteFriendsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientDeleteFriendsGroupResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientDeleteFriendsGroupResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientDeleteFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientDeleteFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientDeleteFriendsGroupResponse)
}

::google::protobuf::uint8* CMsgClientDeleteFriendsGroupResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  return target;
}

size_t CMsgClientDeleteFriendsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientDeleteFriendsGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientDeleteFriendsGroupResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientDeleteFriendsGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientDeleteFriendsGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientDeleteFriendsGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientDeleteFriendsGroupResponse::MergeFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientDeleteFriendsGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroupResponse::CopyFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientDeleteFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientDeleteFriendsGroupResponse::Swap(CMsgClientDeleteFriendsGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientDeleteFriendsGroupResponse::InternalSwap(CMsgClientDeleteFriendsGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientDeleteFriendsGroupResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientManageFriendsGroup::InitAsDefaultInstance() {
}
class CMsgClientManageFriendsGroup::HasBitSetters {
 public:
  static void set_has_groupid(CMsgClientManageFriendsGroup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_groupname(CMsgClientManageFriendsGroup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientManageFriendsGroup::kGroupidFieldNumber;
const int CMsgClientManageFriendsGroup::kGroupnameFieldNumber;
const int CMsgClientManageFriendsGroup::kSteamidFriendsAddedFieldNumber;
const int CMsgClientManageFriendsGroup::kSteamidFriendsRemovedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientManageFriendsGroup::CMsgClientManageFriendsGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientManageFriendsGroup)
}
CMsgClientManageFriendsGroup::CMsgClientManageFriendsGroup(const CMsgClientManageFriendsGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steamid_friends_added_(from.steamid_friends_added_),
      steamid_friends_removed_(from.steamid_friends_removed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientManageFriendsGroup)
}

void CMsgClientManageFriendsGroup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientManageFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = 0;
}

CMsgClientManageFriendsGroup::~CMsgClientManageFriendsGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientManageFriendsGroup)
  SharedDtor();
}

void CMsgClientManageFriendsGroup::SharedDtor() {
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientManageFriendsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientManageFriendsGroup& CMsgClientManageFriendsGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientManageFriendsGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientManageFriendsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientManageFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_friends_added_.Clear();
  steamid_friends_removed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    groupname_.ClearNonDefaultToEmptyNoArena();
  }
  groupid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientManageFriendsGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientManageFriendsGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 groupid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_groupid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string groupname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientManageFriendsGroup.groupname");
        object = msg->mutable_groupname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated fixed64 steamid_friends_added = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 25) {
          do {
            msg->add_steamid_friends_added(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 25 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steamid_friends_added();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated fixed64 steamid_friends_removed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 33) {
          do {
            msg->add_steamid_friends_removed(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 33 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_steamid_friends_removed();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientManageFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientManageFriendsGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_groupid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientManageFriendsGroup.groupname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamid_friends_added = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_steamid_friends_added())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_friends_added())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamid_friends_removed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33u, input, this->mutable_steamid_friends_removed())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_friends_removed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientManageFriendsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientManageFriendsGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientManageFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientManageFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientManageFriendsGroup.groupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // repeated fixed64 steamid_friends_added = 3;
  for (int i = 0, n = this->steamid_friends_added_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steamid_friends_added(i), output);
  }

  // repeated fixed64 steamid_friends_removed = 4;
  for (int i = 0, n = this->steamid_friends_removed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->steamid_friends_removed(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientManageFriendsGroup)
}

::google::protobuf::uint8* CMsgClientManageFriendsGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientManageFriendsGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientManageFriendsGroup.groupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // repeated fixed64 steamid_friends_added = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->steamid_friends_added_, target);

  // repeated fixed64 steamid_friends_removed = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(4, this->steamid_friends_removed_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientManageFriendsGroup)
  return target;
}

size_t CMsgClientManageFriendsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientManageFriendsGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_friends_added = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->steamid_friends_added_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamid_friends_added_size());
    total_size += data_size;
  }

  // repeated fixed64 steamid_friends_removed = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->steamid_friends_removed_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamid_friends_removed_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string groupname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional int32 groupid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientManageFriendsGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientManageFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientManageFriendsGroup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientManageFriendsGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientManageFriendsGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientManageFriendsGroup)
    MergeFrom(*source);
  }
}

void CMsgClientManageFriendsGroup::MergeFrom(const CMsgClientManageFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientManageFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_friends_added_.MergeFrom(from.steamid_friends_added_);
  steamid_friends_removed_.MergeFrom(from.steamid_friends_removed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientManageFriendsGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientManageFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientManageFriendsGroup::CopyFrom(const CMsgClientManageFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientManageFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientManageFriendsGroup::IsInitialized() const {
  return true;
}

void CMsgClientManageFriendsGroup::Swap(CMsgClientManageFriendsGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientManageFriendsGroup::InternalSwap(CMsgClientManageFriendsGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_friends_added_.InternalSwap(&other->steamid_friends_added_);
  steamid_friends_removed_.InternalSwap(&other->steamid_friends_removed_);
  groupname_.Swap(&other->groupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(groupid_, other->groupid_);
}

::google::protobuf::Metadata CMsgClientManageFriendsGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientManageFriendsGroupResponse::InitAsDefaultInstance() {
}
class CMsgClientManageFriendsGroupResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientManageFriendsGroupResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientManageFriendsGroupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientManageFriendsGroupResponse::CMsgClientManageFriendsGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientManageFriendsGroupResponse)
}
CMsgClientManageFriendsGroupResponse::CMsgClientManageFriendsGroupResponse(const CMsgClientManageFriendsGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientManageFriendsGroupResponse)
}

void CMsgClientManageFriendsGroupResponse::SharedCtor() {
  eresult_ = 0u;
}

CMsgClientManageFriendsGroupResponse::~CMsgClientManageFriendsGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientManageFriendsGroupResponse)
  SharedDtor();
}

void CMsgClientManageFriendsGroupResponse::SharedDtor() {
}

void CMsgClientManageFriendsGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientManageFriendsGroupResponse& CMsgClientManageFriendsGroupResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientManageFriendsGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientManageFriendsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientManageFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientManageFriendsGroupResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientManageFriendsGroupResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientManageFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientManageFriendsGroupResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientManageFriendsGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientManageFriendsGroupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientManageFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientManageFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientManageFriendsGroupResponse)
}

::google::protobuf::uint8* CMsgClientManageFriendsGroupResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientManageFriendsGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientManageFriendsGroupResponse)
  return target;
}

size_t CMsgClientManageFriendsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientManageFriendsGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientManageFriendsGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientManageFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientManageFriendsGroupResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientManageFriendsGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientManageFriendsGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientManageFriendsGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientManageFriendsGroupResponse::MergeFrom(const CMsgClientManageFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientManageFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientManageFriendsGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientManageFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientManageFriendsGroupResponse::CopyFrom(const CMsgClientManageFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientManageFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientManageFriendsGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientManageFriendsGroupResponse::Swap(CMsgClientManageFriendsGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientManageFriendsGroupResponse::InternalSwap(CMsgClientManageFriendsGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientManageFriendsGroupResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAddFriendToGroup::InitAsDefaultInstance() {
}
class CMsgClientAddFriendToGroup::HasBitSetters {
 public:
  static void set_has_groupid(CMsgClientAddFriendToGroup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamiduser(CMsgClientAddFriendToGroup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAddFriendToGroup::kGroupidFieldNumber;
const int CMsgClientAddFriendToGroup::kSteamiduserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAddFriendToGroup)
}
CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup(const CMsgClientAddFriendToGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamiduser_, &from.steamiduser_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAddFriendToGroup)
}

void CMsgClientAddFriendToGroup::SharedCtor() {
  ::memset(&steamiduser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
}

CMsgClientAddFriendToGroup::~CMsgClientAddFriendToGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAddFriendToGroup)
  SharedDtor();
}

void CMsgClientAddFriendToGroup::SharedDtor() {
}

void CMsgClientAddFriendToGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAddFriendToGroup& CMsgClientAddFriendToGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAddFriendToGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAddFriendToGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAddFriendToGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamiduser_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAddFriendToGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAddFriendToGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 groupid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_groupid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamiduser = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamiduser(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAddFriendToGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAddFriendToGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_groupid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamiduser = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamiduser(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamiduser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAddFriendToGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAddFriendToGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAddFriendToGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAddFriendToGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamiduser(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAddFriendToGroup)
}

::google::protobuf::uint8* CMsgClientAddFriendToGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAddFriendToGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamiduser(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAddFriendToGroup)
  return target;
}

size_t CMsgClientAddFriendToGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAddFriendToGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamiduser = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAddFriendToGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAddFriendToGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAddFriendToGroup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAddFriendToGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAddFriendToGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAddFriendToGroup)
    MergeFrom(*source);
  }
}

void CMsgClientAddFriendToGroup::MergeFrom(const CMsgClientAddFriendToGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAddFriendToGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamiduser_ = from.steamiduser_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAddFriendToGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAddFriendToGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroup::CopyFrom(const CMsgClientAddFriendToGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAddFriendToGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroup::IsInitialized() const {
  return true;
}

void CMsgClientAddFriendToGroup::Swap(CMsgClientAddFriendToGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAddFriendToGroup::InternalSwap(CMsgClientAddFriendToGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamiduser_, other->steamiduser_);
  swap(groupid_, other->groupid_);
}

::google::protobuf::Metadata CMsgClientAddFriendToGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientAddFriendToGroupResponse::InitAsDefaultInstance() {
}
class CMsgClientAddFriendToGroupResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientAddFriendToGroupResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientAddFriendToGroupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientAddFriendToGroupResponse)
}
CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse(const CMsgClientAddFriendToGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientAddFriendToGroupResponse)
}

void CMsgClientAddFriendToGroupResponse::SharedCtor() {
  eresult_ = 0u;
}

CMsgClientAddFriendToGroupResponse::~CMsgClientAddFriendToGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientAddFriendToGroupResponse)
  SharedDtor();
}

void CMsgClientAddFriendToGroupResponse::SharedDtor() {
}

void CMsgClientAddFriendToGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientAddFriendToGroupResponse& CMsgClientAddFriendToGroupResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientAddFriendToGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientAddFriendToGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientAddFriendToGroupResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientAddFriendToGroupResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientAddFriendToGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientAddFriendToGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientAddFriendToGroupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientAddFriendToGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientAddFriendToGroupResponse)
}

::google::protobuf::uint8* CMsgClientAddFriendToGroupResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientAddFriendToGroupResponse)
  return target;
}

size_t CMsgClientAddFriendToGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAddFriendToGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAddFriendToGroupResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientAddFriendToGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientAddFriendToGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientAddFriendToGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientAddFriendToGroupResponse::MergeFrom(const CMsgClientAddFriendToGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientAddFriendToGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroupResponse::CopyFrom(const CMsgClientAddFriendToGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientAddFriendToGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientAddFriendToGroupResponse::Swap(CMsgClientAddFriendToGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientAddFriendToGroupResponse::InternalSwap(CMsgClientAddFriendToGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientAddFriendToGroupResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRemoveFriendFromGroup::InitAsDefaultInstance() {
}
class CMsgClientRemoveFriendFromGroup::HasBitSetters {
 public:
  static void set_has_groupid(CMsgClientRemoveFriendFromGroup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamiduser(CMsgClientRemoveFriendFromGroup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRemoveFriendFromGroup::kGroupidFieldNumber;
const int CMsgClientRemoveFriendFromGroup::kSteamiduserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRemoveFriendFromGroup)
}
CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup(const CMsgClientRemoveFriendFromGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamiduser_, &from.steamiduser_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRemoveFriendFromGroup)
}

void CMsgClientRemoveFriendFromGroup::SharedCtor() {
  ::memset(&steamiduser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
}

CMsgClientRemoveFriendFromGroup::~CMsgClientRemoveFriendFromGroup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRemoveFriendFromGroup)
  SharedDtor();
}

void CMsgClientRemoveFriendFromGroup::SharedDtor() {
}

void CMsgClientRemoveFriendFromGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRemoveFriendFromGroup& CMsgClientRemoveFriendFromGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRemoveFriendFromGroup_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRemoveFriendFromGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamiduser_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRemoveFriendFromGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRemoveFriendFromGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 groupid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_groupid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamiduser = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamiduser(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRemoveFriendFromGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_groupid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamiduser = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamiduser(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamiduser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRemoveFriendFromGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRemoveFriendFromGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRemoveFriendFromGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamiduser(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRemoveFriendFromGroup)
}

::google::protobuf::uint8* CMsgClientRemoveFriendFromGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamiduser(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRemoveFriendFromGroup)
  return target;
}

size_t CMsgClientRemoveFriendFromGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamiduser = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRemoveFriendFromGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRemoveFriendFromGroup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRemoveFriendFromGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRemoveFriendFromGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRemoveFriendFromGroup)
    MergeFrom(*source);
  }
}

void CMsgClientRemoveFriendFromGroup::MergeFrom(const CMsgClientRemoveFriendFromGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamiduser_ = from.steamiduser_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRemoveFriendFromGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroup::CopyFrom(const CMsgClientRemoveFriendFromGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRemoveFriendFromGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroup::IsInitialized() const {
  return true;
}

void CMsgClientRemoveFriendFromGroup::Swap(CMsgClientRemoveFriendFromGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRemoveFriendFromGroup::InternalSwap(CMsgClientRemoveFriendFromGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamiduser_, other->steamiduser_);
  swap(groupid_, other->groupid_);
}

::google::protobuf::Metadata CMsgClientRemoveFriendFromGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientRemoveFriendFromGroupResponse::InitAsDefaultInstance() {
}
class CMsgClientRemoveFriendFromGroupResponse::HasBitSetters {
 public:
  static void set_has_eresult(CMsgClientRemoveFriendFromGroupResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientRemoveFriendFromGroupResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
}
CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse(const CMsgClientRemoveFriendFromGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
}

void CMsgClientRemoveFriendFromGroupResponse::SharedCtor() {
  eresult_ = 0u;
}

CMsgClientRemoveFriendFromGroupResponse::~CMsgClientRemoveFriendFromGroupResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  SharedDtor();
}

void CMsgClientRemoveFriendFromGroupResponse::SharedDtor() {
}

void CMsgClientRemoveFriendFromGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientRemoveFriendFromGroupResponse& CMsgClientRemoveFriendFromGroupResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientRemoveFriendFromGroupResponse_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientRemoveFriendFromGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientRemoveFriendFromGroupResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientRemoveFriendFromGroupResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientRemoveFriendFromGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientRemoveFriendFromGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
}

::google::protobuf::uint8* CMsgClientRemoveFriendFromGroupResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  return target;
}

size_t CMsgClientRemoveFriendFromGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRemoveFriendFromGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRemoveFriendFromGroupResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientRemoveFriendFromGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
    MergeFrom(*source);
  }
}

void CMsgClientRemoveFriendFromGroupResponse::MergeFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgClientRemoveFriendFromGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroupResponse::CopyFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientRemoveFriendFromGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientRemoveFriendFromGroupResponse::Swap(CMsgClientRemoveFriendFromGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientRemoveFriendFromGroupResponse::InternalSwap(CMsgClientRemoveFriendFromGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::google::protobuf::Metadata CMsgClientRemoveFriendFromGroupResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientGetEmoticonList::InitAsDefaultInstance() {
}
class CMsgClientGetEmoticonList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientGetEmoticonList::CMsgClientGetEmoticonList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientGetEmoticonList)
}
CMsgClientGetEmoticonList::CMsgClientGetEmoticonList(const CMsgClientGetEmoticonList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientGetEmoticonList)
}

void CMsgClientGetEmoticonList::SharedCtor() {
}

CMsgClientGetEmoticonList::~CMsgClientGetEmoticonList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientGetEmoticonList)
  SharedDtor();
}

void CMsgClientGetEmoticonList::SharedDtor() {
}

void CMsgClientGetEmoticonList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientGetEmoticonList& CMsgClientGetEmoticonList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientGetEmoticonList_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientGetEmoticonList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientGetEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientGetEmoticonList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientGetEmoticonList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientGetEmoticonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientGetEmoticonList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientGetEmoticonList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientGetEmoticonList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientGetEmoticonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientGetEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientGetEmoticonList)
}

::google::protobuf::uint8* CMsgClientGetEmoticonList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientGetEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientGetEmoticonList)
  return target;
}

size_t CMsgClientGetEmoticonList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientGetEmoticonList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientGetEmoticonList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientGetEmoticonList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientGetEmoticonList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientGetEmoticonList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientGetEmoticonList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientGetEmoticonList)
    MergeFrom(*source);
  }
}

void CMsgClientGetEmoticonList::MergeFrom(const CMsgClientGetEmoticonList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientGetEmoticonList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientGetEmoticonList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientGetEmoticonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetEmoticonList::CopyFrom(const CMsgClientGetEmoticonList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientGetEmoticonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetEmoticonList::IsInitialized() const {
  return true;
}

void CMsgClientGetEmoticonList::Swap(CMsgClientGetEmoticonList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientGetEmoticonList::InternalSwap(CMsgClientGetEmoticonList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgClientGetEmoticonList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientEmoticonList_Emoticon::InitAsDefaultInstance() {
}
class CMsgClientEmoticonList_Emoticon::HasBitSetters {
 public:
  static void set_has_name(CMsgClientEmoticonList_Emoticon* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_count(CMsgClientEmoticonList_Emoticon* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_last_used(CMsgClientEmoticonList_Emoticon* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_use_count(CMsgClientEmoticonList_Emoticon* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_time_received(CMsgClientEmoticonList_Emoticon* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientEmoticonList_Emoticon::kNameFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kCountFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kTimeLastUsedFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kUseCountFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kTimeReceivedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientEmoticonList_Emoticon::CMsgClientEmoticonList_Emoticon()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientEmoticonList.Emoticon)
}
CMsgClientEmoticonList_Emoticon::CMsgClientEmoticonList_Emoticon(const CMsgClientEmoticonList_Emoticon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_received_) -
    reinterpret_cast<char*>(&count_)) + sizeof(time_received_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientEmoticonList.Emoticon)
}

void CMsgClientEmoticonList_Emoticon::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientEmoticonList_Emoticon_steammessages_5fclientserver_5ffriends_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_received_) -
      reinterpret_cast<char*>(&count_)) + sizeof(time_received_));
}

CMsgClientEmoticonList_Emoticon::~CMsgClientEmoticonList_Emoticon() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientEmoticonList.Emoticon)
  SharedDtor();
}

void CMsgClientEmoticonList_Emoticon::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientEmoticonList_Emoticon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientEmoticonList_Emoticon& CMsgClientEmoticonList_Emoticon::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientEmoticonList_Emoticon_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientEmoticonList_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_received_) -
        reinterpret_cast<char*>(&count_)) + sizeof(time_received_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientEmoticonList_Emoticon::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientEmoticonList_Emoticon*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgClientEmoticonList.Emoticon.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_last_used = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_time_last_used(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 use_count = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_use_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_received = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_time_received(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientEmoticonList_Emoticon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgClientEmoticonList.Emoticon.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last_used = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time_last_used(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 use_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_use_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_received = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_time_received(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientEmoticonList.Emoticon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientEmoticonList.Emoticon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientEmoticonList_Emoticon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientEmoticonList.Emoticon.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional uint32 time_last_used = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_last_used(), output);
  }

  // optional uint32 use_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->use_count(), output);
  }

  // optional uint32 time_received = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_received(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientEmoticonList.Emoticon)
}

::google::protobuf::uint8* CMsgClientEmoticonList_Emoticon::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgClientEmoticonList.Emoticon.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional uint32 time_last_used = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_last_used(), target);
  }

  // optional uint32 use_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->use_count(), target);
  }

  // optional uint32 time_received = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_received(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientEmoticonList.Emoticon)
  return target;
}

size_t CMsgClientEmoticonList_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional uint32 time_last_used = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_used());
    }

    // optional uint32 use_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_count());
    }

    // optional uint32 time_received = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_received());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientEmoticonList_Emoticon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientEmoticonList_Emoticon* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientEmoticonList_Emoticon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientEmoticonList.Emoticon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientEmoticonList.Emoticon)
    MergeFrom(*source);
  }
}

void CMsgClientEmoticonList_Emoticon::MergeFrom(const CMsgClientEmoticonList_Emoticon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_last_used_ = from.time_last_used_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_count_ = from.use_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_received_ = from.time_received_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientEmoticonList_Emoticon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientEmoticonList_Emoticon::CopyFrom(const CMsgClientEmoticonList_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientEmoticonList.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList_Emoticon::IsInitialized() const {
  return true;
}

void CMsgClientEmoticonList_Emoticon::Swap(CMsgClientEmoticonList_Emoticon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientEmoticonList_Emoticon::InternalSwap(CMsgClientEmoticonList_Emoticon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(time_last_used_, other->time_last_used_);
  swap(use_count_, other->use_count_);
  swap(time_received_, other->time_received_);
}

::google::protobuf::Metadata CMsgClientEmoticonList_Emoticon::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientEmoticonList::InitAsDefaultInstance() {
}
class CMsgClientEmoticonList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientEmoticonList::kEmoticonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientEmoticonList::CMsgClientEmoticonList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientEmoticonList)
}
CMsgClientEmoticonList::CMsgClientEmoticonList(const CMsgClientEmoticonList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      emoticons_(from.emoticons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientEmoticonList)
}

void CMsgClientEmoticonList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientEmoticonList_steammessages_5fclientserver_5ffriends_2eproto.base);
}

CMsgClientEmoticonList::~CMsgClientEmoticonList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientEmoticonList)
  SharedDtor();
}

void CMsgClientEmoticonList::SharedDtor() {
}

void CMsgClientEmoticonList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientEmoticonList& CMsgClientEmoticonList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientEmoticonList_steammessages_5fclientserver_5ffriends_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientEmoticonList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emoticons_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientEmoticonList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientEmoticonList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgClientEmoticonList_Emoticon::_InternalParse;
          object = msg->add_emoticons();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientEmoticonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientEmoticonList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_emoticons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientEmoticonList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientEmoticonList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientEmoticonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->emoticons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->emoticons(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientEmoticonList)
}

::google::protobuf::uint8* CMsgClientEmoticonList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientEmoticonList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->emoticons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->emoticons(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientEmoticonList)
  return target;
}

size_t CMsgClientEmoticonList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientEmoticonList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientEmoticonList.Emoticon emoticons = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->emoticons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->emoticons(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientEmoticonList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientEmoticonList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientEmoticonList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientEmoticonList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientEmoticonList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientEmoticonList)
    MergeFrom(*source);
  }
}

void CMsgClientEmoticonList::MergeFrom(const CMsgClientEmoticonList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientEmoticonList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emoticons_.MergeFrom(from.emoticons_);
}

void CMsgClientEmoticonList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientEmoticonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientEmoticonList::CopyFrom(const CMsgClientEmoticonList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientEmoticonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList::IsInitialized() const {
  return true;
}

void CMsgClientEmoticonList::Swap(CMsgClientEmoticonList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientEmoticonList::InternalSwap(CMsgClientEmoticonList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&emoticons_)->InternalSwap(CastToBase(&other->emoticons_));
}

::google::protobuf::Metadata CMsgClientEmoticonList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fclientserver_5ffriends_2eproto);
  return ::file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientFriendMsg* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientFriendMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientFriendMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientFriendMsgIncoming* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientFriendMsgIncoming >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientFriendMsgIncoming >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAddFriend* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAddFriend >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAddFriendResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAddFriendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAddFriendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRemoveFriend* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRemoveFriend >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRemoveFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientHideFriend* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientHideFriend >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientHideFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientFriendsList_Friend* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientFriendsList_Friend >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientFriendsList_Friend >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientFriendsList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientFriendsList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientFriendsList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientFriendsGroupsList_FriendGroup* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientFriendsGroupsList_FriendGroup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientFriendsGroupsList_FriendGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientFriendsGroupsList_FriendGroupsMembership >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientFriendsGroupsList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientFriendsGroupsList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientFriendsGroupsList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPlayerNicknameList_PlayerNickname >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPlayerNicknameList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPlayerNicknameList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPlayerNicknameList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSetPlayerNickname* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSetPlayerNickname >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSetPlayerNickname >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientSetPlayerNicknameResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientSetPlayerNicknameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientSetPlayerNicknameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRequestFriendData* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRequestFriendData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRequestFriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientChangeStatus* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientChangeStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientChangeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgPersonaChangeResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgPersonaChangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgPersonaChangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPersonaState_Friend_ClanData* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPersonaState_Friend_ClanData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPersonaState_Friend_ClanData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPersonaState_Friend_KV* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPersonaState_Friend_KV >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPersonaState_Friend_KV >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPersonaState_Friend* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPersonaState_Friend >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPersonaState_Friend >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientPersonaState* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientPersonaState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientPersonaState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientFriendProfileInfo* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientFriendProfileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientFriendProfileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientFriendProfileInfoResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientFriendProfileInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientFriendProfileInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientCreateFriendsGroup* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientCreateFriendsGroup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientCreateFriendsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientCreateFriendsGroupResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientCreateFriendsGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientCreateFriendsGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientDeleteFriendsGroup* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientDeleteFriendsGroup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientDeleteFriendsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientDeleteFriendsGroupResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientDeleteFriendsGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientDeleteFriendsGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientManageFriendsGroup* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientManageFriendsGroup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientManageFriendsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientManageFriendsGroupResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientManageFriendsGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientManageFriendsGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAddFriendToGroup* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAddFriendToGroup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAddFriendToGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientAddFriendToGroupResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientAddFriendToGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientAddFriendToGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRemoveFriendFromGroup* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRemoveFriendFromGroup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRemoveFriendFromGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientRemoveFriendFromGroupResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientRemoveFriendFromGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientRemoveFriendFromGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientGetEmoticonList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientGetEmoticonList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientGetEmoticonList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientEmoticonList_Emoticon* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientEmoticonList_Emoticon >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientEmoticonList_Emoticon >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClientEmoticonList* Arena::CreateMaybeMessage< ::proto::steam::CMsgClientEmoticonList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClientEmoticonList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
