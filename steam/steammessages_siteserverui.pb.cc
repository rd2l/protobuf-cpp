// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_siteserverui.proto

#include "steammessages_siteserverui.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fsiteserverui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_ClientStatus_Response_ClientInfo_steammessages_5fsiteserverui_2eproto;
namespace proto {
namespace steam {
class SiteServerUI_Login_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_Login_Request> _instance;
} _SiteServerUI_Login_Request_default_instance_;
class SiteServerUI_Login_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_Login_Response> _instance;
} _SiteServerUI_Login_Response_default_instance_;
class SiteServerUI_LoginStatus_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_LoginStatus_Request> _instance;
} _SiteServerUI_LoginStatus_Request_default_instance_;
class SiteServerUI_LoginStatus_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_LoginStatus_Response> _instance;
} _SiteServerUI_LoginStatus_Response_default_instance_;
class SiteServerUI_CancelLogin_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_CancelLogin_Request> _instance;
} _SiteServerUI_CancelLogin_Request_default_instance_;
class SiteServerUI_CancelLogin_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_CancelLogin_Response> _instance;
} _SiteServerUI_CancelLogin_Response_default_instance_;
class SiteServerUI_Logout_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_Logout_Request> _instance;
} _SiteServerUI_Logout_Request_default_instance_;
class SiteServerUI_Logout_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_Logout_Response> _instance;
} _SiteServerUI_Logout_Response_default_instance_;
class SiteServerUI_Quit_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_Quit_Request> _instance;
} _SiteServerUI_Quit_Request_default_instance_;
class SiteServerUI_Quit_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_Quit_Response> _instance;
} _SiteServerUI_Quit_Response_default_instance_;
class SiteServerUI_Status_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_Status_Request> _instance;
} _SiteServerUI_Status_Request_default_instance_;
class SiteServerUI_Status_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_Status_Response> _instance;
} _SiteServerUI_Status_Response_default_instance_;
class SiteServerUI_GetLanguage_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_GetLanguage_Request> _instance;
} _SiteServerUI_GetLanguage_Request_default_instance_;
class SiteServerUI_GetLanguage_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_GetLanguage_Response> _instance;
} _SiteServerUI_GetLanguage_Response_default_instance_;
class SiteServerUI_SetLanguage_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_SetLanguage_Request> _instance;
} _SiteServerUI_SetLanguage_Request_default_instance_;
class SiteServerUI_SetLanguage_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_SetLanguage_Response> _instance;
} _SiteServerUI_SetLanguage_Response_default_instance_;
class SiteServerUI_ClientStatus_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_ClientStatus_Request> _instance;
} _SiteServerUI_ClientStatus_Request_default_instance_;
class SiteServerUI_ClientStatus_Response_ClientInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_ClientStatus_Response_ClientInfo> _instance;
} _SiteServerUI_ClientStatus_Response_ClientInfo_default_instance_;
class SiteServerUI_ClientStatus_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_ClientStatus_Response> _instance;
} _SiteServerUI_ClientStatus_Response_default_instance_;
class SiteServerUI_ContentCacheStatus_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_ContentCacheStatus_Request> _instance;
} _SiteServerUI_ContentCacheStatus_Request_default_instance_;
class SiteServerUI_ContentCacheStatus_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_ContentCacheStatus_Response> _instance;
} _SiteServerUI_ContentCacheStatus_Response_default_instance_;
class SiteServerUI_ContentCacheConfig_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_ContentCacheConfig_Request> _instance;
} _SiteServerUI_ContentCacheConfig_Request_default_instance_;
class SiteServerUI_ContentCacheConfig_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SiteServerUI_ContentCacheConfig_Response> _instance;
} _SiteServerUI_ContentCacheConfig_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsSiteServerUI_Login_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_Login_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_Login_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_Login_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_Login_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_Login_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_Login_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_Login_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_Login_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_Login_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_Login_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_Login_Response_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_LoginStatus_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_LoginStatus_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_LoginStatus_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_LoginStatus_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_LoginStatus_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_LoginStatus_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_LoginStatus_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_LoginStatus_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_LoginStatus_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_LoginStatus_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_LoginStatus_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_LoginStatus_Response_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_CancelLogin_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_CancelLogin_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_CancelLogin_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_CancelLogin_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_CancelLogin_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_CancelLogin_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_CancelLogin_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_CancelLogin_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_CancelLogin_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_CancelLogin_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_CancelLogin_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_CancelLogin_Response_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_Logout_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_Logout_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_Logout_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_Logout_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_Logout_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_Logout_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_Logout_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_Logout_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_Logout_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_Logout_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_Logout_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_Logout_Response_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_Quit_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_Quit_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_Quit_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_Quit_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_Quit_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_Quit_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_Quit_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_Quit_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_Quit_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_Quit_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_Quit_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_Quit_Response_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_Status_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_Status_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_Status_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_Status_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_Status_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_Status_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_Status_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_Status_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_Status_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_Status_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_Status_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_Status_Response_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_GetLanguage_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_GetLanguage_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_GetLanguage_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_GetLanguage_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_GetLanguage_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_GetLanguage_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_GetLanguage_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_GetLanguage_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_GetLanguage_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_GetLanguage_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_GetLanguage_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_GetLanguage_Response_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_SetLanguage_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_SetLanguage_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_SetLanguage_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_SetLanguage_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_SetLanguage_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_SetLanguage_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_SetLanguage_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_SetLanguage_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_SetLanguage_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_SetLanguage_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_SetLanguage_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_SetLanguage_Response_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_ClientStatus_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_ClientStatus_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_ClientStatus_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_ClientStatus_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_ClientStatus_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_ClientStatus_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_ClientStatus_Response_ClientInfo_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_ClientStatus_Response_ClientInfo_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_ClientStatus_Response_ClientInfo_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_ClientStatus_Response_ClientInfo_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_ClientStatus_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_ClientStatus_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_ClientStatus_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_ClientStatus_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SiteServerUI_ClientStatus_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSiteServerUI_ClientStatus_Response_steammessages_5fsiteserverui_2eproto}, {
      &scc_info_SiteServerUI_ClientStatus_Response_ClientInfo_steammessages_5fsiteserverui_2eproto.base,}};

static void InitDefaultsSiteServerUI_ContentCacheStatus_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_ContentCacheStatus_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_ContentCacheStatus_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_ContentCacheStatus_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_ContentCacheStatus_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_ContentCacheStatus_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_ContentCacheStatus_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_ContentCacheStatus_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_ContentCacheStatus_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_ContentCacheStatus_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_ContentCacheStatus_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_ContentCacheStatus_Response_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_ContentCacheConfig_Request_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_ContentCacheConfig_Request_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_ContentCacheConfig_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_ContentCacheConfig_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_ContentCacheConfig_Request_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_ContentCacheConfig_Request_steammessages_5fsiteserverui_2eproto}, {}};

static void InitDefaultsSiteServerUI_ContentCacheConfig_Response_steammessages_5fsiteserverui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_SiteServerUI_ContentCacheConfig_Response_default_instance_;
    new (ptr) ::proto::steam::SiteServerUI_ContentCacheConfig_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::SiteServerUI_ContentCacheConfig_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SiteServerUI_ContentCacheConfig_Response_steammessages_5fsiteserverui_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSiteServerUI_ContentCacheConfig_Response_steammessages_5fsiteserverui_2eproto}, {}};

void InitDefaults_steammessages_5fsiteserverui_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_Login_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_Login_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_LoginStatus_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_LoginStatus_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_CancelLogin_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_CancelLogin_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_Logout_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_Logout_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_Quit_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_Quit_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_Status_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_Status_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_GetLanguage_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_GetLanguage_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_SetLanguage_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_SetLanguage_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_ClientStatus_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_ClientStatus_Response_ClientInfo_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_ClientStatus_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_ContentCacheStatus_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_ContentCacheStatus_Response_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_ContentCacheConfig_Request_steammessages_5fsiteserverui_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SiteServerUI_ContentCacheConfig_Response_steammessages_5fsiteserverui_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fsiteserverui_2eproto[23];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fsiteserverui_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fsiteserverui_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_steammessages_5fsiteserverui_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Request, username_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Request, password_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Request, steamguardcode_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Request, remember_password_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Login_Response, logon_eresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_LoginStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_LoginStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_LoginStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_LoginStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_LoginStatus_Response, username_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_LoginStatus_Response, cached_credentials_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_LoginStatus_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_LoginStatus_Response, logon_eresult_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_CancelLogin_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_CancelLogin_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_CancelLogin_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_CancelLogin_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_CancelLogin_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_CancelLogin_Response, logon_eresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Logout_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Logout_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Logout_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Logout_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Logout_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Logout_Response, logout_eresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Quit_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Quit_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Quit_Request, restart_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Quit_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Quit_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Status_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Status_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Status_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Status_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Status_Response, logon_state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Status_Response, logon_eresult_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Status_Response, connected_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Status_Response, cache_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_Status_Response, acct_status_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_GetLanguage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_GetLanguage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_GetLanguage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_GetLanguage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_GetLanguage_Response, language_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_SetLanguage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_SetLanguage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_SetLanguage_Request, language_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_SetLanguage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_SetLanguage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo, hostname_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo, connected_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo, instance_id_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ClientStatus_Response, clients_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, cache_location_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, max_size_gb_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, p2p_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, current_size_gb_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, current_bw_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheStatus_Response, total_bytes_served_),
  2,
  1,
  0,
  4,
  3,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheConfig_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheConfig_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheConfig_Request, enabled_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheConfig_Request, port_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheConfig_Request, cache_location_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheConfig_Request, max_size_gb_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheConfig_Request, p2p_enabled_),
  2,
  1,
  0,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheConfig_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::SiteServerUI_ContentCacheConfig_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::proto::steam::SiteServerUI_Login_Request)},
  { 13, 20, sizeof(::proto::steam::SiteServerUI_Login_Response)},
  { 22, 27, sizeof(::proto::steam::SiteServerUI_LoginStatus_Request)},
  { 27, 36, sizeof(::proto::steam::SiteServerUI_LoginStatus_Response)},
  { 40, 45, sizeof(::proto::steam::SiteServerUI_CancelLogin_Request)},
  { 45, 52, sizeof(::proto::steam::SiteServerUI_CancelLogin_Response)},
  { 54, 59, sizeof(::proto::steam::SiteServerUI_Logout_Request)},
  { 59, 66, sizeof(::proto::steam::SiteServerUI_Logout_Response)},
  { 68, 74, sizeof(::proto::steam::SiteServerUI_Quit_Request)},
  { 75, 80, sizeof(::proto::steam::SiteServerUI_Quit_Response)},
  { 80, 85, sizeof(::proto::steam::SiteServerUI_Status_Request)},
  { 85, 95, sizeof(::proto::steam::SiteServerUI_Status_Response)},
  { 100, 105, sizeof(::proto::steam::SiteServerUI_GetLanguage_Request)},
  { 105, 111, sizeof(::proto::steam::SiteServerUI_GetLanguage_Response)},
  { 112, 118, sizeof(::proto::steam::SiteServerUI_SetLanguage_Request)},
  { 119, 124, sizeof(::proto::steam::SiteServerUI_SetLanguage_Response)},
  { 124, 129, sizeof(::proto::steam::SiteServerUI_ClientStatus_Request)},
  { 129, 138, sizeof(::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo)},
  { 142, 148, sizeof(::proto::steam::SiteServerUI_ClientStatus_Response)},
  { 149, 154, sizeof(::proto::steam::SiteServerUI_ContentCacheStatus_Request)},
  { 154, 167, sizeof(::proto::steam::SiteServerUI_ContentCacheStatus_Response)},
  { 175, 185, sizeof(::proto::steam::SiteServerUI_ContentCacheConfig_Request)},
  { 190, 195, sizeof(::proto::steam::SiteServerUI_ContentCacheConfig_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_Login_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_Login_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_LoginStatus_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_LoginStatus_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_CancelLogin_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_CancelLogin_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_Logout_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_Logout_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_Quit_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_Quit_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_Status_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_Status_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_GetLanguage_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_GetLanguage_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_SetLanguage_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_SetLanguage_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_ClientStatus_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_ClientStatus_Response_ClientInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_ClientStatus_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_ContentCacheStatus_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_ContentCacheStatus_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_ContentCacheConfig_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_SiteServerUI_ContentCacheConfig_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fsiteserverui_2eproto = {
  {}, AddDescriptors_steammessages_5fsiteserverui_2eproto, "steammessages_siteserverui.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fsiteserverui_2eproto::offsets,
  file_level_metadata_steammessages_5fsiteserverui_2eproto, 23, file_level_enum_descriptors_steammessages_5fsiteserverui_2eproto, file_level_service_descriptors_steammessages_5fsiteserverui_2eproto,
};

const char descriptor_table_protodef_steammessages_5fsiteserverui_2eproto[] =
  "\n steammessages_siteserverui.proto\022\013prot"
  "o.steam\032\030steammessages_base.proto\"s\n\032Sit"
  "eServerUI_Login_Request\022\020\n\010username\030\001 \001("
  "\t\022\020\n\010password\030\002 \001(\t\022\026\n\016steamguardcode\030\003 "
  "\001(\t\022\031\n\021remember_password\030\004 \001(\010\"I\n\033SiteSe"
  "rverUI_Login_Response\022\023\n\013logon_state\030\001 \001"
  "(\005\022\025\n\rlogon_eresult\030\002 \001(\005\"\"\n SiteServerU"
  "I_LoginStatus_Request\"}\n!SiteServerUI_Lo"
  "ginStatus_Response\022\020\n\010username\030\001 \001(\t\022\032\n\022"
  "cached_credentials\030\002 \001(\010\022\023\n\013logon_state\030"
  "\003 \001(\005\022\025\n\rlogon_eresult\030\004 \001(\005\"\"\n SiteServ"
  "erUI_CancelLogin_Request\"O\n!SiteServerUI"
  "_CancelLogin_Response\022\023\n\013logon_state\030\001 \001"
  "(\005\022\025\n\rlogon_eresult\030\002 \001(\005\"\035\n\033SiteServerU"
  "I_Logout_Request\"K\n\034SiteServerUI_Logout_"
  "Response\022\023\n\013logon_state\030\001 \001(\005\022\026\n\016logout_"
  "eresult\030\002 \001(\005\",\n\031SiteServerUI_Quit_Reque"
  "st\022\017\n\007restart\030\001 \001(\010\"\034\n\032SiteServerUI_Quit"
  "_Response\"\035\n\033SiteServerUI_Status_Request"
  "\"\211\001\n\034SiteServerUI_Status_Response\022\023\n\013log"
  "on_state\030\001 \001(\005\022\025\n\rlogon_eresult\030\002 \001(\005\022\021\n"
  "\tconnected\030\003 \001(\010\022\025\n\rcache_enabled\030\004 \001(\010\022"
  "\023\n\013acct_status\030\005 \001(\005\"\"\n SiteServerUI_Get"
  "Language_Request\"5\n!SiteServerUI_GetLang"
  "uage_Response\022\020\n\010language\030\001 \001(\t\"4\n SiteS"
  "erverUI_SetLanguage_Request\022\020\n\010language\030"
  "\001 \001(\t\"#\n!SiteServerUI_SetLanguage_Respon"
  "se\"#\n!SiteServerUI_ClientStatus_Request\""
  "\305\001\n\"SiteServerUI_ClientStatus_Response\022K"
  "\n\007clients\030\004 \003(\0132:.proto.steam.SiteServer"
  "UI_ClientStatus_Response.ClientInfo\032R\n\nC"
  "lientInfo\022\n\n\002ip\030\001 \001(\r\022\020\n\010hostname\030\002 \001(\t\022"
  "\021\n\tconnected\030\003 \001(\010\022\023\n\013instance_id\030\004 \001(\004\""
  ")\n\'SiteServerUI_ContentCacheStatus_Reque"
  "st\"\324\001\n(SiteServerUI_ContentCacheStatus_R"
  "esponse\022\017\n\007enabled\030\001 \001(\010\022\014\n\004port\030\002 \001(\r\022\026"
  "\n\016cache_location\030\003 \001(\t\022\023\n\013max_size_gb\030\004 "
  "\001(\r\022\023\n\013p2p_enabled\030\005 \001(\010\022\027\n\017current_size"
  "_gb\030\006 \001(\r\022\022\n\ncurrent_bw\030\007 \001(\004\022\032\n\022total_b"
  "ytes_served\030\010 \001(\004\"\212\001\n\'SiteServerUI_Conte"
  "ntCacheConfig_Request\022\017\n\007enabled\030\001 \001(\010\022\014"
  "\n\004port\030\002 \001(\r\022\026\n\016cache_location\030\003 \001(\t\022\023\n\013"
  "max_size_gb\030\004 \001(\r\022\023\n\013p2p_enabled\030\005 \001(\010\"*"
  "\n(SiteServerUI_ContentCacheConfig_Respon"
  "seB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fsiteserverui_2eproto = {
  false, InitDefaults_steammessages_5fsiteserverui_2eproto, 
  descriptor_table_protodef_steammessages_5fsiteserverui_2eproto,
  "steammessages_siteserverui.proto", &assign_descriptors_table_steammessages_5fsiteserverui_2eproto, 1769,
};

void AddDescriptors_steammessages_5fsiteserverui_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5fbase_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fsiteserverui_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fsiteserverui_2eproto = []() { AddDescriptors_steammessages_5fsiteserverui_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void SiteServerUI_Login_Request::InitAsDefaultInstance() {
}
class SiteServerUI_Login_Request::HasBitSetters {
 public:
  static void set_has_username(SiteServerUI_Login_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_password(SiteServerUI_Login_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamguardcode(SiteServerUI_Login_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_remember_password(SiteServerUI_Login_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_Login_Request::kUsernameFieldNumber;
const int SiteServerUI_Login_Request::kPasswordFieldNumber;
const int SiteServerUI_Login_Request::kSteamguardcodeFieldNumber;
const int SiteServerUI_Login_Request::kRememberPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_Login_Request::SiteServerUI_Login_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_Login_Request)
}
SiteServerUI_Login_Request::SiteServerUI_Login_Request(const SiteServerUI_Login_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  steamguardcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steamguardcode()) {
    steamguardcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamguardcode_);
  }
  remember_password_ = from.remember_password_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_Login_Request)
}

void SiteServerUI_Login_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SiteServerUI_Login_Request_steammessages_5fsiteserverui_2eproto.base);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamguardcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remember_password_ = false;
}

SiteServerUI_Login_Request::~SiteServerUI_Login_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_Login_Request)
  SharedDtor();
}

void SiteServerUI_Login_Request::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamguardcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_Login_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_Login_Request& SiteServerUI_Login_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_Login_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_Login_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_Login_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      steamguardcode_.ClearNonDefaultToEmptyNoArena();
    }
  }
  remember_password_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_Login_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_Login_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string username = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.SiteServerUI_Login_Request.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.SiteServerUI_Login_Request.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string steamguardcode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.SiteServerUI_Login_Request.steamguardcode");
        object = msg->mutable_steamguardcode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool remember_password = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_remember_password(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_Login_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_Login_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.SiteServerUI_Login_Request.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.SiteServerUI_Login_Request.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string steamguardcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steamguardcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->steamguardcode().data(), static_cast<int>(this->steamguardcode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.SiteServerUI_Login_Request.steamguardcode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remember_password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_remember_password(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remember_password_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_Login_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_Login_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_Login_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_Login_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_Login_Request.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_Login_Request.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string steamguardcode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steamguardcode().data(), static_cast<int>(this->steamguardcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_Login_Request.steamguardcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->steamguardcode(), output);
  }

  // optional bool remember_password = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->remember_password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_Login_Request)
}

::google::protobuf::uint8* SiteServerUI_Login_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_Login_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_Login_Request.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_Login_Request.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string steamguardcode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steamguardcode().data(), static_cast<int>(this->steamguardcode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_Login_Request.steamguardcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->steamguardcode(), target);
  }

  // optional bool remember_password = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->remember_password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_Login_Request)
  return target;
}

size_t SiteServerUI_Login_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_Login_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string username = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string steamguardcode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steamguardcode());
    }

    // optional bool remember_password = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_Login_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_Login_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_Login_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_Login_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_Login_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_Login_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_Login_Request::MergeFrom(const SiteServerUI_Login_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_Login_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      steamguardcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steamguardcode_);
    }
    if (cached_has_bits & 0x00000008u) {
      remember_password_ = from.remember_password_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteServerUI_Login_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_Login_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_Login_Request::CopyFrom(const SiteServerUI_Login_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_Login_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Login_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_Login_Request::Swap(SiteServerUI_Login_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_Login_Request::InternalSwap(SiteServerUI_Login_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  steamguardcode_.Swap(&other->steamguardcode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(remember_password_, other->remember_password_);
}

::google::protobuf::Metadata SiteServerUI_Login_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_Login_Response::InitAsDefaultInstance() {
}
class SiteServerUI_Login_Response::HasBitSetters {
 public:
  static void set_has_logon_state(SiteServerUI_Login_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_logon_eresult(SiteServerUI_Login_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_Login_Response::kLogonStateFieldNumber;
const int SiteServerUI_Login_Response::kLogonEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_Login_Response::SiteServerUI_Login_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_Login_Response)
}
SiteServerUI_Login_Response::SiteServerUI_Login_Response(const SiteServerUI_Login_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logon_state_, &from.logon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&logon_eresult_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_Login_Response)
}

void SiteServerUI_Login_Response::SharedCtor() {
  ::memset(&logon_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logon_eresult_) -
      reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
}

SiteServerUI_Login_Response::~SiteServerUI_Login_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_Login_Response)
  SharedDtor();
}

void SiteServerUI_Login_Response::SharedDtor() {
}

void SiteServerUI_Login_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_Login_Response& SiteServerUI_Login_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_Login_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_Login_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_Login_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&logon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logon_eresult_) -
        reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_Login_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_Login_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 logon_state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_logon_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 logon_eresult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_logon_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_Login_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_Login_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 logon_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_logon_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logon_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 logon_eresult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_logon_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logon_eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_Login_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_Login_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_Login_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_Login_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logon_state(), output);
  }

  // optional int32 logon_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logon_eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_Login_Response)
}

::google::protobuf::uint8* SiteServerUI_Login_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_Login_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logon_state(), target);
  }

  // optional int32 logon_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logon_eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_Login_Response)
  return target;
}

size_t SiteServerUI_Login_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_Login_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 logon_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logon_state());
    }

    // optional int32 logon_eresult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logon_eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_Login_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_Login_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_Login_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_Login_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_Login_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_Login_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_Login_Response::MergeFrom(const SiteServerUI_Login_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_Login_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      logon_eresult_ = from.logon_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteServerUI_Login_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_Login_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_Login_Response::CopyFrom(const SiteServerUI_Login_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_Login_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Login_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_Login_Response::Swap(SiteServerUI_Login_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_Login_Response::InternalSwap(SiteServerUI_Login_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(logon_state_, other->logon_state_);
  swap(logon_eresult_, other->logon_eresult_);
}

::google::protobuf::Metadata SiteServerUI_Login_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_LoginStatus_Request::InitAsDefaultInstance() {
}
class SiteServerUI_LoginStatus_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_LoginStatus_Request::SiteServerUI_LoginStatus_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_LoginStatus_Request)
}
SiteServerUI_LoginStatus_Request::SiteServerUI_LoginStatus_Request(const SiteServerUI_LoginStatus_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_LoginStatus_Request)
}

void SiteServerUI_LoginStatus_Request::SharedCtor() {
}

SiteServerUI_LoginStatus_Request::~SiteServerUI_LoginStatus_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_LoginStatus_Request)
  SharedDtor();
}

void SiteServerUI_LoginStatus_Request::SharedDtor() {
}

void SiteServerUI_LoginStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_LoginStatus_Request& SiteServerUI_LoginStatus_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_LoginStatus_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_LoginStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_LoginStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_LoginStatus_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_LoginStatus_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_LoginStatus_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_LoginStatus_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_LoginStatus_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_LoginStatus_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_LoginStatus_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_LoginStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_LoginStatus_Request)
}

::google::protobuf::uint8* SiteServerUI_LoginStatus_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_LoginStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_LoginStatus_Request)
  return target;
}

size_t SiteServerUI_LoginStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_LoginStatus_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_LoginStatus_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_LoginStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_LoginStatus_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_LoginStatus_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_LoginStatus_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_LoginStatus_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_LoginStatus_Request::MergeFrom(const SiteServerUI_LoginStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_LoginStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_LoginStatus_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_LoginStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_LoginStatus_Request::CopyFrom(const SiteServerUI_LoginStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_LoginStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_LoginStatus_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_LoginStatus_Request::Swap(SiteServerUI_LoginStatus_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_LoginStatus_Request::InternalSwap(SiteServerUI_LoginStatus_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_LoginStatus_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_LoginStatus_Response::InitAsDefaultInstance() {
}
class SiteServerUI_LoginStatus_Response::HasBitSetters {
 public:
  static void set_has_username(SiteServerUI_LoginStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_cached_credentials(SiteServerUI_LoginStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_logon_state(SiteServerUI_LoginStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_logon_eresult(SiteServerUI_LoginStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_LoginStatus_Response::kUsernameFieldNumber;
const int SiteServerUI_LoginStatus_Response::kCachedCredentialsFieldNumber;
const int SiteServerUI_LoginStatus_Response::kLogonStateFieldNumber;
const int SiteServerUI_LoginStatus_Response::kLogonEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_LoginStatus_Response::SiteServerUI_LoginStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_LoginStatus_Response)
}
SiteServerUI_LoginStatus_Response::SiteServerUI_LoginStatus_Response(const SiteServerUI_LoginStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&cached_credentials_, &from.cached_credentials_,
    static_cast<size_t>(reinterpret_cast<char*>(&logon_eresult_) -
    reinterpret_cast<char*>(&cached_credentials_)) + sizeof(logon_eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_LoginStatus_Response)
}

void SiteServerUI_LoginStatus_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SiteServerUI_LoginStatus_Response_steammessages_5fsiteserverui_2eproto.base);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cached_credentials_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logon_eresult_) -
      reinterpret_cast<char*>(&cached_credentials_)) + sizeof(logon_eresult_));
}

SiteServerUI_LoginStatus_Response::~SiteServerUI_LoginStatus_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_LoginStatus_Response)
  SharedDtor();
}

void SiteServerUI_LoginStatus_Response::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_LoginStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_LoginStatus_Response& SiteServerUI_LoginStatus_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_LoginStatus_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_LoginStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_LoginStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&cached_credentials_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logon_eresult_) -
        reinterpret_cast<char*>(&cached_credentials_)) + sizeof(logon_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_LoginStatus_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_LoginStatus_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string username = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.SiteServerUI_LoginStatus_Response.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool cached_credentials = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_cached_credentials(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 logon_state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_logon_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 logon_eresult = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_logon_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_LoginStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_LoginStatus_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.SiteServerUI_LoginStatus_Response.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cached_credentials = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_cached_credentials(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cached_credentials_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 logon_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_logon_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logon_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 logon_eresult = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_logon_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logon_eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_LoginStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_LoginStatus_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_LoginStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_LoginStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_LoginStatus_Response.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional bool cached_credentials = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cached_credentials(), output);
  }

  // optional int32 logon_state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->logon_state(), output);
  }

  // optional int32 logon_eresult = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->logon_eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_LoginStatus_Response)
}

::google::protobuf::uint8* SiteServerUI_LoginStatus_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_LoginStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_LoginStatus_Response.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional bool cached_credentials = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cached_credentials(), target);
  }

  // optional int32 logon_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->logon_state(), target);
  }

  // optional int32 logon_eresult = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->logon_eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_LoginStatus_Response)
  return target;
}

size_t SiteServerUI_LoginStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_LoginStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string username = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional bool cached_credentials = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 logon_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logon_state());
    }

    // optional int32 logon_eresult = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logon_eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_LoginStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_LoginStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_LoginStatus_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_LoginStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_LoginStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_LoginStatus_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_LoginStatus_Response::MergeFrom(const SiteServerUI_LoginStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_LoginStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      cached_credentials_ = from.cached_credentials_;
    }
    if (cached_has_bits & 0x00000004u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      logon_eresult_ = from.logon_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteServerUI_LoginStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_LoginStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_LoginStatus_Response::CopyFrom(const SiteServerUI_LoginStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_LoginStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_LoginStatus_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_LoginStatus_Response::Swap(SiteServerUI_LoginStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_LoginStatus_Response::InternalSwap(SiteServerUI_LoginStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cached_credentials_, other->cached_credentials_);
  swap(logon_state_, other->logon_state_);
  swap(logon_eresult_, other->logon_eresult_);
}

::google::protobuf::Metadata SiteServerUI_LoginStatus_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_CancelLogin_Request::InitAsDefaultInstance() {
}
class SiteServerUI_CancelLogin_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_CancelLogin_Request::SiteServerUI_CancelLogin_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_CancelLogin_Request)
}
SiteServerUI_CancelLogin_Request::SiteServerUI_CancelLogin_Request(const SiteServerUI_CancelLogin_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_CancelLogin_Request)
}

void SiteServerUI_CancelLogin_Request::SharedCtor() {
}

SiteServerUI_CancelLogin_Request::~SiteServerUI_CancelLogin_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_CancelLogin_Request)
  SharedDtor();
}

void SiteServerUI_CancelLogin_Request::SharedDtor() {
}

void SiteServerUI_CancelLogin_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_CancelLogin_Request& SiteServerUI_CancelLogin_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_CancelLogin_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_CancelLogin_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_CancelLogin_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_CancelLogin_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_CancelLogin_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_CancelLogin_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_CancelLogin_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_CancelLogin_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_CancelLogin_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_CancelLogin_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_CancelLogin_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_CancelLogin_Request)
}

::google::protobuf::uint8* SiteServerUI_CancelLogin_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_CancelLogin_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_CancelLogin_Request)
  return target;
}

size_t SiteServerUI_CancelLogin_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_CancelLogin_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_CancelLogin_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_CancelLogin_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_CancelLogin_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_CancelLogin_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_CancelLogin_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_CancelLogin_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_CancelLogin_Request::MergeFrom(const SiteServerUI_CancelLogin_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_CancelLogin_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_CancelLogin_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_CancelLogin_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_CancelLogin_Request::CopyFrom(const SiteServerUI_CancelLogin_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_CancelLogin_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_CancelLogin_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_CancelLogin_Request::Swap(SiteServerUI_CancelLogin_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_CancelLogin_Request::InternalSwap(SiteServerUI_CancelLogin_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_CancelLogin_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_CancelLogin_Response::InitAsDefaultInstance() {
}
class SiteServerUI_CancelLogin_Response::HasBitSetters {
 public:
  static void set_has_logon_state(SiteServerUI_CancelLogin_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_logon_eresult(SiteServerUI_CancelLogin_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_CancelLogin_Response::kLogonStateFieldNumber;
const int SiteServerUI_CancelLogin_Response::kLogonEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_CancelLogin_Response::SiteServerUI_CancelLogin_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_CancelLogin_Response)
}
SiteServerUI_CancelLogin_Response::SiteServerUI_CancelLogin_Response(const SiteServerUI_CancelLogin_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logon_state_, &from.logon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&logon_eresult_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_CancelLogin_Response)
}

void SiteServerUI_CancelLogin_Response::SharedCtor() {
  ::memset(&logon_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logon_eresult_) -
      reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
}

SiteServerUI_CancelLogin_Response::~SiteServerUI_CancelLogin_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_CancelLogin_Response)
  SharedDtor();
}

void SiteServerUI_CancelLogin_Response::SharedDtor() {
}

void SiteServerUI_CancelLogin_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_CancelLogin_Response& SiteServerUI_CancelLogin_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_CancelLogin_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_CancelLogin_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_CancelLogin_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&logon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logon_eresult_) -
        reinterpret_cast<char*>(&logon_state_)) + sizeof(logon_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_CancelLogin_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_CancelLogin_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 logon_state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_logon_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 logon_eresult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_logon_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_CancelLogin_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_CancelLogin_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 logon_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_logon_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logon_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 logon_eresult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_logon_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logon_eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_CancelLogin_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_CancelLogin_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_CancelLogin_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_CancelLogin_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logon_state(), output);
  }

  // optional int32 logon_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logon_eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_CancelLogin_Response)
}

::google::protobuf::uint8* SiteServerUI_CancelLogin_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_CancelLogin_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logon_state(), target);
  }

  // optional int32 logon_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logon_eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_CancelLogin_Response)
  return target;
}

size_t SiteServerUI_CancelLogin_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_CancelLogin_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 logon_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logon_state());
    }

    // optional int32 logon_eresult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logon_eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_CancelLogin_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_CancelLogin_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_CancelLogin_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_CancelLogin_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_CancelLogin_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_CancelLogin_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_CancelLogin_Response::MergeFrom(const SiteServerUI_CancelLogin_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_CancelLogin_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      logon_eresult_ = from.logon_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteServerUI_CancelLogin_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_CancelLogin_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_CancelLogin_Response::CopyFrom(const SiteServerUI_CancelLogin_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_CancelLogin_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_CancelLogin_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_CancelLogin_Response::Swap(SiteServerUI_CancelLogin_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_CancelLogin_Response::InternalSwap(SiteServerUI_CancelLogin_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(logon_state_, other->logon_state_);
  swap(logon_eresult_, other->logon_eresult_);
}

::google::protobuf::Metadata SiteServerUI_CancelLogin_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_Logout_Request::InitAsDefaultInstance() {
}
class SiteServerUI_Logout_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_Logout_Request::SiteServerUI_Logout_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_Logout_Request)
}
SiteServerUI_Logout_Request::SiteServerUI_Logout_Request(const SiteServerUI_Logout_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_Logout_Request)
}

void SiteServerUI_Logout_Request::SharedCtor() {
}

SiteServerUI_Logout_Request::~SiteServerUI_Logout_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_Logout_Request)
  SharedDtor();
}

void SiteServerUI_Logout_Request::SharedDtor() {
}

void SiteServerUI_Logout_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_Logout_Request& SiteServerUI_Logout_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_Logout_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_Logout_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_Logout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_Logout_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_Logout_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_Logout_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_Logout_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_Logout_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_Logout_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_Logout_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_Logout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_Logout_Request)
}

::google::protobuf::uint8* SiteServerUI_Logout_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_Logout_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_Logout_Request)
  return target;
}

size_t SiteServerUI_Logout_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_Logout_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_Logout_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_Logout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_Logout_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_Logout_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_Logout_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_Logout_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_Logout_Request::MergeFrom(const SiteServerUI_Logout_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_Logout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_Logout_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_Logout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_Logout_Request::CopyFrom(const SiteServerUI_Logout_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_Logout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Logout_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_Logout_Request::Swap(SiteServerUI_Logout_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_Logout_Request::InternalSwap(SiteServerUI_Logout_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_Logout_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_Logout_Response::InitAsDefaultInstance() {
}
class SiteServerUI_Logout_Response::HasBitSetters {
 public:
  static void set_has_logon_state(SiteServerUI_Logout_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_logout_eresult(SiteServerUI_Logout_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_Logout_Response::kLogonStateFieldNumber;
const int SiteServerUI_Logout_Response::kLogoutEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_Logout_Response::SiteServerUI_Logout_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_Logout_Response)
}
SiteServerUI_Logout_Response::SiteServerUI_Logout_Response(const SiteServerUI_Logout_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logon_state_, &from.logon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&logout_eresult_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(logout_eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_Logout_Response)
}

void SiteServerUI_Logout_Response::SharedCtor() {
  ::memset(&logon_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logout_eresult_) -
      reinterpret_cast<char*>(&logon_state_)) + sizeof(logout_eresult_));
}

SiteServerUI_Logout_Response::~SiteServerUI_Logout_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_Logout_Response)
  SharedDtor();
}

void SiteServerUI_Logout_Response::SharedDtor() {
}

void SiteServerUI_Logout_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_Logout_Response& SiteServerUI_Logout_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_Logout_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_Logout_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_Logout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&logon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logout_eresult_) -
        reinterpret_cast<char*>(&logon_state_)) + sizeof(logout_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_Logout_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_Logout_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 logon_state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_logon_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 logout_eresult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_logout_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_Logout_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_Logout_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 logon_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_logon_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logon_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 logout_eresult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_logout_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logout_eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_Logout_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_Logout_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_Logout_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_Logout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logon_state(), output);
  }

  // optional int32 logout_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logout_eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_Logout_Response)
}

::google::protobuf::uint8* SiteServerUI_Logout_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_Logout_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logon_state(), target);
  }

  // optional int32 logout_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logout_eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_Logout_Response)
  return target;
}

size_t SiteServerUI_Logout_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_Logout_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 logon_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logon_state());
    }

    // optional int32 logout_eresult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logout_eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_Logout_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_Logout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_Logout_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_Logout_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_Logout_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_Logout_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_Logout_Response::MergeFrom(const SiteServerUI_Logout_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_Logout_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      logout_eresult_ = from.logout_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteServerUI_Logout_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_Logout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_Logout_Response::CopyFrom(const SiteServerUI_Logout_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_Logout_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Logout_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_Logout_Response::Swap(SiteServerUI_Logout_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_Logout_Response::InternalSwap(SiteServerUI_Logout_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(logon_state_, other->logon_state_);
  swap(logout_eresult_, other->logout_eresult_);
}

::google::protobuf::Metadata SiteServerUI_Logout_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_Quit_Request::InitAsDefaultInstance() {
}
class SiteServerUI_Quit_Request::HasBitSetters {
 public:
  static void set_has_restart(SiteServerUI_Quit_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_Quit_Request::kRestartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_Quit_Request::SiteServerUI_Quit_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_Quit_Request)
}
SiteServerUI_Quit_Request::SiteServerUI_Quit_Request(const SiteServerUI_Quit_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  restart_ = from.restart_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_Quit_Request)
}

void SiteServerUI_Quit_Request::SharedCtor() {
  restart_ = false;
}

SiteServerUI_Quit_Request::~SiteServerUI_Quit_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_Quit_Request)
  SharedDtor();
}

void SiteServerUI_Quit_Request::SharedDtor() {
}

void SiteServerUI_Quit_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_Quit_Request& SiteServerUI_Quit_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_Quit_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_Quit_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_Quit_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restart_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_Quit_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_Quit_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool restart = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_restart(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_Quit_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_Quit_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool restart = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_restart(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &restart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_Quit_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_Quit_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_Quit_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_Quit_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool restart = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->restart(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_Quit_Request)
}

::google::protobuf::uint8* SiteServerUI_Quit_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_Quit_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool restart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->restart(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_Quit_Request)
  return target;
}

size_t SiteServerUI_Quit_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_Quit_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool restart = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_Quit_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_Quit_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_Quit_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_Quit_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_Quit_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_Quit_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_Quit_Request::MergeFrom(const SiteServerUI_Quit_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_Quit_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_restart()) {
    set_restart(from.restart());
  }
}

void SiteServerUI_Quit_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_Quit_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_Quit_Request::CopyFrom(const SiteServerUI_Quit_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_Quit_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Quit_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_Quit_Request::Swap(SiteServerUI_Quit_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_Quit_Request::InternalSwap(SiteServerUI_Quit_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(restart_, other->restart_);
}

::google::protobuf::Metadata SiteServerUI_Quit_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_Quit_Response::InitAsDefaultInstance() {
}
class SiteServerUI_Quit_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_Quit_Response::SiteServerUI_Quit_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_Quit_Response)
}
SiteServerUI_Quit_Response::SiteServerUI_Quit_Response(const SiteServerUI_Quit_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_Quit_Response)
}

void SiteServerUI_Quit_Response::SharedCtor() {
}

SiteServerUI_Quit_Response::~SiteServerUI_Quit_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_Quit_Response)
  SharedDtor();
}

void SiteServerUI_Quit_Response::SharedDtor() {
}

void SiteServerUI_Quit_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_Quit_Response& SiteServerUI_Quit_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_Quit_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_Quit_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_Quit_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_Quit_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_Quit_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_Quit_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_Quit_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_Quit_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_Quit_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_Quit_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_Quit_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_Quit_Response)
}

::google::protobuf::uint8* SiteServerUI_Quit_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_Quit_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_Quit_Response)
  return target;
}

size_t SiteServerUI_Quit_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_Quit_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_Quit_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_Quit_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_Quit_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_Quit_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_Quit_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_Quit_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_Quit_Response::MergeFrom(const SiteServerUI_Quit_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_Quit_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_Quit_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_Quit_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_Quit_Response::CopyFrom(const SiteServerUI_Quit_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_Quit_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Quit_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_Quit_Response::Swap(SiteServerUI_Quit_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_Quit_Response::InternalSwap(SiteServerUI_Quit_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_Quit_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_Status_Request::InitAsDefaultInstance() {
}
class SiteServerUI_Status_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_Status_Request::SiteServerUI_Status_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_Status_Request)
}
SiteServerUI_Status_Request::SiteServerUI_Status_Request(const SiteServerUI_Status_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_Status_Request)
}

void SiteServerUI_Status_Request::SharedCtor() {
}

SiteServerUI_Status_Request::~SiteServerUI_Status_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_Status_Request)
  SharedDtor();
}

void SiteServerUI_Status_Request::SharedDtor() {
}

void SiteServerUI_Status_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_Status_Request& SiteServerUI_Status_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_Status_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_Status_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_Status_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_Status_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_Status_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_Status_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_Status_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_Status_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_Status_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_Status_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_Status_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_Status_Request)
}

::google::protobuf::uint8* SiteServerUI_Status_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_Status_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_Status_Request)
  return target;
}

size_t SiteServerUI_Status_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_Status_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_Status_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_Status_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_Status_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_Status_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_Status_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_Status_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_Status_Request::MergeFrom(const SiteServerUI_Status_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_Status_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_Status_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_Status_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_Status_Request::CopyFrom(const SiteServerUI_Status_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_Status_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Status_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_Status_Request::Swap(SiteServerUI_Status_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_Status_Request::InternalSwap(SiteServerUI_Status_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_Status_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_Status_Response::InitAsDefaultInstance() {
}
class SiteServerUI_Status_Response::HasBitSetters {
 public:
  static void set_has_logon_state(SiteServerUI_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_logon_eresult(SiteServerUI_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_connected(SiteServerUI_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cache_enabled(SiteServerUI_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_acct_status(SiteServerUI_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_Status_Response::kLogonStateFieldNumber;
const int SiteServerUI_Status_Response::kLogonEresultFieldNumber;
const int SiteServerUI_Status_Response::kConnectedFieldNumber;
const int SiteServerUI_Status_Response::kCacheEnabledFieldNumber;
const int SiteServerUI_Status_Response::kAcctStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_Status_Response::SiteServerUI_Status_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_Status_Response)
}
SiteServerUI_Status_Response::SiteServerUI_Status_Response(const SiteServerUI_Status_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logon_state_, &from.logon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&acct_status_) -
    reinterpret_cast<char*>(&logon_state_)) + sizeof(acct_status_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_Status_Response)
}

void SiteServerUI_Status_Response::SharedCtor() {
  ::memset(&logon_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acct_status_) -
      reinterpret_cast<char*>(&logon_state_)) + sizeof(acct_status_));
}

SiteServerUI_Status_Response::~SiteServerUI_Status_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_Status_Response)
  SharedDtor();
}

void SiteServerUI_Status_Response::SharedDtor() {
}

void SiteServerUI_Status_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_Status_Response& SiteServerUI_Status_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_Status_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_Status_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_Status_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&logon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acct_status_) -
        reinterpret_cast<char*>(&logon_state_)) + sizeof(acct_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_Status_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_Status_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 logon_state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_logon_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 logon_eresult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_logon_eresult(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool connected = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_connected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool cache_enabled = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cache_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 acct_status = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_acct_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_Status_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_Status_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 logon_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_logon_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logon_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 logon_eresult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_logon_eresult(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logon_eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_connected(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cache_enabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_cache_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acct_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_acct_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acct_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_Status_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_Status_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_Status_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_Status_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->logon_state(), output);
  }

  // optional int32 logon_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logon_eresult(), output);
  }

  // optional bool connected = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connected(), output);
  }

  // optional bool cache_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->cache_enabled(), output);
  }

  // optional int32 acct_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->acct_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_Status_Response)
}

::google::protobuf::uint8* SiteServerUI_Status_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_Status_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 logon_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->logon_state(), target);
  }

  // optional int32 logon_eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logon_eresult(), target);
  }

  // optional bool connected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connected(), target);
  }

  // optional bool cache_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->cache_enabled(), target);
  }

  // optional int32 acct_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->acct_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_Status_Response)
  return target;
}

size_t SiteServerUI_Status_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_Status_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 logon_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logon_state());
    }

    // optional int32 logon_eresult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logon_eresult());
    }

    // optional bool connected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool cache_enabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 acct_status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acct_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_Status_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_Status_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_Status_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_Status_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_Status_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_Status_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_Status_Response::MergeFrom(const SiteServerUI_Status_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_Status_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      logon_state_ = from.logon_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      logon_eresult_ = from.logon_eresult_;
    }
    if (cached_has_bits & 0x00000004u) {
      connected_ = from.connected_;
    }
    if (cached_has_bits & 0x00000008u) {
      cache_enabled_ = from.cache_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      acct_status_ = from.acct_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteServerUI_Status_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_Status_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_Status_Response::CopyFrom(const SiteServerUI_Status_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_Status_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_Status_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_Status_Response::Swap(SiteServerUI_Status_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_Status_Response::InternalSwap(SiteServerUI_Status_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(logon_state_, other->logon_state_);
  swap(logon_eresult_, other->logon_eresult_);
  swap(connected_, other->connected_);
  swap(cache_enabled_, other->cache_enabled_);
  swap(acct_status_, other->acct_status_);
}

::google::protobuf::Metadata SiteServerUI_Status_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_GetLanguage_Request::InitAsDefaultInstance() {
}
class SiteServerUI_GetLanguage_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_GetLanguage_Request::SiteServerUI_GetLanguage_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_GetLanguage_Request)
}
SiteServerUI_GetLanguage_Request::SiteServerUI_GetLanguage_Request(const SiteServerUI_GetLanguage_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_GetLanguage_Request)
}

void SiteServerUI_GetLanguage_Request::SharedCtor() {
}

SiteServerUI_GetLanguage_Request::~SiteServerUI_GetLanguage_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_GetLanguage_Request)
  SharedDtor();
}

void SiteServerUI_GetLanguage_Request::SharedDtor() {
}

void SiteServerUI_GetLanguage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_GetLanguage_Request& SiteServerUI_GetLanguage_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_GetLanguage_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_GetLanguage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_GetLanguage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_GetLanguage_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_GetLanguage_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_GetLanguage_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_GetLanguage_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_GetLanguage_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_GetLanguage_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_GetLanguage_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_GetLanguage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_GetLanguage_Request)
}

::google::protobuf::uint8* SiteServerUI_GetLanguage_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_GetLanguage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_GetLanguage_Request)
  return target;
}

size_t SiteServerUI_GetLanguage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_GetLanguage_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_GetLanguage_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_GetLanguage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_GetLanguage_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_GetLanguage_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_GetLanguage_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_GetLanguage_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_GetLanguage_Request::MergeFrom(const SiteServerUI_GetLanguage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_GetLanguage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_GetLanguage_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_GetLanguage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_GetLanguage_Request::CopyFrom(const SiteServerUI_GetLanguage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_GetLanguage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_GetLanguage_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_GetLanguage_Request::Swap(SiteServerUI_GetLanguage_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_GetLanguage_Request::InternalSwap(SiteServerUI_GetLanguage_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_GetLanguage_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_GetLanguage_Response::InitAsDefaultInstance() {
}
class SiteServerUI_GetLanguage_Response::HasBitSetters {
 public:
  static void set_has_language(SiteServerUI_GetLanguage_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_GetLanguage_Response::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_GetLanguage_Response::SiteServerUI_GetLanguage_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_GetLanguage_Response)
}
SiteServerUI_GetLanguage_Response::SiteServerUI_GetLanguage_Response(const SiteServerUI_GetLanguage_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_GetLanguage_Response)
}

void SiteServerUI_GetLanguage_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SiteServerUI_GetLanguage_Response_steammessages_5fsiteserverui_2eproto.base);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SiteServerUI_GetLanguage_Response::~SiteServerUI_GetLanguage_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_GetLanguage_Response)
  SharedDtor();
}

void SiteServerUI_GetLanguage_Response::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_GetLanguage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_GetLanguage_Response& SiteServerUI_GetLanguage_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_GetLanguage_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_GetLanguage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_GetLanguage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_GetLanguage_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_GetLanguage_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.SiteServerUI_GetLanguage_Response.language");
        object = msg->mutable_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_GetLanguage_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_GetLanguage_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.SiteServerUI_GetLanguage_Response.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_GetLanguage_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_GetLanguage_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_GetLanguage_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_GetLanguage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_GetLanguage_Response.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_GetLanguage_Response)
}

::google::protobuf::uint8* SiteServerUI_GetLanguage_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_GetLanguage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_GetLanguage_Response.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_GetLanguage_Response)
  return target;
}

size_t SiteServerUI_GetLanguage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_GetLanguage_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_GetLanguage_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_GetLanguage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_GetLanguage_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_GetLanguage_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_GetLanguage_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_GetLanguage_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_GetLanguage_Response::MergeFrom(const SiteServerUI_GetLanguage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_GetLanguage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_language()) {
    _has_bits_[0] |= 0x00000001u;
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void SiteServerUI_GetLanguage_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_GetLanguage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_GetLanguage_Response::CopyFrom(const SiteServerUI_GetLanguage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_GetLanguage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_GetLanguage_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_GetLanguage_Response::Swap(SiteServerUI_GetLanguage_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_GetLanguage_Response::InternalSwap(SiteServerUI_GetLanguage_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SiteServerUI_GetLanguage_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_SetLanguage_Request::InitAsDefaultInstance() {
}
class SiteServerUI_SetLanguage_Request::HasBitSetters {
 public:
  static void set_has_language(SiteServerUI_SetLanguage_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_SetLanguage_Request::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_SetLanguage_Request::SiteServerUI_SetLanguage_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_SetLanguage_Request)
}
SiteServerUI_SetLanguage_Request::SiteServerUI_SetLanguage_Request(const SiteServerUI_SetLanguage_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_SetLanguage_Request)
}

void SiteServerUI_SetLanguage_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SiteServerUI_SetLanguage_Request_steammessages_5fsiteserverui_2eproto.base);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SiteServerUI_SetLanguage_Request::~SiteServerUI_SetLanguage_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_SetLanguage_Request)
  SharedDtor();
}

void SiteServerUI_SetLanguage_Request::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_SetLanguage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_SetLanguage_Request& SiteServerUI_SetLanguage_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_SetLanguage_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_SetLanguage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_SetLanguage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_SetLanguage_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_SetLanguage_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.SiteServerUI_SetLanguage_Request.language");
        object = msg->mutable_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_SetLanguage_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_SetLanguage_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.SiteServerUI_SetLanguage_Request.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_SetLanguage_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_SetLanguage_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_SetLanguage_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_SetLanguage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_SetLanguage_Request.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_SetLanguage_Request)
}

::google::protobuf::uint8* SiteServerUI_SetLanguage_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_SetLanguage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_SetLanguage_Request.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_SetLanguage_Request)
  return target;
}

size_t SiteServerUI_SetLanguage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_SetLanguage_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_SetLanguage_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_SetLanguage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_SetLanguage_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_SetLanguage_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_SetLanguage_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_SetLanguage_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_SetLanguage_Request::MergeFrom(const SiteServerUI_SetLanguage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_SetLanguage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_language()) {
    _has_bits_[0] |= 0x00000001u;
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void SiteServerUI_SetLanguage_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_SetLanguage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_SetLanguage_Request::CopyFrom(const SiteServerUI_SetLanguage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_SetLanguage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_SetLanguage_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_SetLanguage_Request::Swap(SiteServerUI_SetLanguage_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_SetLanguage_Request::InternalSwap(SiteServerUI_SetLanguage_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SiteServerUI_SetLanguage_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_SetLanguage_Response::InitAsDefaultInstance() {
}
class SiteServerUI_SetLanguage_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_SetLanguage_Response::SiteServerUI_SetLanguage_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_SetLanguage_Response)
}
SiteServerUI_SetLanguage_Response::SiteServerUI_SetLanguage_Response(const SiteServerUI_SetLanguage_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_SetLanguage_Response)
}

void SiteServerUI_SetLanguage_Response::SharedCtor() {
}

SiteServerUI_SetLanguage_Response::~SiteServerUI_SetLanguage_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_SetLanguage_Response)
  SharedDtor();
}

void SiteServerUI_SetLanguage_Response::SharedDtor() {
}

void SiteServerUI_SetLanguage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_SetLanguage_Response& SiteServerUI_SetLanguage_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_SetLanguage_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_SetLanguage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_SetLanguage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_SetLanguage_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_SetLanguage_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_SetLanguage_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_SetLanguage_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_SetLanguage_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_SetLanguage_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_SetLanguage_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_SetLanguage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_SetLanguage_Response)
}

::google::protobuf::uint8* SiteServerUI_SetLanguage_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_SetLanguage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_SetLanguage_Response)
  return target;
}

size_t SiteServerUI_SetLanguage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_SetLanguage_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_SetLanguage_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_SetLanguage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_SetLanguage_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_SetLanguage_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_SetLanguage_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_SetLanguage_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_SetLanguage_Response::MergeFrom(const SiteServerUI_SetLanguage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_SetLanguage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_SetLanguage_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_SetLanguage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_SetLanguage_Response::CopyFrom(const SiteServerUI_SetLanguage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_SetLanguage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_SetLanguage_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_SetLanguage_Response::Swap(SiteServerUI_SetLanguage_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_SetLanguage_Response::InternalSwap(SiteServerUI_SetLanguage_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_SetLanguage_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_ClientStatus_Request::InitAsDefaultInstance() {
}
class SiteServerUI_ClientStatus_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_ClientStatus_Request::SiteServerUI_ClientStatus_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_ClientStatus_Request)
}
SiteServerUI_ClientStatus_Request::SiteServerUI_ClientStatus_Request(const SiteServerUI_ClientStatus_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_ClientStatus_Request)
}

void SiteServerUI_ClientStatus_Request::SharedCtor() {
}

SiteServerUI_ClientStatus_Request::~SiteServerUI_ClientStatus_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_ClientStatus_Request)
  SharedDtor();
}

void SiteServerUI_ClientStatus_Request::SharedDtor() {
}

void SiteServerUI_ClientStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_ClientStatus_Request& SiteServerUI_ClientStatus_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_ClientStatus_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_ClientStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_ClientStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_ClientStatus_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_ClientStatus_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_ClientStatus_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_ClientStatus_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_ClientStatus_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_ClientStatus_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_ClientStatus_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_ClientStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_ClientStatus_Request)
}

::google::protobuf::uint8* SiteServerUI_ClientStatus_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_ClientStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_ClientStatus_Request)
  return target;
}

size_t SiteServerUI_ClientStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_ClientStatus_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_ClientStatus_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_ClientStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_ClientStatus_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_ClientStatus_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_ClientStatus_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_ClientStatus_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_ClientStatus_Request::MergeFrom(const SiteServerUI_ClientStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_ClientStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_ClientStatus_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_ClientStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_ClientStatus_Request::CopyFrom(const SiteServerUI_ClientStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_ClientStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ClientStatus_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_ClientStatus_Request::Swap(SiteServerUI_ClientStatus_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_ClientStatus_Request::InternalSwap(SiteServerUI_ClientStatus_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_ClientStatus_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_ClientStatus_Response_ClientInfo::InitAsDefaultInstance() {
}
class SiteServerUI_ClientStatus_Response_ClientInfo::HasBitSetters {
 public:
  static void set_has_ip(SiteServerUI_ClientStatus_Response_ClientInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hostname(SiteServerUI_ClientStatus_Response_ClientInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_connected(SiteServerUI_ClientStatus_Response_ClientInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_instance_id(SiteServerUI_ClientStatus_Response_ClientInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_ClientStatus_Response_ClientInfo::kIpFieldNumber;
const int SiteServerUI_ClientStatus_Response_ClientInfo::kHostnameFieldNumber;
const int SiteServerUI_ClientStatus_Response_ClientInfo::kConnectedFieldNumber;
const int SiteServerUI_ClientStatus_Response_ClientInfo::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_ClientStatus_Response_ClientInfo::SiteServerUI_ClientStatus_Response_ClientInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
}
SiteServerUI_ClientStatus_Response_ClientInfo::SiteServerUI_ClientStatus_Response_ClientInfo(const SiteServerUI_ClientStatus_Response_ClientInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
}

void SiteServerUI_ClientStatus_Response_ClientInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SiteServerUI_ClientStatus_Response_ClientInfo_steammessages_5fsiteserverui_2eproto.base);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(instance_id_));
}

SiteServerUI_ClientStatus_Response_ClientInfo::~SiteServerUI_ClientStatus_Response_ClientInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  SharedDtor();
}

void SiteServerUI_ClientStatus_Response_ClientInfo::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_ClientStatus_Response_ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_ClientStatus_Response_ClientInfo& SiteServerUI_ClientStatus_Response_ClientInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_ClientStatus_Response_ClientInfo_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_ClientStatus_Response_ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hostname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instance_id_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(instance_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_ClientStatus_Response_ClientInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_ClientStatus_Response_ClientInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string hostname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo.hostname");
        object = msg->mutable_hostname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool connected = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_connected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 instance_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_instance_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_ClientStatus_Response_ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_connected(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 instance_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_instance_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_ClientStatus_Response_ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // optional string hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // optional bool connected = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connected(), output);
  }

  // optional uint64 instance_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
}

::google::protobuf::uint8* SiteServerUI_ClientStatus_Response_ClientInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // optional string hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional bool connected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connected(), target);
  }

  // optional uint64 instance_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  return target;
}

size_t SiteServerUI_ClientStatus_Response_ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string hostname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional uint32 ip = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional bool connected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 instance_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_ClientStatus_Response_ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_ClientStatus_Response_ClientInfo* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_ClientStatus_Response_ClientInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
    MergeFrom(*source);
  }
}

void SiteServerUI_ClientStatus_Response_ClientInfo::MergeFrom(const SiteServerUI_ClientStatus_Response_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      connected_ = from.connected_;
    }
    if (cached_has_bits & 0x00000008u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteServerUI_ClientStatus_Response_ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_ClientStatus_Response_ClientInfo::CopyFrom(const SiteServerUI_ClientStatus_Response_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ClientStatus_Response_ClientInfo::IsInitialized() const {
  return true;
}

void SiteServerUI_ClientStatus_Response_ClientInfo::Swap(SiteServerUI_ClientStatus_Response_ClientInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_ClientStatus_Response_ClientInfo::InternalSwap(SiteServerUI_ClientStatus_Response_ClientInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ip_, other->ip_);
  swap(connected_, other->connected_);
  swap(instance_id_, other->instance_id_);
}

::google::protobuf::Metadata SiteServerUI_ClientStatus_Response_ClientInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_ClientStatus_Response::InitAsDefaultInstance() {
}
class SiteServerUI_ClientStatus_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_ClientStatus_Response::kClientsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_ClientStatus_Response::SiteServerUI_ClientStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_ClientStatus_Response)
}
SiteServerUI_ClientStatus_Response::SiteServerUI_ClientStatus_Response(const SiteServerUI_ClientStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      clients_(from.clients_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_ClientStatus_Response)
}

void SiteServerUI_ClientStatus_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SiteServerUI_ClientStatus_Response_steammessages_5fsiteserverui_2eproto.base);
}

SiteServerUI_ClientStatus_Response::~SiteServerUI_ClientStatus_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_ClientStatus_Response)
  SharedDtor();
}

void SiteServerUI_ClientStatus_Response::SharedDtor() {
}

void SiteServerUI_ClientStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_ClientStatus_Response& SiteServerUI_ClientStatus_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_ClientStatus_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_ClientStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_ClientStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clients_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_ClientStatus_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_ClientStatus_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo::_InternalParse;
          object = msg->add_clients();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_ClientStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_ClientStatus_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_clients()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_ClientStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_ClientStatus_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_ClientStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_ClientStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clients_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->clients(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_ClientStatus_Response)
}

::google::protobuf::uint8* SiteServerUI_ClientStatus_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_ClientStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clients_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->clients(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_ClientStatus_Response)
  return target;
}

size_t SiteServerUI_ClientStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_ClientStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->clients_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->clients(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_ClientStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_ClientStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_ClientStatus_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_ClientStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_ClientStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_ClientStatus_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_ClientStatus_Response::MergeFrom(const SiteServerUI_ClientStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_ClientStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clients_.MergeFrom(from.clients_);
}

void SiteServerUI_ClientStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_ClientStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_ClientStatus_Response::CopyFrom(const SiteServerUI_ClientStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_ClientStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ClientStatus_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_ClientStatus_Response::Swap(SiteServerUI_ClientStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_ClientStatus_Response::InternalSwap(SiteServerUI_ClientStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&clients_)->InternalSwap(CastToBase(&other->clients_));
}

::google::protobuf::Metadata SiteServerUI_ClientStatus_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_ContentCacheStatus_Request::InitAsDefaultInstance() {
}
class SiteServerUI_ContentCacheStatus_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_ContentCacheStatus_Request::SiteServerUI_ContentCacheStatus_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_ContentCacheStatus_Request)
}
SiteServerUI_ContentCacheStatus_Request::SiteServerUI_ContentCacheStatus_Request(const SiteServerUI_ContentCacheStatus_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_ContentCacheStatus_Request)
}

void SiteServerUI_ContentCacheStatus_Request::SharedCtor() {
}

SiteServerUI_ContentCacheStatus_Request::~SiteServerUI_ContentCacheStatus_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  SharedDtor();
}

void SiteServerUI_ContentCacheStatus_Request::SharedDtor() {
}

void SiteServerUI_ContentCacheStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_ContentCacheStatus_Request& SiteServerUI_ContentCacheStatus_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_ContentCacheStatus_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_ContentCacheStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_ContentCacheStatus_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_ContentCacheStatus_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_ContentCacheStatus_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_ContentCacheStatus_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_ContentCacheStatus_Request)
}

::google::protobuf::uint8* SiteServerUI_ContentCacheStatus_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  return target;
}

size_t SiteServerUI_ContentCacheStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_ContentCacheStatus_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_ContentCacheStatus_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_ContentCacheStatus_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_ContentCacheStatus_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_ContentCacheStatus_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_ContentCacheStatus_Request::MergeFrom(const SiteServerUI_ContentCacheStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_ContentCacheStatus_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_ContentCacheStatus_Request::CopyFrom(const SiteServerUI_ContentCacheStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_ContentCacheStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ContentCacheStatus_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_ContentCacheStatus_Request::Swap(SiteServerUI_ContentCacheStatus_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_ContentCacheStatus_Request::InternalSwap(SiteServerUI_ContentCacheStatus_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_ContentCacheStatus_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_ContentCacheStatus_Response::InitAsDefaultInstance() {
}
class SiteServerUI_ContentCacheStatus_Response::HasBitSetters {
 public:
  static void set_has_enabled(SiteServerUI_ContentCacheStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_port(SiteServerUI_ContentCacheStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cache_location(SiteServerUI_ContentCacheStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_max_size_gb(SiteServerUI_ContentCacheStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_p2p_enabled(SiteServerUI_ContentCacheStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_current_size_gb(SiteServerUI_ContentCacheStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_current_bw(SiteServerUI_ContentCacheStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_total_bytes_served(SiteServerUI_ContentCacheStatus_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_ContentCacheStatus_Response::kEnabledFieldNumber;
const int SiteServerUI_ContentCacheStatus_Response::kPortFieldNumber;
const int SiteServerUI_ContentCacheStatus_Response::kCacheLocationFieldNumber;
const int SiteServerUI_ContentCacheStatus_Response::kMaxSizeGbFieldNumber;
const int SiteServerUI_ContentCacheStatus_Response::kP2PEnabledFieldNumber;
const int SiteServerUI_ContentCacheStatus_Response::kCurrentSizeGbFieldNumber;
const int SiteServerUI_ContentCacheStatus_Response::kCurrentBwFieldNumber;
const int SiteServerUI_ContentCacheStatus_Response::kTotalBytesServedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_ContentCacheStatus_Response::SiteServerUI_ContentCacheStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_ContentCacheStatus_Response)
}
SiteServerUI_ContentCacheStatus_Response::SiteServerUI_ContentCacheStatus_Response(const SiteServerUI_ContentCacheStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cache_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_location()) {
    cache_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_location_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_bytes_served_) -
    reinterpret_cast<char*>(&port_)) + sizeof(total_bytes_served_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_ContentCacheStatus_Response)
}

void SiteServerUI_ContentCacheStatus_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SiteServerUI_ContentCacheStatus_Response_steammessages_5fsiteserverui_2eproto.base);
  cache_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_bytes_served_) -
      reinterpret_cast<char*>(&port_)) + sizeof(total_bytes_served_));
}

SiteServerUI_ContentCacheStatus_Response::~SiteServerUI_ContentCacheStatus_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  SharedDtor();
}

void SiteServerUI_ContentCacheStatus_Response::SharedDtor() {
  cache_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_ContentCacheStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_ContentCacheStatus_Response& SiteServerUI_ContentCacheStatus_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_ContentCacheStatus_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_ContentCacheStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cache_location_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_bytes_served_) -
        reinterpret_cast<char*>(&port_)) + sizeof(total_bytes_served_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_ContentCacheStatus_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_ContentCacheStatus_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string cache_location = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.SiteServerUI_ContentCacheStatus_Response.cache_location");
        object = msg->mutable_cache_location();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 max_size_gb = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_size_gb(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool p2p_enabled = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_p2p_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 current_size_gb = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_current_size_gb(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 current_bw = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_current_bw(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 total_bytes_served = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_total_bytes_served(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_ContentCacheStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache_location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cache_location().data(), static_cast<int>(this->cache_location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.SiteServerUI_ContentCacheStatus_Response.cache_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_size_gb = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_max_size_gb(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_gb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool p2p_enabled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_p2p_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &p2p_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_size_gb = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_current_size_gb(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_size_gb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 current_bw = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_current_bw(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_bw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_bytes_served = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_total_bytes_served(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_served_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_ContentCacheStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional string cache_location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_location().data(), static_cast<int>(this->cache_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_ContentCacheStatus_Response.cache_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cache_location(), output);
  }

  // optional uint32 max_size_gb = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_size_gb(), output);
  }

  // optional bool p2p_enabled = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->p2p_enabled(), output);
  }

  // optional uint32 current_size_gb = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->current_size_gb(), output);
  }

  // optional uint64 current_bw = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->current_bw(), output);
  }

  // optional uint64 total_bytes_served = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->total_bytes_served(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_ContentCacheStatus_Response)
}

::google::protobuf::uint8* SiteServerUI_ContentCacheStatus_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional string cache_location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_location().data(), static_cast<int>(this->cache_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_ContentCacheStatus_Response.cache_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cache_location(), target);
  }

  // optional uint32 max_size_gb = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_size_gb(), target);
  }

  // optional bool p2p_enabled = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->p2p_enabled(), target);
  }

  // optional uint32 current_size_gb = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->current_size_gb(), target);
  }

  // optional uint64 current_bw = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->current_bw(), target);
  }

  // optional uint64 total_bytes_served = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->total_bytes_served(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  return target;
}

size_t SiteServerUI_ContentCacheStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string cache_location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_location());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool p2p_enabled = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 max_size_gb = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_size_gb());
    }

    // optional uint32 current_size_gb = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_size_gb());
    }

    // optional uint64 current_bw = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_bw());
    }

    // optional uint64 total_bytes_served = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes_served());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_ContentCacheStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_ContentCacheStatus_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_ContentCacheStatus_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_ContentCacheStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_ContentCacheStatus_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_ContentCacheStatus_Response::MergeFrom(const SiteServerUI_ContentCacheStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cache_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_location_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      p2p_enabled_ = from.p2p_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_size_gb_ = from.max_size_gb_;
    }
    if (cached_has_bits & 0x00000020u) {
      current_size_gb_ = from.current_size_gb_;
    }
    if (cached_has_bits & 0x00000040u) {
      current_bw_ = from.current_bw_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_bytes_served_ = from.total_bytes_served_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteServerUI_ContentCacheStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_ContentCacheStatus_Response::CopyFrom(const SiteServerUI_ContentCacheStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_ContentCacheStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ContentCacheStatus_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_ContentCacheStatus_Response::Swap(SiteServerUI_ContentCacheStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_ContentCacheStatus_Response::InternalSwap(SiteServerUI_ContentCacheStatus_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cache_location_.Swap(&other->cache_location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(enabled_, other->enabled_);
  swap(p2p_enabled_, other->p2p_enabled_);
  swap(max_size_gb_, other->max_size_gb_);
  swap(current_size_gb_, other->current_size_gb_);
  swap(current_bw_, other->current_bw_);
  swap(total_bytes_served_, other->total_bytes_served_);
}

::google::protobuf::Metadata SiteServerUI_ContentCacheStatus_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_ContentCacheConfig_Request::InitAsDefaultInstance() {
}
class SiteServerUI_ContentCacheConfig_Request::HasBitSetters {
 public:
  static void set_has_enabled(SiteServerUI_ContentCacheConfig_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_port(SiteServerUI_ContentCacheConfig_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cache_location(SiteServerUI_ContentCacheConfig_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_max_size_gb(SiteServerUI_ContentCacheConfig_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_p2p_enabled(SiteServerUI_ContentCacheConfig_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SiteServerUI_ContentCacheConfig_Request::kEnabledFieldNumber;
const int SiteServerUI_ContentCacheConfig_Request::kPortFieldNumber;
const int SiteServerUI_ContentCacheConfig_Request::kCacheLocationFieldNumber;
const int SiteServerUI_ContentCacheConfig_Request::kMaxSizeGbFieldNumber;
const int SiteServerUI_ContentCacheConfig_Request::kP2PEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_ContentCacheConfig_Request::SiteServerUI_ContentCacheConfig_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_ContentCacheConfig_Request)
}
SiteServerUI_ContentCacheConfig_Request::SiteServerUI_ContentCacheConfig_Request(const SiteServerUI_ContentCacheConfig_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cache_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_location()) {
    cache_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_location_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_size_gb_) -
    reinterpret_cast<char*>(&port_)) + sizeof(max_size_gb_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_ContentCacheConfig_Request)
}

void SiteServerUI_ContentCacheConfig_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SiteServerUI_ContentCacheConfig_Request_steammessages_5fsiteserverui_2eproto.base);
  cache_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_size_gb_) -
      reinterpret_cast<char*>(&port_)) + sizeof(max_size_gb_));
}

SiteServerUI_ContentCacheConfig_Request::~SiteServerUI_ContentCacheConfig_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  SharedDtor();
}

void SiteServerUI_ContentCacheConfig_Request::SharedDtor() {
  cache_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SiteServerUI_ContentCacheConfig_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_ContentCacheConfig_Request& SiteServerUI_ContentCacheConfig_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_ContentCacheConfig_Request_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_ContentCacheConfig_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cache_location_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_size_gb_) -
        reinterpret_cast<char*>(&port_)) + sizeof(max_size_gb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_ContentCacheConfig_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_ContentCacheConfig_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string cache_location = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.SiteServerUI_ContentCacheConfig_Request.cache_location");
        object = msg->mutable_cache_location();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 max_size_gb = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_size_gb(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool p2p_enabled = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_p2p_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_ContentCacheConfig_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache_location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cache_location().data(), static_cast<int>(this->cache_location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.SiteServerUI_ContentCacheConfig_Request.cache_location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_size_gb = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_max_size_gb(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_gb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool p2p_enabled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_p2p_enabled(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &p2p_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_ContentCacheConfig_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional string cache_location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_location().data(), static_cast<int>(this->cache_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_ContentCacheConfig_Request.cache_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cache_location(), output);
  }

  // optional uint32 max_size_gb = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_size_gb(), output);
  }

  // optional bool p2p_enabled = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->p2p_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_ContentCacheConfig_Request)
}

::google::protobuf::uint8* SiteServerUI_ContentCacheConfig_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional string cache_location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_location().data(), static_cast<int>(this->cache_location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.SiteServerUI_ContentCacheConfig_Request.cache_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cache_location(), target);
  }

  // optional uint32 max_size_gb = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_size_gb(), target);
  }

  // optional bool p2p_enabled = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->p2p_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  return target;
}

size_t SiteServerUI_ContentCacheConfig_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string cache_location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_location());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool p2p_enabled = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 max_size_gb = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_size_gb());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_ContentCacheConfig_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_ContentCacheConfig_Request* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_ContentCacheConfig_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_ContentCacheConfig_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_ContentCacheConfig_Request)
    MergeFrom(*source);
  }
}

void SiteServerUI_ContentCacheConfig_Request::MergeFrom(const SiteServerUI_ContentCacheConfig_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cache_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_location_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      p2p_enabled_ = from.p2p_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_size_gb_ = from.max_size_gb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteServerUI_ContentCacheConfig_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_ContentCacheConfig_Request::CopyFrom(const SiteServerUI_ContentCacheConfig_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_ContentCacheConfig_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ContentCacheConfig_Request::IsInitialized() const {
  return true;
}

void SiteServerUI_ContentCacheConfig_Request::Swap(SiteServerUI_ContentCacheConfig_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_ContentCacheConfig_Request::InternalSwap(SiteServerUI_ContentCacheConfig_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cache_location_.Swap(&other->cache_location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(enabled_, other->enabled_);
  swap(p2p_enabled_, other->p2p_enabled_);
  swap(max_size_gb_, other->max_size_gb_);
}

::google::protobuf::Metadata SiteServerUI_ContentCacheConfig_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SiteServerUI_ContentCacheConfig_Response::InitAsDefaultInstance() {
}
class SiteServerUI_ContentCacheConfig_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SiteServerUI_ContentCacheConfig_Response::SiteServerUI_ContentCacheConfig_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.SiteServerUI_ContentCacheConfig_Response)
}
SiteServerUI_ContentCacheConfig_Response::SiteServerUI_ContentCacheConfig_Response(const SiteServerUI_ContentCacheConfig_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.SiteServerUI_ContentCacheConfig_Response)
}

void SiteServerUI_ContentCacheConfig_Response::SharedCtor() {
}

SiteServerUI_ContentCacheConfig_Response::~SiteServerUI_ContentCacheConfig_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  SharedDtor();
}

void SiteServerUI_ContentCacheConfig_Response::SharedDtor() {
}

void SiteServerUI_ContentCacheConfig_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteServerUI_ContentCacheConfig_Response& SiteServerUI_ContentCacheConfig_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SiteServerUI_ContentCacheConfig_Response_steammessages_5fsiteserverui_2eproto.base);
  return *internal_default_instance();
}


void SiteServerUI_ContentCacheConfig_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteServerUI_ContentCacheConfig_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SiteServerUI_ContentCacheConfig_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteServerUI_ContentCacheConfig_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteServerUI_ContentCacheConfig_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.SiteServerUI_ContentCacheConfig_Response)
}

::google::protobuf::uint8* SiteServerUI_ContentCacheConfig_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  return target;
}

size_t SiteServerUI_ContentCacheConfig_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteServerUI_ContentCacheConfig_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteServerUI_ContentCacheConfig_Response* source =
      ::google::protobuf::DynamicCastToGenerated<SiteServerUI_ContentCacheConfig_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.SiteServerUI_ContentCacheConfig_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.SiteServerUI_ContentCacheConfig_Response)
    MergeFrom(*source);
  }
}

void SiteServerUI_ContentCacheConfig_Response::MergeFrom(const SiteServerUI_ContentCacheConfig_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SiteServerUI_ContentCacheConfig_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteServerUI_ContentCacheConfig_Response::CopyFrom(const SiteServerUI_ContentCacheConfig_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.SiteServerUI_ContentCacheConfig_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteServerUI_ContentCacheConfig_Response::IsInitialized() const {
  return true;
}

void SiteServerUI_ContentCacheConfig_Response::Swap(SiteServerUI_ContentCacheConfig_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SiteServerUI_ContentCacheConfig_Response::InternalSwap(SiteServerUI_ContentCacheConfig_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata SiteServerUI_ContentCacheConfig_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fsiteserverui_2eproto);
  return ::file_level_metadata_steammessages_5fsiteserverui_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_Login_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_Login_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_Login_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_Login_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_Login_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_Login_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_LoginStatus_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_LoginStatus_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_LoginStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_LoginStatus_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_LoginStatus_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_LoginStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_CancelLogin_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_CancelLogin_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_CancelLogin_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_CancelLogin_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_CancelLogin_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_CancelLogin_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_Logout_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_Logout_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_Logout_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_Logout_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_Logout_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_Logout_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_Quit_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_Quit_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_Quit_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_Quit_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_Quit_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_Quit_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_Status_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_Status_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_Status_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_Status_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_Status_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_Status_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_GetLanguage_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_GetLanguage_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_GetLanguage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_GetLanguage_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_GetLanguage_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_GetLanguage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_SetLanguage_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_SetLanguage_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_SetLanguage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_SetLanguage_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_SetLanguage_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_SetLanguage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_ClientStatus_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_ClientStatus_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_ClientStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_ClientStatus_Response_ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_ClientStatus_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_ClientStatus_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_ClientStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_ContentCacheStatus_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_ContentCacheStatus_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_ContentCacheStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_ContentCacheStatus_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_ContentCacheStatus_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_ContentCacheStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_ContentCacheConfig_Request* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_ContentCacheConfig_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_ContentCacheConfig_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::SiteServerUI_ContentCacheConfig_Response* Arena::CreateMaybeMessage< ::proto::steam::SiteServerUI_ContentCacheConfig_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::SiteServerUI_ContentCacheConfig_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
