// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encrypted_app_ticket.proto

#include "encrypted_app_ticket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace proto {
namespace steam {
class EncryptedAppTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncryptedAppTicket> _instance;
} _EncryptedAppTicket_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsEncryptedAppTicket_encrypted_5fapp_5fticket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_EncryptedAppTicket_default_instance_;
    new (ptr) ::proto::steam::EncryptedAppTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::EncryptedAppTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncryptedAppTicket_encrypted_5fapp_5fticket_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncryptedAppTicket_encrypted_5fapp_5fticket_2eproto}, {}};

void InitDefaults_encrypted_5fapp_5fticket_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EncryptedAppTicket_encrypted_5fapp_5fticket_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_encrypted_5fapp_5fticket_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_encrypted_5fapp_5fticket_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_encrypted_5fapp_5fticket_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_encrypted_5fapp_5fticket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::EncryptedAppTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::EncryptedAppTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::EncryptedAppTicket, ticket_version_no_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::EncryptedAppTicket, crc_encryptedticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::EncryptedAppTicket, cb_encrypteduserdata_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::EncryptedAppTicket, cb_encrypted_appownershipticket_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::EncryptedAppTicket, encrypted_ticket_),
  1,
  2,
  3,
  4,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::proto::steam::EncryptedAppTicket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_EncryptedAppTicket_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_encrypted_5fapp_5fticket_2eproto = {
  {}, AddDescriptors_encrypted_5fapp_5fticket_2eproto, "encrypted_app_ticket.proto", schemas,
  file_default_instances, TableStruct_encrypted_5fapp_5fticket_2eproto::offsets,
  file_level_metadata_encrypted_5fapp_5fticket_2eproto, 1, file_level_enum_descriptors_encrypted_5fapp_5fticket_2eproto, file_level_service_descriptors_encrypted_5fapp_5fticket_2eproto,
};

const char descriptor_table_protodef_encrypted_5fapp_5fticket_2eproto[] =
  "\n\032encrypted_app_ticket.proto\022\013proto.stea"
  "m\"\255\001\n\022EncryptedAppTicket\022\031\n\021ticket_versi"
  "on_no\030\001 \001(\r\022\033\n\023crc_encryptedticket\030\002 \001(\r"
  "\022\034\n\024cb_encrypteduserdata\030\003 \001(\r\022\'\n\037cb_enc"
  "rypted_appownershipticket\030\004 \001(\r\022\030\n\020encry"
  "pted_ticket\030\005 \001(\014B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_encrypted_5fapp_5fticket_2eproto = {
  false, InitDefaults_encrypted_5fapp_5fticket_2eproto, 
  descriptor_table_protodef_encrypted_5fapp_5fticket_2eproto,
  "encrypted_app_ticket.proto", &assign_descriptors_table_encrypted_5fapp_5fticket_2eproto, 224,
};

void AddDescriptors_encrypted_5fapp_5fticket_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_encrypted_5fapp_5fticket_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_encrypted_5fapp_5fticket_2eproto = []() { AddDescriptors_encrypted_5fapp_5fticket_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void EncryptedAppTicket::InitAsDefaultInstance() {
}
class EncryptedAppTicket::HasBitSetters {
 public:
  static void set_has_ticket_version_no(EncryptedAppTicket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_crc_encryptedticket(EncryptedAppTicket* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cb_encrypteduserdata(EncryptedAppTicket* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_cb_encrypted_appownershipticket(EncryptedAppTicket* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_encrypted_ticket(EncryptedAppTicket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptedAppTicket::kTicketVersionNoFieldNumber;
const int EncryptedAppTicket::kCrcEncryptedticketFieldNumber;
const int EncryptedAppTicket::kCbEncrypteduserdataFieldNumber;
const int EncryptedAppTicket::kCbEncryptedAppownershipticketFieldNumber;
const int EncryptedAppTicket::kEncryptedTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptedAppTicket::EncryptedAppTicket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.EncryptedAppTicket)
}
EncryptedAppTicket::EncryptedAppTicket(const EncryptedAppTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypted_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypted_ticket()) {
    encrypted_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_ticket_);
  }
  ::memcpy(&ticket_version_no_, &from.ticket_version_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&cb_encrypted_appownershipticket_) -
    reinterpret_cast<char*>(&ticket_version_no_)) + sizeof(cb_encrypted_appownershipticket_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.EncryptedAppTicket)
}

void EncryptedAppTicket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EncryptedAppTicket_encrypted_5fapp_5fticket_2eproto.base);
  encrypted_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ticket_version_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cb_encrypted_appownershipticket_) -
      reinterpret_cast<char*>(&ticket_version_no_)) + sizeof(cb_encrypted_appownershipticket_));
}

EncryptedAppTicket::~EncryptedAppTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.EncryptedAppTicket)
  SharedDtor();
}

void EncryptedAppTicket::SharedDtor() {
  encrypted_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncryptedAppTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptedAppTicket& EncryptedAppTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EncryptedAppTicket_encrypted_5fapp_5fticket_2eproto.base);
  return *internal_default_instance();
}


void EncryptedAppTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.EncryptedAppTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encrypted_ticket_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&ticket_version_no_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cb_encrypted_appownershipticket_) -
        reinterpret_cast<char*>(&ticket_version_no_)) + sizeof(cb_encrypted_appownershipticket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EncryptedAppTicket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EncryptedAppTicket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ticket_version_no = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ticket_version_no(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 crc_encryptedticket = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_crc_encryptedticket(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cb_encrypteduserdata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cb_encrypteduserdata(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cb_encrypted_appownershipticket = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cb_encrypted_appownershipticket(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes encrypted_ticket = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_encrypted_ticket();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EncryptedAppTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.EncryptedAppTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ticket_version_no = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ticket_version_no(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_version_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_encryptedticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_crc_encryptedticket(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_encryptedticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cb_encrypteduserdata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_cb_encrypteduserdata(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_encrypteduserdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cb_encrypted_appownershipticket = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_cb_encrypted_appownershipticket(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_encrypted_appownershipticket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encrypted_ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.EncryptedAppTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.EncryptedAppTicket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EncryptedAppTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.EncryptedAppTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ticket_version_no = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ticket_version_no(), output);
  }

  // optional uint32 crc_encryptedticket = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc_encryptedticket(), output);
  }

  // optional uint32 cb_encrypteduserdata = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cb_encrypteduserdata(), output);
  }

  // optional uint32 cb_encrypted_appownershipticket = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cb_encrypted_appownershipticket(), output);
  }

  // optional bytes encrypted_ticket = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->encrypted_ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.EncryptedAppTicket)
}

::google::protobuf::uint8* EncryptedAppTicket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.EncryptedAppTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ticket_version_no = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ticket_version_no(), target);
  }

  // optional uint32 crc_encryptedticket = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crc_encryptedticket(), target);
  }

  // optional uint32 cb_encrypteduserdata = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cb_encrypteduserdata(), target);
  }

  // optional uint32 cb_encrypted_appownershipticket = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cb_encrypted_appownershipticket(), target);
  }

  // optional bytes encrypted_ticket = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->encrypted_ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.EncryptedAppTicket)
  return target;
}

size_t EncryptedAppTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.EncryptedAppTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes encrypted_ticket = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_ticket());
    }

    // optional uint32 ticket_version_no = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_version_no());
    }

    // optional uint32 crc_encryptedticket = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_encryptedticket());
    }

    // optional uint32 cb_encrypteduserdata = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_encrypteduserdata());
    }

    // optional uint32 cb_encrypted_appownershipticket = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_encrypted_appownershipticket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedAppTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.EncryptedAppTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptedAppTicket* source =
      ::google::protobuf::DynamicCastToGenerated<EncryptedAppTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.EncryptedAppTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.EncryptedAppTicket)
    MergeFrom(*source);
  }
}

void EncryptedAppTicket::MergeFrom(const EncryptedAppTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.EncryptedAppTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encrypted_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      ticket_version_no_ = from.ticket_version_no_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_encryptedticket_ = from.crc_encryptedticket_;
    }
    if (cached_has_bits & 0x00000008u) {
      cb_encrypteduserdata_ = from.cb_encrypteduserdata_;
    }
    if (cached_has_bits & 0x00000010u) {
      cb_encrypted_appownershipticket_ = from.cb_encrypted_appownershipticket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EncryptedAppTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.EncryptedAppTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedAppTicket::CopyFrom(const EncryptedAppTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.EncryptedAppTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedAppTicket::IsInitialized() const {
  return true;
}

void EncryptedAppTicket::Swap(EncryptedAppTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptedAppTicket::InternalSwap(EncryptedAppTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encrypted_ticket_.Swap(&other->encrypted_ticket_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ticket_version_no_, other->ticket_version_no_);
  swap(crc_encryptedticket_, other->crc_encryptedticket_);
  swap(cb_encrypteduserdata_, other->cb_encrypteduserdata_);
  swap(cb_encrypted_appownershipticket_, other->cb_encrypted_appownershipticket_);
}

::google::protobuf::Metadata EncryptedAppTicket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_encrypted_5fapp_5fticket_2eproto);
  return ::file_level_metadata_encrypted_5fapp_5fticket_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::EncryptedAppTicket* Arena::CreateMaybeMessage< ::proto::steam::EncryptedAppTicket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::EncryptedAppTicket >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
