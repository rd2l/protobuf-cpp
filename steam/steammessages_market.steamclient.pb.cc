// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_market.steamclient.proto

#include "steammessages_market.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace proto {
namespace steam {
class CEconMarket_IsMarketplaceAllowed_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEconMarket_IsMarketplaceAllowed_Request> _instance;
} _CEconMarket_IsMarketplaceAllowed_Request_default_instance_;
class CEconMarket_IsMarketplaceAllowed_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEconMarket_IsMarketplaceAllowed_Response> _instance;
} _CEconMarket_IsMarketplaceAllowed_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCEconMarket_IsMarketplaceAllowed_Request_steammessages_5fmarket_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CEconMarket_IsMarketplaceAllowed_Request_default_instance_;
    new (ptr) ::proto::steam::CEconMarket_IsMarketplaceAllowed_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CEconMarket_IsMarketplaceAllowed_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CEconMarket_IsMarketplaceAllowed_Request_steammessages_5fmarket_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCEconMarket_IsMarketplaceAllowed_Request_steammessages_5fmarket_2esteamclient_2eproto}, {}};

static void InitDefaultsCEconMarket_IsMarketplaceAllowed_Response_steammessages_5fmarket_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CEconMarket_IsMarketplaceAllowed_Response_default_instance_;
    new (ptr) ::proto::steam::CEconMarket_IsMarketplaceAllowed_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CEconMarket_IsMarketplaceAllowed_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CEconMarket_IsMarketplaceAllowed_Response_steammessages_5fmarket_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCEconMarket_IsMarketplaceAllowed_Response_steammessages_5fmarket_2esteamclient_2eproto}, {}};

void InitDefaults_steammessages_5fmarket_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CEconMarket_IsMarketplaceAllowed_Request_steammessages_5fmarket_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEconMarket_IsMarketplaceAllowed_Response_steammessages_5fmarket_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fmarket_2esteamclient_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fmarket_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fmarket_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5fmarket_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Request, webcookie_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response, allowed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response, reason_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response, allowed_at_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response, steamguard_required_days_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response, forms_requested_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response, forms_require_verification_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response, new_device_cooldown_days_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::steam::CEconMarket_IsMarketplaceAllowed_Request)},
  { 7, 19, sizeof(::proto::steam::CEconMarket_IsMarketplaceAllowed_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CEconMarket_IsMarketplaceAllowed_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CEconMarket_IsMarketplaceAllowed_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fmarket_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fmarket_2esteamclient_2eproto, "steammessages_market.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fmarket_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fmarket_2esteamclient_2eproto, 2, file_level_enum_descriptors_steammessages_5fmarket_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fmarket_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fmarket_2esteamclient_2eproto[] =
  "\n&steammessages_market.steamclient.proto"
  "\022\013proto.steam\032,steammessages_unified_bas"
  "e.steamclient.proto\"n\n(CEconMarket_IsMar"
  "ketplaceAllowed_Request\022B\n\twebcookie\030\001 \001"
  "(\tB/\202\265\030+The user\'s Steam Guard machine a"
  "uth cookie.\"\365\005\n)CEconMarket_IsMarketplac"
  "eAllowed_Response\022I\n\007allowed\030\001 \001(\010B8\202\265\0304"
  "Whether or not the user is allowed to us"
  "e the market\022K\n\006reason\030\002 \001(\rB;\202\265\0307The re"
  "ason the user can\'t use the market, if a"
  "pplicable\022P\n\017allowed_at_time\030\003 \001(\rB7\202\265\0303"
  "The time the user will be allowed to use"
  " the market\022\204\001\n\030steamguard_required_days"
  "\030\004 \001(\rBb\202\265\030^The number of days any user "
  "is required to have had Steam Guard befo"
  "re they can use the market\022W\n\017forms_requ"
  "ested\030\007 \001(\010B>\202\265\030:Whether or not we\'ve re"
  "quested the user fill out tax forms\022h\n\032f"
  "orms_require_verification\030\010 \001(\010BD\202\265\030@Tru"
  "e if we\'ve received forms but they requi"
  "re verification first\022\223\001\n\030new_device_coo"
  "ldown_days\030\t \001(\rBq\202\265\030mThe number of days"
  " after initial device authorization a us"
  "er must wait before using the market on "
  "that device2\206\002\n\nEconMarket\022\320\001\n\024IsMarketp"
  "laceAllowed\0225.proto.steam.CEconMarket_Is"
  "MarketplaceAllowed_Request\0326.proto.steam"
  ".CEconMarket_IsMarketplaceAllowed_Respon"
  "se\"I\202\265\030EChecks whether or not the authed"
  " account is allowed to use the market\032%\202"
  "\265\030!A service to use market functionsB\003\200\001"
  "\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fmarket_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fmarket_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fmarket_2esteamclient_2eproto,
  "steammessages_market.steamclient.proto", &assign_descriptors_table_steammessages_5fmarket_2esteamclient_2eproto, 1241,
};

void AddDescriptors_steammessages_5fmarket_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fmarket_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fmarket_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fmarket_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CEconMarket_IsMarketplaceAllowed_Request::InitAsDefaultInstance() {
}
class CEconMarket_IsMarketplaceAllowed_Request::HasBitSetters {
 public:
  static void set_has_webcookie(CEconMarket_IsMarketplaceAllowed_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEconMarket_IsMarketplaceAllowed_Request::kWebcookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEconMarket_IsMarketplaceAllowed_Request::CEconMarket_IsMarketplaceAllowed_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
}
CEconMarket_IsMarketplaceAllowed_Request::CEconMarket_IsMarketplaceAllowed_Request(const CEconMarket_IsMarketplaceAllowed_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webcookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webcookie()) {
    webcookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcookie_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
}

void CEconMarket_IsMarketplaceAllowed_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CEconMarket_IsMarketplaceAllowed_Request_steammessages_5fmarket_2esteamclient_2eproto.base);
  webcookie_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CEconMarket_IsMarketplaceAllowed_Request::~CEconMarket_IsMarketplaceAllowed_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  SharedDtor();
}

void CEconMarket_IsMarketplaceAllowed_Request::SharedDtor() {
  webcookie_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CEconMarket_IsMarketplaceAllowed_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEconMarket_IsMarketplaceAllowed_Request& CEconMarket_IsMarketplaceAllowed_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CEconMarket_IsMarketplaceAllowed_Request_steammessages_5fmarket_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CEconMarket_IsMarketplaceAllowed_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    webcookie_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CEconMarket_IsMarketplaceAllowed_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CEconMarket_IsMarketplaceAllowed_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string webcookie = 1 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CEconMarket_IsMarketplaceAllowed_Request.webcookie");
        object = msg->mutable_webcookie();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CEconMarket_IsMarketplaceAllowed_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string webcookie = 1 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webcookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webcookie().data(), static_cast<int>(this->webcookie().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CEconMarket_IsMarketplaceAllowed_Request.webcookie");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CEconMarket_IsMarketplaceAllowed_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string webcookie = 1 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webcookie().data(), static_cast<int>(this->webcookie().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CEconMarket_IsMarketplaceAllowed_Request.webcookie");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->webcookie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
}

::google::protobuf::uint8* CEconMarket_IsMarketplaceAllowed_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string webcookie = 1 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webcookie().data(), static_cast<int>(this->webcookie().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CEconMarket_IsMarketplaceAllowed_Request.webcookie");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->webcookie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  return target;
}

size_t CEconMarket_IsMarketplaceAllowed_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string webcookie = 1 [(.proto.steam.description) = "The user\'s Steam Guard machine auth cookie."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->webcookie());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEconMarket_IsMarketplaceAllowed_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconMarket_IsMarketplaceAllowed_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CEconMarket_IsMarketplaceAllowed_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
    MergeFrom(*source);
  }
}

void CEconMarket_IsMarketplaceAllowed_Request::MergeFrom(const CEconMarket_IsMarketplaceAllowed_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_webcookie()) {
    _has_bits_[0] |= 0x00000001u;
    webcookie_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcookie_);
  }
}

void CEconMarket_IsMarketplaceAllowed_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconMarket_IsMarketplaceAllowed_Request::CopyFrom(const CEconMarket_IsMarketplaceAllowed_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconMarket_IsMarketplaceAllowed_Request::IsInitialized() const {
  return true;
}

void CEconMarket_IsMarketplaceAllowed_Request::Swap(CEconMarket_IsMarketplaceAllowed_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEconMarket_IsMarketplaceAllowed_Request::InternalSwap(CEconMarket_IsMarketplaceAllowed_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  webcookie_.Swap(&other->webcookie_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CEconMarket_IsMarketplaceAllowed_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fmarket_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fmarket_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CEconMarket_IsMarketplaceAllowed_Response::InitAsDefaultInstance() {
}
class CEconMarket_IsMarketplaceAllowed_Response::HasBitSetters {
 public:
  static void set_has_allowed(CEconMarket_IsMarketplaceAllowed_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_reason(CEconMarket_IsMarketplaceAllowed_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_allowed_at_time(CEconMarket_IsMarketplaceAllowed_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamguard_required_days(CEconMarket_IsMarketplaceAllowed_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_forms_requested(CEconMarket_IsMarketplaceAllowed_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_forms_require_verification(CEconMarket_IsMarketplaceAllowed_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_new_device_cooldown_days(CEconMarket_IsMarketplaceAllowed_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEconMarket_IsMarketplaceAllowed_Response::kAllowedFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kReasonFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kAllowedAtTimeFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kSteamguardRequiredDaysFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kFormsRequestedFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kFormsRequireVerificationFieldNumber;
const int CEconMarket_IsMarketplaceAllowed_Response::kNewDeviceCooldownDaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEconMarket_IsMarketplaceAllowed_Response::CEconMarket_IsMarketplaceAllowed_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
}
CEconMarket_IsMarketplaceAllowed_Response::CEconMarket_IsMarketplaceAllowed_Response(const CEconMarket_IsMarketplaceAllowed_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_device_cooldown_days_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(new_device_cooldown_days_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
}

void CEconMarket_IsMarketplaceAllowed_Response::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_device_cooldown_days_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(new_device_cooldown_days_));
}

CEconMarket_IsMarketplaceAllowed_Response::~CEconMarket_IsMarketplaceAllowed_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  SharedDtor();
}

void CEconMarket_IsMarketplaceAllowed_Response::SharedDtor() {
}

void CEconMarket_IsMarketplaceAllowed_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEconMarket_IsMarketplaceAllowed_Response& CEconMarket_IsMarketplaceAllowed_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CEconMarket_IsMarketplaceAllowed_Response_steammessages_5fmarket_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CEconMarket_IsMarketplaceAllowed_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_device_cooldown_days_) -
        reinterpret_cast<char*>(&reason_)) + sizeof(new_device_cooldown_days_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CEconMarket_IsMarketplaceAllowed_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CEconMarket_IsMarketplaceAllowed_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool allowed = 1 [(.proto.steam.description) = "Whether or not the user is allowed to use the market"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_allowed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 reason = 2 [(.proto.steam.description) = "The reason the user can\'t use the market, if applicable"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_reason(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 allowed_at_time = 3 [(.proto.steam.description) = "The time the user will be allowed to use the market"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_allowed_at_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 steamguard_required_days = 4 [(.proto.steam.description) = "The number of days any user is required to have had Steam Guard before they can use the market"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_steamguard_required_days(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool forms_requested = 7 [(.proto.steam.description) = "Whether or not we\'ve requested the user fill out tax forms"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_forms_requested(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool forms_require_verification = 8 [(.proto.steam.description) = "True if we\'ve received forms but they require verification first"];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_forms_require_verification(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 new_device_cooldown_days = 9 [(.proto.steam.description) = "The number of days after initial device authorization a user must wait before using the market on that device"];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_new_device_cooldown_days(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CEconMarket_IsMarketplaceAllowed_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allowed = 1 [(.proto.steam.description) = "Whether or not the user is allowed to use the market"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_allowed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 2 [(.proto.steam.description) = "The reason the user can\'t use the market, if applicable"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_reason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 allowed_at_time = 3 [(.proto.steam.description) = "The time the user will be allowed to use the market"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_allowed_at_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allowed_at_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steamguard_required_days = 4 [(.proto.steam.description) = "The number of days any user is required to have had Steam Guard before they can use the market"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_steamguard_required_days(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_required_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool forms_requested = 7 [(.proto.steam.description) = "Whether or not we\'ve requested the user fill out tax forms"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_forms_requested(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forms_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool forms_require_verification = 8 [(.proto.steam.description) = "True if we\'ve received forms but they require verification first"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_forms_require_verification(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forms_require_verification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_device_cooldown_days = 9 [(.proto.steam.description) = "The number of days after initial device authorization a user must wait before using the market on that device"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_new_device_cooldown_days(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_device_cooldown_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CEconMarket_IsMarketplaceAllowed_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allowed = 1 [(.proto.steam.description) = "Whether or not the user is allowed to use the market"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allowed(), output);
  }

  // optional uint32 reason = 2 [(.proto.steam.description) = "The reason the user can\'t use the market, if applicable"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional uint32 allowed_at_time = 3 [(.proto.steam.description) = "The time the user will be allowed to use the market"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allowed_at_time(), output);
  }

  // optional uint32 steamguard_required_days = 4 [(.proto.steam.description) = "The number of days any user is required to have had Steam Guard before they can use the market"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->steamguard_required_days(), output);
  }

  // optional bool forms_requested = 7 [(.proto.steam.description) = "Whether or not we\'ve requested the user fill out tax forms"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->forms_requested(), output);
  }

  // optional bool forms_require_verification = 8 [(.proto.steam.description) = "True if we\'ve received forms but they require verification first"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->forms_require_verification(), output);
  }

  // optional uint32 new_device_cooldown_days = 9 [(.proto.steam.description) = "The number of days after initial device authorization a user must wait before using the market on that device"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_device_cooldown_days(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
}

::google::protobuf::uint8* CEconMarket_IsMarketplaceAllowed_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool allowed = 1 [(.proto.steam.description) = "Whether or not the user is allowed to use the market"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allowed(), target);
  }

  // optional uint32 reason = 2 [(.proto.steam.description) = "The reason the user can\'t use the market, if applicable"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  // optional uint32 allowed_at_time = 3 [(.proto.steam.description) = "The time the user will be allowed to use the market"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->allowed_at_time(), target);
  }

  // optional uint32 steamguard_required_days = 4 [(.proto.steam.description) = "The number of days any user is required to have had Steam Guard before they can use the market"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->steamguard_required_days(), target);
  }

  // optional bool forms_requested = 7 [(.proto.steam.description) = "Whether or not we\'ve requested the user fill out tax forms"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->forms_requested(), target);
  }

  // optional bool forms_require_verification = 8 [(.proto.steam.description) = "True if we\'ve received forms but they require verification first"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->forms_require_verification(), target);
  }

  // optional uint32 new_device_cooldown_days = 9 [(.proto.steam.description) = "The number of days after initial device authorization a user must wait before using the market on that device"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_device_cooldown_days(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  return target;
}

size_t CEconMarket_IsMarketplaceAllowed_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 reason = 2 [(.proto.steam.description) = "The reason the user can\'t use the market, if applicable"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 allowed_at_time = 3 [(.proto.steam.description) = "The time the user will be allowed to use the market"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allowed_at_time());
    }

    // optional uint32 steamguard_required_days = 4 [(.proto.steam.description) = "The number of days any user is required to have had Steam Guard before they can use the market"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_required_days());
    }

    // optional bool allowed = 1 [(.proto.steam.description) = "Whether or not the user is allowed to use the market"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool forms_requested = 7 [(.proto.steam.description) = "Whether or not we\'ve requested the user fill out tax forms"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool forms_require_verification = 8 [(.proto.steam.description) = "True if we\'ve received forms but they require verification first"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 new_device_cooldown_days = 9 [(.proto.steam.description) = "The number of days after initial device authorization a user must wait before using the market on that device"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_device_cooldown_days());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEconMarket_IsMarketplaceAllowed_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CEconMarket_IsMarketplaceAllowed_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CEconMarket_IsMarketplaceAllowed_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
    MergeFrom(*source);
  }
}

void CEconMarket_IsMarketplaceAllowed_Response::MergeFrom(const CEconMarket_IsMarketplaceAllowed_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000002u) {
      allowed_at_time_ = from.allowed_at_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamguard_required_days_ = from.steamguard_required_days_;
    }
    if (cached_has_bits & 0x00000008u) {
      allowed_ = from.allowed_;
    }
    if (cached_has_bits & 0x00000010u) {
      forms_requested_ = from.forms_requested_;
    }
    if (cached_has_bits & 0x00000020u) {
      forms_require_verification_ = from.forms_require_verification_;
    }
    if (cached_has_bits & 0x00000040u) {
      new_device_cooldown_days_ = from.new_device_cooldown_days_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEconMarket_IsMarketplaceAllowed_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEconMarket_IsMarketplaceAllowed_Response::CopyFrom(const CEconMarket_IsMarketplaceAllowed_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CEconMarket_IsMarketplaceAllowed_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconMarket_IsMarketplaceAllowed_Response::IsInitialized() const {
  return true;
}

void CEconMarket_IsMarketplaceAllowed_Response::Swap(CEconMarket_IsMarketplaceAllowed_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEconMarket_IsMarketplaceAllowed_Response::InternalSwap(CEconMarket_IsMarketplaceAllowed_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reason_, other->reason_);
  swap(allowed_at_time_, other->allowed_at_time_);
  swap(steamguard_required_days_, other->steamguard_required_days_);
  swap(allowed_, other->allowed_);
  swap(forms_requested_, other->forms_requested_);
  swap(forms_require_verification_, other->forms_require_verification_);
  swap(new_device_cooldown_days_, other->new_device_cooldown_days_);
}

::google::protobuf::Metadata CEconMarket_IsMarketplaceAllowed_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fmarket_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fmarket_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

EconMarket::~EconMarket() {}

const ::google::protobuf::ServiceDescriptor* EconMarket::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fmarket_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fmarket_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* EconMarket::GetDescriptor() {
  return descriptor();
}

void EconMarket::IsMarketplaceAllowed(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CEconMarket_IsMarketplaceAllowed_Request*,
                         ::proto::steam::CEconMarket_IsMarketplaceAllowed_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IsMarketplaceAllowed() not implemented.");
  done->Run();
}

void EconMarket::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fmarket_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      IsMarketplaceAllowed(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CEconMarket_IsMarketplaceAllowed_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CEconMarket_IsMarketplaceAllowed_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& EconMarket::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CEconMarket_IsMarketplaceAllowed_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& EconMarket::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CEconMarket_IsMarketplaceAllowed_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

EconMarket_Stub::EconMarket_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EconMarket_Stub::EconMarket_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
EconMarket_Stub::~EconMarket_Stub() {
  if (owns_channel_) delete channel_;
}

void EconMarket_Stub::IsMarketplaceAllowed(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CEconMarket_IsMarketplaceAllowed_Request* request,
                              ::proto::steam::CEconMarket_IsMarketplaceAllowed_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CEconMarket_IsMarketplaceAllowed_Request* Arena::CreateMaybeMessage< ::proto::steam::CEconMarket_IsMarketplaceAllowed_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CEconMarket_IsMarketplaceAllowed_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CEconMarket_IsMarketplaceAllowed_Response* Arena::CreateMaybeMessage< ::proto::steam::CEconMarket_IsMarketplaceAllowed_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CEconMarket_IsMarketplaceAllowed_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
