// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gameservers.steamclient.proto

#include "steammessages_gameservers.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fgameservers_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGameServers_GetServerList_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fgameservers_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGameServers_IPsWithSteamIDs_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CGameServers_GetServerList_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerList_Request> _instance;
} _CGameServers_GetServerList_Request_default_instance_;
class CGameServers_GetServerList_Response_ServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerList_Response_Server> _instance;
} _CGameServers_GetServerList_Response_Server_default_instance_;
class CGameServers_GetServerList_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerList_Response> _instance;
} _CGameServers_GetServerList_Response_default_instance_;
class CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerSteamIDsByIP_Request> _instance;
} _CGameServers_GetServerSteamIDsByIP_Request_default_instance_;
class CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_IPsWithSteamIDs_Response_Server> _instance;
} _CGameServers_IPsWithSteamIDs_Response_Server_default_instance_;
class CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_IPsWithSteamIDs_Response> _instance;
} _CGameServers_IPsWithSteamIDs_Response_default_instance_;
class CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerIPsBySteamID_Request> _instance;
} _CGameServers_GetServerIPsBySteamID_Request_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCGameServers_GetServerList_Request_steammessages_5fgameservers_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CGameServers_GetServerList_Request_default_instance_;
    new (ptr) ::proto::steam::CGameServers_GetServerList_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CGameServers_GetServerList_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameServers_GetServerList_Request_steammessages_5fgameservers_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameServers_GetServerList_Request_steammessages_5fgameservers_2esteamclient_2eproto}, {}};

static void InitDefaultsCGameServers_GetServerList_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CGameServers_GetServerList_Response_Server_default_instance_;
    new (ptr) ::proto::steam::CGameServers_GetServerList_Response_Server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CGameServers_GetServerList_Response_Server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameServers_GetServerList_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameServers_GetServerList_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto}, {}};

static void InitDefaultsCGameServers_GetServerList_Response_steammessages_5fgameservers_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CGameServers_GetServerList_Response_default_instance_;
    new (ptr) ::proto::steam::CGameServers_GetServerList_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CGameServers_GetServerList_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameServers_GetServerList_Response_steammessages_5fgameservers_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameServers_GetServerList_Response_steammessages_5fgameservers_2esteamclient_2eproto}, {
      &scc_info_CGameServers_GetServerList_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto.base,}};

static void InitDefaultsCGameServers_GetServerSteamIDsByIP_Request_steammessages_5fgameservers_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CGameServers_GetServerSteamIDsByIP_Request_default_instance_;
    new (ptr) ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameServers_GetServerSteamIDsByIP_Request_steammessages_5fgameservers_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameServers_GetServerSteamIDsByIP_Request_steammessages_5fgameservers_2esteamclient_2eproto}, {}};

static void InitDefaultsCGameServers_IPsWithSteamIDs_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CGameServers_IPsWithSteamIDs_Response_Server_default_instance_;
    new (ptr) ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameServers_IPsWithSteamIDs_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameServers_IPsWithSteamIDs_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto}, {}};

static void InitDefaultsCGameServers_IPsWithSteamIDs_Response_steammessages_5fgameservers_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CGameServers_IPsWithSteamIDs_Response_default_instance_;
    new (ptr) ::proto::steam::CGameServers_IPsWithSteamIDs_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CGameServers_IPsWithSteamIDs_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CGameServers_IPsWithSteamIDs_Response_steammessages_5fgameservers_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCGameServers_IPsWithSteamIDs_Response_steammessages_5fgameservers_2esteamclient_2eproto}, {
      &scc_info_CGameServers_IPsWithSteamIDs_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto.base,}};

static void InitDefaultsCGameServers_GetServerIPsBySteamID_Request_steammessages_5fgameservers_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CGameServers_GetServerIPsBySteamID_Request_default_instance_;
    new (ptr) ::proto::steam::CGameServers_GetServerIPsBySteamID_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CGameServers_GetServerIPsBySteamID_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGameServers_GetServerIPsBySteamID_Request_steammessages_5fgameservers_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGameServers_GetServerIPsBySteamID_Request_steammessages_5fgameservers_2esteamclient_2eproto}, {}};

void InitDefaults_steammessages_5fgameservers_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CGameServers_GetServerList_Request_steammessages_5fgameservers_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameServers_GetServerList_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameServers_GetServerList_Response_steammessages_5fgameservers_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameServers_GetServerSteamIDsByIP_Request_steammessages_5fgameservers_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameServers_IPsWithSteamIDs_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameServers_IPsWithSteamIDs_Response_steammessages_5fgameservers_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CGameServers_GetServerIPsBySteamID_Request_steammessages_5fgameservers_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fgameservers_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5fgameservers_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Request, filter_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Request, limit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, addr_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, gameport_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, specport_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, gamedir_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, version_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, product_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, region_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, players_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, max_players_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, bots_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, map_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, secure_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, dedicated_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, os_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response_Server, gametype_),
  0,
  8,
  9,
  10,
  1,
  11,
  2,
  3,
  4,
  12,
  13,
  14,
  15,
  5,
  16,
  17,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerList_Response, servers_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerSteamIDsByIP_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerSteamIDsByIP_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerSteamIDsByIP_Request, server_ips_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server, addr_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server, steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_IPsWithSteamIDs_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_IPsWithSteamIDs_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_IPsWithSteamIDs_Response, servers_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerIPsBySteamID_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerIPsBySteamID_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CGameServers_GetServerIPsBySteamID_Request, server_steamids_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::steam::CGameServers_GetServerList_Request)},
  { 9, 32, sizeof(::proto::steam::CGameServers_GetServerList_Response_Server)},
  { 50, 56, sizeof(::proto::steam::CGameServers_GetServerList_Response)},
  { 57, 63, sizeof(::proto::steam::CGameServers_GetServerSteamIDsByIP_Request)},
  { 64, 71, sizeof(::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server)},
  { 73, 79, sizeof(::proto::steam::CGameServers_IPsWithSteamIDs_Response)},
  { 80, 86, sizeof(::proto::steam::CGameServers_GetServerIPsBySteamID_Request)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CGameServers_GetServerList_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CGameServers_GetServerList_Response_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CGameServers_GetServerList_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CGameServers_GetServerSteamIDsByIP_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CGameServers_IPsWithSteamIDs_Response_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CGameServers_IPsWithSteamIDs_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CGameServers_GetServerIPsBySteamID_Request_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fgameservers_2esteamclient_2eproto, "steammessages_gameservers.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fgameservers_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto, 7, file_level_enum_descriptors_steammessages_5fgameservers_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fgameservers_2esteamclient_2eproto[] =
  "\n+steammessages_gameservers.steamclient."
  "proto\022\013proto.steam\032,steammessages_unifie"
  "d_base.steamclient.proto\"\237\001\n\"CGameServer"
  "s_GetServerList_Request\022(\n\006filter\030\001 \001(\tB"
  "\030\202\265\030\024Query filter string.\022O\n\005limit\030\002 \001(\r"
  ":\003100B;\202\265\0307The maximum number of servers"
  " to return in the response\"\354\003\n#CGameServ"
  "ers_GetServerList_Response\022q\n\007servers\030\001 "
  "\003(\01327.proto.steam.CGameServers_GetServer"
  "List_Response.ServerB\'\202\265\030#List of server"
  "s matching the filter\032\321\002\n\006Server\0220\n\004addr"
  "\030\001 \001(\tB\"\202\265\030\036The server\'s IP and query po"
  "rt\022\020\n\010gameport\030\002 \001(\r\022\020\n\010specport\030\003 \001(\r\022\017"
  "\n\007steamid\030\004 \001(\006\022\014\n\004name\030\005 \001(\t\022\r\n\005appid\030\006"
  " \001(\r\022\017\n\007gamedir\030\007 \001(\t\022\017\n\007version\030\010 \001(\t\022\017"
  "\n\007product\030\t \001(\t\022\016\n\006region\030\n \001(\005\022\017\n\007playe"
  "rs\030\013 \001(\005\022\023\n\013max_players\030\014 \001(\005\022\014\n\004bots\030\r "
  "\001(\005\022\013\n\003map\030\016 \001(\t\022\016\n\006secure\030\017 \001(\010\022\021\n\tdedi"
  "cated\030\020 \001(\010\022\n\n\002os\030\021 \001(\t\022\020\n\010gametype\030\022 \001("
  "\t\"@\n*CGameServers_GetServerSteamIDsByIP_"
  "Request\022\022\n\nserver_ips\030\001 \003(\t\"\234\001\n%CGameSer"
  "vers_IPsWithSteamIDs_Response\022J\n\007servers"
  "\030\001 \003(\01329.proto.steam.CGameServers_IPsWit"
  "hSteamIDs_Response.Server\032\'\n\006Server\022\014\n\004a"
  "ddr\030\001 \001(\t\022\017\n\007steamid\030\002 \001(\006\"E\n*CGameServe"
  "rs_GetServerIPsBySteamID_Request\022\027\n\017serv"
  "er_steamids\030\001 \003(\0062\363\004\n\013GameServers\022\244\001\n\rGe"
  "tServerList\022/.proto.steam.CGameServers_G"
  "etServerList_Request\0320.proto.steam.CGame"
  "Servers_GetServerList_Response\"0\202\265\030,Gets"
  " a list of servers given a filter string"
  "\022\274\001\n\025GetServerSteamIDsByIP\0227.proto.steam"
  ".CGameServers_GetServerSteamIDsByIP_Requ"
  "est\0322.proto.steam.CGameServers_IPsWithSt"
  "eamIDs_Response\"6\202\265\0302Gets a list of serv"
  "er SteamIDs given a list of IPs\022\305\001\n\025GetS"
  "erverIPsBySteamID\0227.proto.steam.CGameSer"
  "vers_GetServerIPsBySteamID_Request\0322.pro"
  "to.steam.CGameServers_IPsWithSteamIDs_Re"
  "sponse\"\?\202\265\030;Gets a list of server IP add"
  "resses given a list of SteamIDs\0326\202\265\0302A s"
  "ervice for searching and managing game s"
  "ervers.B\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fgameservers_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fgameservers_2esteamclient_2eproto,
  "steammessages_gameservers.steamclient.proto", &assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto, 1692,
};

void AddDescriptors_steammessages_5fgameservers_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fgameservers_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fgameservers_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fgameservers_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CGameServers_GetServerList_Request::InitAsDefaultInstance() {
}
class CGameServers_GetServerList_Request::HasBitSetters {
 public:
  static void set_has_filter(CGameServers_GetServerList_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_limit(CGameServers_GetServerList_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerList_Request::kFilterFieldNumber;
const int CGameServers_GetServerList_Request::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerList_Request::CGameServers_GetServerList_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerList_Request)
}
CGameServers_GetServerList_Request::CGameServers_GetServerList_Request(const CGameServers_GetServerList_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filter()) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerList_Request)
}

void CGameServers_GetServerList_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGameServers_GetServerList_Request_steammessages_5fgameservers_2esteamclient_2eproto.base);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 100u;
}

CGameServers_GetServerList_Request::~CGameServers_GetServerList_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerList_Request)
  SharedDtor();
}

void CGameServers_GetServerList_Request::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameServers_GetServerList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameServers_GetServerList_Request& CGameServers_GetServerList_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameServers_GetServerList_Request_steammessages_5fgameservers_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CGameServers_GetServerList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filter_.ClearNonDefaultToEmptyNoArena();
    }
    limit_ = 100u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameServers_GetServerList_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameServers_GetServerList_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerList_Request.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameServers_GetServerList_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerList_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Request.filter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerList_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerList_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameServers_GetServerList_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Request.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filter(), output);
  }

  // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerList_Request)
}

::google::protobuf::uint8* CGameServers_GetServerList_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Request.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filter(), target);
  }

  // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerList_Request)
  return target;
}

size_t CGameServers_GetServerList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerList_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

    // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameServers_GetServerList_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerList_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CGameServers_GetServerList_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerList_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerList_Request)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerList_Request::MergeFrom(const CGameServers_GetServerList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
    if (cached_has_bits & 0x00000002u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameServers_GetServerList_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerList_Request::CopyFrom(const CGameServers_GetServerList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerList_Request::IsInitialized() const {
  return true;
}

void CGameServers_GetServerList_Request::Swap(CGameServers_GetServerList_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerList_Request::InternalSwap(CGameServers_GetServerList_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata CGameServers_GetServerList_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameServers_GetServerList_Response_Server::InitAsDefaultInstance() {
}
class CGameServers_GetServerList_Response_Server::HasBitSetters {
 public:
  static void set_has_addr(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gameport(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_specport(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_steamid(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_name(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_appid(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_gamedir(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_version(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_product(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_region(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_players(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_max_players(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_bots(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_map(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_secure(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_dedicated(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_os(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_gametype(CGameServers_GetServerList_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerList_Response_Server::kAddrFieldNumber;
const int CGameServers_GetServerList_Response_Server::kGameportFieldNumber;
const int CGameServers_GetServerList_Response_Server::kSpecportFieldNumber;
const int CGameServers_GetServerList_Response_Server::kSteamidFieldNumber;
const int CGameServers_GetServerList_Response_Server::kNameFieldNumber;
const int CGameServers_GetServerList_Response_Server::kAppidFieldNumber;
const int CGameServers_GetServerList_Response_Server::kGamedirFieldNumber;
const int CGameServers_GetServerList_Response_Server::kVersionFieldNumber;
const int CGameServers_GetServerList_Response_Server::kProductFieldNumber;
const int CGameServers_GetServerList_Response_Server::kRegionFieldNumber;
const int CGameServers_GetServerList_Response_Server::kPlayersFieldNumber;
const int CGameServers_GetServerList_Response_Server::kMaxPlayersFieldNumber;
const int CGameServers_GetServerList_Response_Server::kBotsFieldNumber;
const int CGameServers_GetServerList_Response_Server::kMapFieldNumber;
const int CGameServers_GetServerList_Response_Server::kSecureFieldNumber;
const int CGameServers_GetServerList_Response_Server::kDedicatedFieldNumber;
const int CGameServers_GetServerList_Response_Server::kOsFieldNumber;
const int CGameServers_GetServerList_Response_Server::kGametypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerList_Response_Server::CGameServers_GetServerList_Response_Server()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerList_Response.Server)
}
CGameServers_GetServerList_Response_Server::CGameServers_GetServerList_Response_Server(const CGameServers_GetServerList_Response_Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  gamedir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gamedir()) {
    gamedir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamedir_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product()) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os()) {
    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  gametype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gametype()) {
    gametype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gametype_);
  }
  ::memcpy(&gameport_, &from.gameport_,
    static_cast<size_t>(reinterpret_cast<char*>(&dedicated_) -
    reinterpret_cast<char*>(&gameport_)) + sizeof(dedicated_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerList_Response.Server)
}

void CGameServers_GetServerList_Response_Server::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGameServers_GetServerList_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto.base);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamedir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dedicated_) -
      reinterpret_cast<char*>(&gameport_)) + sizeof(dedicated_));
}

CGameServers_GetServerList_Response_Server::~CGameServers_GetServerList_Response_Server() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerList_Response.Server)
  SharedDtor();
}

void CGameServers_GetServerList_Response_Server::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamedir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameServers_GetServerList_Response_Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameServers_GetServerList_Response_Server& CGameServers_GetServerList_Response_Server::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameServers_GetServerList_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CGameServers_GetServerList_Response_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerList_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      addr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      gamedir_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      product_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      map_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      os_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      gametype_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&gameport_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bots_) -
        reinterpret_cast<char*>(&gameport_)) + sizeof(bots_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&secure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dedicated_) -
        reinterpret_cast<char*>(&secure_)) + sizeof(dedicated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameServers_GetServerList_Response_Server::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameServers_GetServerList_Response_Server*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerList_Response.Server.addr");
        object = msg->mutable_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 gameport = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_gameport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 specport = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_specport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steamid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerList_Response.Server.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 appid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string gamedir = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerList_Response.Server.gamedir");
        object = msg->mutable_gamedir();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string version = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerList_Response.Server.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string product = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerList_Response.Server.product");
        object = msg->mutable_product();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 region = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_region(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 players = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 max_players = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_max_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 bots = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_bots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string map = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerList_Response.Server.map");
        object = msg->mutable_map();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool secure = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_secure(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool dedicated = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_dedicated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string os = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerList_Response.Server.os");
        object = msg->mutable_os();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string gametype = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerList_Response.Server.gametype");
        object = msg->mutable_gametype();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameServers_GetServerList_Response_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerList_Response.Server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameport = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_gameport(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 specport = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_specport(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gamedir = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamedir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamedir().data(), static_cast<int>(this->gamedir().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.gamedir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), static_cast<int>(this->product().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.product");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 region = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_region(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 players = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_players = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_max_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bots = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_bots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), static_cast<int>(this->map().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool secure = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_secure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dedicated = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_dedicated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dedicated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), static_cast<int>(this->os().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.os");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gametype = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gametype().data(), static_cast<int>(this->gametype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.gametype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerList_Response.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerList_Response.Server)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameServers_GetServerList_Response_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerList_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // optional uint32 gameport = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameport(), output);
  }

  // optional uint32 specport = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->specport(), output);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid(), output);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->appid(), output);
  }

  // optional string gamedir = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamedir().data(), static_cast<int>(this->gamedir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.gamedir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gamedir(), output);
  }

  // optional string version = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->version(), output);
  }

  // optional string product = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->product(), output);
  }

  // optional int32 region = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->region(), output);
  }

  // optional int32 players = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->players(), output);
  }

  // optional int32 max_players = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->max_players(), output);
  }

  // optional int32 bots = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bots(), output);
  }

  // optional string map = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->map(), output);
  }

  // optional bool secure = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->secure(), output);
  }

  // optional bool dedicated = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->dedicated(), output);
  }

  // optional string os = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), static_cast<int>(this->os().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->os(), output);
  }

  // optional string gametype = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gametype().data(), static_cast<int>(this->gametype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.gametype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->gametype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerList_Response.Server)
}

::google::protobuf::uint8* CGameServers_GetServerList_Response_Server::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerList_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // optional uint32 gameport = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameport(), target);
  }

  // optional uint32 specport = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->specport(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steamid(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->appid(), target);
  }

  // optional string gamedir = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamedir().data(), static_cast<int>(this->gamedir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.gamedir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gamedir(), target);
  }

  // optional string version = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->version(), target);
  }

  // optional string product = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->product(), target);
  }

  // optional int32 region = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->region(), target);
  }

  // optional int32 players = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->players(), target);
  }

  // optional int32 max_players = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->max_players(), target);
  }

  // optional int32 bots = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bots(), target);
  }

  // optional string map = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), static_cast<int>(this->map().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->map(), target);
  }

  // optional bool secure = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->secure(), target);
  }

  // optional bool dedicated = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->dedicated(), target);
  }

  // optional string os = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), static_cast<int>(this->os().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->os(), target);
  }

  // optional string gametype = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gametype().data(), static_cast<int>(this->gametype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.gametype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->gametype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerList_Response.Server)
  return target;
}

size_t CGameServers_GetServerList_Response_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerList_Response.Server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional string name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string gamedir = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamedir());
    }

    // optional string version = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string product = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional string map = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional string os = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string gametype = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 gameport = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameport());
    }

    // optional uint32 specport = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specport());
    }

    // optional fixed64 steamid = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional int32 region = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }

    // optional int32 players = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->players());
    }

    // optional int32 max_players = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_players());
    }

    // optional int32 bots = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bots());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool secure = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool dedicated = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameServers_GetServerList_Response_Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerList_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerList_Response_Server* source =
      ::google::protobuf::DynamicCastToGenerated<CGameServers_GetServerList_Response_Server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerList_Response.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerList_Response.Server)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerList_Response_Server::MergeFrom(const CGameServers_GetServerList_Response_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerList_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      gamedir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamedir_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      gametype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gametype_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      gameport_ = from.gameport_;
    }
    if (cached_has_bits & 0x00000200u) {
      specport_ = from.specport_;
    }
    if (cached_has_bits & 0x00000400u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000800u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00001000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00002000u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_players_ = from.max_players_;
    }
    if (cached_has_bits & 0x00008000u) {
      bots_ = from.bots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      secure_ = from.secure_;
    }
    if (cached_has_bits & 0x00020000u) {
      dedicated_ = from.dedicated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameServers_GetServerList_Response_Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerList_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerList_Response_Server::CopyFrom(const CGameServers_GetServerList_Response_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerList_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerList_Response_Server::IsInitialized() const {
  return true;
}

void CGameServers_GetServerList_Response_Server::Swap(CGameServers_GetServerList_Response_Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerList_Response_Server::InternalSwap(CGameServers_GetServerList_Response_Server* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gamedir_.Swap(&other->gamedir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_.Swap(&other->product_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_.Swap(&other->map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_.Swap(&other->os_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gametype_.Swap(&other->gametype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameport_, other->gameport_);
  swap(specport_, other->specport_);
  swap(steamid_, other->steamid_);
  swap(appid_, other->appid_);
  swap(region_, other->region_);
  swap(players_, other->players_);
  swap(max_players_, other->max_players_);
  swap(bots_, other->bots_);
  swap(secure_, other->secure_);
  swap(dedicated_, other->dedicated_);
}

::google::protobuf::Metadata CGameServers_GetServerList_Response_Server::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameServers_GetServerList_Response::InitAsDefaultInstance() {
}
class CGameServers_GetServerList_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerList_Response::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerList_Response::CGameServers_GetServerList_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerList_Response)
}
CGameServers_GetServerList_Response::CGameServers_GetServerList_Response(const CGameServers_GetServerList_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerList_Response)
}

void CGameServers_GetServerList_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGameServers_GetServerList_Response_steammessages_5fgameservers_2esteamclient_2eproto.base);
}

CGameServers_GetServerList_Response::~CGameServers_GetServerList_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerList_Response)
  SharedDtor();
}

void CGameServers_GetServerList_Response::SharedDtor() {
}

void CGameServers_GetServerList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameServers_GetServerList_Response& CGameServers_GetServerList_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameServers_GetServerList_Response_steammessages_5fgameservers_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CGameServers_GetServerList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameServers_GetServerList_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameServers_GetServerList_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CGameServers_GetServerList_Response_Server::_InternalParse;
          object = msg->add_servers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameServers_GetServerList_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerList_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerList_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerList_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameServers_GetServerList_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->servers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerList_Response)
}

::google::protobuf::uint8* CGameServers_GetServerList_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerList_Response)
  return target;
}

size_t CGameServers_GetServerList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerList_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameServers_GetServerList_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerList_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CGameServers_GetServerList_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerList_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerList_Response)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerList_Response::MergeFrom(const CGameServers_GetServerList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CGameServers_GetServerList_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerList_Response::CopyFrom(const CGameServers_GetServerList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerList_Response::IsInitialized() const {
  return true;
}

void CGameServers_GetServerList_Response::Swap(CGameServers_GetServerList_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerList_Response::InternalSwap(CGameServers_GetServerList_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&servers_)->InternalSwap(CastToBase(&other->servers_));
}

::google::protobuf::Metadata CGameServers_GetServerList_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameServers_GetServerSteamIDsByIP_Request::InitAsDefaultInstance() {
}
class CGameServers_GetServerSteamIDsByIP_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerSteamIDsByIP_Request::kServerIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerSteamIDsByIP_Request::CGameServers_GetServerSteamIDsByIP_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
}
CGameServers_GetServerSteamIDsByIP_Request::CGameServers_GetServerSteamIDsByIP_Request(const CGameServers_GetServerSteamIDsByIP_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      server_ips_(from.server_ips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
}

void CGameServers_GetServerSteamIDsByIP_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGameServers_GetServerSteamIDsByIP_Request_steammessages_5fgameservers_2esteamclient_2eproto.base);
}

CGameServers_GetServerSteamIDsByIP_Request::~CGameServers_GetServerSteamIDsByIP_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  SharedDtor();
}

void CGameServers_GetServerSteamIDsByIP_Request::SharedDtor() {
}

void CGameServers_GetServerSteamIDsByIP_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameServers_GetServerSteamIDsByIP_Request& CGameServers_GetServerSteamIDsByIP_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameServers_GetServerSteamIDsByIP_Request_steammessages_5fgameservers_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CGameServers_GetServerSteamIDsByIP_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_ips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameServers_GetServerSteamIDsByIP_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameServers_GetServerSteamIDsByIP_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string server_ips = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips");
          object = msg->add_server_ips();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameServers_GetServerSteamIDsByIP_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string server_ips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_server_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ips(this->server_ips_size() - 1).data(),
            static_cast<int>(this->server_ips(this->server_ips_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameServers_GetServerSteamIDsByIP_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string server_ips = 1;
  for (int i = 0, n = this->server_ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ips(i).data(), static_cast<int>(this->server_ips(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
}

::google::protobuf::uint8* CGameServers_GetServerSteamIDsByIP_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string server_ips = 1;
  for (int i = 0, n = this->server_ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ips(i).data(), static_cast<int>(this->server_ips(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->server_ips(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  return target;
}

size_t CGameServers_GetServerSteamIDsByIP_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string server_ips = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->server_ips_size());
  for (int i = 0, n = this->server_ips_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->server_ips(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameServers_GetServerSteamIDsByIP_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerSteamIDsByIP_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CGameServers_GetServerSteamIDsByIP_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerSteamIDsByIP_Request::MergeFrom(const CGameServers_GetServerSteamIDsByIP_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_ips_.MergeFrom(from.server_ips_);
}

void CGameServers_GetServerSteamIDsByIP_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerSteamIDsByIP_Request::CopyFrom(const CGameServers_GetServerSteamIDsByIP_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerSteamIDsByIP_Request::IsInitialized() const {
  return true;
}

void CGameServers_GetServerSteamIDsByIP_Request::Swap(CGameServers_GetServerSteamIDsByIP_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerSteamIDsByIP_Request::InternalSwap(CGameServers_GetServerSteamIDsByIP_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_ips_.InternalSwap(CastToBase(&other->server_ips_));
}

::google::protobuf::Metadata CGameServers_GetServerSteamIDsByIP_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameServers_IPsWithSteamIDs_Response_Server::InitAsDefaultInstance() {
}
class CGameServers_IPsWithSteamIDs_Response_Server::HasBitSetters {
 public:
  static void set_has_addr(CGameServers_IPsWithSteamIDs_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steamid(CGameServers_IPsWithSteamIDs_Response_Server* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_IPsWithSteamIDs_Response_Server::kAddrFieldNumber;
const int CGameServers_IPsWithSteamIDs_Response_Server::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_IPsWithSteamIDs_Response_Server::CGameServers_IPsWithSteamIDs_Response_Server()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
}
CGameServers_IPsWithSteamIDs_Response_Server::CGameServers_IPsWithSteamIDs_Response_Server(const CGameServers_IPsWithSteamIDs_Response_Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
}

void CGameServers_IPsWithSteamIDs_Response_Server::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGameServers_IPsWithSteamIDs_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto.base);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CGameServers_IPsWithSteamIDs_Response_Server::~CGameServers_IPsWithSteamIDs_Response_Server() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  SharedDtor();
}

void CGameServers_IPsWithSteamIDs_Response_Server::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameServers_IPsWithSteamIDs_Response_Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameServers_IPsWithSteamIDs_Response_Server& CGameServers_IPsWithSteamIDs_Response_Server::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameServers_IPsWithSteamIDs_Response_Server_steammessages_5fgameservers_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CGameServers_IPsWithSteamIDs_Response_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    addr_.ClearNonDefaultToEmptyNoArena();
  }
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameServers_IPsWithSteamIDs_Response_Server::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameServers_IPsWithSteamIDs_Response_Server*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string addr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr");
        object = msg->mutable_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameServers_IPsWithSteamIDs_Response_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameServers_IPsWithSteamIDs_Response_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
}

::google::protobuf::uint8* CGameServers_IPsWithSteamIDs_Response_Server::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  return target;
}

size_t CGameServers_IPsWithSteamIDs_Response_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameServers_IPsWithSteamIDs_Response_Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_IPsWithSteamIDs_Response_Server* source =
      ::google::protobuf::DynamicCastToGenerated<CGameServers_IPsWithSteamIDs_Response_Server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
    MergeFrom(*source);
  }
}

void CGameServers_IPsWithSteamIDs_Response_Server::MergeFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameServers_IPsWithSteamIDs_Response_Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_IPsWithSteamIDs_Response_Server::CopyFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_IPsWithSteamIDs_Response_Server::IsInitialized() const {
  return true;
}

void CGameServers_IPsWithSteamIDs_Response_Server::Swap(CGameServers_IPsWithSteamIDs_Response_Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_IPsWithSteamIDs_Response_Server::InternalSwap(CGameServers_IPsWithSteamIDs_Response_Server* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CGameServers_IPsWithSteamIDs_Response_Server::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameServers_IPsWithSteamIDs_Response::InitAsDefaultInstance() {
}
class CGameServers_IPsWithSteamIDs_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_IPsWithSteamIDs_Response::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_IPsWithSteamIDs_Response::CGameServers_IPsWithSteamIDs_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_IPsWithSteamIDs_Response)
}
CGameServers_IPsWithSteamIDs_Response::CGameServers_IPsWithSteamIDs_Response(const CGameServers_IPsWithSteamIDs_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_IPsWithSteamIDs_Response)
}

void CGameServers_IPsWithSteamIDs_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CGameServers_IPsWithSteamIDs_Response_steammessages_5fgameservers_2esteamclient_2eproto.base);
}

CGameServers_IPsWithSteamIDs_Response::~CGameServers_IPsWithSteamIDs_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  SharedDtor();
}

void CGameServers_IPsWithSteamIDs_Response::SharedDtor() {
}

void CGameServers_IPsWithSteamIDs_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameServers_IPsWithSteamIDs_Response& CGameServers_IPsWithSteamIDs_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameServers_IPsWithSteamIDs_Response_steammessages_5fgameservers_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CGameServers_IPsWithSteamIDs_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameServers_IPsWithSteamIDs_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameServers_IPsWithSteamIDs_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server::_InternalParse;
          object = msg->add_servers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameServers_IPsWithSteamIDs_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameServers_IPsWithSteamIDs_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->servers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_IPsWithSteamIDs_Response)
}

::google::protobuf::uint8* CGameServers_IPsWithSteamIDs_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  return target;
}

size_t CGameServers_IPsWithSteamIDs_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameServers_IPsWithSteamIDs_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_IPsWithSteamIDs_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CGameServers_IPsWithSteamIDs_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_IPsWithSteamIDs_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_IPsWithSteamIDs_Response)
    MergeFrom(*source);
  }
}

void CGameServers_IPsWithSteamIDs_Response::MergeFrom(const CGameServers_IPsWithSteamIDs_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CGameServers_IPsWithSteamIDs_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_IPsWithSteamIDs_Response::CopyFrom(const CGameServers_IPsWithSteamIDs_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_IPsWithSteamIDs_Response::IsInitialized() const {
  return true;
}

void CGameServers_IPsWithSteamIDs_Response::Swap(CGameServers_IPsWithSteamIDs_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_IPsWithSteamIDs_Response::InternalSwap(CGameServers_IPsWithSteamIDs_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&servers_)->InternalSwap(CastToBase(&other->servers_));
}

::google::protobuf::Metadata CGameServers_IPsWithSteamIDs_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CGameServers_GetServerIPsBySteamID_Request::InitAsDefaultInstance() {
}
class CGameServers_GetServerIPsBySteamID_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerIPsBySteamID_Request::kServerSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerIPsBySteamID_Request::CGameServers_GetServerIPsBySteamID_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
}
CGameServers_GetServerIPsBySteamID_Request::CGameServers_GetServerIPsBySteamID_Request(const CGameServers_GetServerIPsBySteamID_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      server_steamids_(from.server_steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
}

void CGameServers_GetServerIPsBySteamID_Request::SharedCtor() {
}

CGameServers_GetServerIPsBySteamID_Request::~CGameServers_GetServerIPsBySteamID_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  SharedDtor();
}

void CGameServers_GetServerIPsBySteamID_Request::SharedDtor() {
}

void CGameServers_GetServerIPsBySteamID_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGameServers_GetServerIPsBySteamID_Request& CGameServers_GetServerIPsBySteamID_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGameServers_GetServerIPsBySteamID_Request_steammessages_5fgameservers_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CGameServers_GetServerIPsBySteamID_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_steamids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGameServers_GetServerIPsBySteamID_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGameServers_GetServerIPsBySteamID_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed64 server_steamids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 9) {
          do {
            msg->add_server_steamids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_server_steamids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGameServers_GetServerIPsBySteamID_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 server_steamids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_server_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_server_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGameServers_GetServerIPsBySteamID_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 server_steamids = 1;
  for (int i = 0, n = this->server_steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->server_steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
}

::google::protobuf::uint8* CGameServers_GetServerIPsBySteamID_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 server_steamids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->server_steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  return target;
}

size_t CGameServers_GetServerIPsBySteamID_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 server_steamids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->server_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->server_steamids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameServers_GetServerIPsBySteamID_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerIPsBySteamID_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CGameServers_GetServerIPsBySteamID_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerIPsBySteamID_Request::MergeFrom(const CGameServers_GetServerIPsBySteamID_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_steamids_.MergeFrom(from.server_steamids_);
}

void CGameServers_GetServerIPsBySteamID_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerIPsBySteamID_Request::CopyFrom(const CGameServers_GetServerIPsBySteamID_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerIPsBySteamID_Request::IsInitialized() const {
  return true;
}

void CGameServers_GetServerIPsBySteamID_Request::Swap(CGameServers_GetServerIPsBySteamID_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerIPsBySteamID_Request::InternalSwap(CGameServers_GetServerIPsBySteamID_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  server_steamids_.InternalSwap(&other->server_steamids_);
}

::google::protobuf::Metadata CGameServers_GetServerIPsBySteamID_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fgameservers_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

GameServers::~GameServers() {}

const ::google::protobuf::ServiceDescriptor* GameServers::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fgameservers_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* GameServers::GetDescriptor() {
  return descriptor();
}

void GameServers::GetServerList(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameServers_GetServerList_Request*,
                         ::proto::steam::CGameServers_GetServerList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServerList() not implemented.");
  done->Run();
}

void GameServers::GetServerSteamIDsByIP(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request*,
                         ::proto::steam::CGameServers_IPsWithSteamIDs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServerSteamIDsByIP() not implemented.");
  done->Run();
}

void GameServers::GetServerIPsBySteamID(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameServers_GetServerIPsBySteamID_Request*,
                         ::proto::steam::CGameServers_IPsWithSteamIDs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServerIPsBySteamID() not implemented.");
  done->Run();
}

void GameServers::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fgameservers_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetServerList(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameServers_GetServerList_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameServers_GetServerList_Response*>(response),
             done);
      break;
    case 1:
      GetServerSteamIDsByIP(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameServers_IPsWithSteamIDs_Response*>(response),
             done);
      break;
    case 2:
      GetServerIPsBySteamID(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameServers_GetServerIPsBySteamID_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameServers_IPsWithSteamIDs_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GameServers::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CGameServers_GetServerList_Request::default_instance();
    case 1:
      return ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request::default_instance();
    case 2:
      return ::proto::steam::CGameServers_GetServerIPsBySteamID_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GameServers::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CGameServers_GetServerList_Response::default_instance();
    case 1:
      return ::proto::steam::CGameServers_IPsWithSteamIDs_Response::default_instance();
    case 2:
      return ::proto::steam::CGameServers_IPsWithSteamIDs_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameServers_Stub::GameServers_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameServers_Stub::GameServers_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GameServers_Stub::~GameServers_Stub() {
  if (owns_channel_) delete channel_;
}

void GameServers_Stub::GetServerList(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameServers_GetServerList_Request* request,
                              ::proto::steam::CGameServers_GetServerList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameServers_Stub::GetServerSteamIDsByIP(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request* request,
                              ::proto::steam::CGameServers_IPsWithSteamIDs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameServers_Stub::GetServerIPsBySteamID(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameServers_GetServerIPsBySteamID_Request* request,
                              ::proto::steam::CGameServers_IPsWithSteamIDs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CGameServers_GetServerList_Request* Arena::CreateMaybeMessage< ::proto::steam::CGameServers_GetServerList_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CGameServers_GetServerList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CGameServers_GetServerList_Response_Server* Arena::CreateMaybeMessage< ::proto::steam::CGameServers_GetServerList_Response_Server >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CGameServers_GetServerList_Response_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CGameServers_GetServerList_Response* Arena::CreateMaybeMessage< ::proto::steam::CGameServers_GetServerList_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CGameServers_GetServerList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request* Arena::CreateMaybeMessage< ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server* Arena::CreateMaybeMessage< ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CGameServers_IPsWithSteamIDs_Response* Arena::CreateMaybeMessage< ::proto::steam::CGameServers_IPsWithSteamIDs_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CGameServers_IPsWithSteamIDs_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CGameServers_GetServerIPsBySteamID_Request* Arena::CreateMaybeMessage< ::proto::steam::CGameServers_GetServerIPsBySteamID_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CGameServers_GetServerIPsBySteamID_Request >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
