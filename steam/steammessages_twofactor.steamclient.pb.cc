// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_twofactor.steamclient.proto

#include "steammessages_twofactor.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace proto {
namespace steam {
class CTwoFactor_Status_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_Status_Request> _instance;
} _CTwoFactor_Status_Request_default_instance_;
class CTwoFactor_Status_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_Status_Response> _instance;
} _CTwoFactor_Status_Response_default_instance_;
class CTwoFactor_AddAuthenticator_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_AddAuthenticator_Request> _instance;
} _CTwoFactor_AddAuthenticator_Request_default_instance_;
class CTwoFactor_AddAuthenticator_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_AddAuthenticator_Response> _instance;
} _CTwoFactor_AddAuthenticator_Response_default_instance_;
class CTwoFactor_SendEmail_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_SendEmail_Request> _instance;
} _CTwoFactor_SendEmail_Request_default_instance_;
class CTwoFactor_SendEmail_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_SendEmail_Response> _instance;
} _CTwoFactor_SendEmail_Response_default_instance_;
class CTwoFactor_FinalizeAddAuthenticator_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_FinalizeAddAuthenticator_Request> _instance;
} _CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_;
class CTwoFactor_FinalizeAddAuthenticator_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_FinalizeAddAuthenticator_Response> _instance;
} _CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_;
class CTwoFactor_RemoveAuthenticator_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_RemoveAuthenticator_Request> _instance;
} _CTwoFactor_RemoveAuthenticator_Request_default_instance_;
class CTwoFactor_RemoveAuthenticator_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_RemoveAuthenticator_Response> _instance;
} _CTwoFactor_RemoveAuthenticator_Response_default_instance_;
class CTwoFactor_CreateEmergencyCodes_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_CreateEmergencyCodes_Request> _instance;
} _CTwoFactor_CreateEmergencyCodes_Request_default_instance_;
class CTwoFactor_CreateEmergencyCodes_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_CreateEmergencyCodes_Response> _instance;
} _CTwoFactor_CreateEmergencyCodes_Response_default_instance_;
class CTwoFactor_DestroyEmergencyCodes_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_DestroyEmergencyCodes_Request> _instance;
} _CTwoFactor_DestroyEmergencyCodes_Request_default_instance_;
class CTwoFactor_DestroyEmergencyCodes_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_DestroyEmergencyCodes_Response> _instance;
} _CTwoFactor_DestroyEmergencyCodes_Response_default_instance_;
class CTwoFactor_ValidateToken_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_ValidateToken_Request> _instance;
} _CTwoFactor_ValidateToken_Request_default_instance_;
class CTwoFactor_ValidateToken_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTwoFactor_ValidateToken_Response> _instance;
} _CTwoFactor_ValidateToken_Response_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCTwoFactor_Status_Request_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_Status_Request_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_Status_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_Status_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_Status_Request_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_Status_Request_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_Status_Response_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_Status_Response_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_Status_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_Status_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_Status_Response_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_Status_Response_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_AddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_AddAuthenticator_Request_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_AddAuthenticator_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_AddAuthenticator_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_AddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_AddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_AddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_AddAuthenticator_Response_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_AddAuthenticator_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_AddAuthenticator_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_AddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_AddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_SendEmail_Request_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_SendEmail_Request_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_SendEmail_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_SendEmail_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_SendEmail_Request_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_SendEmail_Request_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_SendEmail_Response_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_SendEmail_Response_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_SendEmail_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_SendEmail_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_SendEmail_Response_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_SendEmail_Response_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_FinalizeAddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_FinalizeAddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_FinalizeAddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_FinalizeAddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_FinalizeAddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_FinalizeAddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_RemoveAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_RemoveAuthenticator_Request_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_RemoveAuthenticator_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_RemoveAuthenticator_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_RemoveAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_RemoveAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_RemoveAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_RemoveAuthenticator_Response_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_RemoveAuthenticator_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_RemoveAuthenticator_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_RemoveAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_RemoveAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_CreateEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_CreateEmergencyCodes_Request_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_CreateEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_CreateEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_CreateEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_CreateEmergencyCodes_Response_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_CreateEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_CreateEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_DestroyEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_DestroyEmergencyCodes_Request_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_DestroyEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_DestroyEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_DestroyEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_DestroyEmergencyCodes_Response_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_DestroyEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_DestroyEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_ValidateToken_Request_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_ValidateToken_Request_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_ValidateToken_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_ValidateToken_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_ValidateToken_Request_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_ValidateToken_Request_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

static void InitDefaultsCTwoFactor_ValidateToken_Response_steammessages_5ftwofactor_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CTwoFactor_ValidateToken_Response_default_instance_;
    new (ptr) ::proto::steam::CTwoFactor_ValidateToken_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CTwoFactor_ValidateToken_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTwoFactor_ValidateToken_Response_steammessages_5ftwofactor_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTwoFactor_ValidateToken_Response_steammessages_5ftwofactor_2esteamclient_2eproto}, {}};

void InitDefaults_steammessages_5ftwofactor_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_Status_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_Status_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_AddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_AddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_SendEmail_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_SendEmail_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_FinalizeAddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_FinalizeAddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_RemoveAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_RemoveAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_CreateEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_CreateEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_DestroyEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_DestroyEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_ValidateToken_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTwoFactor_ValidateToken_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[16];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto[1];

const ::google::protobuf::uint32 TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, inactivation_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, authenticator_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, authenticator_allowed_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, steamguard_scheme_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, token_gid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, email_validated_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, device_identifier_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, time_created_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, revocation_attempts_remaining_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, classified_agent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, allow_external_authenticator_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_Status_Response, time_transferred_),
  3,
  4,
  5,
  7,
  6,
  0,
  8,
  1,
  10,
  11,
  2,
  9,
  12,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Request, authenticator_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Request, serial_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Request, authenticator_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Request, device_identifier_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Request, sms_phone_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Request, http_headers_),
  2,
  3,
  4,
  5,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, shared_secret_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, serial_number_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, revocation_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, uri_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, server_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, account_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, token_gid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, identity_secret_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, secret_1_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_AddAuthenticator_Response, status_),
  0,
  7,
  1,
  2,
  8,
  3,
  4,
  5,
  6,
  9,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_SendEmail_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_SendEmail_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_SendEmail_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_SendEmail_Request, email_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_SendEmail_Request, include_activation_code_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_SendEmail_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_SendEmail_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request, authenticator_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request, authenticator_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request, activation_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request, http_headers_),
  2,
  0,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response, success_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response, want_more_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response, server_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response, status_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Request, revocation_code_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Request, revocation_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Request, steamguard_scheme_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Request, remove_all_steamguard_cookies_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Response, success_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Response, server_time_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_RemoveAuthenticator_Response, revocation_attempts_remaining_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_CreateEmergencyCodes_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_CreateEmergencyCodes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_CreateEmergencyCodes_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_CreateEmergencyCodes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_CreateEmergencyCodes_Response, codes_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_ValidateToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_ValidateToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_ValidateToken_Request, code_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_ValidateToken_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_ValidateToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CTwoFactor_ValidateToken_Response, valid_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::steam::CTwoFactor_Status_Request)},
  { 7, 25, sizeof(::proto::steam::CTwoFactor_Status_Response)},
  { 38, 50, sizeof(::proto::steam::CTwoFactor_AddAuthenticator_Request)},
  { 57, 72, sizeof(::proto::steam::CTwoFactor_AddAuthenticator_Response)},
  { 82, 90, sizeof(::proto::steam::CTwoFactor_SendEmail_Request)},
  { 93, 98, sizeof(::proto::steam::CTwoFactor_SendEmail_Response)},
  { 98, 108, sizeof(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request)},
  { 113, 122, sizeof(::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response)},
  { 126, 135, sizeof(::proto::steam::CTwoFactor_RemoveAuthenticator_Request)},
  { 139, 147, sizeof(::proto::steam::CTwoFactor_RemoveAuthenticator_Response)},
  { 150, 155, sizeof(::proto::steam::CTwoFactor_CreateEmergencyCodes_Request)},
  { 155, 161, sizeof(::proto::steam::CTwoFactor_CreateEmergencyCodes_Response)},
  { 162, 168, sizeof(::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request)},
  { 169, 174, sizeof(::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response)},
  { 174, 180, sizeof(::proto::steam::CTwoFactor_ValidateToken_Request)},
  { 181, 187, sizeof(::proto::steam::CTwoFactor_ValidateToken_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_Status_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_Status_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_AddAuthenticator_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_AddAuthenticator_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_SendEmail_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_SendEmail_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_FinalizeAddAuthenticator_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_FinalizeAddAuthenticator_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_RemoveAuthenticator_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_RemoveAuthenticator_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_CreateEmergencyCodes_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_CreateEmergencyCodes_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_DestroyEmergencyCodes_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_DestroyEmergencyCodes_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_ValidateToken_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CTwoFactor_ValidateToken_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5ftwofactor_2esteamclient_2eproto, "steammessages_twofactor.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5ftwofactor_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto, 16, file_level_enum_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5ftwofactor_2esteamclient_2eproto[] =
  "\n)steammessages_twofactor.steamclient.pr"
  "oto\022\013proto.steam\032,steammessages_unified_"
  "base.steamclient.proto\"@\n\031CTwoFactor_Sta"
  "tus_Request\022#\n\007steamid\030\001 \001(\006B\022\202\265\030\016steami"
  "d to use\"\306\007\n\032CTwoFactor_Status_Response\022"
  "&\n\005state\030\001 \001(\rB\027\202\265\030\023Authenticator state\022"
  "=\n\023inactivation_reason\030\002 \001(\rB \202\265\030\034Inacti"
  "vation reason (if any)\0225\n\022authenticator_"
  "type\030\003 \001(\rB\031\202\265\030\025Type of authenticator\022L\n"
  "\025authenticator_allowed\030\004 \001(\010B-\202\265\030)Accoun"
  "t allowed to have an authenticator\?\022;\n\021s"
  "teamguard_scheme\030\005 \001(\rB \202\265\030\034Steam Guard "
  "scheme in effect\022A\n\ttoken_gid\030\006 \001(\tB.\202\265\030"
  "*String rep of token GID assigned by ser"
  "ver\022B\n\017email_validated\030\007 \001(\010B)\202\265\030%Accoun"
  "t has verified email capability\022\?\n\021devic"
  "e_identifier\030\010 \001(\tB$\202\265\030 Authenticator (p"
  "hone) identifier\0224\n\014time_created\030\t \001(\rB\036"
  "\202\265\030\032When the token was created\022W\n\035revoca"
  "tion_attempts_remaining\030\n \001(\rB0\202\265\030,Numbe"
  "r of revocation code attempts remaining\022"
  "^\n\020classified_agent\030\013 \001(\tBD\202\265\030@Agent tha"
  "t added the authenticator (e.g., ios / a"
  "ndroid / other)\022g\n\034allow_external_authen"
  "ticator\030\014 \001(\010BA\202\265\030=Allow a third-party a"
  "uthenticator (in addition to two-factor)"
  "\022_\n\020time_transferred\030\r \001(\rBE\202\265\030AWhen the"
  " token was transferred from another devi"
  "ce, if applicable\"\262\003\n#CTwoFactor_AddAuth"
  "enticator_Request\022#\n\007steamid\030\001 \001(\006B\022\202\265\030\016"
  "steamid to use\022:\n\022authenticator_time\030\002 \001"
  "(\004B\036\202\265\030\032Current authenticator time\022\?\n\rse"
  "rial_number\030\003 \001(\006B(\202\265\030$locally computed "
  "serial (deprecated)\0222\n\022authenticator_typ"
  "e\030\004 \001(\rB\026\202\265\030\022Authenticator type\0227\n\021devic"
  "e_identifier\030\005 \001(\tB\034\202\265\030\030Authenticator id"
  "entifier\022A\n\014sms_phone_id\030\006 \001(\tB+\202\265\030\'ID o"
  "f phone to use for SMS verification\0229\n\014h"
  "ttp_headers\030\007 \003(\tB#\202\265\030\037HTTP headers alte"
  "rnating by K/V\"\363\004\n$CTwoFactor_AddAuthent"
  "icator_Response\022I\n\rshared_secret\030\001 \001(\014B2"
  "\202\265\030.Shared secret between server and aut"
  "henticator\022I\n\rserial_number\030\002 \001(\006B2\202\265\030.A"
  "uthenticator serial number (unique per t"
  "oken)\022>\n\017revocation_code\030\003 \001(\tB%\202\265\030!code"
  " used to revoke authenticator\022+\n\003uri\030\004 \001"
  "(\tB\036\202\265\030\032URI for QR code generation\022,\n\013se"
  "rver_time\030\005 \001(\004B\027\202\265\030\023Current server time"
  "\022A\n\014account_name\030\006 \001(\tB+\202\265\030\'Account name"
  " to display on token client\0223\n\ttoken_gid"
  "\030\007 \001(\tB \202\265\030\034Token GID assigned by server"
  "\022V\n\017identity_secret\030\010 \001(\014B=\202\265\0309Secret us"
  "ed for identity attestation (e.g., for e"
  "venting)\022)\n\010secret_1\030\t \001(\014B\027\202\265\030\023Spare sh"
  "ared secret\022\037\n\006status\030\n \001(\005B\017\202\265\030\013Result "
  "code\"\335\001\n\034CTwoFactor_SendEmail_Request\022#\n"
  "\007steamid\030\001 \001(\006B\022\202\265\030\016Steamid to use\022F\n\nem"
  "ail_type\030\002 \001(\rB2\202\265\030.Type of email to sen"
  "d (ETwoFactorEmailType::*)\022P\n\027include_ac"
  "tivation_code\030\003 \001(\010B/\202\265\030+Include activat"
  "ion code in email parameters\"\037\n\035CTwoFact"
  "or_SendEmail_Response\"\303\002\n+CTwoFactor_Fin"
  "alizeAddAuthenticator_Request\022#\n\007steamid"
  "\030\001 \001(\006B\022\202\265\030\016steamid to use\0221\n\022authentica"
  "tor_code\030\002 \001(\tB\025\202\265\030\021Current auth code\022:\n"
  "\022authenticator_time\030\003 \001(\004B\036\202\265\030\032Current a"
  "uthenticator time\022E\n\017activation_code\030\004 \001"
  "(\tB,\202\265\030(Activation code from out-of-band"
  " message\0229\n\014http_headers\030\005 \003(\tB#\202\265\030\037HTTP"
  " headers alternating by K/V\"\351\001\n,CTwoFact"
  "or_FinalizeAddAuthenticator_Response\022:\n\007"
  "success\030\001 \001(\010B)\202\265\030%True if succeeded, or"
  " want more tries\022.\n\twant_more\030\002 \001(\010B\033\202\265\030"
  "\027True if want more tries\022,\n\013server_time\030"
  "\003 \001(\004B\027\202\265\030\023Current server time\022\037\n\006status"
  "\030\004 \001(\005B\017\202\265\030\013Result code\"\313\002\n&CTwoFactor_R"
  "emoveAuthenticator_Request\022<\n\017revocation"
  "_code\030\002 \001(\tB#\202\265\030\037Password needed to remo"
  "ve token\022H\n\021revocation_reason\030\005 \001(\rB-\202\265\030"
  ")Reason the authenticator is being remov"
  "ed\022O\n\021steamguard_scheme\030\006 \001(\rB4\202\265\0300Type "
  "of Steam Guard to use once token is remo"
  "ved\022H\n\035remove_all_steamguard_cookies\030\007 \001"
  "(\010B!\202\265\030\035Remove all steamguard cookies\"\376\001"
  "\n\'CTwoFactor_RemoveAuthenticator_Respons"
  "e\022L\n\007success\030\001 \001(\010B;\202\265\0307True if request "
  "succeeeded. The mobile app checks this.\022"
  ",\n\013server_time\030\003 \001(\004B\027\202\265\030\023Current server"
  " time\022W\n\035revocation_attempts_remaining\030\005"
  " \001(\rB0\202\265\030,Number of revocation code atte"
  "mpts remaining\")\n\'CTwoFactor_CreateEmerg"
  "encyCodes_Request\"N\n(CTwoFactor_CreateEm"
  "ergencyCodes_Response\022\"\n\005codes\030\001 \003(\tB\023\202\265"
  "\030\017Emergency codes\"O\n(CTwoFactor_DestroyE"
  "mergencyCodes_Request\022#\n\007steamid\030\001 \001(\006B\022"
  "\202\265\030\016steamid to use\"+\n)CTwoFactor_Destroy"
  "EmergencyCodes_Response\"F\n CTwoFactor_Va"
  "lidateToken_Request\022\"\n\004code\030\001 \001(\tB\024\202\265\030\020c"
  "ode to validate\"L\n!CTwoFactor_ValidateTo"
  "ken_Response\022\'\n\005valid\030\001 \001(\010B\030\202\265\030\024result "
  "of validation2\306\013\n\tTwoFactor\022\244\001\n\013QuerySta"
  "tus\022&.proto.steam.CTwoFactor_Status_Requ"
  "est\032\'.proto.steam.CTwoFactor_Status_Resp"
  "onse\"D\202\265\030@Get two-factor authentication "
  "settings for the logged-in account\022\262\001\n\020A"
  "ddAuthenticator\0220.proto.steam.CTwoFactor"
  "_AddAuthenticator_Request\0321.proto.steam."
  "CTwoFactor_AddAuthenticator_Response\"9\202\265"
  "\0305Add two-factor authenticator to the lo"
  "gged-in account\022\201\001\n\tSendEmail\022).proto.st"
  "eam.CTwoFactor_SendEmail_Request\032*.proto"
  ".steam.CTwoFactor_SendEmail_Response\"\035\202\265"
  "\030\031Send email to the account\022\331\001\n\030Finalize"
  "AddAuthenticator\0228.proto.steam.CTwoFacto"
  "r_FinalizeAddAuthenticator_Request\0329.pro"
  "to.steam.CTwoFactor_FinalizeAddAuthentic"
  "ator_Response\"H\202\265\030DFinalize two-factor a"
  "uthentication addition to the logged-in "
  "account\022\312\001\n\023RemoveAuthenticator\0223.proto."
  "steam.CTwoFactor_RemoveAuthenticator_Req"
  "uest\0324.proto.steam.CTwoFactor_RemoveAuth"
  "enticator_Response\"H\202\265\030DRemove two-facto"
  "r authentication addition from the logge"
  "d-in account\022\257\001\n\024CreateEmergencyCodes\0224."
  "proto.steam.CTwoFactor_CreateEmergencyCo"
  "des_Request\0325.proto.steam.CTwoFactor_Cre"
  "ateEmergencyCodes_Response\"*\202\265\030&Generate"
  " emergency authenticator codes\022\301\001\n\025Destr"
  "oyEmergencyCodes\0225.proto.steam.CTwoFacto"
  "r_DestroyEmergencyCodes_Request\0326.proto."
  "steam.CTwoFactor_DestroyEmergencyCodes_R"
  "esponse\"9\202\265\0305Destroy emergency authentic"
  "ator codes for the account\022\222\001\n\rValidateT"
  "oken\022-.proto.steam.CTwoFactor_ValidateTo"
  "ken_Request\032..proto.steam.CTwoFactor_Val"
  "idateToken_Response\"\"\202\265\030\036Validate (and c"
  "onsume) a token\032%\202\265\030!Two Factor Authenti"
  "cation ServiceB\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5ftwofactor_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5ftwofactor_2esteamclient_2eproto,
  "steammessages_twofactor.steamclient.proto", &assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto, 5499,
};

void AddDescriptors_steammessages_5ftwofactor_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5ftwofactor_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5ftwofactor_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5ftwofactor_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CTwoFactor_Status_Request::InitAsDefaultInstance() {
}
class CTwoFactor_Status_Request::HasBitSetters {
 public:
  static void set_has_steamid(CTwoFactor_Status_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_Status_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_Status_Request::CTwoFactor_Status_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_Status_Request)
}
CTwoFactor_Status_Request::CTwoFactor_Status_Request(const CTwoFactor_Status_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_Status_Request)
}

void CTwoFactor_Status_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CTwoFactor_Status_Request::~CTwoFactor_Status_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_Status_Request)
  SharedDtor();
}

void CTwoFactor_Status_Request::SharedDtor() {
}

void CTwoFactor_Status_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_Status_Request& CTwoFactor_Status_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_Status_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_Status_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_Status_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_Status_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_Status_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_Status_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_Status_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_Status_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_Status_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_Status_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_Status_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_Status_Request)
}

::google::protobuf::uint8* CTwoFactor_Status_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_Status_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_Status_Request)
  return target;
}

size_t CTwoFactor_Status_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_Status_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_Status_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_Status_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_Status_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_Status_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_Status_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_Status_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_Status_Request::MergeFrom(const CTwoFactor_Status_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_Status_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CTwoFactor_Status_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_Status_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_Status_Request::CopyFrom(const CTwoFactor_Status_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_Status_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_Status_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_Status_Request::Swap(CTwoFactor_Status_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_Status_Request::InternalSwap(CTwoFactor_Status_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CTwoFactor_Status_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_Status_Response::InitAsDefaultInstance() {
}
class CTwoFactor_Status_Response::HasBitSetters {
 public:
  static void set_has_state(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_inactivation_reason(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_authenticator_type(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_authenticator_allowed(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_steamguard_scheme(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_token_gid(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_email_validated(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_device_identifier(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_created(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_revocation_attempts_remaining(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_classified_agent(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_allow_external_authenticator(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_time_transferred(CTwoFactor_Status_Response* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_Status_Response::kStateFieldNumber;
const int CTwoFactor_Status_Response::kInactivationReasonFieldNumber;
const int CTwoFactor_Status_Response::kAuthenticatorTypeFieldNumber;
const int CTwoFactor_Status_Response::kAuthenticatorAllowedFieldNumber;
const int CTwoFactor_Status_Response::kSteamguardSchemeFieldNumber;
const int CTwoFactor_Status_Response::kTokenGidFieldNumber;
const int CTwoFactor_Status_Response::kEmailValidatedFieldNumber;
const int CTwoFactor_Status_Response::kDeviceIdentifierFieldNumber;
const int CTwoFactor_Status_Response::kTimeCreatedFieldNumber;
const int CTwoFactor_Status_Response::kRevocationAttemptsRemainingFieldNumber;
const int CTwoFactor_Status_Response::kClassifiedAgentFieldNumber;
const int CTwoFactor_Status_Response::kAllowExternalAuthenticatorFieldNumber;
const int CTwoFactor_Status_Response::kTimeTransferredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_Status_Response::CTwoFactor_Status_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_Status_Response)
}
CTwoFactor_Status_Response::CTwoFactor_Status_Response(const CTwoFactor_Status_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_gid()) {
    token_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_gid_);
  }
  device_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_identifier()) {
    device_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_identifier_);
  }
  classified_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_classified_agent()) {
    classified_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classified_agent_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_transferred_) -
    reinterpret_cast<char*>(&state_)) + sizeof(time_transferred_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_Status_Response)
}

void CTwoFactor_Status_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTwoFactor_Status_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  token_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classified_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_transferred_) -
      reinterpret_cast<char*>(&state_)) + sizeof(time_transferred_));
}

CTwoFactor_Status_Response::~CTwoFactor_Status_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_Status_Response)
  SharedDtor();
}

void CTwoFactor_Status_Response::SharedDtor() {
  token_gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classified_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_Status_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_Status_Response& CTwoFactor_Status_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_Status_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_Status_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_Status_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      token_gid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      device_identifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      classified_agent_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&authenticator_allowed_) -
        reinterpret_cast<char*>(&state_)) + sizeof(authenticator_allowed_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&email_validated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_transferred_) -
        reinterpret_cast<char*>(&email_validated_)) + sizeof(time_transferred_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_Status_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_Status_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_inactivation_reason(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_authenticator_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_authenticator_allowed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_steamguard_scheme(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_Status_Response.token_gid");
        object = msg->mutable_token_gid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_email_validated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_Status_Response.device_identifier");
        object = msg->mutable_device_identifier();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_time_created(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_revocation_attempts_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_Status_Response.classified_agent");
        object = msg->mutable_classified_agent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_allow_external_authenticator(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_transferred = 13 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_time_transferred(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_Status_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_Status_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_inactivation_reason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inactivation_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_authenticator_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authenticator_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_authenticator_allowed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authenticator_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_steamguard_scheme(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_scheme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_gid().data(), static_cast<int>(this->token_gid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_Status_Response.token_gid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_email_validated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &email_validated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_identifier().data(), static_cast<int>(this->device_identifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_Status_Response.device_identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_time_created(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_revocation_attempts_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revocation_attempts_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classified_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classified_agent().data(), static_cast<int>(this->classified_agent().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_Status_Response.classified_agent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_allow_external_authenticator(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_external_authenticator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_transferred = 13 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_time_transferred(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_transferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_Status_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_Status_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_Status_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_Status_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inactivation_reason(), output);
  }

  // optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->authenticator_type(), output);
  }

  // optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->authenticator_allowed(), output);
  }

  // optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->steamguard_scheme(), output);
  }

  // optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_gid().data(), static_cast<int>(this->token_gid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.token_gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->token_gid(), output);
  }

  // optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->email_validated(), output);
  }

  // optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_identifier().data(), static_cast<int>(this->device_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.device_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_identifier(), output);
  }

  // optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time_created(), output);
  }

  // optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->revocation_attempts_remaining(), output);
  }

  // optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classified_agent().data(), static_cast<int>(this->classified_agent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.classified_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->classified_agent(), output);
  }

  // optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->allow_external_authenticator(), output);
  }

  // optional uint32 time_transferred = 13 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->time_transferred(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_Status_Response)
}

::google::protobuf::uint8* CTwoFactor_Status_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_Status_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inactivation_reason(), target);
  }

  // optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->authenticator_type(), target);
  }

  // optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->authenticator_allowed(), target);
  }

  // optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->steamguard_scheme(), target);
  }

  // optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_gid().data(), static_cast<int>(this->token_gid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.token_gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token_gid(), target);
  }

  // optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->email_validated(), target);
  }

  // optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_identifier().data(), static_cast<int>(this->device_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.device_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_identifier(), target);
  }

  // optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time_created(), target);
  }

  // optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->revocation_attempts_remaining(), target);
  }

  // optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classified_agent().data(), static_cast<int>(this->classified_agent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_Status_Response.classified_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->classified_agent(), target);
  }

  // optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->allow_external_authenticator(), target);
  }

  // optional uint32 time_transferred = 13 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->time_transferred(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_Status_Response)
  return target;
}

size_t CTwoFactor_Status_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_Status_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string token_gid = 6 [(.proto.steam.description) = "String rep of token GID assigned by server"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_gid());
    }

    // optional string device_identifier = 8 [(.proto.steam.description) = "Authenticator (phone) identifier"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_identifier());
    }

    // optional string classified_agent = 11 [(.proto.steam.description) = "Agent that added the authenticator (e.g., ios / android / other)"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classified_agent());
    }

    // optional uint32 state = 1 [(.proto.steam.description) = "Authenticator state"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 inactivation_reason = 2 [(.proto.steam.description) = "Inactivation reason (if any)"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inactivation_reason());
    }

    // optional uint32 authenticator_type = 3 [(.proto.steam.description) = "Type of authenticator"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authenticator_type());
    }

    // optional uint32 steamguard_scheme = 5 [(.proto.steam.description) = "Steam Guard scheme in effect"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_scheme());
    }

    // optional bool authenticator_allowed = 4 [(.proto.steam.description) = "Account allowed to have an authenticator?"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool email_validated = 7 [(.proto.steam.description) = "Account has verified email capability"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool allow_external_authenticator = 12 [(.proto.steam.description) = "Allow a third-party authenticator (in addition to two-factor)"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_created = 9 [(.proto.steam.description) = "When the token was created"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 revocation_attempts_remaining = 10 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revocation_attempts_remaining());
    }

    // optional uint32 time_transferred = 13 [(.proto.steam.description) = "When the token was transferred from another device, if applicable"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_transferred());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_Status_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_Status_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_Status_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_Status_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_Status_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_Status_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_Status_Response::MergeFrom(const CTwoFactor_Status_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_Status_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_gid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      device_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_identifier_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      classified_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classified_agent_);
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      inactivation_reason_ = from.inactivation_reason_;
    }
    if (cached_has_bits & 0x00000020u) {
      authenticator_type_ = from.authenticator_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamguard_scheme_ = from.steamguard_scheme_;
    }
    if (cached_has_bits & 0x00000080u) {
      authenticator_allowed_ = from.authenticator_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      email_validated_ = from.email_validated_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_external_authenticator_ = from.allow_external_authenticator_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000800u) {
      revocation_attempts_remaining_ = from.revocation_attempts_remaining_;
    }
    if (cached_has_bits & 0x00001000u) {
      time_transferred_ = from.time_transferred_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_Status_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_Status_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_Status_Response::CopyFrom(const CTwoFactor_Status_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_Status_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_Status_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_Status_Response::Swap(CTwoFactor_Status_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_Status_Response::InternalSwap(CTwoFactor_Status_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_gid_.Swap(&other->token_gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_identifier_.Swap(&other->device_identifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  classified_agent_.Swap(&other->classified_agent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(inactivation_reason_, other->inactivation_reason_);
  swap(authenticator_type_, other->authenticator_type_);
  swap(steamguard_scheme_, other->steamguard_scheme_);
  swap(authenticator_allowed_, other->authenticator_allowed_);
  swap(email_validated_, other->email_validated_);
  swap(allow_external_authenticator_, other->allow_external_authenticator_);
  swap(time_created_, other->time_created_);
  swap(revocation_attempts_remaining_, other->revocation_attempts_remaining_);
  swap(time_transferred_, other->time_transferred_);
}

::google::protobuf::Metadata CTwoFactor_Status_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_AddAuthenticator_Request::InitAsDefaultInstance() {
}
class CTwoFactor_AddAuthenticator_Request::HasBitSetters {
 public:
  static void set_has_steamid(CTwoFactor_AddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_authenticator_time(CTwoFactor_AddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_serial_number(CTwoFactor_AddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_authenticator_type(CTwoFactor_AddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_device_identifier(CTwoFactor_AddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sms_phone_id(CTwoFactor_AddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_AddAuthenticator_Request::kSteamidFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kAuthenticatorTimeFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kSerialNumberFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kAuthenticatorTypeFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kDeviceIdentifierFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kSmsPhoneIdFieldNumber;
const int CTwoFactor_AddAuthenticator_Request::kHttpHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_AddAuthenticator_Request::CTwoFactor_AddAuthenticator_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_AddAuthenticator_Request)
}
CTwoFactor_AddAuthenticator_Request::CTwoFactor_AddAuthenticator_Request(const CTwoFactor_AddAuthenticator_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      http_headers_(from.http_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_identifier()) {
    device_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_identifier_);
  }
  sms_phone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sms_phone_id()) {
    sms_phone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sms_phone_id_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&authenticator_type_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(authenticator_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_AddAuthenticator_Request)
}

void CTwoFactor_AddAuthenticator_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTwoFactor_AddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  device_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_phone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authenticator_type_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(authenticator_type_));
}

CTwoFactor_AddAuthenticator_Request::~CTwoFactor_AddAuthenticator_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_AddAuthenticator_Request)
  SharedDtor();
}

void CTwoFactor_AddAuthenticator_Request::SharedDtor() {
  device_identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sms_phone_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_AddAuthenticator_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_AddAuthenticator_Request& CTwoFactor_AddAuthenticator_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_AddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_AddAuthenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      device_identifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sms_phone_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&authenticator_type_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(authenticator_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_AddAuthenticator_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_AddAuthenticator_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_authenticator_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_serial_number(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_authenticator_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier");
        object = msg->mutable_device_identifier();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id");
        object = msg->mutable_sms_phone_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers");
          object = msg->add_http_headers();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_AddAuthenticator_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_authenticator_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &authenticator_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_serial_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serial_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_authenticator_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authenticator_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_identifier().data(), static_cast<int>(this->device_identifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sms_phone_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sms_phone_id().data(), static_cast<int>(this->sms_phone_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_http_headers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_headers(this->http_headers_size() - 1).data(),
            static_cast<int>(this->http_headers(this->http_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_AddAuthenticator_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_AddAuthenticator_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_AddAuthenticator_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->authenticator_time(), output);
  }

  // optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->serial_number(), output);
  }

  // optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->authenticator_type(), output);
  }

  // optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_identifier().data(), static_cast<int>(this->device_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_identifier(), output);
  }

  // optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sms_phone_id().data(), static_cast<int>(this->sms_phone_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sms_phone_id(), output);
  }

  // repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_headers(i).data(), static_cast<int>(this->http_headers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->http_headers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_AddAuthenticator_Request)
}

::google::protobuf::uint8* CTwoFactor_AddAuthenticator_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->authenticator_time(), target);
  }

  // optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->serial_number(), target);
  }

  // optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->authenticator_type(), target);
  }

  // optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_identifier().data(), static_cast<int>(this->device_identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.device_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_identifier(), target);
  }

  // optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sms_phone_id().data(), static_cast<int>(this->sms_phone_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.sms_phone_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sms_phone_id(), target);
  }

  // repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_headers(i).data(), static_cast<int>(this->http_headers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Request.http_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->http_headers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_AddAuthenticator_Request)
  return target;
}

size_t CTwoFactor_AddAuthenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string http_headers = 7 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->http_headers_size());
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->http_headers(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string device_identifier = 5 [(.proto.steam.description) = "Authenticator identifier"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_identifier());
    }

    // optional string sms_phone_id = 6 [(.proto.steam.description) = "ID of phone to use for SMS verification"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sms_phone_id());
    }

    // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 authenticator_time = 2 [(.proto.steam.description) = "Current authenticator time"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->authenticator_time());
    }

    // optional fixed64 serial_number = 3 [(.proto.steam.description) = "locally computed serial (deprecated)"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 authenticator_type = 4 [(.proto.steam.description) = "Authenticator type"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authenticator_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_AddAuthenticator_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_AddAuthenticator_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_AddAuthenticator_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_AddAuthenticator_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_AddAuthenticator_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_AddAuthenticator_Request::MergeFrom(const CTwoFactor_AddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  http_headers_.MergeFrom(from.http_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_identifier_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sms_phone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sms_phone_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      authenticator_time_ = from.authenticator_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      serial_number_ = from.serial_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      authenticator_type_ = from.authenticator_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_AddAuthenticator_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_AddAuthenticator_Request::CopyFrom(const CTwoFactor_AddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_AddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_AddAuthenticator_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_AddAuthenticator_Request::Swap(CTwoFactor_AddAuthenticator_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_AddAuthenticator_Request::InternalSwap(CTwoFactor_AddAuthenticator_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  http_headers_.InternalSwap(CastToBase(&other->http_headers_));
  device_identifier_.Swap(&other->device_identifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sms_phone_id_.Swap(&other->sms_phone_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(authenticator_time_, other->authenticator_time_);
  swap(serial_number_, other->serial_number_);
  swap(authenticator_type_, other->authenticator_type_);
}

::google::protobuf::Metadata CTwoFactor_AddAuthenticator_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_AddAuthenticator_Response::InitAsDefaultInstance() {
}
class CTwoFactor_AddAuthenticator_Response::HasBitSetters {
 public:
  static void set_has_shared_secret(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_serial_number(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_revocation_code(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_uri(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_server_time(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_account_name(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_token_gid(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_identity_secret(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_secret_1(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_status(CTwoFactor_AddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_AddAuthenticator_Response::kSharedSecretFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kSerialNumberFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kRevocationCodeFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kUriFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kServerTimeFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kAccountNameFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kTokenGidFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kIdentitySecretFieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kSecret1FieldNumber;
const int CTwoFactor_AddAuthenticator_Response::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_AddAuthenticator_Response::CTwoFactor_AddAuthenticator_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_AddAuthenticator_Response)
}
CTwoFactor_AddAuthenticator_Response::CTwoFactor_AddAuthenticator_Response(const CTwoFactor_AddAuthenticator_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shared_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shared_secret()) {
    shared_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shared_secret_);
  }
  revocation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_revocation_code()) {
    revocation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revocation_code_);
  }
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  token_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_gid()) {
    token_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_gid_);
  }
  identity_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_identity_secret()) {
    identity_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_secret_);
  }
  secret_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret_1()) {
    secret_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_1_);
  }
  ::memcpy(&serial_number_, &from.serial_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&serial_number_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_AddAuthenticator_Response)
}

void CTwoFactor_AddAuthenticator_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTwoFactor_AddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  shared_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revocation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&serial_number_)) + sizeof(status_));
}

CTwoFactor_AddAuthenticator_Response::~CTwoFactor_AddAuthenticator_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_AddAuthenticator_Response)
  SharedDtor();
}

void CTwoFactor_AddAuthenticator_Response::SharedDtor() {
  shared_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revocation_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_AddAuthenticator_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_AddAuthenticator_Response& CTwoFactor_AddAuthenticator_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_AddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_AddAuthenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      shared_secret_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      revocation_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      uri_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      token_gid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      identity_secret_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      secret_1_.ClearNonDefaultToEmptyNoArena();
    }
  }
  serial_number_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x00000300u) {
    ::memset(&server_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&server_time_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_AddAuthenticator_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_AddAuthenticator_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_shared_secret();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_serial_number(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code");
        object = msg->mutable_revocation_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_AddAuthenticator_Response.uri");
        object = msg->mutable_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_server_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_AddAuthenticator_Response.account_name");
        object = msg->mutable_account_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid");
        object = msg->mutable_token_gid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_identity_secret();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_secret_1();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 status = 10 [(.proto.steam.description) = "Result code"];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_AddAuthenticator_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shared_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_serial_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serial_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revocation_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->revocation_code().data(), static_cast<int>(this->revocation_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Response.uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_server_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Response.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_gid().data(), static_cast<int>(this->token_gid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 10 [(.proto.steam.description) = "Result code"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_AddAuthenticator_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_AddAuthenticator_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_AddAuthenticator_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->shared_secret(), output);
  }

  // optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->serial_number(), output);
  }

  // optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revocation_code().data(), static_cast<int>(this->revocation_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->revocation_code(), output);
  }

  // optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->server_time(), output);
  }

  // optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account_name(), output);
  }

  // optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_gid().data(), static_cast<int>(this->token_gid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->token_gid(), output);
  }

  // optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->identity_secret(), output);
  }

  // optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->secret_1(), output);
  }

  // optional int32 status = 10 [(.proto.steam.description) = "Result code"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_AddAuthenticator_Response)
}

::google::protobuf::uint8* CTwoFactor_AddAuthenticator_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->shared_secret(), target);
  }

  // optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->serial_number(), target);
  }

  // optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revocation_code().data(), static_cast<int>(this->revocation_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.revocation_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->revocation_code(), target);
  }

  // optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->server_time(), target);
  }

  // optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account_name(), target);
  }

  // optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_gid().data(), static_cast<int>(this->token_gid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_AddAuthenticator_Response.token_gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token_gid(), target);
  }

  // optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->identity_secret(), target);
  }

  // optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->secret_1(), target);
  }

  // optional int32 status = 10 [(.proto.steam.description) = "Result code"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_AddAuthenticator_Response)
  return target;
}

size_t CTwoFactor_AddAuthenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes shared_secret = 1 [(.proto.steam.description) = "Shared secret between server and authenticator"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shared_secret());
    }

    // optional string revocation_code = 3 [(.proto.steam.description) = "code used to revoke authenticator"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revocation_code());
    }

    // optional string uri = 4 [(.proto.steam.description) = "URI for QR code generation"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string account_name = 6 [(.proto.steam.description) = "Account name to display on token client"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string token_gid = 7 [(.proto.steam.description) = "Token GID assigned by server"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_gid());
    }

    // optional bytes identity_secret = 8 [(.proto.steam.description) = "Secret used for identity attestation (e.g., for eventing)"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_secret());
    }

    // optional bytes secret_1 = 9 [(.proto.steam.description) = "Spare shared secret"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secret_1());
    }

    // optional fixed64 serial_number = 2 [(.proto.steam.description) = "Authenticator serial number (unique per token)"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 server_time = 5 [(.proto.steam.description) = "Current server time"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_time());
    }

    // optional int32 status = 10 [(.proto.steam.description) = "Result code"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_AddAuthenticator_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_AddAuthenticator_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_AddAuthenticator_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_AddAuthenticator_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_AddAuthenticator_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_AddAuthenticator_Response::MergeFrom(const CTwoFactor_AddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      shared_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shared_secret_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      revocation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revocation_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      token_gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_gid_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      identity_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_secret_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      secret_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_1_);
    }
    if (cached_has_bits & 0x00000080u) {
      serial_number_ = from.serial_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_AddAuthenticator_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_AddAuthenticator_Response::CopyFrom(const CTwoFactor_AddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_AddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_AddAuthenticator_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_AddAuthenticator_Response::Swap(CTwoFactor_AddAuthenticator_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_AddAuthenticator_Response::InternalSwap(CTwoFactor_AddAuthenticator_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shared_secret_.Swap(&other->shared_secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  revocation_code_.Swap(&other->revocation_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uri_.Swap(&other->uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_gid_.Swap(&other->token_gid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  identity_secret_.Swap(&other->identity_secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_1_.Swap(&other->secret_1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serial_number_, other->serial_number_);
  swap(server_time_, other->server_time_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CTwoFactor_AddAuthenticator_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_SendEmail_Request::InitAsDefaultInstance() {
}
class CTwoFactor_SendEmail_Request::HasBitSetters {
 public:
  static void set_has_steamid(CTwoFactor_SendEmail_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_email_type(CTwoFactor_SendEmail_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_include_activation_code(CTwoFactor_SendEmail_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_SendEmail_Request::kSteamidFieldNumber;
const int CTwoFactor_SendEmail_Request::kEmailTypeFieldNumber;
const int CTwoFactor_SendEmail_Request::kIncludeActivationCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_SendEmail_Request::CTwoFactor_SendEmail_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_SendEmail_Request)
}
CTwoFactor_SendEmail_Request::CTwoFactor_SendEmail_Request(const CTwoFactor_SendEmail_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_activation_code_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_activation_code_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_SendEmail_Request)
}

void CTwoFactor_SendEmail_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_activation_code_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(include_activation_code_));
}

CTwoFactor_SendEmail_Request::~CTwoFactor_SendEmail_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_SendEmail_Request)
  SharedDtor();
}

void CTwoFactor_SendEmail_Request::SharedDtor() {
}

void CTwoFactor_SendEmail_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_SendEmail_Request& CTwoFactor_SendEmail_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_SendEmail_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_SendEmail_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_SendEmail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_activation_code_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_activation_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_SendEmail_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_SendEmail_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_email_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_include_activation_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_SendEmail_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_SendEmail_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_email_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_include_activation_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_activation_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_SendEmail_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_SendEmail_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_SendEmail_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_SendEmail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->email_type(), output);
  }

  // optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_activation_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_SendEmail_Request)
}

::google::protobuf::uint8* CTwoFactor_SendEmail_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_SendEmail_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->email_type(), target);
  }

  // optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_activation_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_SendEmail_Request)
  return target;
}

size_t CTwoFactor_SendEmail_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_SendEmail_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steamid to use"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 email_type = 2 [(.proto.steam.description) = "Type of email to send (ETwoFactorEmailType::*)"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_type());
    }

    // optional bool include_activation_code = 3 [(.proto.steam.description) = "Include activation code in email parameters"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_SendEmail_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_SendEmail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_SendEmail_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_SendEmail_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_SendEmail_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_SendEmail_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_SendEmail_Request::MergeFrom(const CTwoFactor_SendEmail_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_SendEmail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      email_type_ = from.email_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_activation_code_ = from.include_activation_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_SendEmail_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_SendEmail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_SendEmail_Request::CopyFrom(const CTwoFactor_SendEmail_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_SendEmail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_SendEmail_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_SendEmail_Request::Swap(CTwoFactor_SendEmail_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_SendEmail_Request::InternalSwap(CTwoFactor_SendEmail_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(email_type_, other->email_type_);
  swap(include_activation_code_, other->include_activation_code_);
}

::google::protobuf::Metadata CTwoFactor_SendEmail_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_SendEmail_Response::InitAsDefaultInstance() {
}
class CTwoFactor_SendEmail_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_SendEmail_Response::CTwoFactor_SendEmail_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_SendEmail_Response)
}
CTwoFactor_SendEmail_Response::CTwoFactor_SendEmail_Response(const CTwoFactor_SendEmail_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_SendEmail_Response)
}

void CTwoFactor_SendEmail_Response::SharedCtor() {
}

CTwoFactor_SendEmail_Response::~CTwoFactor_SendEmail_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_SendEmail_Response)
  SharedDtor();
}

void CTwoFactor_SendEmail_Response::SharedDtor() {
}

void CTwoFactor_SendEmail_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_SendEmail_Response& CTwoFactor_SendEmail_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_SendEmail_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_SendEmail_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_SendEmail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_SendEmail_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_SendEmail_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_SendEmail_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_SendEmail_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_SendEmail_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_SendEmail_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_SendEmail_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_SendEmail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_SendEmail_Response)
}

::google::protobuf::uint8* CTwoFactor_SendEmail_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_SendEmail_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_SendEmail_Response)
  return target;
}

size_t CTwoFactor_SendEmail_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_SendEmail_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_SendEmail_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_SendEmail_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_SendEmail_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_SendEmail_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_SendEmail_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_SendEmail_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_SendEmail_Response::MergeFrom(const CTwoFactor_SendEmail_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_SendEmail_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTwoFactor_SendEmail_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_SendEmail_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_SendEmail_Response::CopyFrom(const CTwoFactor_SendEmail_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_SendEmail_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_SendEmail_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_SendEmail_Response::Swap(CTwoFactor_SendEmail_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_SendEmail_Response::InternalSwap(CTwoFactor_SendEmail_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CTwoFactor_SendEmail_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_FinalizeAddAuthenticator_Request::InitAsDefaultInstance() {
}
class CTwoFactor_FinalizeAddAuthenticator_Request::HasBitSetters {
 public:
  static void set_has_steamid(CTwoFactor_FinalizeAddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_authenticator_code(CTwoFactor_FinalizeAddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_authenticator_time(CTwoFactor_FinalizeAddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_activation_code(CTwoFactor_FinalizeAddAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_FinalizeAddAuthenticator_Request::kSteamidFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Request::kAuthenticatorCodeFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Request::kAuthenticatorTimeFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Request::kActivationCodeFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Request::kHttpHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_FinalizeAddAuthenticator_Request::CTwoFactor_FinalizeAddAuthenticator_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
}
CTwoFactor_FinalizeAddAuthenticator_Request::CTwoFactor_FinalizeAddAuthenticator_Request(const CTwoFactor_FinalizeAddAuthenticator_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      http_headers_(from.http_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authenticator_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authenticator_code()) {
    authenticator_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authenticator_code_);
  }
  activation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_activation_code()) {
    activation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_code_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&authenticator_time_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(authenticator_time_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
}

void CTwoFactor_FinalizeAddAuthenticator_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTwoFactor_FinalizeAddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  authenticator_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authenticator_time_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(authenticator_time_));
}

CTwoFactor_FinalizeAddAuthenticator_Request::~CTwoFactor_FinalizeAddAuthenticator_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  SharedDtor();
}

void CTwoFactor_FinalizeAddAuthenticator_Request::SharedDtor() {
  authenticator_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_FinalizeAddAuthenticator_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_FinalizeAddAuthenticator_Request& CTwoFactor_FinalizeAddAuthenticator_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_FinalizeAddAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_FinalizeAddAuthenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      authenticator_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      activation_code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&authenticator_time_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(authenticator_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_FinalizeAddAuthenticator_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_FinalizeAddAuthenticator_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code");
        object = msg->mutable_authenticator_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_authenticator_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code");
        object = msg->mutable_activation_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers");
          object = msg->add_http_headers();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_FinalizeAddAuthenticator_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authenticator_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authenticator_code().data(), static_cast<int>(this->authenticator_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_authenticator_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &authenticator_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->activation_code().data(), static_cast<int>(this->activation_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_http_headers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_headers(this->http_headers_size() - 1).data(),
            static_cast<int>(this->http_headers(this->http_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_FinalizeAddAuthenticator_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authenticator_code().data(), static_cast<int>(this->authenticator_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authenticator_code(), output);
  }

  // optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->authenticator_time(), output);
  }

  // optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_code().data(), static_cast<int>(this->activation_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->activation_code(), output);
  }

  // repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_headers(i).data(), static_cast<int>(this->http_headers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->http_headers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
}

::google::protobuf::uint8* CTwoFactor_FinalizeAddAuthenticator_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authenticator_code().data(), static_cast<int>(this->authenticator_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.authenticator_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authenticator_code(), target);
  }

  // optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->authenticator_time(), target);
  }

  // optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activation_code().data(), static_cast<int>(this->activation_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.activation_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activation_code(), target);
  }

  // repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_headers(i).data(), static_cast<int>(this->http_headers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request.http_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->http_headers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  return target;
}

size_t CTwoFactor_FinalizeAddAuthenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string http_headers = 5 [(.proto.steam.description) = "HTTP headers alternating by K/V"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->http_headers_size());
  for (int i = 0, n = this->http_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->http_headers(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string authenticator_code = 2 [(.proto.steam.description) = "Current auth code"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authenticator_code());
    }

    // optional string activation_code = 4 [(.proto.steam.description) = "Activation code from out-of-band message"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activation_code());
    }

    // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 authenticator_time = 3 [(.proto.steam.description) = "Current authenticator time"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->authenticator_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_FinalizeAddAuthenticator_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_FinalizeAddAuthenticator_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_FinalizeAddAuthenticator_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_FinalizeAddAuthenticator_Request::MergeFrom(const CTwoFactor_FinalizeAddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  http_headers_.MergeFrom(from.http_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      authenticator_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authenticator_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      activation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      authenticator_time_ = from.authenticator_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_FinalizeAddAuthenticator_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_FinalizeAddAuthenticator_Request::CopyFrom(const CTwoFactor_FinalizeAddAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_FinalizeAddAuthenticator_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_FinalizeAddAuthenticator_Request::Swap(CTwoFactor_FinalizeAddAuthenticator_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_FinalizeAddAuthenticator_Request::InternalSwap(CTwoFactor_FinalizeAddAuthenticator_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  http_headers_.InternalSwap(CastToBase(&other->http_headers_));
  authenticator_code_.Swap(&other->authenticator_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  activation_code_.Swap(&other->activation_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steamid_, other->steamid_);
  swap(authenticator_time_, other->authenticator_time_);
}

::google::protobuf::Metadata CTwoFactor_FinalizeAddAuthenticator_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_FinalizeAddAuthenticator_Response::InitAsDefaultInstance() {
}
class CTwoFactor_FinalizeAddAuthenticator_Response::HasBitSetters {
 public:
  static void set_has_success(CTwoFactor_FinalizeAddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_want_more(CTwoFactor_FinalizeAddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_server_time(CTwoFactor_FinalizeAddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_status(CTwoFactor_FinalizeAddAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_FinalizeAddAuthenticator_Response::kSuccessFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Response::kWantMoreFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Response::kServerTimeFieldNumber;
const int CTwoFactor_FinalizeAddAuthenticator_Response::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_FinalizeAddAuthenticator_Response::CTwoFactor_FinalizeAddAuthenticator_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
}
CTwoFactor_FinalizeAddAuthenticator_Response::CTwoFactor_FinalizeAddAuthenticator_Response(const CTwoFactor_FinalizeAddAuthenticator_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&success_)) + sizeof(server_time_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
}

void CTwoFactor_FinalizeAddAuthenticator_Response::SharedCtor() {
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&success_)) + sizeof(server_time_));
}

CTwoFactor_FinalizeAddAuthenticator_Response::~CTwoFactor_FinalizeAddAuthenticator_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  SharedDtor();
}

void CTwoFactor_FinalizeAddAuthenticator_Response::SharedDtor() {
}

void CTwoFactor_FinalizeAddAuthenticator_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_FinalizeAddAuthenticator_Response& CTwoFactor_FinalizeAddAuthenticator_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_FinalizeAddAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_FinalizeAddAuthenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_time_) -
        reinterpret_cast<char*>(&success_)) + sizeof(server_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_FinalizeAddAuthenticator_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_FinalizeAddAuthenticator_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_want_more(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_server_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 status = 4 [(.proto.steam.description) = "Result code"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_FinalizeAddAuthenticator_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_want_more(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &want_more_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_server_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 4 [(.proto.steam.description) = "Result code"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_FinalizeAddAuthenticator_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->want_more(), output);
  }

  // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_time(), output);
  }

  // optional int32 status = 4 [(.proto.steam.description) = "Result code"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
}

::google::protobuf::uint8* CTwoFactor_FinalizeAddAuthenticator_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->want_more(), target);
  }

  // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_time(), target);
  }

  // optional int32 status = 4 [(.proto.steam.description) = "Result code"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  return target;
}

size_t CTwoFactor_FinalizeAddAuthenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool success = 1 [(.proto.steam.description) = "True if succeeded, or want more tries"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool want_more = 2 [(.proto.steam.description) = "True if want more tries"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 status = 4 [(.proto.steam.description) = "Result code"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_FinalizeAddAuthenticator_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_FinalizeAddAuthenticator_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_FinalizeAddAuthenticator_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_FinalizeAddAuthenticator_Response::MergeFrom(const CTwoFactor_FinalizeAddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      want_more_ = from.want_more_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_time_ = from.server_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_FinalizeAddAuthenticator_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_FinalizeAddAuthenticator_Response::CopyFrom(const CTwoFactor_FinalizeAddAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_FinalizeAddAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_FinalizeAddAuthenticator_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_FinalizeAddAuthenticator_Response::Swap(CTwoFactor_FinalizeAddAuthenticator_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_FinalizeAddAuthenticator_Response::InternalSwap(CTwoFactor_FinalizeAddAuthenticator_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
  swap(want_more_, other->want_more_);
  swap(status_, other->status_);
  swap(server_time_, other->server_time_);
}

::google::protobuf::Metadata CTwoFactor_FinalizeAddAuthenticator_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_RemoveAuthenticator_Request::InitAsDefaultInstance() {
}
class CTwoFactor_RemoveAuthenticator_Request::HasBitSetters {
 public:
  static void set_has_revocation_code(CTwoFactor_RemoveAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_revocation_reason(CTwoFactor_RemoveAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_steamguard_scheme(CTwoFactor_RemoveAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_remove_all_steamguard_cookies(CTwoFactor_RemoveAuthenticator_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_RemoveAuthenticator_Request::kRevocationCodeFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Request::kRevocationReasonFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Request::kSteamguardSchemeFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Request::kRemoveAllSteamguardCookiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_RemoveAuthenticator_Request::CTwoFactor_RemoveAuthenticator_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
}
CTwoFactor_RemoveAuthenticator_Request::CTwoFactor_RemoveAuthenticator_Request(const CTwoFactor_RemoveAuthenticator_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  revocation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_revocation_code()) {
    revocation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revocation_code_);
  }
  ::memcpy(&remove_all_steamguard_cookies_, &from.remove_all_steamguard_cookies_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamguard_scheme_) -
    reinterpret_cast<char*>(&remove_all_steamguard_cookies_)) + sizeof(steamguard_scheme_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
}

void CTwoFactor_RemoveAuthenticator_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTwoFactor_RemoveAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  revocation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&remove_all_steamguard_cookies_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamguard_scheme_) -
      reinterpret_cast<char*>(&remove_all_steamguard_cookies_)) + sizeof(steamguard_scheme_));
}

CTwoFactor_RemoveAuthenticator_Request::~CTwoFactor_RemoveAuthenticator_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  SharedDtor();
}

void CTwoFactor_RemoveAuthenticator_Request::SharedDtor() {
  revocation_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_RemoveAuthenticator_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_RemoveAuthenticator_Request& CTwoFactor_RemoveAuthenticator_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_RemoveAuthenticator_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_RemoveAuthenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    revocation_code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&remove_all_steamguard_cookies_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamguard_scheme_) -
        reinterpret_cast<char*>(&remove_all_steamguard_cookies_)) + sizeof(steamguard_scheme_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_RemoveAuthenticator_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_RemoveAuthenticator_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code");
        object = msg->mutable_revocation_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_revocation_reason(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_steamguard_scheme(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_remove_all_steamguard_cookies(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_RemoveAuthenticator_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revocation_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->revocation_code().data(), static_cast<int>(this->revocation_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_revocation_reason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revocation_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_steamguard_scheme(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_scheme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_remove_all_steamguard_cookies(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_all_steamguard_cookies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_RemoveAuthenticator_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revocation_code().data(), static_cast<int>(this->revocation_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->revocation_code(), output);
  }

  // optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->revocation_reason(), output);
  }

  // optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->steamguard_scheme(), output);
  }

  // optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->remove_all_steamguard_cookies(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
}

::google::protobuf::uint8* CTwoFactor_RemoveAuthenticator_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->revocation_code().data(), static_cast<int>(this->revocation_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_RemoveAuthenticator_Request.revocation_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->revocation_code(), target);
  }

  // optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->revocation_reason(), target);
  }

  // optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->steamguard_scheme(), target);
  }

  // optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->remove_all_steamguard_cookies(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  return target;
}

size_t CTwoFactor_RemoveAuthenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string revocation_code = 2 [(.proto.steam.description) = "Password needed to remove token"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->revocation_code());
    }

    // optional bool remove_all_steamguard_cookies = 7 [(.proto.steam.description) = "Remove all steamguard cookies"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 revocation_reason = 5 [(.proto.steam.description) = "Reason the authenticator is being removed"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revocation_reason());
    }

    // optional uint32 steamguard_scheme = 6 [(.proto.steam.description) = "Type of Steam Guard to use once token is removed"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_scheme());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_RemoveAuthenticator_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_RemoveAuthenticator_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_RemoveAuthenticator_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_RemoveAuthenticator_Request::MergeFrom(const CTwoFactor_RemoveAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      revocation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revocation_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      remove_all_steamguard_cookies_ = from.remove_all_steamguard_cookies_;
    }
    if (cached_has_bits & 0x00000004u) {
      revocation_reason_ = from.revocation_reason_;
    }
    if (cached_has_bits & 0x00000008u) {
      steamguard_scheme_ = from.steamguard_scheme_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_RemoveAuthenticator_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_RemoveAuthenticator_Request::CopyFrom(const CTwoFactor_RemoveAuthenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_RemoveAuthenticator_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_RemoveAuthenticator_Request::Swap(CTwoFactor_RemoveAuthenticator_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_RemoveAuthenticator_Request::InternalSwap(CTwoFactor_RemoveAuthenticator_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  revocation_code_.Swap(&other->revocation_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(remove_all_steamguard_cookies_, other->remove_all_steamguard_cookies_);
  swap(revocation_reason_, other->revocation_reason_);
  swap(steamguard_scheme_, other->steamguard_scheme_);
}

::google::protobuf::Metadata CTwoFactor_RemoveAuthenticator_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_RemoveAuthenticator_Response::InitAsDefaultInstance() {
}
class CTwoFactor_RemoveAuthenticator_Response::HasBitSetters {
 public:
  static void set_has_success(CTwoFactor_RemoveAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_server_time(CTwoFactor_RemoveAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_revocation_attempts_remaining(CTwoFactor_RemoveAuthenticator_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_RemoveAuthenticator_Response::kSuccessFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Response::kServerTimeFieldNumber;
const int CTwoFactor_RemoveAuthenticator_Response::kRevocationAttemptsRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_RemoveAuthenticator_Response::CTwoFactor_RemoveAuthenticator_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
}
CTwoFactor_RemoveAuthenticator_Response::CTwoFactor_RemoveAuthenticator_Response(const CTwoFactor_RemoveAuthenticator_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&revocation_attempts_remaining_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(revocation_attempts_remaining_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
}

void CTwoFactor_RemoveAuthenticator_Response::SharedCtor() {
  ::memset(&server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revocation_attempts_remaining_) -
      reinterpret_cast<char*>(&server_time_)) + sizeof(revocation_attempts_remaining_));
}

CTwoFactor_RemoveAuthenticator_Response::~CTwoFactor_RemoveAuthenticator_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  SharedDtor();
}

void CTwoFactor_RemoveAuthenticator_Response::SharedDtor() {
}

void CTwoFactor_RemoveAuthenticator_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_RemoveAuthenticator_Response& CTwoFactor_RemoveAuthenticator_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_RemoveAuthenticator_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_RemoveAuthenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&server_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revocation_attempts_remaining_) -
        reinterpret_cast<char*>(&server_time_)) + sizeof(revocation_attempts_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_RemoveAuthenticator_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_RemoveAuthenticator_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_server_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_revocation_attempts_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_RemoveAuthenticator_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_server_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_revocation_attempts_remaining(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revocation_attempts_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_RemoveAuthenticator_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_time(), output);
  }

  // optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->revocation_attempts_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
}

::google::protobuf::uint8* CTwoFactor_RemoveAuthenticator_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_time(), target);
  }

  // optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->revocation_attempts_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  return target;
}

size_t CTwoFactor_RemoveAuthenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 server_time = 3 [(.proto.steam.description) = "Current server time"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_time());
    }

    // optional bool success = 1 [(.proto.steam.description) = "True if request succeeeded. The mobile app checks this."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 revocation_attempts_remaining = 5 [(.proto.steam.description) = "Number of revocation code attempts remaining"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revocation_attempts_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_RemoveAuthenticator_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_RemoveAuthenticator_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_RemoveAuthenticator_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_RemoveAuthenticator_Response::MergeFrom(const CTwoFactor_RemoveAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      revocation_attempts_remaining_ = from.revocation_attempts_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CTwoFactor_RemoveAuthenticator_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_RemoveAuthenticator_Response::CopyFrom(const CTwoFactor_RemoveAuthenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_RemoveAuthenticator_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_RemoveAuthenticator_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_RemoveAuthenticator_Response::Swap(CTwoFactor_RemoveAuthenticator_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_RemoveAuthenticator_Response::InternalSwap(CTwoFactor_RemoveAuthenticator_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_time_, other->server_time_);
  swap(success_, other->success_);
  swap(revocation_attempts_remaining_, other->revocation_attempts_remaining_);
}

::google::protobuf::Metadata CTwoFactor_RemoveAuthenticator_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_CreateEmergencyCodes_Request::InitAsDefaultInstance() {
}
class CTwoFactor_CreateEmergencyCodes_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_CreateEmergencyCodes_Request::CTwoFactor_CreateEmergencyCodes_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
}
CTwoFactor_CreateEmergencyCodes_Request::CTwoFactor_CreateEmergencyCodes_Request(const CTwoFactor_CreateEmergencyCodes_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
}

void CTwoFactor_CreateEmergencyCodes_Request::SharedCtor() {
}

CTwoFactor_CreateEmergencyCodes_Request::~CTwoFactor_CreateEmergencyCodes_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  SharedDtor();
}

void CTwoFactor_CreateEmergencyCodes_Request::SharedDtor() {
}

void CTwoFactor_CreateEmergencyCodes_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_CreateEmergencyCodes_Request& CTwoFactor_CreateEmergencyCodes_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_CreateEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_CreateEmergencyCodes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_CreateEmergencyCodes_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_CreateEmergencyCodes_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_CreateEmergencyCodes_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_CreateEmergencyCodes_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
}

::google::protobuf::uint8* CTwoFactor_CreateEmergencyCodes_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  return target;
}

size_t CTwoFactor_CreateEmergencyCodes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_CreateEmergencyCodes_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_CreateEmergencyCodes_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_CreateEmergencyCodes_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_CreateEmergencyCodes_Request::MergeFrom(const CTwoFactor_CreateEmergencyCodes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTwoFactor_CreateEmergencyCodes_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_CreateEmergencyCodes_Request::CopyFrom(const CTwoFactor_CreateEmergencyCodes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_CreateEmergencyCodes_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_CreateEmergencyCodes_Request::Swap(CTwoFactor_CreateEmergencyCodes_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_CreateEmergencyCodes_Request::InternalSwap(CTwoFactor_CreateEmergencyCodes_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CTwoFactor_CreateEmergencyCodes_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_CreateEmergencyCodes_Response::InitAsDefaultInstance() {
}
class CTwoFactor_CreateEmergencyCodes_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_CreateEmergencyCodes_Response::kCodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_CreateEmergencyCodes_Response::CTwoFactor_CreateEmergencyCodes_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
}
CTwoFactor_CreateEmergencyCodes_Response::CTwoFactor_CreateEmergencyCodes_Response(const CTwoFactor_CreateEmergencyCodes_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      codes_(from.codes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
}

void CTwoFactor_CreateEmergencyCodes_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTwoFactor_CreateEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
}

CTwoFactor_CreateEmergencyCodes_Response::~CTwoFactor_CreateEmergencyCodes_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  SharedDtor();
}

void CTwoFactor_CreateEmergencyCodes_Response::SharedDtor() {
}

void CTwoFactor_CreateEmergencyCodes_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_CreateEmergencyCodes_Response& CTwoFactor_CreateEmergencyCodes_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_CreateEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_CreateEmergencyCodes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_CreateEmergencyCodes_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_CreateEmergencyCodes_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes");
          object = msg->add_codes();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_CreateEmergencyCodes_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_codes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codes(this->codes_size() - 1).data(),
            static_cast<int>(this->codes(this->codes_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_CreateEmergencyCodes_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
  for (int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codes(i).data(), static_cast<int>(this->codes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->codes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
}

::google::protobuf::uint8* CTwoFactor_CreateEmergencyCodes_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
  for (int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codes(i).data(), static_cast<int>(this->codes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_CreateEmergencyCodes_Response.codes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->codes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  return target;
}

size_t CTwoFactor_CreateEmergencyCodes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string codes = 1 [(.proto.steam.description) = "Emergency codes"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->codes_size());
  for (int i = 0, n = this->codes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->codes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_CreateEmergencyCodes_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_CreateEmergencyCodes_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_CreateEmergencyCodes_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_CreateEmergencyCodes_Response::MergeFrom(const CTwoFactor_CreateEmergencyCodes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  codes_.MergeFrom(from.codes_);
}

void CTwoFactor_CreateEmergencyCodes_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_CreateEmergencyCodes_Response::CopyFrom(const CTwoFactor_CreateEmergencyCodes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_CreateEmergencyCodes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_CreateEmergencyCodes_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_CreateEmergencyCodes_Response::Swap(CTwoFactor_CreateEmergencyCodes_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_CreateEmergencyCodes_Response::InternalSwap(CTwoFactor_CreateEmergencyCodes_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  codes_.InternalSwap(CastToBase(&other->codes_));
}

::google::protobuf::Metadata CTwoFactor_CreateEmergencyCodes_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_DestroyEmergencyCodes_Request::InitAsDefaultInstance() {
}
class CTwoFactor_DestroyEmergencyCodes_Request::HasBitSetters {
 public:
  static void set_has_steamid(CTwoFactor_DestroyEmergencyCodes_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_DestroyEmergencyCodes_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_DestroyEmergencyCodes_Request::CTwoFactor_DestroyEmergencyCodes_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
}
CTwoFactor_DestroyEmergencyCodes_Request::CTwoFactor_DestroyEmergencyCodes_Request(const CTwoFactor_DestroyEmergencyCodes_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
}

void CTwoFactor_DestroyEmergencyCodes_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CTwoFactor_DestroyEmergencyCodes_Request::~CTwoFactor_DestroyEmergencyCodes_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  SharedDtor();
}

void CTwoFactor_DestroyEmergencyCodes_Request::SharedDtor() {
}

void CTwoFactor_DestroyEmergencyCodes_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_DestroyEmergencyCodes_Request& CTwoFactor_DestroyEmergencyCodes_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_DestroyEmergencyCodes_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_DestroyEmergencyCodes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_DestroyEmergencyCodes_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_DestroyEmergencyCodes_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_DestroyEmergencyCodes_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_DestroyEmergencyCodes_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
}

::google::protobuf::uint8* CTwoFactor_DestroyEmergencyCodes_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  return target;
}

size_t CTwoFactor_DestroyEmergencyCodes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "steamid to use"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_DestroyEmergencyCodes_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_DestroyEmergencyCodes_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_DestroyEmergencyCodes_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_DestroyEmergencyCodes_Request::MergeFrom(const CTwoFactor_DestroyEmergencyCodes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CTwoFactor_DestroyEmergencyCodes_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_DestroyEmergencyCodes_Request::CopyFrom(const CTwoFactor_DestroyEmergencyCodes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_DestroyEmergencyCodes_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_DestroyEmergencyCodes_Request::Swap(CTwoFactor_DestroyEmergencyCodes_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_DestroyEmergencyCodes_Request::InternalSwap(CTwoFactor_DestroyEmergencyCodes_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CTwoFactor_DestroyEmergencyCodes_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_DestroyEmergencyCodes_Response::InitAsDefaultInstance() {
}
class CTwoFactor_DestroyEmergencyCodes_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_DestroyEmergencyCodes_Response::CTwoFactor_DestroyEmergencyCodes_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
}
CTwoFactor_DestroyEmergencyCodes_Response::CTwoFactor_DestroyEmergencyCodes_Response(const CTwoFactor_DestroyEmergencyCodes_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
}

void CTwoFactor_DestroyEmergencyCodes_Response::SharedCtor() {
}

CTwoFactor_DestroyEmergencyCodes_Response::~CTwoFactor_DestroyEmergencyCodes_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  SharedDtor();
}

void CTwoFactor_DestroyEmergencyCodes_Response::SharedDtor() {
}

void CTwoFactor_DestroyEmergencyCodes_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_DestroyEmergencyCodes_Response& CTwoFactor_DestroyEmergencyCodes_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_DestroyEmergencyCodes_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_DestroyEmergencyCodes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_DestroyEmergencyCodes_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_DestroyEmergencyCodes_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_DestroyEmergencyCodes_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_DestroyEmergencyCodes_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
}

::google::protobuf::uint8* CTwoFactor_DestroyEmergencyCodes_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  return target;
}

size_t CTwoFactor_DestroyEmergencyCodes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_DestroyEmergencyCodes_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_DestroyEmergencyCodes_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_DestroyEmergencyCodes_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_DestroyEmergencyCodes_Response::MergeFrom(const CTwoFactor_DestroyEmergencyCodes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTwoFactor_DestroyEmergencyCodes_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_DestroyEmergencyCodes_Response::CopyFrom(const CTwoFactor_DestroyEmergencyCodes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_DestroyEmergencyCodes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_DestroyEmergencyCodes_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_DestroyEmergencyCodes_Response::Swap(CTwoFactor_DestroyEmergencyCodes_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_DestroyEmergencyCodes_Response::InternalSwap(CTwoFactor_DestroyEmergencyCodes_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CTwoFactor_DestroyEmergencyCodes_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_ValidateToken_Request::InitAsDefaultInstance() {
}
class CTwoFactor_ValidateToken_Request::HasBitSetters {
 public:
  static void set_has_code(CTwoFactor_ValidateToken_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_ValidateToken_Request::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_ValidateToken_Request::CTwoFactor_ValidateToken_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_ValidateToken_Request)
}
CTwoFactor_ValidateToken_Request::CTwoFactor_ValidateToken_Request(const CTwoFactor_ValidateToken_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_ValidateToken_Request)
}

void CTwoFactor_ValidateToken_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTwoFactor_ValidateToken_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CTwoFactor_ValidateToken_Request::~CTwoFactor_ValidateToken_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_ValidateToken_Request)
  SharedDtor();
}

void CTwoFactor_ValidateToken_Request::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTwoFactor_ValidateToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_ValidateToken_Request& CTwoFactor_ValidateToken_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_ValidateToken_Request_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_ValidateToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_ValidateToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_ValidateToken_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_ValidateToken_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string code = 1 [(.proto.steam.description) = "code to validate"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CTwoFactor_ValidateToken_Request.code");
        object = msg->mutable_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_ValidateToken_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_ValidateToken_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1 [(.proto.steam.description) = "code to validate"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CTwoFactor_ValidateToken_Request.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_ValidateToken_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_ValidateToken_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_ValidateToken_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_ValidateToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1 [(.proto.steam.description) = "code to validate"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_ValidateToken_Request.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_ValidateToken_Request)
}

::google::protobuf::uint8* CTwoFactor_ValidateToken_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_ValidateToken_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1 [(.proto.steam.description) = "code to validate"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CTwoFactor_ValidateToken_Request.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_ValidateToken_Request)
  return target;
}

size_t CTwoFactor_ValidateToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_ValidateToken_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string code = 1 [(.proto.steam.description) = "code to validate"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_ValidateToken_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_ValidateToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_ValidateToken_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_ValidateToken_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_ValidateToken_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_ValidateToken_Request)
    MergeFrom(*source);
  }
}

void CTwoFactor_ValidateToken_Request::MergeFrom(const CTwoFactor_ValidateToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_ValidateToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_code()) {
    _has_bits_[0] |= 0x00000001u;
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void CTwoFactor_ValidateToken_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_ValidateToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_ValidateToken_Request::CopyFrom(const CTwoFactor_ValidateToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_ValidateToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_ValidateToken_Request::IsInitialized() const {
  return true;
}

void CTwoFactor_ValidateToken_Request::Swap(CTwoFactor_ValidateToken_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_ValidateToken_Request::InternalSwap(CTwoFactor_ValidateToken_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CTwoFactor_ValidateToken_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTwoFactor_ValidateToken_Response::InitAsDefaultInstance() {
}
class CTwoFactor_ValidateToken_Response::HasBitSetters {
 public:
  static void set_has_valid(CTwoFactor_ValidateToken_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTwoFactor_ValidateToken_Response::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTwoFactor_ValidateToken_Response::CTwoFactor_ValidateToken_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CTwoFactor_ValidateToken_Response)
}
CTwoFactor_ValidateToken_Response::CTwoFactor_ValidateToken_Response(const CTwoFactor_ValidateToken_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CTwoFactor_ValidateToken_Response)
}

void CTwoFactor_ValidateToken_Response::SharedCtor() {
  valid_ = false;
}

CTwoFactor_ValidateToken_Response::~CTwoFactor_ValidateToken_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CTwoFactor_ValidateToken_Response)
  SharedDtor();
}

void CTwoFactor_ValidateToken_Response::SharedDtor() {
}

void CTwoFactor_ValidateToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTwoFactor_ValidateToken_Response& CTwoFactor_ValidateToken_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTwoFactor_ValidateToken_Response_steammessages_5ftwofactor_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CTwoFactor_ValidateToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CTwoFactor_ValidateToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valid_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTwoFactor_ValidateToken_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTwoFactor_ValidateToken_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_valid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTwoFactor_ValidateToken_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CTwoFactor_ValidateToken_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_valid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CTwoFactor_ValidateToken_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CTwoFactor_ValidateToken_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTwoFactor_ValidateToken_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CTwoFactor_ValidateToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CTwoFactor_ValidateToken_Response)
}

::google::protobuf::uint8* CTwoFactor_ValidateToken_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CTwoFactor_ValidateToken_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CTwoFactor_ValidateToken_Response)
  return target;
}

size_t CTwoFactor_ValidateToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CTwoFactor_ValidateToken_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool valid = 1 [(.proto.steam.description) = "result of validation"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTwoFactor_ValidateToken_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CTwoFactor_ValidateToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CTwoFactor_ValidateToken_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CTwoFactor_ValidateToken_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CTwoFactor_ValidateToken_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CTwoFactor_ValidateToken_Response)
    MergeFrom(*source);
  }
}

void CTwoFactor_ValidateToken_Response::MergeFrom(const CTwoFactor_ValidateToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CTwoFactor_ValidateToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_valid()) {
    set_valid(from.valid());
  }
}

void CTwoFactor_ValidateToken_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CTwoFactor_ValidateToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTwoFactor_ValidateToken_Response::CopyFrom(const CTwoFactor_ValidateToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CTwoFactor_ValidateToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTwoFactor_ValidateToken_Response::IsInitialized() const {
  return true;
}

void CTwoFactor_ValidateToken_Response::Swap(CTwoFactor_ValidateToken_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTwoFactor_ValidateToken_Response::InternalSwap(CTwoFactor_ValidateToken_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(valid_, other->valid_);
}

::google::protobuf::Metadata CTwoFactor_ValidateToken_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5ftwofactor_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

TwoFactor::~TwoFactor() {}

const ::google::protobuf::ServiceDescriptor* TwoFactor::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5ftwofactor_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* TwoFactor::GetDescriptor() {
  return descriptor();
}

void TwoFactor::QueryStatus(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_Status_Request*,
                         ::proto::steam::CTwoFactor_Status_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryStatus() not implemented.");
  done->Run();
}

void TwoFactor::AddAuthenticator(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_AddAuthenticator_Request*,
                         ::proto::steam::CTwoFactor_AddAuthenticator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddAuthenticator() not implemented.");
  done->Run();
}

void TwoFactor::SendEmail(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_SendEmail_Request*,
                         ::proto::steam::CTwoFactor_SendEmail_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendEmail() not implemented.");
  done->Run();
}

void TwoFactor::FinalizeAddAuthenticator(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request*,
                         ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FinalizeAddAuthenticator() not implemented.");
  done->Run();
}

void TwoFactor::RemoveAuthenticator(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_RemoveAuthenticator_Request*,
                         ::proto::steam::CTwoFactor_RemoveAuthenticator_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveAuthenticator() not implemented.");
  done->Run();
}

void TwoFactor::CreateEmergencyCodes(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request*,
                         ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateEmergencyCodes() not implemented.");
  done->Run();
}

void TwoFactor::DestroyEmergencyCodes(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request*,
                         ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DestroyEmergencyCodes() not implemented.");
  done->Run();
}

void TwoFactor::ValidateToken(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CTwoFactor_ValidateToken_Request*,
                         ::proto::steam::CTwoFactor_ValidateToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ValidateToken() not implemented.");
  done->Run();
}

void TwoFactor::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5ftwofactor_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      QueryStatus(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_Status_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_Status_Response*>(response),
             done);
      break;
    case 1:
      AddAuthenticator(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_AddAuthenticator_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_AddAuthenticator_Response*>(response),
             done);
      break;
    case 2:
      SendEmail(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_SendEmail_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_SendEmail_Response*>(response),
             done);
      break;
    case 3:
      FinalizeAddAuthenticator(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response*>(response),
             done);
      break;
    case 4:
      RemoveAuthenticator(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_RemoveAuthenticator_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_RemoveAuthenticator_Response*>(response),
             done);
      break;
    case 5:
      CreateEmergencyCodes(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response*>(response),
             done);
      break;
    case 6:
      DestroyEmergencyCodes(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response*>(response),
             done);
      break;
    case 7:
      ValidateToken(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CTwoFactor_ValidateToken_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CTwoFactor_ValidateToken_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TwoFactor::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CTwoFactor_Status_Request::default_instance();
    case 1:
      return ::proto::steam::CTwoFactor_AddAuthenticator_Request::default_instance();
    case 2:
      return ::proto::steam::CTwoFactor_SendEmail_Request::default_instance();
    case 3:
      return ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request::default_instance();
    case 4:
      return ::proto::steam::CTwoFactor_RemoveAuthenticator_Request::default_instance();
    case 5:
      return ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request::default_instance();
    case 6:
      return ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request::default_instance();
    case 7:
      return ::proto::steam::CTwoFactor_ValidateToken_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& TwoFactor::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CTwoFactor_Status_Response::default_instance();
    case 1:
      return ::proto::steam::CTwoFactor_AddAuthenticator_Response::default_instance();
    case 2:
      return ::proto::steam::CTwoFactor_SendEmail_Response::default_instance();
    case 3:
      return ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response::default_instance();
    case 4:
      return ::proto::steam::CTwoFactor_RemoveAuthenticator_Response::default_instance();
    case 5:
      return ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response::default_instance();
    case 6:
      return ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response::default_instance();
    case 7:
      return ::proto::steam::CTwoFactor_ValidateToken_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TwoFactor_Stub::TwoFactor_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TwoFactor_Stub::TwoFactor_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TwoFactor_Stub::~TwoFactor_Stub() {
  if (owns_channel_) delete channel_;
}

void TwoFactor_Stub::QueryStatus(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_Status_Request* request,
                              ::proto::steam::CTwoFactor_Status_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TwoFactor_Stub::AddAuthenticator(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_AddAuthenticator_Request* request,
                              ::proto::steam::CTwoFactor_AddAuthenticator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void TwoFactor_Stub::SendEmail(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_SendEmail_Request* request,
                              ::proto::steam::CTwoFactor_SendEmail_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void TwoFactor_Stub::FinalizeAddAuthenticator(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request* request,
                              ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void TwoFactor_Stub::RemoveAuthenticator(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_RemoveAuthenticator_Request* request,
                              ::proto::steam::CTwoFactor_RemoveAuthenticator_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void TwoFactor_Stub::CreateEmergencyCodes(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request* request,
                              ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void TwoFactor_Stub::DestroyEmergencyCodes(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request* request,
                              ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void TwoFactor_Stub::ValidateToken(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CTwoFactor_ValidateToken_Request* request,
                              ::proto::steam::CTwoFactor_ValidateToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_Status_Request* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_Status_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_Status_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_Status_Response* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_Status_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_Status_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_AddAuthenticator_Request* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_AddAuthenticator_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_AddAuthenticator_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_AddAuthenticator_Response* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_AddAuthenticator_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_AddAuthenticator_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_SendEmail_Request* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_SendEmail_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_SendEmail_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_SendEmail_Response* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_SendEmail_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_SendEmail_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_FinalizeAddAuthenticator_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_RemoveAuthenticator_Request* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_RemoveAuthenticator_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_RemoveAuthenticator_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_RemoveAuthenticator_Response* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_RemoveAuthenticator_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_RemoveAuthenticator_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_CreateEmergencyCodes_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_CreateEmergencyCodes_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_DestroyEmergencyCodes_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_ValidateToken_Request* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_ValidateToken_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_ValidateToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CTwoFactor_ValidateToken_Response* Arena::CreateMaybeMessage< ::proto::steam::CTwoFactor_ValidateToken_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CTwoFactor_ValidateToken_Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
