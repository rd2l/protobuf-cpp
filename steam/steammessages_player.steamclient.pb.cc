// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_player.steamclient.proto

#include "steammessages_player.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fplayer_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_CommunityPreferences_steammessages_5fplayer_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fplayer_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetGameBadgeLevels_Response_Badge_steammessages_5fplayer_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fplayer_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetLastPlayedTimes_Response_Game_steammessages_5fplayer_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fplayer_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetNicknameList_Response_PlayerNickname_steammessages_5fplayer_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fplayer_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_IncomingInviteMutualFriendList_steammessages_5fplayer_2esteamclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steammessages_5fplayer_2esteamclient_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto;
namespace proto {
namespace steam {
class CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetMutualFriendsForIncomingInvites_Request> _instance;
} _CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_;
class CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_IncomingInviteMutualFriendList> _instance;
} _CPlayer_IncomingInviteMutualFriendList_default_instance_;
class CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetMutualFriendsForIncomingInvites_Response> _instance;
} _CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_;
class CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetGameBadgeLevels_Request> _instance;
} _CPlayer_GetGameBadgeLevels_Request_default_instance_;
class CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetGameBadgeLevels_Response_Badge> _instance;
} _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_;
class CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetGameBadgeLevels_Response> _instance;
} _CPlayer_GetGameBadgeLevels_Response_default_instance_;
class CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetLastPlayedTimes_Request> _instance;
} _CPlayer_GetLastPlayedTimes_Request_default_instance_;
class CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetLastPlayedTimes_Response_Game> _instance;
} _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_;
class CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetLastPlayedTimes_Response> _instance;
} _CPlayer_GetLastPlayedTimes_Response_default_instance_;
class CPlayer_AcceptSSA_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_AcceptSSA_Request> _instance;
} _CPlayer_AcceptSSA_Request_default_instance_;
class CPlayer_AcceptSSA_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_AcceptSSA_Response> _instance;
} _CPlayer_AcceptSSA_Response_default_instance_;
class CPlayer_GetNicknameList_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetNicknameList_Request> _instance;
} _CPlayer_GetNicknameList_Request_default_instance_;
class CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetNicknameList_Response_PlayerNickname> _instance;
} _CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_;
class CPlayer_GetNicknameList_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetNicknameList_Response> _instance;
} _CPlayer_GetNicknameList_Response_default_instance_;
class CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetPerFriendPreferences_Request> _instance;
} _CPlayer_GetPerFriendPreferences_Request_default_instance_;
class PerFriendPreferencesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerFriendPreferences> _instance;
} _PerFriendPreferences_default_instance_;
class CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetPerFriendPreferences_Response> _instance;
} _CPlayer_GetPerFriendPreferences_Response_default_instance_;
class CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_SetPerFriendPreferences_Request> _instance;
} _CPlayer_SetPerFriendPreferences_Request_default_instance_;
class CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_SetPerFriendPreferences_Response> _instance;
} _CPlayer_SetPerFriendPreferences_Response_default_instance_;
class CPlayer_AddFriend_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_AddFriend_Request> _instance;
} _CPlayer_AddFriend_Request_default_instance_;
class CPlayer_AddFriend_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_AddFriend_Response> _instance;
} _CPlayer_AddFriend_Response_default_instance_;
class CPlayer_RemoveFriend_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_RemoveFriend_Request> _instance;
} _CPlayer_RemoveFriend_Request_default_instance_;
class CPlayer_RemoveFriend_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_RemoveFriend_Response> _instance;
} _CPlayer_RemoveFriend_Response_default_instance_;
class CPlayer_IgnoreFriend_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_IgnoreFriend_Request> _instance;
} _CPlayer_IgnoreFriend_Request_default_instance_;
class CPlayer_IgnoreFriend_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_IgnoreFriend_Response> _instance;
} _CPlayer_IgnoreFriend_Response_default_instance_;
class CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetCommunityPreferences_Request> _instance;
} _CPlayer_GetCommunityPreferences_Request_default_instance_;
class CPlayer_CommunityPreferencesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_CommunityPreferences> _instance;
} _CPlayer_CommunityPreferences_default_instance_;
class CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetCommunityPreferences_Response> _instance;
} _CPlayer_GetCommunityPreferences_Response_default_instance_;
class CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_SetCommunityPreferences_Request> _instance;
} _CPlayer_SetCommunityPreferences_Request_default_instance_;
class CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_SetCommunityPreferences_Response> _instance;
} _CPlayer_SetCommunityPreferences_Response_default_instance_;
class CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetNewSteamAnnouncementState_Request> _instance;
} _CPlayer_GetNewSteamAnnouncementState_Request_default_instance_;
class CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetNewSteamAnnouncementState_Response> _instance;
} _CPlayer_GetNewSteamAnnouncementState_Response_default_instance_;
class CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_UpdateSteamAnnouncementLastRead_Request> _instance;
} _CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_;
class CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_UpdateSteamAnnouncementLastRead_Response> _instance;
} _CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_;
class CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_LastPlayedTimes_Notification> _instance;
} _CPlayer_LastPlayedTimes_Notification_default_instance_;
class CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_FriendNicknameChanged_Notification> _instance;
} _CPlayer_FriendNicknameChanged_Notification_default_instance_;
class CPlayer_NewSteamAnnouncementState_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_NewSteamAnnouncementState_Notification> _instance;
} _CPlayer_NewSteamAnnouncementState_Notification_default_instance_;
class CPlayer_CommunityPreferencesChanged_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_CommunityPreferencesChanged_Notification> _instance;
} _CPlayer_CommunityPreferencesChanged_Notification_default_instance_;
class CPlayer_PerFriendPreferencesChanged_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_PerFriendPreferencesChanged_Notification> _instance;
} _CPlayer_PerFriendPreferencesChanged_Notification_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCPlayer_GetMutualFriendsForIncomingInvites_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetMutualFriendsForIncomingInvites_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetMutualFriendsForIncomingInvites_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_IncomingInviteMutualFriendList_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_IncomingInviteMutualFriendList_default_instance_;
    new (ptr) ::proto::steam::CPlayer_IncomingInviteMutualFriendList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_IncomingInviteMutualFriendList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_IncomingInviteMutualFriendList_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_IncomingInviteMutualFriendList_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetMutualFriendsForIncomingInvites_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_GetMutualFriendsForIncomingInvites_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_GetMutualFriendsForIncomingInvites_Response_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_CPlayer_IncomingInviteMutualFriendList_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_GetGameBadgeLevels_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetGameBadgeLevels_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetGameBadgeLevels_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetGameBadgeLevels_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetGameBadgeLevels_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetGameBadgeLevels_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetGameBadgeLevels_Response_Badge_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetGameBadgeLevels_Response_Badge_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetGameBadgeLevels_Response_Badge_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetGameBadgeLevels_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetGameBadgeLevels_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetGameBadgeLevels_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetGameBadgeLevels_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_GetGameBadgeLevels_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_GetGameBadgeLevels_Response_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_CPlayer_GetGameBadgeLevels_Response_Badge_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_GetLastPlayedTimes_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetLastPlayedTimes_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetLastPlayedTimes_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetLastPlayedTimes_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetLastPlayedTimes_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetLastPlayedTimes_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetLastPlayedTimes_Response_Game_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetLastPlayedTimes_Response_Game_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetLastPlayedTimes_Response_Game_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetLastPlayedTimes_Response_Game_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetLastPlayedTimes_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetLastPlayedTimes_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetLastPlayedTimes_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_GetLastPlayedTimes_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_GetLastPlayedTimes_Response_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_CPlayer_GetLastPlayedTimes_Response_Game_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_AcceptSSA_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_AcceptSSA_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_AcceptSSA_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_AcceptSSA_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_AcceptSSA_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_AcceptSSA_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_AcceptSSA_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_AcceptSSA_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_AcceptSSA_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_AcceptSSA_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_AcceptSSA_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_AcceptSSA_Response_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetNicknameList_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetNicknameList_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetNicknameList_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetNicknameList_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetNicknameList_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetNicknameList_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetNicknameList_Response_PlayerNickname_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetNicknameList_Response_PlayerNickname_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetNicknameList_Response_PlayerNickname_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetNicknameList_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetNicknameList_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetNicknameList_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetNicknameList_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_GetNicknameList_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_GetNicknameList_Response_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_CPlayer_GetNicknameList_Response_PlayerNickname_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_GetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetPerFriendPreferences_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetPerFriendPreferences_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetPerFriendPreferences_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsPerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_PerFriendPreferences_default_instance_;
    new (ptr) ::proto::steam::PerFriendPreferences();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::PerFriendPreferences::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetPerFriendPreferences_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetPerFriendPreferences_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetPerFriendPreferences_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_GetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_GetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_PerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_SetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_SetPerFriendPreferences_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_SetPerFriendPreferences_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_SetPerFriendPreferences_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_SetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_SetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_PerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_SetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_SetPerFriendPreferences_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_SetPerFriendPreferences_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_SetPerFriendPreferences_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_SetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_SetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_AddFriend_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_AddFriend_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_AddFriend_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_AddFriend_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_AddFriend_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_AddFriend_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_AddFriend_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_AddFriend_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_AddFriend_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_AddFriend_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_AddFriend_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_AddFriend_Response_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_RemoveFriend_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_RemoveFriend_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_RemoveFriend_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_RemoveFriend_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_RemoveFriend_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_RemoveFriend_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_RemoveFriend_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_RemoveFriend_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_RemoveFriend_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_RemoveFriend_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_RemoveFriend_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_RemoveFriend_Response_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_IgnoreFriend_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_IgnoreFriend_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_IgnoreFriend_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_IgnoreFriend_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_IgnoreFriend_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_IgnoreFriend_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_IgnoreFriend_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_IgnoreFriend_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_IgnoreFriend_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_IgnoreFriend_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_IgnoreFriend_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_IgnoreFriend_Response_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetCommunityPreferences_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetCommunityPreferences_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetCommunityPreferences_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_CommunityPreferences_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_CommunityPreferences_default_instance_;
    new (ptr) ::proto::steam::CPlayer_CommunityPreferences();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_CommunityPreferences::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_CommunityPreferences_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_CommunityPreferences_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetCommunityPreferences_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetCommunityPreferences_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetCommunityPreferences_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_GetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_GetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_CPlayer_CommunityPreferences_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_SetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_SetCommunityPreferences_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_SetCommunityPreferences_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_SetCommunityPreferences_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_SetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_SetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_CPlayer_CommunityPreferences_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_SetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_SetCommunityPreferences_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_SetCommunityPreferences_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_SetCommunityPreferences_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_SetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_SetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetNewSteamAnnouncementState_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetNewSteamAnnouncementState_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetNewSteamAnnouncementState_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetNewSteamAnnouncementState_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_GetNewSteamAnnouncementState_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_GetNewSteamAnnouncementState_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_GetNewSteamAnnouncementState_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_GetNewSteamAnnouncementState_Response_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_UpdateSteamAnnouncementLastRead_Request_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_;
    new (ptr) ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_UpdateSteamAnnouncementLastRead_Request_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_UpdateSteamAnnouncementLastRead_Request_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_UpdateSteamAnnouncementLastRead_Response_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_;
    new (ptr) ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_UpdateSteamAnnouncementLastRead_Response_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_UpdateSteamAnnouncementLastRead_Response_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_LastPlayedTimes_Notification_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_LastPlayedTimes_Notification_default_instance_;
    new (ptr) ::proto::steam::CPlayer_LastPlayedTimes_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_LastPlayedTimes_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_LastPlayedTimes_Notification_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_LastPlayedTimes_Notification_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_CPlayer_GetLastPlayedTimes_Response_Game_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_FriendNicknameChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_FriendNicknameChanged_Notification_default_instance_;
    new (ptr) ::proto::steam::CPlayer_FriendNicknameChanged_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_FriendNicknameChanged_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_FriendNicknameChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_FriendNicknameChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_NewSteamAnnouncementState_Notification_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_NewSteamAnnouncementState_Notification_default_instance_;
    new (ptr) ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPlayer_NewSteamAnnouncementState_Notification_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPlayer_NewSteamAnnouncementState_Notification_steammessages_5fplayer_2esteamclient_2eproto}, {}};

static void InitDefaultsCPlayer_CommunityPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_CommunityPreferencesChanged_Notification_default_instance_;
    new (ptr) ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_CommunityPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_CommunityPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_CPlayer_CommunityPreferences_steammessages_5fplayer_2esteamclient_2eproto.base,}};

static void InitDefaultsCPlayer_PerFriendPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CPlayer_PerFriendPreferencesChanged_Notification_default_instance_;
    new (ptr) ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CPlayer_PerFriendPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCPlayer_PerFriendPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto}, {
      &scc_info_PerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto.base,}};

void InitDefaults_steammessages_5fplayer_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetMutualFriendsForIncomingInvites_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_IncomingInviteMutualFriendList_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetMutualFriendsForIncomingInvites_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetGameBadgeLevels_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetGameBadgeLevels_Response_Badge_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetGameBadgeLevels_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetLastPlayedTimes_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetLastPlayedTimes_Response_Game_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetLastPlayedTimes_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_AcceptSSA_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_AcceptSSA_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetNicknameList_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetNicknameList_Response_PlayerNickname_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetNicknameList_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_SetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_SetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_AddFriend_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_AddFriend_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_RemoveFriend_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_RemoveFriend_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_IgnoreFriend_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_IgnoreFriend_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_CommunityPreferences_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_SetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_SetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetNewSteamAnnouncementState_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_GetNewSteamAnnouncementState_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_UpdateSteamAnnouncementLastRead_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_UpdateSteamAnnouncementLastRead_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_LastPlayedTimes_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_FriendNicknameChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_NewSteamAnnouncementState_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_CommunityPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CPlayer_PerFriendPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[39];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_steammessages_5fplayer_2esteamclient_2eproto[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[2];

const ::google::protobuf::uint32 TableStruct_steammessages_5fplayer_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IncomingInviteMutualFriendList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IncomingInviteMutualFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IncomingInviteMutualFriendList, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IncomingInviteMutualFriendList, mutual_friend_account_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response, incoming_invite_mutual_friends_lists_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge, level_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge, series_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge, border_color_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Response, player_level_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetGameBadgeLevels_Response, badges_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Request, min_last_played_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game, last_playtime_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game, playtime_2weeks_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game, playtime_forever_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game, first_playtime_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetLastPlayedTimes_Response, games_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AcceptSSA_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AcceptSSA_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AcceptSSA_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AcceptSSA_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNicknameList_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNicknameList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname, accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname, nickname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNicknameList_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNicknameList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNicknameList_Response, nicknames_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetPerFriendPreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetPerFriendPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, nickname_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, notifications_showingame_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, notifications_showonline_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, notifications_showmessages_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, sounds_showingame_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, sounds_showonline_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::PerFriendPreferences, sounds_showmessages_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetPerFriendPreferences_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetPerFriendPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetPerFriendPreferences_Response, preferences_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetPerFriendPreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetPerFriendPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetPerFriendPreferences_Request, preferences_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetPerFriendPreferences_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetPerFriendPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AddFriend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AddFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AddFriend_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AddFriend_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AddFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AddFriend_Response, invite_sent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_AddFriend_Response, friend_relationship_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_RemoveFriend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_RemoveFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_RemoveFriend_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_RemoveFriend_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_RemoveFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_RemoveFriend_Response, friend_relationship_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IgnoreFriend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IgnoreFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IgnoreFriend_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IgnoreFriend_Request, unignore_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IgnoreFriend_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IgnoreFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_IgnoreFriend_Response, friend_relationship_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetCommunityPreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetCommunityPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_CommunityPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_CommunityPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_CommunityPreferences, hide_adult_content_violence_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_CommunityPreferences, hide_adult_content_sex_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_CommunityPreferences, parenthesize_nicknames_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_CommunityPreferences, timestamp_updated_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetCommunityPreferences_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetCommunityPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetCommunityPreferences_Response, preferences_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetCommunityPreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetCommunityPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetCommunityPreferences_Request, preferences_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetCommunityPreferences_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_SetCommunityPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request, language_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response, state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response, announcement_headline_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response, announcement_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response, time_posted_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response, announcement_gid_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request, announcement_gid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request, time_posted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_LastPlayedTimes_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_LastPlayedTimes_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_LastPlayedTimes_Notification, games_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_FriendNicknameChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_FriendNicknameChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_FriendNicknameChanged_Notification, accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_FriendNicknameChanged_Notification, nickname_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_FriendNicknameChanged_Notification, is_echo_to_self_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_NewSteamAnnouncementState_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_NewSteamAnnouncementState_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_NewSteamAnnouncementState_Notification, state_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_NewSteamAnnouncementState_Notification, announcement_headline_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_NewSteamAnnouncementState_Notification, announcement_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_NewSteamAnnouncementState_Notification, time_posted_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_NewSteamAnnouncementState_Notification, announcement_gid_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_CommunityPreferencesChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_CommunityPreferencesChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_CommunityPreferencesChanged_Notification, preferences_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification, accountid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification, preferences_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request)},
  { 5, 12, sizeof(::proto::steam::CPlayer_IncomingInviteMutualFriendList)},
  { 14, 20, sizeof(::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response)},
  { 21, 27, sizeof(::proto::steam::CPlayer_GetGameBadgeLevels_Request)},
  { 28, 36, sizeof(::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge)},
  { 39, 46, sizeof(::proto::steam::CPlayer_GetGameBadgeLevels_Response)},
  { 48, 54, sizeof(::proto::steam::CPlayer_GetLastPlayedTimes_Request)},
  { 55, 65, sizeof(::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game)},
  { 70, 76, sizeof(::proto::steam::CPlayer_GetLastPlayedTimes_Response)},
  { 77, 82, sizeof(::proto::steam::CPlayer_AcceptSSA_Request)},
  { 82, 87, sizeof(::proto::steam::CPlayer_AcceptSSA_Response)},
  { 87, 92, sizeof(::proto::steam::CPlayer_GetNicknameList_Request)},
  { 92, 99, sizeof(::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname)},
  { 101, 107, sizeof(::proto::steam::CPlayer_GetNicknameList_Response)},
  { 108, 113, sizeof(::proto::steam::CPlayer_GetPerFriendPreferences_Request)},
  { 113, 126, sizeof(::proto::steam::PerFriendPreferences)},
  { 134, 140, sizeof(::proto::steam::CPlayer_GetPerFriendPreferences_Response)},
  { 141, 147, sizeof(::proto::steam::CPlayer_SetPerFriendPreferences_Request)},
  { 148, 153, sizeof(::proto::steam::CPlayer_SetPerFriendPreferences_Response)},
  { 153, 159, sizeof(::proto::steam::CPlayer_AddFriend_Request)},
  { 160, 167, sizeof(::proto::steam::CPlayer_AddFriend_Response)},
  { 169, 175, sizeof(::proto::steam::CPlayer_RemoveFriend_Request)},
  { 176, 182, sizeof(::proto::steam::CPlayer_RemoveFriend_Response)},
  { 183, 190, sizeof(::proto::steam::CPlayer_IgnoreFriend_Request)},
  { 192, 198, sizeof(::proto::steam::CPlayer_IgnoreFriend_Response)},
  { 199, 204, sizeof(::proto::steam::CPlayer_GetCommunityPreferences_Request)},
  { 204, 213, sizeof(::proto::steam::CPlayer_CommunityPreferences)},
  { 217, 223, sizeof(::proto::steam::CPlayer_GetCommunityPreferences_Response)},
  { 224, 230, sizeof(::proto::steam::CPlayer_SetCommunityPreferences_Request)},
  { 231, 236, sizeof(::proto::steam::CPlayer_SetCommunityPreferences_Response)},
  { 236, 242, sizeof(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request)},
  { 243, 253, sizeof(::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response)},
  { 258, 265, sizeof(::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request)},
  { 267, 272, sizeof(::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response)},
  { 272, 278, sizeof(::proto::steam::CPlayer_LastPlayedTimes_Notification)},
  { 279, 287, sizeof(::proto::steam::CPlayer_FriendNicknameChanged_Notification)},
  { 290, 300, sizeof(::proto::steam::CPlayer_NewSteamAnnouncementState_Notification)},
  { 305, 311, sizeof(::proto::steam::CPlayer_CommunityPreferencesChanged_Notification)},
  { 312, 319, sizeof(::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_IncomingInviteMutualFriendList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetGameBadgeLevels_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetGameBadgeLevels_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetLastPlayedTimes_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetLastPlayedTimes_Response_Game_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetLastPlayedTimes_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_AcceptSSA_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_AcceptSSA_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetNicknameList_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetNicknameList_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetPerFriendPreferences_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_PerFriendPreferences_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetPerFriendPreferences_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_SetPerFriendPreferences_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_SetPerFriendPreferences_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_AddFriend_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_AddFriend_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_RemoveFriend_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_RemoveFriend_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_IgnoreFriend_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_IgnoreFriend_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetCommunityPreferences_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_CommunityPreferences_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetCommunityPreferences_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_SetCommunityPreferences_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_SetCommunityPreferences_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetNewSteamAnnouncementState_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_GetNewSteamAnnouncementState_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_LastPlayedTimes_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_FriendNicknameChanged_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_NewSteamAnnouncementState_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_CommunityPreferencesChanged_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CPlayer_PerFriendPreferencesChanged_Notification_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fplayer_2esteamclient_2eproto, "steammessages_player.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fplayer_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto, 39, file_level_enum_descriptors_steammessages_5fplayer_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fplayer_2esteamclient_2eproto[] =
  "\n&steammessages_player.steamclient.proto"
  "\022\013proto.steam\032,steammessages_unified_bas"
  "e.steamclient.proto\"4\n2CPlayer_GetMutual"
  "FriendsForIncomingInvites_Request\"\\\n&CPl"
  "ayer_IncomingInviteMutualFriendList\022\017\n\007s"
  "teamid\030\001 \001(\006\022!\n\031mutual_friend_account_id"
  "s\030\002 \003(\r\"\230\001\n3CPlayer_GetMutualFriendsForI"
  "ncomingInvites_Response\022a\n$incoming_invi"
  "te_mutual_friends_lists\030\001 \003(\01323.proto.st"
  "eam.CPlayer_IncomingInviteMutualFriendLi"
  "st\"3\n\"CPlayer_GetGameBadgeLevels_Request"
  "\022\r\n\005appid\030\001 \001(\r\"\301\001\n#CPlayer_GetGameBadge"
  "Levels_Response\022\024\n\014player_level\030\001 \001(\r\022F\n"
  "\006badges\030\002 \003(\01326.proto.steam.CPlayer_GetG"
  "ameBadgeLevels_Response.Badge\032<\n\005Badge\022\r"
  "\n\005level\030\001 \001(\005\022\016\n\006series\030\002 \001(\005\022\024\n\014border_"
  "color\030\003 \001(\r\"\202\001\n\"CPlayer_GetLastPlayedTim"
  "es_Request\022\\\n\017min_last_played\030\001 \001(\rBC\202\265\030"
  "\?The most recent last-played time the cl"
  "ient already knows about\"\344\001\n#CPlayer_Get"
  "LastPlayedTimes_Response\022D\n\005games\030\001 \003(\0132"
  "5.proto.steam.CPlayer_GetLastPlayedTimes"
  "_Response.Game\032w\n\004Game\022\r\n\005appid\030\001 \001(\005\022\025\n"
  "\rlast_playtime\030\002 \001(\r\022\027\n\017playtime_2weeks\030"
  "\003 \001(\005\022\030\n\020playtime_forever\030\004 \001(\005\022\026\n\016first"
  "_playtime\030\005 \001(\r\"\033\n\031CPlayer_AcceptSSA_Req"
  "uest\"\034\n\032CPlayer_AcceptSSA_Response\"!\n\037CP"
  "layer_GetNicknameList_Request\"\252\001\n CPlaye"
  "r_GetNicknameList_Response\022O\n\tnicknames\030"
  "\001 \003(\0132<.proto.steam.CPlayer_GetNicknameL"
  "ist_Response.PlayerNickname\0325\n\016PlayerNic"
  "kname\022\021\n\taccountid\030\001 \001(\007\022\020\n\010nickname\030\002 \001"
  "(\t\")\n\'CPlayer_GetPerFriendPreferences_Re"
  "quest\"\270\005\n\024PerFriendPreferences\022\021\n\taccoun"
  "tid\030\001 \001(\007\022\020\n\010nickname\030\002 \001(\t\022k\n\030notificat"
  "ions_showingame\030\003 \001(\0162!.proto.steam.ENot"
  "ificationSetting:&k_ENotificationSetting"
  "NotifyUseDefault\022k\n\030notifications_showon"
  "line\030\004 \001(\0162!.proto.steam.ENotificationSe"
  "tting:&k_ENotificationSettingNotifyUseDe"
  "fault\022m\n\032notifications_showmessages\030\005 \001("
  "\0162!.proto.steam.ENotificationSetting:&k_"
  "ENotificationSettingNotifyUseDefault\022d\n\021"
  "sounds_showingame\030\006 \001(\0162!.proto.steam.EN"
  "otificationSetting:&k_ENotificationSetti"
  "ngNotifyUseDefault\022d\n\021sounds_showonline\030"
  "\007 \001(\0162!.proto.steam.ENotificationSetting"
  ":&k_ENotificationSettingNotifyUseDefault"
  "\022f\n\023sounds_showmessages\030\010 \001(\0162!.proto.st"
  "eam.ENotificationSetting:&k_ENotificatio"
  "nSettingNotifyUseDefault\"b\n(CPlayer_GetP"
  "erFriendPreferences_Response\0226\n\013preferen"
  "ces\030\001 \003(\0132!.proto.steam.PerFriendPrefere"
  "nces\"a\n\'CPlayer_SetPerFriendPreferences_"
  "Request\0226\n\013preferences\030\001 \001(\0132!.proto.ste"
  "am.PerFriendPreferences\"*\n(CPlayer_SetPe"
  "rFriendPreferences_Response\"c\n\031CPlayer_A"
  "ddFriend_Request\022F\n\007steamid\030\001 \001(\006B5\202\265\0301S"
  "team ID of user to whom to send a friend"
  " invite.\"\366\001\n\032CPlayer_AddFriend_Response\022"
  "O\n\013invite_sent\030\001 \001(\010B:\202\265\0306True if the op"
  "eration was successful, false otherwise."
  "\022\206\001\n\023friend_relationship\030\002 \001(\rBi\202\265\030ethe "
  "resulting relationship.  Depending on st"
  "ate, may move directly to friends rather"
  " than invite sent\"R\n\034CPlayer_RemoveFrien"
  "d_Request\0222\n\007steamid\030\001 \001(\006B!\202\265\030\035Steam ID"
  " of friend to remove.\"\\\n\035CPlayer_RemoveF"
  "riend_Response\022;\n\023friend_relationship\030\001 "
  "\001(\rB\036\202\265\030\032the resulting relationship\"\177\n\034C"
  "Player_IgnoreFriend_Request\022\017\n\007steamid\030\001"
  " \001(\006\022N\n\010unignore\030\002 \001(\010B<\202\265\0308If set, remo"
  "ve from ignore/block list instead of add"
  "ing \"\\\n\035CPlayer_IgnoreFriend_Response\022;\n"
  "\023friend_relationship\030\001 \001(\rB\036\202\265\030\032the resu"
  "lting relationship\")\n\'CPlayer_GetCommuni"
  "tyPreferences_Request\"\261\001\n\034CPlayer_Commun"
  "ityPreferences\022)\n\033hide_adult_content_vio"
  "lence\030\001 \001(\010:\004true\022$\n\026hide_adult_content_"
  "sex\030\002 \001(\010:\004true\022%\n\026parenthesize_nickname"
  "s\030\004 \001(\010:\005false\022\031\n\021timestamp_updated\030\003 \001("
  "\r\"j\n(CPlayer_GetCommunityPreferences_Res"
  "ponse\022>\n\013preferences\030\001 \001(\0132).proto.steam"
  ".CPlayer_CommunityPreferences\"i\n\'CPlayer"
  "_SetCommunityPreferences_Request\022>\n\013pref"
  "erences\030\001 \001(\0132).proto.steam.CPlayer_Comm"
  "unityPreferences\"*\n(CPlayer_SetCommunity"
  "Preferences_Response\"@\n,CPlayer_GetNewSt"
  "eamAnnouncementState_Request\022\020\n\010language"
  "\030\001 \001(\005\"\246\001\n-CPlayer_GetNewSteamAnnounceme"
  "ntState_Response\022\r\n\005state\030\001 \001(\005\022\035\n\025annou"
  "ncement_headline\030\002 \001(\t\022\030\n\020announcement_u"
  "rl\030\003 \001(\t\022\023\n\013time_posted\030\004 \001(\r\022\030\n\020announc"
  "ement_gid\030\005 \001(\004\"`\n/CPlayer_UpdateSteamAn"
  "nouncementLastRead_Request\022\030\n\020announceme"
  "nt_gid\030\001 \001(\004\022\023\n\013time_posted\030\002 \001(\r\"2\n0CPl"
  "ayer_UpdateSteamAnnouncementLastRead_Res"
  "ponse\"l\n$CPlayer_LastPlayedTimes_Notific"
  "ation\022D\n\005games\030\001 \003(\01325.proto.steam.CPlay"
  "er_GetLastPlayedTimes_Response.Game\"j\n*C"
  "Player_FriendNicknameChanged_Notificatio"
  "n\022\021\n\taccountid\030\001 \001(\007\022\020\n\010nickname\030\002 \001(\t\022\027"
  "\n\017is_echo_to_self\030\003 \001(\010\"\247\001\n.CPlayer_NewS"
  "teamAnnouncementState_Notification\022\r\n\005st"
  "ate\030\001 \001(\005\022\035\n\025announcement_headline\030\002 \001(\t"
  "\022\030\n\020announcement_url\030\003 \001(\t\022\023\n\013time_poste"
  "d\030\004 \001(\r\022\030\n\020announcement_gid\030\005 \001(\004\"r\n0CPl"
  "ayer_CommunityPreferencesChanged_Notific"
  "ation\022>\n\013preferences\030\001 \001(\0132).proto.steam"
  ".CPlayer_CommunityPreferences\"}\n0CPlayer"
  "_PerFriendPreferencesChanged_Notificatio"
  "n\022\021\n\taccountid\030\001 \001(\007\0226\n\013preferences\030\002 \001("
  "\0132!.proto.steam.PerFriendPreferences*\205\001\n"
  "\024ENotificationSetting\022*\n&k_ENotification"
  "SettingNotifyUseDefault\020\000\022 \n\034k_ENotifica"
  "tionSettingAlways\020\001\022\037\n\033k_ENotificationSe"
  "ttingNever\020\0022\303\025\n\006Player\022\207\002\n\"GetMutualFri"
  "endsForIncomingInvites\022\?.proto.steam.CPl"
  "ayer_GetMutualFriendsForIncomingInvites_"
  "Request\032@.proto.steam.CPlayer_GetMutualF"
  "riendsForIncomingInvites_Response\"^\202\265\030ZG"
  "et me the mutual friends for each of my "
  "pending incoming invites (individuals an"
  "d clans).\022\316\001\n\022GetGameBadgeLevels\022/.proto"
  ".steam.CPlayer_GetGameBadgeLevels_Reques"
  "t\0320.proto.steam.CPlayer_GetGameBadgeLeve"
  "ls_Response\"U\202\265\030QReturns the Steam Level"
  " of a user, the Badge level for the game"
  ", and if it\'s foil\022\255\001\n\030ClientGetLastPlay"
  "edTimes\022/.proto.steam.CPlayer_GetLastPla"
  "yedTimes_Request\0320.proto.steam.CPlayer_G"
  "etLastPlayedTimes_Response\".\202\265\030*Gets the"
  " last-played times for the account\022{\n\tAc"
  "ceptSSA\022&.proto.steam.CPlayer_AcceptSSA_"
  "Request\032\'.proto.steam.CPlayer_AcceptSSA_"
  "Response\"\035\202\265\030\031User is accepting the SSA\022"
  "\254\001\n\017GetNicknameList\022,.proto.steam.CPlaye"
  "r_GetNicknameList_Request\032-.proto.steam."
  "CPlayer_GetNicknameList_Response\"<\202\265\0308Ge"
  "ts the list of nicknames this user has f"
  "or other users\022\325\001\n\027GetPerFriendPreferenc"
  "es\0224.proto.steam.CPlayer_GetPerFriendPre"
  "ferences_Request\0325.proto.steam.CPlayer_G"
  "etPerFriendPreferences_Response\"M\202\265\030IGet"
  "s the list of per-friend preferences thi"
  "s user has set for other users\022\317\001\n\027SetPe"
  "rFriendPreferences\0224.proto.steam.CPlayer"
  "_SetPerFriendPreferences_Request\0325.proto"
  ".steam.CPlayer_SetPerFriendPreferences_R"
  "esponse\"G\202\265\030CSets the logged in user\'s p"
  "er-friend preferences for the given user"
  "\022\213\001\n\tAddFriend\022&.proto.steam.CPlayer_Add"
  "Friend_Request\032\'.proto.steam.CPlayer_Add"
  "Friend_Response\"-\202\265\030)Invites another Ste"
  "am user to be a friend\022\232\001\n\014RemoveFriend\022"
  ").proto.steam.CPlayer_RemoveFriend_Reque"
  "st\032*.proto.steam.CPlayer_RemoveFriend_Re"
  "sponse\"3\202\265\030/Removes a friend or ignores "
  "a friend suggestion\022\276\001\n\014IgnoreFriend\022).p"
  "roto.steam.CPlayer_IgnoreFriend_Request\032"
  "*.proto.steam.CPlayer_IgnoreFriend_Respo"
  "nse\"W\202\265\030SBlocks or unblocks communicatio"
  "n with the user.  Despite name, can be a"
  " non-friend.\022\266\001\n\027GetCommunityPreferences"
  "\0224.proto.steam.CPlayer_GetCommunityPrefe"
  "rences_Request\0325.proto.steam.CPlayer_Get"
  "CommunityPreferences_Response\".\202\265\030*Retur"
  "ns the player\'s community preferences\022\263\001"
  "\n\027SetCommunityPreferences\0224.proto.steam."
  "CPlayer_SetCommunityPreferences_Request\032"
  "5.proto.steam.CPlayer_SetCommunityPrefer"
  "ences_Response\"+\202\265\030\'Sets the player\'s co"
  "mmunity preferences\022\366\001\n\034GetNewSteamAnnou"
  "ncementState\0229.proto.steam.CPlayer_GetNe"
  "wSteamAnnouncementState_Request\032:.proto."
  "steam.CPlayer_GetNewSteamAnnouncementSta"
  "te_Response\"_\202\265\030[Calculates and returns "
  "what to display for UI that renders new "
  "steam announcement available\022\324\001\n\037UpdateS"
  "teamAnnouncementLastRead\022<.proto.steam.C"
  "Player_UpdateSteamAnnouncementLastRead_R"
  "equest\032=.proto.steam.CPlayer_UpdateSteam"
  "AnnouncementLastRead_Response\"4\202\265\0300Marks"
  " latest announcement timestamp read by u"
  "ser\032-\202\265\030)A service for accessing Steam p"
  "layer data2\374\007\n\014PlayerClient\022\244\001\n\025NotifyLa"
  "stPlayedTimes\0221.proto.steam.CPlayer_Last"
  "PlayedTimes_Notification\032\027.proto.steam.N"
  "oResponse\"\?\202\265\030;Notification from server "
  "to client of more recent play time\022\274\001\n\033N"
  "otifyFriendNicknameChanged\0227.proto.steam"
  ".CPlayer_FriendNicknameChanged_Notificat"
  "ion\032\027.proto.steam.NoResponse\"K\202\265\030GNotifi"
  "cation from server to client that a frie"
  "nd\'s nickname has changed\022\274\001\n\037NotifyNewS"
  "teamAnnouncementState\022;.proto.steam.CPla"
  "yer_NewSteamAnnouncementState_Notificati"
  "on\032\027.proto.steam.NoResponse\"C\202\265\030\?Notifie"
  "s client of changes to steam announcemen"
  "t state for user\022\321\001\n!NotifyCommunityPref"
  "erencesChanged\022=.proto.steam.CPlayer_Com"
  "munityPreferencesChanged_Notification\032\027."
  "proto.steam.NoResponse\"T\202\265\030PNotification"
  " from server to client that their commun"
  "ity preferences have changed\022\302\001\n!NotifyP"
  "erFriendPreferencesChanged\022=.proto.steam"
  ".CPlayer_PerFriendPreferencesChanged_Not"
  "ification\032\027.proto.steam.NoResponse\"E\202\265\030A"
  "Notification from server that per-friend"
  " preferences have changed\032.\202\265\030&Steam pla"
  "yer data client notifications\300\265\030\002B\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fplayer_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fplayer_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fplayer_2esteamclient_2eproto,
  "steammessages_player.steamclient.proto", &assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto, 8438,
};

void AddDescriptors_steammessages_5fplayer_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fplayer_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fplayer_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fplayer_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* ENotificationSetting_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fplayer_2esteamclient_2eproto[0];
}
bool ENotificationSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CPlayer_GetMutualFriendsForIncomingInvites_Request::InitAsDefaultInstance() {
}
class CPlayer_GetMutualFriendsForIncomingInvites_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
}
CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::SharedCtor() {
}

CPlayer_GetMutualFriendsForIncomingInvites_Request::~CPlayer_GetMutualFriendsForIncomingInvites_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  SharedDtor();
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::SharedDtor() {
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetMutualFriendsForIncomingInvites_Request& CPlayer_GetMutualFriendsForIncomingInvites_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetMutualFriendsForIncomingInvites_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetMutualFriendsForIncomingInvites_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetMutualFriendsForIncomingInvites_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetMutualFriendsForIncomingInvites_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetMutualFriendsForIncomingInvites_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetMutualFriendsForIncomingInvites_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
}

::google::protobuf::uint8* CPlayer_GetMutualFriendsForIncomingInvites_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  return target;
}

size_t CPlayer_GetMutualFriendsForIncomingInvites_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetMutualFriendsForIncomingInvites_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetMutualFriendsForIncomingInvites_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::MergeFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetMutualFriendsForIncomingInvites_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::Swap(CPlayer_GetMutualFriendsForIncomingInvites_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetMutualFriendsForIncomingInvites_Request::InternalSwap(CPlayer_GetMutualFriendsForIncomingInvites_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPlayer_GetMutualFriendsForIncomingInvites_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_IncomingInviteMutualFriendList::InitAsDefaultInstance() {
}
class CPlayer_IncomingInviteMutualFriendList::HasBitSetters {
 public:
  static void set_has_steamid(CPlayer_IncomingInviteMutualFriendList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_IncomingInviteMutualFriendList::kSteamidFieldNumber;
const int CPlayer_IncomingInviteMutualFriendList::kMutualFriendAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_IncomingInviteMutualFriendList)
}
CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(const CPlayer_IncomingInviteMutualFriendList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mutual_friend_account_ids_(from.mutual_friend_account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_IncomingInviteMutualFriendList)
}

void CPlayer_IncomingInviteMutualFriendList::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CPlayer_IncomingInviteMutualFriendList::~CPlayer_IncomingInviteMutualFriendList() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  SharedDtor();
}

void CPlayer_IncomingInviteMutualFriendList::SharedDtor() {
}

void CPlayer_IncomingInviteMutualFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_IncomingInviteMutualFriendList& CPlayer_IncomingInviteMutualFriendList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_IncomingInviteMutualFriendList_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_IncomingInviteMutualFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutual_friend_account_ids_.Clear();
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_IncomingInviteMutualFriendList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_IncomingInviteMutualFriendList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated uint32 mutual_friend_account_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_mutual_friend_account_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_mutual_friend_account_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_IncomingInviteMutualFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mutual_friend_account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_mutual_friend_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mutual_friend_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_IncomingInviteMutualFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // repeated uint32 mutual_friend_account_ids = 2;
  for (int i = 0, n = this->mutual_friend_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->mutual_friend_account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_IncomingInviteMutualFriendList)
}

::google::protobuf::uint8* CPlayer_IncomingInviteMutualFriendList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // repeated uint32 mutual_friend_account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->mutual_friend_account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  return target;
}

size_t CPlayer_IncomingInviteMutualFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mutual_friend_account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mutual_friend_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mutual_friend_account_ids_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_IncomingInviteMutualFriendList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_IncomingInviteMutualFriendList* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_IncomingInviteMutualFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_IncomingInviteMutualFriendList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_IncomingInviteMutualFriendList)
    MergeFrom(*source);
  }
}

void CPlayer_IncomingInviteMutualFriendList::MergeFrom(const CPlayer_IncomingInviteMutualFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutual_friend_account_ids_.MergeFrom(from.mutual_friend_account_ids_);
  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CPlayer_IncomingInviteMutualFriendList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_IncomingInviteMutualFriendList::CopyFrom(const CPlayer_IncomingInviteMutualFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_IncomingInviteMutualFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IncomingInviteMutualFriendList::IsInitialized() const {
  return true;
}

void CPlayer_IncomingInviteMutualFriendList::Swap(CPlayer_IncomingInviteMutualFriendList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_IncomingInviteMutualFriendList::InternalSwap(CPlayer_IncomingInviteMutualFriendList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mutual_friend_account_ids_.InternalSwap(&other->mutual_friend_account_ids_);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CPlayer_IncomingInviteMutualFriendList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetMutualFriendsForIncomingInvites_Response::InitAsDefaultInstance() {
}
class CPlayer_GetMutualFriendsForIncomingInvites_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetMutualFriendsForIncomingInvites_Response::kIncomingInviteMutualFriendsListsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
}
CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      incoming_invite_mutual_friends_lists_(from.incoming_invite_mutual_friends_lists_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_GetMutualFriendsForIncomingInvites_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
}

CPlayer_GetMutualFriendsForIncomingInvites_Response::~CPlayer_GetMutualFriendsForIncomingInvites_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  SharedDtor();
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::SharedDtor() {
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetMutualFriendsForIncomingInvites_Response& CPlayer_GetMutualFriendsForIncomingInvites_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetMutualFriendsForIncomingInvites_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetMutualFriendsForIncomingInvites_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incoming_invite_mutual_friends_lists_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetMutualFriendsForIncomingInvites_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetMutualFriendsForIncomingInvites_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CPlayer_IncomingInviteMutualFriendList::_InternalParse;
          object = msg->add_incoming_invite_mutual_friends_lists();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetMutualFriendsForIncomingInvites_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_incoming_invite_mutual_friends_lists()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetMutualFriendsForIncomingInvites_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incoming_invite_mutual_friends_lists_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->incoming_invite_mutual_friends_lists(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
}

::google::protobuf::uint8* CPlayer_GetMutualFriendsForIncomingInvites_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->incoming_invite_mutual_friends_lists_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->incoming_invite_mutual_friends_lists(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  return target;
}

size_t CPlayer_GetMutualFriendsForIncomingInvites_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->incoming_invite_mutual_friends_lists_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->incoming_invite_mutual_friends_lists(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetMutualFriendsForIncomingInvites_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetMutualFriendsForIncomingInvites_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::MergeFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  incoming_invite_mutual_friends_lists_.MergeFrom(from.incoming_invite_mutual_friends_lists_);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetMutualFriendsForIncomingInvites_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetMutualFriendsForIncomingInvites_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::Swap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetMutualFriendsForIncomingInvites_Response::InternalSwap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&incoming_invite_mutual_friends_lists_)->InternalSwap(CastToBase(&other->incoming_invite_mutual_friends_lists_));
}

::google::protobuf::Metadata CPlayer_GetMutualFriendsForIncomingInvites_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetGameBadgeLevels_Request::InitAsDefaultInstance() {
}
class CPlayer_GetGameBadgeLevels_Request::HasBitSetters {
 public:
  static void set_has_appid(CPlayer_GetGameBadgeLevels_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetGameBadgeLevels_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetGameBadgeLevels_Request)
}
CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(const CPlayer_GetGameBadgeLevels_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetGameBadgeLevels_Request)
}

void CPlayer_GetGameBadgeLevels_Request::SharedCtor() {
  appid_ = 0u;
}

CPlayer_GetGameBadgeLevels_Request::~CPlayer_GetGameBadgeLevels_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  SharedDtor();
}

void CPlayer_GetGameBadgeLevels_Request::SharedDtor() {
}

void CPlayer_GetGameBadgeLevels_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetGameBadgeLevels_Request& CPlayer_GetGameBadgeLevels_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetGameBadgeLevels_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetGameBadgeLevels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetGameBadgeLevels_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetGameBadgeLevels_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetGameBadgeLevels_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetGameBadgeLevels_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetGameBadgeLevels_Request)
}

::google::protobuf::uint8* CPlayer_GetGameBadgeLevels_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetGameBadgeLevels_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetGameBadgeLevels_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetGameBadgeLevels_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetGameBadgeLevels_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetGameBadgeLevels_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetGameBadgeLevels_Request::MergeFrom(const CPlayer_GetGameBadgeLevels_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CPlayer_GetGameBadgeLevels_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetGameBadgeLevels_Request::CopyFrom(const CPlayer_GetGameBadgeLevels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Request::Swap(CPlayer_GetGameBadgeLevels_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetGameBadgeLevels_Request::InternalSwap(CPlayer_GetGameBadgeLevels_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CPlayer_GetGameBadgeLevels_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetGameBadgeLevels_Response_Badge::InitAsDefaultInstance() {
}
class CPlayer_GetGameBadgeLevels_Response_Badge::HasBitSetters {
 public:
  static void set_has_level(CPlayer_GetGameBadgeLevels_Response_Badge* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_series(CPlayer_GetGameBadgeLevels_Response_Badge* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_border_color(CPlayer_GetGameBadgeLevels_Response_Badge* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetGameBadgeLevels_Response_Badge::kLevelFieldNumber;
const int CPlayer_GetGameBadgeLevels_Response_Badge::kSeriesFieldNumber;
const int CPlayer_GetGameBadgeLevels_Response_Badge::kBorderColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
}
CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(const CPlayer_GetGameBadgeLevels_Response_Badge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&border_color_) -
    reinterpret_cast<char*>(&level_)) + sizeof(border_color_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&border_color_) -
      reinterpret_cast<char*>(&level_)) + sizeof(border_color_));
}

CPlayer_GetGameBadgeLevels_Response_Badge::~CPlayer_GetGameBadgeLevels_Response_Badge() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  SharedDtor();
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SharedDtor() {
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetGameBadgeLevels_Response_Badge& CPlayer_GetGameBadgeLevels_Response_Badge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetGameBadgeLevels_Response_Badge_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetGameBadgeLevels_Response_Badge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&border_color_) -
        reinterpret_cast<char*>(&level_)) + sizeof(border_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetGameBadgeLevels_Response_Badge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetGameBadgeLevels_Response_Badge*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 series = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_series(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 border_color = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_border_color(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetGameBadgeLevels_Response_Badge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 series = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_series(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &series_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 border_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_border_color(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetGameBadgeLevels_Response_Badge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 series = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->series(), output);
  }

  // optional uint32 border_color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->border_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
}

::google::protobuf::uint8* CPlayer_GetGameBadgeLevels_Response_Badge::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 series = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->series(), target);
  }

  // optional uint32 border_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->border_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response_Badge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 series = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->series());
    }

    // optional uint32 border_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border_color());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetGameBadgeLevels_Response_Badge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetGameBadgeLevels_Response_Badge* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetGameBadgeLevels_Response_Badge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
    MergeFrom(*source);
  }
}

void CPlayer_GetGameBadgeLevels_Response_Badge::MergeFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_ = from.series_;
    }
    if (cached_has_bits & 0x00000004u) {
      border_color_ = from.border_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetGameBadgeLevels_Response_Badge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::CopyFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response_Badge::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response_Badge::Swap(CPlayer_GetGameBadgeLevels_Response_Badge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetGameBadgeLevels_Response_Badge::InternalSwap(CPlayer_GetGameBadgeLevels_Response_Badge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(level_, other->level_);
  swap(series_, other->series_);
  swap(border_color_, other->border_color_);
}

::google::protobuf::Metadata CPlayer_GetGameBadgeLevels_Response_Badge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetGameBadgeLevels_Response::InitAsDefaultInstance() {
}
class CPlayer_GetGameBadgeLevels_Response::HasBitSetters {
 public:
  static void set_has_player_level(CPlayer_GetGameBadgeLevels_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetGameBadgeLevels_Response::kPlayerLevelFieldNumber;
const int CPlayer_GetGameBadgeLevels_Response::kBadgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetGameBadgeLevels_Response)
}
CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(const CPlayer_GetGameBadgeLevels_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      badges_(from.badges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_level_ = from.player_level_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetGameBadgeLevels_Response)
}

void CPlayer_GetGameBadgeLevels_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_GetGameBadgeLevels_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  player_level_ = 0u;
}

CPlayer_GetGameBadgeLevels_Response::~CPlayer_GetGameBadgeLevels_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  SharedDtor();
}

void CPlayer_GetGameBadgeLevels_Response::SharedDtor() {
}

void CPlayer_GetGameBadgeLevels_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetGameBadgeLevels_Response& CPlayer_GetGameBadgeLevels_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetGameBadgeLevels_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetGameBadgeLevels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  badges_.Clear();
  player_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetGameBadgeLevels_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetGameBadgeLevels_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 player_level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge::_InternalParse;
          object = msg->add_badges();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetGameBadgeLevels_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_badges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetGameBadgeLevels_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_level(), output);
  }

  // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->badges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->badges(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetGameBadgeLevels_Response)
}

::google::protobuf::uint8* CPlayer_GetGameBadgeLevels_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_level(), target);
  }

  // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->badges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->badges(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->badges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->badges(static_cast<int>(i)));
    }
  }

  // optional uint32 player_level = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetGameBadgeLevels_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetGameBadgeLevels_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetGameBadgeLevels_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetGameBadgeLevels_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetGameBadgeLevels_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetGameBadgeLevels_Response::MergeFrom(const CPlayer_GetGameBadgeLevels_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  badges_.MergeFrom(from.badges_);
  if (from.has_player_level()) {
    set_player_level(from.player_level());
  }
}

void CPlayer_GetGameBadgeLevels_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetGameBadgeLevels_Response::CopyFrom(const CPlayer_GetGameBadgeLevels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response::Swap(CPlayer_GetGameBadgeLevels_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetGameBadgeLevels_Response::InternalSwap(CPlayer_GetGameBadgeLevels_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&badges_)->InternalSwap(CastToBase(&other->badges_));
  swap(player_level_, other->player_level_);
}

::google::protobuf::Metadata CPlayer_GetGameBadgeLevels_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetLastPlayedTimes_Request::InitAsDefaultInstance() {
}
class CPlayer_GetLastPlayedTimes_Request::HasBitSetters {
 public:
  static void set_has_min_last_played(CPlayer_GetLastPlayedTimes_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetLastPlayedTimes_Request::kMinLastPlayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetLastPlayedTimes_Request)
}
CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(const CPlayer_GetLastPlayedTimes_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  min_last_played_ = from.min_last_played_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetLastPlayedTimes_Request)
}

void CPlayer_GetLastPlayedTimes_Request::SharedCtor() {
  min_last_played_ = 0u;
}

CPlayer_GetLastPlayedTimes_Request::~CPlayer_GetLastPlayedTimes_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  SharedDtor();
}

void CPlayer_GetLastPlayedTimes_Request::SharedDtor() {
}

void CPlayer_GetLastPlayedTimes_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetLastPlayedTimes_Request& CPlayer_GetLastPlayedTimes_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetLastPlayedTimes_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetLastPlayedTimes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_last_played_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetLastPlayedTimes_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetLastPlayedTimes_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_min_last_played(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetLastPlayedTimes_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_min_last_played(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_last_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetLastPlayedTimes_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min_last_played(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetLastPlayedTimes_Request)
}

::google::protobuf::uint8* CPlayer_GetLastPlayedTimes_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min_last_played(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_last_played());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetLastPlayedTimes_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetLastPlayedTimes_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetLastPlayedTimes_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetLastPlayedTimes_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetLastPlayedTimes_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetLastPlayedTimes_Request::MergeFrom(const CPlayer_GetLastPlayedTimes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min_last_played()) {
    set_min_last_played(from.min_last_played());
  }
}

void CPlayer_GetLastPlayedTimes_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetLastPlayedTimes_Request::CopyFrom(const CPlayer_GetLastPlayedTimes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Request::Swap(CPlayer_GetLastPlayedTimes_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetLastPlayedTimes_Request::InternalSwap(CPlayer_GetLastPlayedTimes_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_last_played_, other->min_last_played_);
}

::google::protobuf::Metadata CPlayer_GetLastPlayedTimes_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetLastPlayedTimes_Response_Game::InitAsDefaultInstance() {
}
class CPlayer_GetLastPlayedTimes_Response_Game::HasBitSetters {
 public:
  static void set_has_appid(CPlayer_GetLastPlayedTimes_Response_Game* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_last_playtime(CPlayer_GetLastPlayedTimes_Response_Game* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_playtime_2weeks(CPlayer_GetLastPlayedTimes_Response_Game* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_playtime_forever(CPlayer_GetLastPlayedTimes_Response_Game* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_first_playtime(CPlayer_GetLastPlayedTimes_Response_Game* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetLastPlayedTimes_Response_Game::kAppidFieldNumber;
const int CPlayer_GetLastPlayedTimes_Response_Game::kLastPlaytimeFieldNumber;
const int CPlayer_GetLastPlayedTimes_Response_Game::kPlaytime2WeeksFieldNumber;
const int CPlayer_GetLastPlayedTimes_Response_Game::kPlaytimeForeverFieldNumber;
const int CPlayer_GetLastPlayedTimes_Response_Game::kFirstPlaytimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
}
CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(const CPlayer_GetLastPlayedTimes_Response_Game& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_playtime_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(first_playtime_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
}

void CPlayer_GetLastPlayedTimes_Response_Game::SharedCtor() {
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_playtime_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(first_playtime_));
}

CPlayer_GetLastPlayedTimes_Response_Game::~CPlayer_GetLastPlayedTimes_Response_Game() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  SharedDtor();
}

void CPlayer_GetLastPlayedTimes_Response_Game::SharedDtor() {
}

void CPlayer_GetLastPlayedTimes_Response_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_GetLastPlayedTimes_Response_Game::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetLastPlayedTimes_Response_Game_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetLastPlayedTimes_Response_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_playtime_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(first_playtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetLastPlayedTimes_Response_Game::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetLastPlayedTimes_Response_Game*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_playtime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_last_playtime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 playtime_2weeks = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_playtime_2weeks(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 playtime_forever = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_playtime_forever(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 first_playtime = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_first_playtime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetLastPlayedTimes_Response_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_playtime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_last_playtime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_playtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playtime_2weeks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_playtime_2weeks(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtime_2weeks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playtime_forever = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_playtime_forever(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtime_forever_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_playtime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_first_playtime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_playtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetLastPlayedTimes_Response_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // optional uint32 last_playtime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_playtime(), output);
  }

  // optional int32 playtime_2weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playtime_2weeks(), output);
  }

  // optional int32 playtime_forever = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playtime_forever(), output);
  }

  // optional uint32 first_playtime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->first_playtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
}

::google::protobuf::uint8* CPlayer_GetLastPlayedTimes_Response_Game::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 last_playtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_playtime(), target);
  }

  // optional int32 playtime_2weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playtime_2weeks(), target);
  }

  // optional int32 playtime_forever = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playtime_forever(), target);
  }

  // optional uint32 first_playtime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->first_playtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional uint32 last_playtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_playtime());
    }

    // optional int32 playtime_2weeks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtime_2weeks());
    }

    // optional int32 playtime_forever = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtime_forever());
    }

    // optional uint32 first_playtime = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_playtime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetLastPlayedTimes_Response_Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetLastPlayedTimes_Response_Game* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetLastPlayedTimes_Response_Game>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
    MergeFrom(*source);
  }
}

void CPlayer_GetLastPlayedTimes_Response_Game::MergeFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_playtime_ = from.last_playtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      playtime_2weeks_ = from.playtime_2weeks_;
    }
    if (cached_has_bits & 0x00000008u) {
      playtime_forever_ = from.playtime_forever_;
    }
    if (cached_has_bits & 0x00000010u) {
      first_playtime_ = from.first_playtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetLastPlayedTimes_Response_Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetLastPlayedTimes_Response_Game::CopyFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response_Game::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response_Game::Swap(CPlayer_GetLastPlayedTimes_Response_Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetLastPlayedTimes_Response_Game::InternalSwap(CPlayer_GetLastPlayedTimes_Response_Game* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
  swap(last_playtime_, other->last_playtime_);
  swap(playtime_2weeks_, other->playtime_2weeks_);
  swap(playtime_forever_, other->playtime_forever_);
  swap(first_playtime_, other->first_playtime_);
}

::google::protobuf::Metadata CPlayer_GetLastPlayedTimes_Response_Game::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetLastPlayedTimes_Response::InitAsDefaultInstance() {
}
class CPlayer_GetLastPlayedTimes_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetLastPlayedTimes_Response::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetLastPlayedTimes_Response)
}
CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(const CPlayer_GetLastPlayedTimes_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      games_(from.games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetLastPlayedTimes_Response)
}

void CPlayer_GetLastPlayedTimes_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_GetLastPlayedTimes_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
}

CPlayer_GetLastPlayedTimes_Response::~CPlayer_GetLastPlayedTimes_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  SharedDtor();
}

void CPlayer_GetLastPlayedTimes_Response::SharedDtor() {
}

void CPlayer_GetLastPlayedTimes_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetLastPlayedTimes_Response& CPlayer_GetLastPlayedTimes_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetLastPlayedTimes_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetLastPlayedTimes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetLastPlayedTimes_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetLastPlayedTimes_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game::_InternalParse;
          object = msg->add_games();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetLastPlayedTimes_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetLastPlayedTimes_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->games(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetLastPlayedTimes_Response)
}

::google::protobuf::uint8* CPlayer_GetLastPlayedTimes_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->games(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->games(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetLastPlayedTimes_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetLastPlayedTimes_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetLastPlayedTimes_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetLastPlayedTimes_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetLastPlayedTimes_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetLastPlayedTimes_Response::MergeFrom(const CPlayer_GetLastPlayedTimes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CPlayer_GetLastPlayedTimes_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetLastPlayedTimes_Response::CopyFrom(const CPlayer_GetLastPlayedTimes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response::Swap(CPlayer_GetLastPlayedTimes_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetLastPlayedTimes_Response::InternalSwap(CPlayer_GetLastPlayedTimes_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&games_)->InternalSwap(CastToBase(&other->games_));
}

::google::protobuf::Metadata CPlayer_GetLastPlayedTimes_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_AcceptSSA_Request::InitAsDefaultInstance() {
}
class CPlayer_AcceptSSA_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_AcceptSSA_Request)
}
CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(const CPlayer_AcceptSSA_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_AcceptSSA_Request)
}

void CPlayer_AcceptSSA_Request::SharedCtor() {
}

CPlayer_AcceptSSA_Request::~CPlayer_AcceptSSA_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_AcceptSSA_Request)
  SharedDtor();
}

void CPlayer_AcceptSSA_Request::SharedDtor() {
}

void CPlayer_AcceptSSA_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_AcceptSSA_Request& CPlayer_AcceptSSA_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_AcceptSSA_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_AcceptSSA_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_AcceptSSA_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_AcceptSSA_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_AcceptSSA_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_AcceptSSA_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_AcceptSSA_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_AcceptSSA_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_AcceptSSA_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_AcceptSSA_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_AcceptSSA_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_AcceptSSA_Request)
}

::google::protobuf::uint8* CPlayer_AcceptSSA_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_AcceptSSA_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_AcceptSSA_Request)
  return target;
}

size_t CPlayer_AcceptSSA_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_AcceptSSA_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_AcceptSSA_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_AcceptSSA_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AcceptSSA_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_AcceptSSA_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_AcceptSSA_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_AcceptSSA_Request)
    MergeFrom(*source);
  }
}

void CPlayer_AcceptSSA_Request::MergeFrom(const CPlayer_AcceptSSA_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_AcceptSSA_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_AcceptSSA_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_AcceptSSA_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AcceptSSA_Request::CopyFrom(const CPlayer_AcceptSSA_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_AcceptSSA_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AcceptSSA_Request::IsInitialized() const {
  return true;
}

void CPlayer_AcceptSSA_Request::Swap(CPlayer_AcceptSSA_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_AcceptSSA_Request::InternalSwap(CPlayer_AcceptSSA_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPlayer_AcceptSSA_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_AcceptSSA_Response::InitAsDefaultInstance() {
}
class CPlayer_AcceptSSA_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_AcceptSSA_Response)
}
CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(const CPlayer_AcceptSSA_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_AcceptSSA_Response)
}

void CPlayer_AcceptSSA_Response::SharedCtor() {
}

CPlayer_AcceptSSA_Response::~CPlayer_AcceptSSA_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_AcceptSSA_Response)
  SharedDtor();
}

void CPlayer_AcceptSSA_Response::SharedDtor() {
}

void CPlayer_AcceptSSA_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_AcceptSSA_Response& CPlayer_AcceptSSA_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_AcceptSSA_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_AcceptSSA_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_AcceptSSA_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_AcceptSSA_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_AcceptSSA_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_AcceptSSA_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_AcceptSSA_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_AcceptSSA_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_AcceptSSA_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_AcceptSSA_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_AcceptSSA_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_AcceptSSA_Response)
}

::google::protobuf::uint8* CPlayer_AcceptSSA_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_AcceptSSA_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_AcceptSSA_Response)
  return target;
}

size_t CPlayer_AcceptSSA_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_AcceptSSA_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_AcceptSSA_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_AcceptSSA_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AcceptSSA_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_AcceptSSA_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_AcceptSSA_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_AcceptSSA_Response)
    MergeFrom(*source);
  }
}

void CPlayer_AcceptSSA_Response::MergeFrom(const CPlayer_AcceptSSA_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_AcceptSSA_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_AcceptSSA_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_AcceptSSA_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AcceptSSA_Response::CopyFrom(const CPlayer_AcceptSSA_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_AcceptSSA_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AcceptSSA_Response::IsInitialized() const {
  return true;
}

void CPlayer_AcceptSSA_Response::Swap(CPlayer_AcceptSSA_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_AcceptSSA_Response::InternalSwap(CPlayer_AcceptSSA_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPlayer_AcceptSSA_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetNicknameList_Request::InitAsDefaultInstance() {
}
class CPlayer_GetNicknameList_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetNicknameList_Request)
}
CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(const CPlayer_GetNicknameList_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetNicknameList_Request)
}

void CPlayer_GetNicknameList_Request::SharedCtor() {
}

CPlayer_GetNicknameList_Request::~CPlayer_GetNicknameList_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetNicknameList_Request)
  SharedDtor();
}

void CPlayer_GetNicknameList_Request::SharedDtor() {
}

void CPlayer_GetNicknameList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetNicknameList_Request& CPlayer_GetNicknameList_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetNicknameList_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetNicknameList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetNicknameList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetNicknameList_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetNicknameList_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetNicknameList_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetNicknameList_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetNicknameList_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetNicknameList_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetNicknameList_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetNicknameList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetNicknameList_Request)
}

::google::protobuf::uint8* CPlayer_GetNicknameList_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetNicknameList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetNicknameList_Request)
  return target;
}

size_t CPlayer_GetNicknameList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetNicknameList_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNicknameList_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetNicknameList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNicknameList_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetNicknameList_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetNicknameList_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetNicknameList_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetNicknameList_Request::MergeFrom(const CPlayer_GetNicknameList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetNicknameList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_GetNicknameList_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetNicknameList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNicknameList_Request::CopyFrom(const CPlayer_GetNicknameList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetNicknameList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Request::Swap(CPlayer_GetNicknameList_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetNicknameList_Request::InternalSwap(CPlayer_GetNicknameList_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPlayer_GetNicknameList_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetNicknameList_Response_PlayerNickname::InitAsDefaultInstance() {
}
class CPlayer_GetNicknameList_Response_PlayerNickname::HasBitSetters {
 public:
  static void set_has_accountid(CPlayer_GetNicknameList_Response_PlayerNickname* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_nickname(CPlayer_GetNicknameList_Response_PlayerNickname* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetNicknameList_Response_PlayerNickname::kAccountidFieldNumber;
const int CPlayer_GetNicknameList_Response_PlayerNickname::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
}
CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(const CPlayer_GetNicknameList_Response_PlayerNickname& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
}

void CPlayer_GetNicknameList_Response_PlayerNickname::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_GetNicknameList_Response_PlayerNickname_steammessages_5fplayer_2esteamclient_2eproto.base);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0u;
}

CPlayer_GetNicknameList_Response_PlayerNickname::~CPlayer_GetNicknameList_Response_PlayerNickname() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  SharedDtor();
}

void CPlayer_GetNicknameList_Response_PlayerNickname::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetNicknameList_Response_PlayerNickname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetNicknameList_Response_PlayerNickname& CPlayer_GetNicknameList_Response_PlayerNickname::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetNicknameList_Response_PlayerNickname_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetNicknameList_Response_PlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmptyNoArena();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetNicknameList_Response_PlayerNickname::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetNicknameList_Response_PlayerNickname*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_accountid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional string nickname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
        object = msg->mutable_nickname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetNicknameList_Response_PlayerNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetNicknameList_Response_PlayerNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->accountid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
}

::google::protobuf::uint8* CPlayer_GetNicknameList_Response_PlayerNickname::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  return target;
}

size_t CPlayer_GetNicknameList_Response_PlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNicknameList_Response_PlayerNickname::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNicknameList_Response_PlayerNickname* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetNicknameList_Response_PlayerNickname>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
    MergeFrom(*source);
  }
}

void CPlayer_GetNicknameList_Response_PlayerNickname::MergeFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetNicknameList_Response_PlayerNickname::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNicknameList_Response_PlayerNickname::CopyFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Response_PlayerNickname::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Response_PlayerNickname::Swap(CPlayer_GetNicknameList_Response_PlayerNickname* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetNicknameList_Response_PlayerNickname::InternalSwap(CPlayer_GetNicknameList_Response_PlayerNickname* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
}

::google::protobuf::Metadata CPlayer_GetNicknameList_Response_PlayerNickname::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetNicknameList_Response::InitAsDefaultInstance() {
}
class CPlayer_GetNicknameList_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetNicknameList_Response::kNicknamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetNicknameList_Response)
}
CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(const CPlayer_GetNicknameList_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      nicknames_(from.nicknames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetNicknameList_Response)
}

void CPlayer_GetNicknameList_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_GetNicknameList_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
}

CPlayer_GetNicknameList_Response::~CPlayer_GetNicknameList_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetNicknameList_Response)
  SharedDtor();
}

void CPlayer_GetNicknameList_Response::SharedDtor() {
}

void CPlayer_GetNicknameList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetNicknameList_Response& CPlayer_GetNicknameList_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetNicknameList_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetNicknameList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetNicknameList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nicknames_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetNicknameList_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetNicknameList_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname::_InternalParse;
          object = msg->add_nicknames();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetNicknameList_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetNicknameList_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nicknames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetNicknameList_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetNicknameList_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetNicknameList_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetNicknameList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nicknames_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nicknames(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetNicknameList_Response)
}

::google::protobuf::uint8* CPlayer_GetNicknameList_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetNicknameList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nicknames_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nicknames(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetNicknameList_Response)
  return target;
}

size_t CPlayer_GetNicknameList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetNicknameList_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nicknames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nicknames(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNicknameList_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetNicknameList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNicknameList_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetNicknameList_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetNicknameList_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetNicknameList_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetNicknameList_Response::MergeFrom(const CPlayer_GetNicknameList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetNicknameList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nicknames_.MergeFrom(from.nicknames_);
}

void CPlayer_GetNicknameList_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetNicknameList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNicknameList_Response::CopyFrom(const CPlayer_GetNicknameList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetNicknameList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Response::Swap(CPlayer_GetNicknameList_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetNicknameList_Response::InternalSwap(CPlayer_GetNicknameList_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&nicknames_)->InternalSwap(CastToBase(&other->nicknames_));
}

::google::protobuf::Metadata CPlayer_GetNicknameList_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetPerFriendPreferences_Request::InitAsDefaultInstance() {
}
class CPlayer_GetPerFriendPreferences_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetPerFriendPreferences_Request)
}
CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(const CPlayer_GetPerFriendPreferences_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetPerFriendPreferences_Request)
}

void CPlayer_GetPerFriendPreferences_Request::SharedCtor() {
}

CPlayer_GetPerFriendPreferences_Request::~CPlayer_GetPerFriendPreferences_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  SharedDtor();
}

void CPlayer_GetPerFriendPreferences_Request::SharedDtor() {
}

void CPlayer_GetPerFriendPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetPerFriendPreferences_Request& CPlayer_GetPerFriendPreferences_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetPerFriendPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetPerFriendPreferences_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetPerFriendPreferences_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetPerFriendPreferences_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetPerFriendPreferences_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetPerFriendPreferences_Request)
}

::google::protobuf::uint8* CPlayer_GetPerFriendPreferences_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  return target;
}

size_t CPlayer_GetPerFriendPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetPerFriendPreferences_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetPerFriendPreferences_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetPerFriendPreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetPerFriendPreferences_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetPerFriendPreferences_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetPerFriendPreferences_Request::MergeFrom(const CPlayer_GetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_GetPerFriendPreferences_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetPerFriendPreferences_Request::CopyFrom(const CPlayer_GetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPerFriendPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetPerFriendPreferences_Request::Swap(CPlayer_GetPerFriendPreferences_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetPerFriendPreferences_Request::InternalSwap(CPlayer_GetPerFriendPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPlayer_GetPerFriendPreferences_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PerFriendPreferences::InitAsDefaultInstance() {
}
class PerFriendPreferences::HasBitSetters {
 public:
  static void set_has_accountid(PerFriendPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_nickname(PerFriendPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_notifications_showingame(PerFriendPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_notifications_showonline(PerFriendPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_notifications_showmessages(PerFriendPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_sounds_showingame(PerFriendPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_sounds_showonline(PerFriendPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_sounds_showmessages(PerFriendPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerFriendPreferences::kAccountidFieldNumber;
const int PerFriendPreferences::kNicknameFieldNumber;
const int PerFriendPreferences::kNotificationsShowingameFieldNumber;
const int PerFriendPreferences::kNotificationsShowonlineFieldNumber;
const int PerFriendPreferences::kNotificationsShowmessagesFieldNumber;
const int PerFriendPreferences::kSoundsShowingameFieldNumber;
const int PerFriendPreferences::kSoundsShowonlineFieldNumber;
const int PerFriendPreferences::kSoundsShowmessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerFriendPreferences::PerFriendPreferences()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PerFriendPreferences)
}
PerFriendPreferences::PerFriendPreferences(const PerFriendPreferences& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sounds_showmessages_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(sounds_showmessages_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.PerFriendPreferences)
}

void PerFriendPreferences::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto.base);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sounds_showmessages_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(sounds_showmessages_));
}

PerFriendPreferences::~PerFriendPreferences() {
  // @@protoc_insertion_point(destructor:proto.steam.PerFriendPreferences)
  SharedDtor();
}

void PerFriendPreferences::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PerFriendPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerFriendPreferences& PerFriendPreferences::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PerFriendPreferences_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void PerFriendPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PerFriendPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sounds_showmessages_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(sounds_showmessages_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerFriendPreferences::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PerFriendPreferences*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_accountid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional string nickname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.PerFriendPreferences.nickname");
        object = msg->mutable_nickname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.steam.ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::ENotificationSetting_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_notifications_showingame(static_cast<::proto::steam::ENotificationSetting>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::ENotificationSetting_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_notifications_showonline(static_cast<::proto::steam::ENotificationSetting>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::ENotificationSetting_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_notifications_showmessages(static_cast<::proto::steam::ENotificationSetting>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::ENotificationSetting_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_sounds_showingame(static_cast<::proto::steam::ENotificationSetting>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::ENotificationSetting_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(7, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_sounds_showonline(static_cast<::proto::steam::ENotificationSetting>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.steam.ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::ENotificationSetting_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(8, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_sounds_showmessages(static_cast<::proto::steam::ENotificationSetting>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerFriendPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PerFriendPreferences)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PerFriendPreferences.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ENotificationSetting_IsValid(value)) {
            set_notifications_showingame(static_cast< ::proto::steam::ENotificationSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ENotificationSetting_IsValid(value)) {
            set_notifications_showonline(static_cast< ::proto::steam::ENotificationSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ENotificationSetting_IsValid(value)) {
            set_notifications_showmessages(static_cast< ::proto::steam::ENotificationSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ENotificationSetting_IsValid(value)) {
            set_sounds_showingame(static_cast< ::proto::steam::ENotificationSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ENotificationSetting_IsValid(value)) {
            set_sounds_showonline(static_cast< ::proto::steam::ENotificationSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ENotificationSetting_IsValid(value)) {
            set_sounds_showmessages(static_cast< ::proto::steam::ENotificationSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PerFriendPreferences)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PerFriendPreferences)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerFriendPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PerFriendPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->accountid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PerFriendPreferences.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional .proto.steam.ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->notifications_showingame(), output);
  }

  // optional .proto.steam.ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->notifications_showonline(), output);
  }

  // optional .proto.steam.ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->notifications_showmessages(), output);
  }

  // optional .proto.steam.ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sounds_showingame(), output);
  }

  // optional .proto.steam.ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sounds_showonline(), output);
  }

  // optional .proto.steam.ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->sounds_showmessages(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PerFriendPreferences)
}

::google::protobuf::uint8* PerFriendPreferences::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PerFriendPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PerFriendPreferences.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional .proto.steam.ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->notifications_showingame(), target);
  }

  // optional .proto.steam.ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->notifications_showonline(), target);
  }

  // optional .proto.steam.ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->notifications_showmessages(), target);
  }

  // optional .proto.steam.ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sounds_showingame(), target);
  }

  // optional .proto.steam.ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->sounds_showonline(), target);
  }

  // optional .proto.steam.ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->sounds_showmessages(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PerFriendPreferences)
  return target;
}

size_t PerFriendPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PerFriendPreferences)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .proto.steam.ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notifications_showingame());
    }

    // optional .proto.steam.ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notifications_showonline());
    }

    // optional .proto.steam.ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notifications_showmessages());
    }

    // optional .proto.steam.ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sounds_showingame());
    }

    // optional .proto.steam.ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sounds_showonline());
    }

    // optional .proto.steam.ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sounds_showmessages());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerFriendPreferences::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PerFriendPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const PerFriendPreferences* source =
      ::google::protobuf::DynamicCastToGenerated<PerFriendPreferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PerFriendPreferences)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PerFriendPreferences)
    MergeFrom(*source);
  }
}

void PerFriendPreferences::MergeFrom(const PerFriendPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PerFriendPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      notifications_showingame_ = from.notifications_showingame_;
    }
    if (cached_has_bits & 0x00000008u) {
      notifications_showonline_ = from.notifications_showonline_;
    }
    if (cached_has_bits & 0x00000010u) {
      notifications_showmessages_ = from.notifications_showmessages_;
    }
    if (cached_has_bits & 0x00000020u) {
      sounds_showingame_ = from.sounds_showingame_;
    }
    if (cached_has_bits & 0x00000040u) {
      sounds_showonline_ = from.sounds_showonline_;
    }
    if (cached_has_bits & 0x00000080u) {
      sounds_showmessages_ = from.sounds_showmessages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerFriendPreferences::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PerFriendPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerFriendPreferences::CopyFrom(const PerFriendPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PerFriendPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerFriendPreferences::IsInitialized() const {
  return true;
}

void PerFriendPreferences::Swap(PerFriendPreferences* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerFriendPreferences::InternalSwap(PerFriendPreferences* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(notifications_showingame_, other->notifications_showingame_);
  swap(notifications_showonline_, other->notifications_showonline_);
  swap(notifications_showmessages_, other->notifications_showmessages_);
  swap(sounds_showingame_, other->sounds_showingame_);
  swap(sounds_showonline_, other->sounds_showonline_);
  swap(sounds_showmessages_, other->sounds_showmessages_);
}

::google::protobuf::Metadata PerFriendPreferences::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetPerFriendPreferences_Response::InitAsDefaultInstance() {
}
class CPlayer_GetPerFriendPreferences_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetPerFriendPreferences_Response::kPreferencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetPerFriendPreferences_Response)
}
CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(const CPlayer_GetPerFriendPreferences_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      preferences_(from.preferences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetPerFriendPreferences_Response)
}

void CPlayer_GetPerFriendPreferences_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_GetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
}

CPlayer_GetPerFriendPreferences_Response::~CPlayer_GetPerFriendPreferences_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  SharedDtor();
}

void CPlayer_GetPerFriendPreferences_Response::SharedDtor() {
}

void CPlayer_GetPerFriendPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetPerFriendPreferences_Response& CPlayer_GetPerFriendPreferences_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetPerFriendPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preferences_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetPerFriendPreferences_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetPerFriendPreferences_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.PerFriendPreferences preferences = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::PerFriendPreferences::_InternalParse;
          object = msg->add_preferences();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetPerFriendPreferences_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.PerFriendPreferences preferences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetPerFriendPreferences_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.PerFriendPreferences preferences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->preferences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->preferences(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetPerFriendPreferences_Response)
}

::google::protobuf::uint8* CPlayer_GetPerFriendPreferences_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.PerFriendPreferences preferences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->preferences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->preferences(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  return target;
}

size_t CPlayer_GetPerFriendPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.PerFriendPreferences preferences = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->preferences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->preferences(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetPerFriendPreferences_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetPerFriendPreferences_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetPerFriendPreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetPerFriendPreferences_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetPerFriendPreferences_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetPerFriendPreferences_Response::MergeFrom(const CPlayer_GetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preferences_.MergeFrom(from.preferences_);
}

void CPlayer_GetPerFriendPreferences_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetPerFriendPreferences_Response::CopyFrom(const CPlayer_GetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPerFriendPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetPerFriendPreferences_Response::Swap(CPlayer_GetPerFriendPreferences_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetPerFriendPreferences_Response::InternalSwap(CPlayer_GetPerFriendPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&preferences_)->InternalSwap(CastToBase(&other->preferences_));
}

::google::protobuf::Metadata CPlayer_GetPerFriendPreferences_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_SetPerFriendPreferences_Request::InitAsDefaultInstance() {
  ::proto::steam::_CPlayer_SetPerFriendPreferences_Request_default_instance_._instance.get_mutable()->preferences_ = const_cast< ::proto::steam::PerFriendPreferences*>(
      ::proto::steam::PerFriendPreferences::internal_default_instance());
}
class CPlayer_SetPerFriendPreferences_Request::HasBitSetters {
 public:
  static const ::proto::steam::PerFriendPreferences& preferences(const CPlayer_SetPerFriendPreferences_Request* msg);
  static void set_has_preferences(CPlayer_SetPerFriendPreferences_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::PerFriendPreferences&
CPlayer_SetPerFriendPreferences_Request::HasBitSetters::preferences(const CPlayer_SetPerFriendPreferences_Request* msg) {
  return *msg->preferences_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_SetPerFriendPreferences_Request::kPreferencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_SetPerFriendPreferences_Request)
}
CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(const CPlayer_SetPerFriendPreferences_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preferences()) {
    preferences_ = new ::proto::steam::PerFriendPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_SetPerFriendPreferences_Request)
}

void CPlayer_SetPerFriendPreferences_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_SetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  preferences_ = nullptr;
}

CPlayer_SetPerFriendPreferences_Request::~CPlayer_SetPerFriendPreferences_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  SharedDtor();
}

void CPlayer_SetPerFriendPreferences_Request::SharedDtor() {
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_SetPerFriendPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_SetPerFriendPreferences_Request& CPlayer_SetPerFriendPreferences_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_SetPerFriendPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_SetPerFriendPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_SetPerFriendPreferences_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_SetPerFriendPreferences_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.PerFriendPreferences preferences = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::PerFriendPreferences::_InternalParse;
        object = msg->mutable_preferences();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_SetPerFriendPreferences_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.PerFriendPreferences preferences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_SetPerFriendPreferences_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.PerFriendPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::preferences(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_SetPerFriendPreferences_Request)
}

::google::protobuf::uint8* CPlayer_SetPerFriendPreferences_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.PerFriendPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::preferences(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  return target;
}

size_t CPlayer_SetPerFriendPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.steam.PerFriendPreferences preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *preferences_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_SetPerFriendPreferences_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_SetPerFriendPreferences_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_SetPerFriendPreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_SetPerFriendPreferences_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_SetPerFriendPreferences_Request)
    MergeFrom(*source);
  }
}

void CPlayer_SetPerFriendPreferences_Request::MergeFrom(const CPlayer_SetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_preferences()) {
    mutable_preferences()->::proto::steam::PerFriendPreferences::MergeFrom(from.preferences());
  }
}

void CPlayer_SetPerFriendPreferences_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_SetPerFriendPreferences_Request::CopyFrom(const CPlayer_SetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_SetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetPerFriendPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetPerFriendPreferences_Request::Swap(CPlayer_SetPerFriendPreferences_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_SetPerFriendPreferences_Request::InternalSwap(CPlayer_SetPerFriendPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
}

::google::protobuf::Metadata CPlayer_SetPerFriendPreferences_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_SetPerFriendPreferences_Response::InitAsDefaultInstance() {
}
class CPlayer_SetPerFriendPreferences_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_SetPerFriendPreferences_Response)
}
CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(const CPlayer_SetPerFriendPreferences_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_SetPerFriendPreferences_Response)
}

void CPlayer_SetPerFriendPreferences_Response::SharedCtor() {
}

CPlayer_SetPerFriendPreferences_Response::~CPlayer_SetPerFriendPreferences_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  SharedDtor();
}

void CPlayer_SetPerFriendPreferences_Response::SharedDtor() {
}

void CPlayer_SetPerFriendPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_SetPerFriendPreferences_Response& CPlayer_SetPerFriendPreferences_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_SetPerFriendPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_SetPerFriendPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_SetPerFriendPreferences_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_SetPerFriendPreferences_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_SetPerFriendPreferences_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_SetPerFriendPreferences_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_SetPerFriendPreferences_Response)
}

::google::protobuf::uint8* CPlayer_SetPerFriendPreferences_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  return target;
}

size_t CPlayer_SetPerFriendPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_SetPerFriendPreferences_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_SetPerFriendPreferences_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_SetPerFriendPreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_SetPerFriendPreferences_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_SetPerFriendPreferences_Response)
    MergeFrom(*source);
  }
}

void CPlayer_SetPerFriendPreferences_Response::MergeFrom(const CPlayer_SetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_SetPerFriendPreferences_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_SetPerFriendPreferences_Response::CopyFrom(const CPlayer_SetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_SetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetPerFriendPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_SetPerFriendPreferences_Response::Swap(CPlayer_SetPerFriendPreferences_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_SetPerFriendPreferences_Response::InternalSwap(CPlayer_SetPerFriendPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPlayer_SetPerFriendPreferences_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_AddFriend_Request::InitAsDefaultInstance() {
}
class CPlayer_AddFriend_Request::HasBitSetters {
 public:
  static void set_has_steamid(CPlayer_AddFriend_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_AddFriend_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_AddFriend_Request::CPlayer_AddFriend_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_AddFriend_Request)
}
CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(const CPlayer_AddFriend_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_AddFriend_Request)
}

void CPlayer_AddFriend_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CPlayer_AddFriend_Request::~CPlayer_AddFriend_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_AddFriend_Request)
  SharedDtor();
}

void CPlayer_AddFriend_Request::SharedDtor() {
}

void CPlayer_AddFriend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_AddFriend_Request& CPlayer_AddFriend_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_AddFriend_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_AddFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_AddFriend_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_AddFriend_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_AddFriend_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of user to whom to send a friend invite."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_AddFriend_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_AddFriend_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of user to whom to send a friend invite."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_AddFriend_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_AddFriend_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_AddFriend_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_AddFriend_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of user to whom to send a friend invite."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_AddFriend_Request)
}

::google::protobuf::uint8* CPlayer_AddFriend_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_AddFriend_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of user to whom to send a friend invite."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_AddFriend_Request)
  return target;
}

size_t CPlayer_AddFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_AddFriend_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of user to whom to send a friend invite."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_AddFriend_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_AddFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AddFriend_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_AddFriend_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_AddFriend_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_AddFriend_Request)
    MergeFrom(*source);
  }
}

void CPlayer_AddFriend_Request::MergeFrom(const CPlayer_AddFriend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_AddFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CPlayer_AddFriend_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_AddFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AddFriend_Request::CopyFrom(const CPlayer_AddFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_AddFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AddFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_AddFriend_Request::Swap(CPlayer_AddFriend_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_AddFriend_Request::InternalSwap(CPlayer_AddFriend_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CPlayer_AddFriend_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_AddFriend_Response::InitAsDefaultInstance() {
}
class CPlayer_AddFriend_Response::HasBitSetters {
 public:
  static void set_has_invite_sent(CPlayer_AddFriend_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_friend_relationship(CPlayer_AddFriend_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_AddFriend_Response::kInviteSentFieldNumber;
const int CPlayer_AddFriend_Response::kFriendRelationshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_AddFriend_Response::CPlayer_AddFriend_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_AddFriend_Response)
}
CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(const CPlayer_AddFriend_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&invite_sent_, &from.invite_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&friend_relationship_) -
    reinterpret_cast<char*>(&invite_sent_)) + sizeof(friend_relationship_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_AddFriend_Response)
}

void CPlayer_AddFriend_Response::SharedCtor() {
  ::memset(&invite_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friend_relationship_) -
      reinterpret_cast<char*>(&invite_sent_)) + sizeof(friend_relationship_));
}

CPlayer_AddFriend_Response::~CPlayer_AddFriend_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_AddFriend_Response)
  SharedDtor();
}

void CPlayer_AddFriend_Response::SharedDtor() {
}

void CPlayer_AddFriend_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_AddFriend_Response& CPlayer_AddFriend_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_AddFriend_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_AddFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_AddFriend_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&invite_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friend_relationship_) -
        reinterpret_cast<char*>(&invite_sent_)) + sizeof(friend_relationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_AddFriend_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_AddFriend_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool invite_sent = 1 [(.proto.steam.description) = "True if the operation was successful, false otherwise."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_invite_sent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 friend_relationship = 2 [(.proto.steam.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_friend_relationship(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_AddFriend_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_AddFriend_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool invite_sent = 1 [(.proto.steam.description) = "True if the operation was successful, false otherwise."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_invite_sent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invite_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 friend_relationship = 2 [(.proto.steam.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_friend_relationship(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_relationship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_AddFriend_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_AddFriend_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_AddFriend_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_AddFriend_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool invite_sent = 1 [(.proto.steam.description) = "True if the operation was successful, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->invite_sent(), output);
  }

  // optional uint32 friend_relationship = 2 [(.proto.steam.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friend_relationship(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_AddFriend_Response)
}

::google::protobuf::uint8* CPlayer_AddFriend_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_AddFriend_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool invite_sent = 1 [(.proto.steam.description) = "True if the operation was successful, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->invite_sent(), target);
  }

  // optional uint32 friend_relationship = 2 [(.proto.steam.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friend_relationship(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_AddFriend_Response)
  return target;
}

size_t CPlayer_AddFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_AddFriend_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool invite_sent = 1 [(.proto.steam.description) = "True if the operation was successful, false otherwise."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 friend_relationship = 2 [(.proto.steam.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_relationship());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_AddFriend_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_AddFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AddFriend_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_AddFriend_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_AddFriend_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_AddFriend_Response)
    MergeFrom(*source);
  }
}

void CPlayer_AddFriend_Response::MergeFrom(const CPlayer_AddFriend_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_AddFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      invite_sent_ = from.invite_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      friend_relationship_ = from.friend_relationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_AddFriend_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_AddFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AddFriend_Response::CopyFrom(const CPlayer_AddFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_AddFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AddFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_AddFriend_Response::Swap(CPlayer_AddFriend_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_AddFriend_Response::InternalSwap(CPlayer_AddFriend_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(invite_sent_, other->invite_sent_);
  swap(friend_relationship_, other->friend_relationship_);
}

::google::protobuf::Metadata CPlayer_AddFriend_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_RemoveFriend_Request::InitAsDefaultInstance() {
}
class CPlayer_RemoveFriend_Request::HasBitSetters {
 public:
  static void set_has_steamid(CPlayer_RemoveFriend_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_RemoveFriend_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_RemoveFriend_Request)
}
CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(const CPlayer_RemoveFriend_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_RemoveFriend_Request)
}

void CPlayer_RemoveFriend_Request::SharedCtor() {
  steamid_ = PROTOBUF_ULONGLONG(0);
}

CPlayer_RemoveFriend_Request::~CPlayer_RemoveFriend_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_RemoveFriend_Request)
  SharedDtor();
}

void CPlayer_RemoveFriend_Request::SharedDtor() {
}

void CPlayer_RemoveFriend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_RemoveFriend_Request& CPlayer_RemoveFriend_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_RemoveFriend_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_RemoveFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_RemoveFriend_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_RemoveFriend_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_RemoveFriend_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of friend to remove."];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_RemoveFriend_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_RemoveFriend_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of friend to remove."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_RemoveFriend_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_RemoveFriend_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_RemoveFriend_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_RemoveFriend_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of friend to remove."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_RemoveFriend_Request)
}

::google::protobuf::uint8* CPlayer_RemoveFriend_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_RemoveFriend_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of friend to remove."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_RemoveFriend_Request)
  return target;
}

size_t CPlayer_RemoveFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_RemoveFriend_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of friend to remove."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_RemoveFriend_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_RemoveFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_RemoveFriend_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_RemoveFriend_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_RemoveFriend_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_RemoveFriend_Request)
    MergeFrom(*source);
  }
}

void CPlayer_RemoveFriend_Request::MergeFrom(const CPlayer_RemoveFriend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_RemoveFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CPlayer_RemoveFriend_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_RemoveFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_RemoveFriend_Request::CopyFrom(const CPlayer_RemoveFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_RemoveFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RemoveFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_RemoveFriend_Request::Swap(CPlayer_RemoveFriend_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_RemoveFriend_Request::InternalSwap(CPlayer_RemoveFriend_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CPlayer_RemoveFriend_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_RemoveFriend_Response::InitAsDefaultInstance() {
}
class CPlayer_RemoveFriend_Response::HasBitSetters {
 public:
  static void set_has_friend_relationship(CPlayer_RemoveFriend_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_RemoveFriend_Response::kFriendRelationshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_RemoveFriend_Response)
}
CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(const CPlayer_RemoveFriend_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friend_relationship_ = from.friend_relationship_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_RemoveFriend_Response)
}

void CPlayer_RemoveFriend_Response::SharedCtor() {
  friend_relationship_ = 0u;
}

CPlayer_RemoveFriend_Response::~CPlayer_RemoveFriend_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_RemoveFriend_Response)
  SharedDtor();
}

void CPlayer_RemoveFriend_Response::SharedDtor() {
}

void CPlayer_RemoveFriend_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_RemoveFriend_Response& CPlayer_RemoveFriend_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_RemoveFriend_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_RemoveFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_RemoveFriend_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_relationship_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_RemoveFriend_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_RemoveFriend_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_friend_relationship(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_RemoveFriend_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_RemoveFriend_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_friend_relationship(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_relationship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_RemoveFriend_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_RemoveFriend_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_RemoveFriend_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_RemoveFriend_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->friend_relationship(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_RemoveFriend_Response)
}

::google::protobuf::uint8* CPlayer_RemoveFriend_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_RemoveFriend_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->friend_relationship(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_RemoveFriend_Response)
  return target;
}

size_t CPlayer_RemoveFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_RemoveFriend_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend_relationship());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_RemoveFriend_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_RemoveFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_RemoveFriend_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_RemoveFriend_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_RemoveFriend_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_RemoveFriend_Response)
    MergeFrom(*source);
  }
}

void CPlayer_RemoveFriend_Response::MergeFrom(const CPlayer_RemoveFriend_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_RemoveFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_friend_relationship()) {
    set_friend_relationship(from.friend_relationship());
  }
}

void CPlayer_RemoveFriend_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_RemoveFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_RemoveFriend_Response::CopyFrom(const CPlayer_RemoveFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_RemoveFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RemoveFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_RemoveFriend_Response::Swap(CPlayer_RemoveFriend_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_RemoveFriend_Response::InternalSwap(CPlayer_RemoveFriend_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(friend_relationship_, other->friend_relationship_);
}

::google::protobuf::Metadata CPlayer_RemoveFriend_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_IgnoreFriend_Request::InitAsDefaultInstance() {
}
class CPlayer_IgnoreFriend_Request::HasBitSetters {
 public:
  static void set_has_steamid(CPlayer_IgnoreFriend_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_unignore(CPlayer_IgnoreFriend_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_IgnoreFriend_Request::kSteamidFieldNumber;
const int CPlayer_IgnoreFriend_Request::kUnignoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_IgnoreFriend_Request)
}
CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(const CPlayer_IgnoreFriend_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unignore_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(unignore_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_IgnoreFriend_Request)
}

void CPlayer_IgnoreFriend_Request::SharedCtor() {
  ::memset(&steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unignore_) -
      reinterpret_cast<char*>(&steamid_)) + sizeof(unignore_));
}

CPlayer_IgnoreFriend_Request::~CPlayer_IgnoreFriend_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_IgnoreFriend_Request)
  SharedDtor();
}

void CPlayer_IgnoreFriend_Request::SharedDtor() {
}

void CPlayer_IgnoreFriend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_IgnoreFriend_Request& CPlayer_IgnoreFriend_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_IgnoreFriend_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_IgnoreFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_IgnoreFriend_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unignore_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(unignore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_IgnoreFriend_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_IgnoreFriend_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool unignore = 2 [(.proto.steam.description) = "If set, remove from ignore/block list instead of adding "];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_unignore(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_IgnoreFriend_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_IgnoreFriend_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unignore = 2 [(.proto.steam.description) = "If set, remove from ignore/block list instead of adding "];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_unignore(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unignore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_IgnoreFriend_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_IgnoreFriend_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_IgnoreFriend_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_IgnoreFriend_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool unignore = 2 [(.proto.steam.description) = "If set, remove from ignore/block list instead of adding "];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->unignore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_IgnoreFriend_Request)
}

::google::protobuf::uint8* CPlayer_IgnoreFriend_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_IgnoreFriend_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool unignore = 2 [(.proto.steam.description) = "If set, remove from ignore/block list instead of adding "];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->unignore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_IgnoreFriend_Request)
  return target;
}

size_t CPlayer_IgnoreFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_IgnoreFriend_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool unignore = 2 [(.proto.steam.description) = "If set, remove from ignore/block list instead of adding "];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_IgnoreFriend_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_IgnoreFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_IgnoreFriend_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_IgnoreFriend_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_IgnoreFriend_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_IgnoreFriend_Request)
    MergeFrom(*source);
  }
}

void CPlayer_IgnoreFriend_Request::MergeFrom(const CPlayer_IgnoreFriend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_IgnoreFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      unignore_ = from.unignore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_IgnoreFriend_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_IgnoreFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_IgnoreFriend_Request::CopyFrom(const CPlayer_IgnoreFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_IgnoreFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IgnoreFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_IgnoreFriend_Request::Swap(CPlayer_IgnoreFriend_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_IgnoreFriend_Request::InternalSwap(CPlayer_IgnoreFriend_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(unignore_, other->unignore_);
}

::google::protobuf::Metadata CPlayer_IgnoreFriend_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_IgnoreFriend_Response::InitAsDefaultInstance() {
}
class CPlayer_IgnoreFriend_Response::HasBitSetters {
 public:
  static void set_has_friend_relationship(CPlayer_IgnoreFriend_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_IgnoreFriend_Response::kFriendRelationshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_IgnoreFriend_Response)
}
CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(const CPlayer_IgnoreFriend_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friend_relationship_ = from.friend_relationship_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_IgnoreFriend_Response)
}

void CPlayer_IgnoreFriend_Response::SharedCtor() {
  friend_relationship_ = 0u;
}

CPlayer_IgnoreFriend_Response::~CPlayer_IgnoreFriend_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_IgnoreFriend_Response)
  SharedDtor();
}

void CPlayer_IgnoreFriend_Response::SharedDtor() {
}

void CPlayer_IgnoreFriend_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_IgnoreFriend_Response& CPlayer_IgnoreFriend_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_IgnoreFriend_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_IgnoreFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_IgnoreFriend_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_relationship_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_IgnoreFriend_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_IgnoreFriend_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_friend_relationship(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_IgnoreFriend_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_IgnoreFriend_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_friend_relationship(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_relationship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_IgnoreFriend_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_IgnoreFriend_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_IgnoreFriend_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_IgnoreFriend_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->friend_relationship(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_IgnoreFriend_Response)
}

::google::protobuf::uint8* CPlayer_IgnoreFriend_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_IgnoreFriend_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->friend_relationship(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_IgnoreFriend_Response)
  return target;
}

size_t CPlayer_IgnoreFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_IgnoreFriend_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_relationship = 1 [(.proto.steam.description) = "the resulting relationship"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend_relationship());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_IgnoreFriend_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_IgnoreFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_IgnoreFriend_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_IgnoreFriend_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_IgnoreFriend_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_IgnoreFriend_Response)
    MergeFrom(*source);
  }
}

void CPlayer_IgnoreFriend_Response::MergeFrom(const CPlayer_IgnoreFriend_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_IgnoreFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_friend_relationship()) {
    set_friend_relationship(from.friend_relationship());
  }
}

void CPlayer_IgnoreFriend_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_IgnoreFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_IgnoreFriend_Response::CopyFrom(const CPlayer_IgnoreFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_IgnoreFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IgnoreFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_IgnoreFriend_Response::Swap(CPlayer_IgnoreFriend_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_IgnoreFriend_Response::InternalSwap(CPlayer_IgnoreFriend_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(friend_relationship_, other->friend_relationship_);
}

::google::protobuf::Metadata CPlayer_IgnoreFriend_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetCommunityPreferences_Request::InitAsDefaultInstance() {
}
class CPlayer_GetCommunityPreferences_Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetCommunityPreferences_Request)
}
CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(const CPlayer_GetCommunityPreferences_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetCommunityPreferences_Request)
}

void CPlayer_GetCommunityPreferences_Request::SharedCtor() {
}

CPlayer_GetCommunityPreferences_Request::~CPlayer_GetCommunityPreferences_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetCommunityPreferences_Request)
  SharedDtor();
}

void CPlayer_GetCommunityPreferences_Request::SharedDtor() {
}

void CPlayer_GetCommunityPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetCommunityPreferences_Request& CPlayer_GetCommunityPreferences_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetCommunityPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetCommunityPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetCommunityPreferences_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetCommunityPreferences_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetCommunityPreferences_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetCommunityPreferences_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetCommunityPreferences_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetCommunityPreferences_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetCommunityPreferences_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetCommunityPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetCommunityPreferences_Request)
}

::google::protobuf::uint8* CPlayer_GetCommunityPreferences_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetCommunityPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetCommunityPreferences_Request)
  return target;
}

size_t CPlayer_GetCommunityPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetCommunityPreferences_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetCommunityPreferences_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetCommunityPreferences_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetCommunityPreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetCommunityPreferences_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetCommunityPreferences_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetCommunityPreferences_Request::MergeFrom(const CPlayer_GetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_GetCommunityPreferences_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetCommunityPreferences_Request::CopyFrom(const CPlayer_GetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetCommunityPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetCommunityPreferences_Request::Swap(CPlayer_GetCommunityPreferences_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetCommunityPreferences_Request::InternalSwap(CPlayer_GetCommunityPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPlayer_GetCommunityPreferences_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_CommunityPreferences::InitAsDefaultInstance() {
}
class CPlayer_CommunityPreferences::HasBitSetters {
 public:
  static void set_has_hide_adult_content_violence(CPlayer_CommunityPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_hide_adult_content_sex(CPlayer_CommunityPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_parenthesize_nicknames(CPlayer_CommunityPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp_updated(CPlayer_CommunityPreferences* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_CommunityPreferences::kHideAdultContentViolenceFieldNumber;
const int CPlayer_CommunityPreferences::kHideAdultContentSexFieldNumber;
const int CPlayer_CommunityPreferences::kParenthesizeNicknamesFieldNumber;
const int CPlayer_CommunityPreferences::kTimestampUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_CommunityPreferences::CPlayer_CommunityPreferences()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_CommunityPreferences)
}
CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(const CPlayer_CommunityPreferences& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_updated_, &from.timestamp_updated_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_adult_content_sex_) -
    reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(hide_adult_content_sex_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_CommunityPreferences)
}

void CPlayer_CommunityPreferences::SharedCtor() {
  ::memset(&timestamp_updated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parenthesize_nicknames_) -
      reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(parenthesize_nicknames_));
  hide_adult_content_violence_ = true;
  hide_adult_content_sex_ = true;
}

CPlayer_CommunityPreferences::~CPlayer_CommunityPreferences() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_CommunityPreferences)
  SharedDtor();
}

void CPlayer_CommunityPreferences::SharedDtor() {
}

void CPlayer_CommunityPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_CommunityPreferences& CPlayer_CommunityPreferences::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_CommunityPreferences_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_CommunityPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_CommunityPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&timestamp_updated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parenthesize_nicknames_) -
        reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(parenthesize_nicknames_));
    hide_adult_content_violence_ = true;
    hide_adult_content_sex_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_CommunityPreferences::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_CommunityPreferences*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool hide_adult_content_violence = 1 [default = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hide_adult_content_violence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hide_adult_content_sex = 2 [default = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hide_adult_content_sex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp_updated = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp_updated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool parenthesize_nicknames = 4 [default = false];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_parenthesize_nicknames(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_CommunityPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_CommunityPreferences)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hide_adult_content_violence = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hide_adult_content_violence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_adult_content_violence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_adult_content_sex = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hide_adult_content_sex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_adult_content_sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp_updated = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_timestamp_updated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parenthesize_nicknames = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_parenthesize_nicknames(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parenthesize_nicknames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_CommunityPreferences)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_CommunityPreferences)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_CommunityPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_CommunityPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hide_adult_content_violence = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hide_adult_content_violence(), output);
  }

  // optional bool hide_adult_content_sex = 2 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide_adult_content_sex(), output);
  }

  // optional uint32 timestamp_updated = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp_updated(), output);
  }

  // optional bool parenthesize_nicknames = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->parenthesize_nicknames(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_CommunityPreferences)
}

::google::protobuf::uint8* CPlayer_CommunityPreferences::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_CommunityPreferences)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hide_adult_content_violence = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hide_adult_content_violence(), target);
  }

  // optional bool hide_adult_content_sex = 2 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide_adult_content_sex(), target);
  }

  // optional uint32 timestamp_updated = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp_updated(), target);
  }

  // optional bool parenthesize_nicknames = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->parenthesize_nicknames(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_CommunityPreferences)
  return target;
}

size_t CPlayer_CommunityPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_CommunityPreferences)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 timestamp_updated = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp_updated());
    }

    // optional bool parenthesize_nicknames = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool hide_adult_content_violence = 1 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool hide_adult_content_sex = 2 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_CommunityPreferences::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_CommunityPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_CommunityPreferences* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_CommunityPreferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_CommunityPreferences)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_CommunityPreferences)
    MergeFrom(*source);
  }
}

void CPlayer_CommunityPreferences::MergeFrom(const CPlayer_CommunityPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_CommunityPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_updated_ = from.timestamp_updated_;
    }
    if (cached_has_bits & 0x00000002u) {
      parenthesize_nicknames_ = from.parenthesize_nicknames_;
    }
    if (cached_has_bits & 0x00000004u) {
      hide_adult_content_violence_ = from.hide_adult_content_violence_;
    }
    if (cached_has_bits & 0x00000008u) {
      hide_adult_content_sex_ = from.hide_adult_content_sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_CommunityPreferences::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_CommunityPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_CommunityPreferences::CopyFrom(const CPlayer_CommunityPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_CommunityPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_CommunityPreferences::IsInitialized() const {
  return true;
}

void CPlayer_CommunityPreferences::Swap(CPlayer_CommunityPreferences* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_CommunityPreferences::InternalSwap(CPlayer_CommunityPreferences* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_updated_, other->timestamp_updated_);
  swap(parenthesize_nicknames_, other->parenthesize_nicknames_);
  swap(hide_adult_content_violence_, other->hide_adult_content_violence_);
  swap(hide_adult_content_sex_, other->hide_adult_content_sex_);
}

::google::protobuf::Metadata CPlayer_CommunityPreferences::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetCommunityPreferences_Response::InitAsDefaultInstance() {
  ::proto::steam::_CPlayer_GetCommunityPreferences_Response_default_instance_._instance.get_mutable()->preferences_ = const_cast< ::proto::steam::CPlayer_CommunityPreferences*>(
      ::proto::steam::CPlayer_CommunityPreferences::internal_default_instance());
}
class CPlayer_GetCommunityPreferences_Response::HasBitSetters {
 public:
  static const ::proto::steam::CPlayer_CommunityPreferences& preferences(const CPlayer_GetCommunityPreferences_Response* msg);
  static void set_has_preferences(CPlayer_GetCommunityPreferences_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::CPlayer_CommunityPreferences&
CPlayer_GetCommunityPreferences_Response::HasBitSetters::preferences(const CPlayer_GetCommunityPreferences_Response* msg) {
  return *msg->preferences_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetCommunityPreferences_Response::kPreferencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetCommunityPreferences_Response)
}
CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(const CPlayer_GetCommunityPreferences_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preferences()) {
    preferences_ = new ::proto::steam::CPlayer_CommunityPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetCommunityPreferences_Response)
}

void CPlayer_GetCommunityPreferences_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_GetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  preferences_ = nullptr;
}

CPlayer_GetCommunityPreferences_Response::~CPlayer_GetCommunityPreferences_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetCommunityPreferences_Response)
  SharedDtor();
}

void CPlayer_GetCommunityPreferences_Response::SharedDtor() {
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_GetCommunityPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetCommunityPreferences_Response& CPlayer_GetCommunityPreferences_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetCommunityPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetCommunityPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetCommunityPreferences_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetCommunityPreferences_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CPlayer_CommunityPreferences::_InternalParse;
        object = msg->mutable_preferences();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetCommunityPreferences_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetCommunityPreferences_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetCommunityPreferences_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetCommunityPreferences_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetCommunityPreferences_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetCommunityPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::preferences(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetCommunityPreferences_Response)
}

::google::protobuf::uint8* CPlayer_GetCommunityPreferences_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetCommunityPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::preferences(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetCommunityPreferences_Response)
  return target;
}

size_t CPlayer_GetCommunityPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetCommunityPreferences_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *preferences_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetCommunityPreferences_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetCommunityPreferences_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetCommunityPreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetCommunityPreferences_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetCommunityPreferences_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetCommunityPreferences_Response::MergeFrom(const CPlayer_GetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_preferences()) {
    mutable_preferences()->::proto::steam::CPlayer_CommunityPreferences::MergeFrom(from.preferences());
  }
}

void CPlayer_GetCommunityPreferences_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetCommunityPreferences_Response::CopyFrom(const CPlayer_GetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetCommunityPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetCommunityPreferences_Response::Swap(CPlayer_GetCommunityPreferences_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetCommunityPreferences_Response::InternalSwap(CPlayer_GetCommunityPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
}

::google::protobuf::Metadata CPlayer_GetCommunityPreferences_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_SetCommunityPreferences_Request::InitAsDefaultInstance() {
  ::proto::steam::_CPlayer_SetCommunityPreferences_Request_default_instance_._instance.get_mutable()->preferences_ = const_cast< ::proto::steam::CPlayer_CommunityPreferences*>(
      ::proto::steam::CPlayer_CommunityPreferences::internal_default_instance());
}
class CPlayer_SetCommunityPreferences_Request::HasBitSetters {
 public:
  static const ::proto::steam::CPlayer_CommunityPreferences& preferences(const CPlayer_SetCommunityPreferences_Request* msg);
  static void set_has_preferences(CPlayer_SetCommunityPreferences_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::CPlayer_CommunityPreferences&
CPlayer_SetCommunityPreferences_Request::HasBitSetters::preferences(const CPlayer_SetCommunityPreferences_Request* msg) {
  return *msg->preferences_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_SetCommunityPreferences_Request::kPreferencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_SetCommunityPreferences_Request)
}
CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(const CPlayer_SetCommunityPreferences_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preferences()) {
    preferences_ = new ::proto::steam::CPlayer_CommunityPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_SetCommunityPreferences_Request)
}

void CPlayer_SetCommunityPreferences_Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_SetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  preferences_ = nullptr;
}

CPlayer_SetCommunityPreferences_Request::~CPlayer_SetCommunityPreferences_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_SetCommunityPreferences_Request)
  SharedDtor();
}

void CPlayer_SetCommunityPreferences_Request::SharedDtor() {
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_SetCommunityPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_SetCommunityPreferences_Request& CPlayer_SetCommunityPreferences_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_SetCommunityPreferences_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_SetCommunityPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_SetCommunityPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_SetCommunityPreferences_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_SetCommunityPreferences_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CPlayer_CommunityPreferences::_InternalParse;
        object = msg->mutable_preferences();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_SetCommunityPreferences_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_SetCommunityPreferences_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_SetCommunityPreferences_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_SetCommunityPreferences_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_SetCommunityPreferences_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_SetCommunityPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::preferences(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_SetCommunityPreferences_Request)
}

::google::protobuf::uint8* CPlayer_SetCommunityPreferences_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_SetCommunityPreferences_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::preferences(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_SetCommunityPreferences_Request)
  return target;
}

size_t CPlayer_SetCommunityPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_SetCommunityPreferences_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *preferences_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_SetCommunityPreferences_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_SetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_SetCommunityPreferences_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_SetCommunityPreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_SetCommunityPreferences_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_SetCommunityPreferences_Request)
    MergeFrom(*source);
  }
}

void CPlayer_SetCommunityPreferences_Request::MergeFrom(const CPlayer_SetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_SetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_preferences()) {
    mutable_preferences()->::proto::steam::CPlayer_CommunityPreferences::MergeFrom(from.preferences());
  }
}

void CPlayer_SetCommunityPreferences_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_SetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_SetCommunityPreferences_Request::CopyFrom(const CPlayer_SetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_SetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetCommunityPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetCommunityPreferences_Request::Swap(CPlayer_SetCommunityPreferences_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_SetCommunityPreferences_Request::InternalSwap(CPlayer_SetCommunityPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
}

::google::protobuf::Metadata CPlayer_SetCommunityPreferences_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_SetCommunityPreferences_Response::InitAsDefaultInstance() {
}
class CPlayer_SetCommunityPreferences_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_SetCommunityPreferences_Response)
}
CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(const CPlayer_SetCommunityPreferences_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_SetCommunityPreferences_Response)
}

void CPlayer_SetCommunityPreferences_Response::SharedCtor() {
}

CPlayer_SetCommunityPreferences_Response::~CPlayer_SetCommunityPreferences_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_SetCommunityPreferences_Response)
  SharedDtor();
}

void CPlayer_SetCommunityPreferences_Response::SharedDtor() {
}

void CPlayer_SetCommunityPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_SetCommunityPreferences_Response& CPlayer_SetCommunityPreferences_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_SetCommunityPreferences_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_SetCommunityPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_SetCommunityPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_SetCommunityPreferences_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_SetCommunityPreferences_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_SetCommunityPreferences_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_SetCommunityPreferences_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_SetCommunityPreferences_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_SetCommunityPreferences_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_SetCommunityPreferences_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_SetCommunityPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_SetCommunityPreferences_Response)
}

::google::protobuf::uint8* CPlayer_SetCommunityPreferences_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_SetCommunityPreferences_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_SetCommunityPreferences_Response)
  return target;
}

size_t CPlayer_SetCommunityPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_SetCommunityPreferences_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_SetCommunityPreferences_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_SetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_SetCommunityPreferences_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_SetCommunityPreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_SetCommunityPreferences_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_SetCommunityPreferences_Response)
    MergeFrom(*source);
  }
}

void CPlayer_SetCommunityPreferences_Response::MergeFrom(const CPlayer_SetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_SetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_SetCommunityPreferences_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_SetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_SetCommunityPreferences_Response::CopyFrom(const CPlayer_SetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_SetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetCommunityPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_SetCommunityPreferences_Response::Swap(CPlayer_SetCommunityPreferences_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_SetCommunityPreferences_Response::InternalSwap(CPlayer_SetCommunityPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPlayer_SetCommunityPreferences_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetNewSteamAnnouncementState_Request::InitAsDefaultInstance() {
}
class CPlayer_GetNewSteamAnnouncementState_Request::HasBitSetters {
 public:
  static void set_has_language(CPlayer_GetNewSteamAnnouncementState_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetNewSteamAnnouncementState_Request::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
}
CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(const CPlayer_GetNewSteamAnnouncementState_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
}

void CPlayer_GetNewSteamAnnouncementState_Request::SharedCtor() {
  language_ = 0;
}

CPlayer_GetNewSteamAnnouncementState_Request::~CPlayer_GetNewSteamAnnouncementState_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  SharedDtor();
}

void CPlayer_GetNewSteamAnnouncementState_Request::SharedDtor() {
}

void CPlayer_GetNewSteamAnnouncementState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetNewSteamAnnouncementState_Request& CPlayer_GetNewSteamAnnouncementState_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetNewSteamAnnouncementState_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetNewSteamAnnouncementState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetNewSteamAnnouncementState_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetNewSteamAnnouncementState_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 language = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_language(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetNewSteamAnnouncementState_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_language(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetNewSteamAnnouncementState_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
}

::google::protobuf::uint8* CPlayer_GetNewSteamAnnouncementState_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 language = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  return target;
}

size_t CPlayer_GetNewSteamAnnouncementState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNewSteamAnnouncementState_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNewSteamAnnouncementState_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetNewSteamAnnouncementState_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetNewSteamAnnouncementState_Request::MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_language()) {
    set_language(from.language());
  }
}

void CPlayer_GetNewSteamAnnouncementState_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNewSteamAnnouncementState_Request::CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNewSteamAnnouncementState_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetNewSteamAnnouncementState_Request::Swap(CPlayer_GetNewSteamAnnouncementState_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetNewSteamAnnouncementState_Request::InternalSwap(CPlayer_GetNewSteamAnnouncementState_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(language_, other->language_);
}

::google::protobuf::Metadata CPlayer_GetNewSteamAnnouncementState_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_GetNewSteamAnnouncementState_Response::InitAsDefaultInstance() {
}
class CPlayer_GetNewSteamAnnouncementState_Response::HasBitSetters {
 public:
  static void set_has_state(CPlayer_GetNewSteamAnnouncementState_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_announcement_headline(CPlayer_GetNewSteamAnnouncementState_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_announcement_url(CPlayer_GetNewSteamAnnouncementState_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_posted(CPlayer_GetNewSteamAnnouncementState_Response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_announcement_gid(CPlayer_GetNewSteamAnnouncementState_Response* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetNewSteamAnnouncementState_Response::kStateFieldNumber;
const int CPlayer_GetNewSteamAnnouncementState_Response::kAnnouncementHeadlineFieldNumber;
const int CPlayer_GetNewSteamAnnouncementState_Response::kAnnouncementUrlFieldNumber;
const int CPlayer_GetNewSteamAnnouncementState_Response::kTimePostedFieldNumber;
const int CPlayer_GetNewSteamAnnouncementState_Response::kAnnouncementGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
}
CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(const CPlayer_GetNewSteamAnnouncementState_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  announcement_headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement_headline()) {
    announcement_headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_headline_);
  }
  announcement_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement_url()) {
    announcement_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_url_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&announcement_gid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
}

void CPlayer_GetNewSteamAnnouncementState_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_GetNewSteamAnnouncementState_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  announcement_headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&announcement_gid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
}

CPlayer_GetNewSteamAnnouncementState_Response::~CPlayer_GetNewSteamAnnouncementState_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  SharedDtor();
}

void CPlayer_GetNewSteamAnnouncementState_Response::SharedDtor() {
  announcement_headline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetNewSteamAnnouncementState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_GetNewSteamAnnouncementState_Response& CPlayer_GetNewSteamAnnouncementState_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_GetNewSteamAnnouncementState_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_GetNewSteamAnnouncementState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      announcement_headline_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&announcement_gid_) -
        reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_GetNewSteamAnnouncementState_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_GetNewSteamAnnouncementState_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string announcement_headline = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
        object = msg->mutable_announcement_headline();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string announcement_url = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
        object = msg->mutable_announcement_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 time_posted = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time_posted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 announcement_gid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_announcement_gid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_GetNewSteamAnnouncementState_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string announcement_headline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->announcement_headline().data(), static_cast<int>(this->announcement_headline().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string announcement_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->announcement_url().data(), static_cast<int>(this->announcement_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_posted = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time_posted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_posted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 announcement_gid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_announcement_gid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &announcement_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_GetNewSteamAnnouncementState_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string announcement_headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement_headline().data(), static_cast<int>(this->announcement_headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->announcement_headline(), output);
  }

  // optional string announcement_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement_url().data(), static_cast<int>(this->announcement_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->announcement_url(), output);
  }

  // optional uint32 time_posted = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_posted(), output);
  }

  // optional uint64 announcement_gid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->announcement_gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
}

::google::protobuf::uint8* CPlayer_GetNewSteamAnnouncementState_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional string announcement_headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement_headline().data(), static_cast<int>(this->announcement_headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->announcement_headline(), target);
  }

  // optional string announcement_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement_url().data(), static_cast<int>(this->announcement_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->announcement_url(), target);
  }

  // optional uint32 time_posted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_posted(), target);
  }

  // optional uint64 announcement_gid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->announcement_gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  return target;
}

size_t CPlayer_GetNewSteamAnnouncementState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string announcement_headline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement_headline());
    }

    // optional string announcement_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement_url());
    }

    // optional int32 state = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint32 time_posted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_posted());
    }

    // optional uint64 announcement_gid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->announcement_gid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNewSteamAnnouncementState_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNewSteamAnnouncementState_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_GetNewSteamAnnouncementState_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetNewSteamAnnouncementState_Response::MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      announcement_headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_headline_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      announcement_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_posted_ = from.time_posted_;
    }
    if (cached_has_bits & 0x00000010u) {
      announcement_gid_ = from.announcement_gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetNewSteamAnnouncementState_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNewSteamAnnouncementState_Response::CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetNewSteamAnnouncementState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNewSteamAnnouncementState_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetNewSteamAnnouncementState_Response::Swap(CPlayer_GetNewSteamAnnouncementState_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetNewSteamAnnouncementState_Response::InternalSwap(CPlayer_GetNewSteamAnnouncementState_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  announcement_headline_.Swap(&other->announcement_headline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  announcement_url_.Swap(&other->announcement_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(time_posted_, other->time_posted_);
  swap(announcement_gid_, other->announcement_gid_);
}

::google::protobuf::Metadata CPlayer_GetNewSteamAnnouncementState_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_UpdateSteamAnnouncementLastRead_Request::InitAsDefaultInstance() {
}
class CPlayer_UpdateSteamAnnouncementLastRead_Request::HasBitSetters {
 public:
  static void set_has_announcement_gid(CPlayer_UpdateSteamAnnouncementLastRead_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_posted(CPlayer_UpdateSteamAnnouncementLastRead_Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_UpdateSteamAnnouncementLastRead_Request::kAnnouncementGidFieldNumber;
const int CPlayer_UpdateSteamAnnouncementLastRead_Request::kTimePostedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
}
CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&announcement_gid_, &from.announcement_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_posted_) -
    reinterpret_cast<char*>(&announcement_gid_)) + sizeof(time_posted_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::SharedCtor() {
  ::memset(&announcement_gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_posted_) -
      reinterpret_cast<char*>(&announcement_gid_)) + sizeof(time_posted_));
}

CPlayer_UpdateSteamAnnouncementLastRead_Request::~CPlayer_UpdateSteamAnnouncementLastRead_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  SharedDtor();
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::SharedDtor() {
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_UpdateSteamAnnouncementLastRead_Request& CPlayer_UpdateSteamAnnouncementLastRead_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_UpdateSteamAnnouncementLastRead_Request_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_UpdateSteamAnnouncementLastRead_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&announcement_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_posted_) -
        reinterpret_cast<char*>(&announcement_gid_)) + sizeof(time_posted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_UpdateSteamAnnouncementLastRead_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_UpdateSteamAnnouncementLastRead_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 announcement_gid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_announcement_gid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_posted = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time_posted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_UpdateSteamAnnouncementLastRead_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 announcement_gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_announcement_gid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &announcement_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_posted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_time_posted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_posted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_UpdateSteamAnnouncementLastRead_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 announcement_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->announcement_gid(), output);
  }

  // optional uint32 time_posted = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_posted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
}

::google::protobuf::uint8* CPlayer_UpdateSteamAnnouncementLastRead_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 announcement_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->announcement_gid(), target);
  }

  // optional uint32 time_posted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_posted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  return target;
}

size_t CPlayer_UpdateSteamAnnouncementLastRead_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 announcement_gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->announcement_gid());
    }

    // optional uint32 time_posted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_posted());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_UpdateSteamAnnouncementLastRead_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_UpdateSteamAnnouncementLastRead_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
    MergeFrom(*source);
  }
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::MergeFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      announcement_gid_ = from.announcement_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_posted_ = from.time_posted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_UpdateSteamAnnouncementLastRead_Request::IsInitialized() const {
  return true;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::Swap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_UpdateSteamAnnouncementLastRead_Request::InternalSwap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(announcement_gid_, other->announcement_gid_);
  swap(time_posted_, other->time_posted_);
}

::google::protobuf::Metadata CPlayer_UpdateSteamAnnouncementLastRead_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_UpdateSteamAnnouncementLastRead_Response::InitAsDefaultInstance() {
}
class CPlayer_UpdateSteamAnnouncementLastRead_Response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
}
CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::SharedCtor() {
}

CPlayer_UpdateSteamAnnouncementLastRead_Response::~CPlayer_UpdateSteamAnnouncementLastRead_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  SharedDtor();
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::SharedDtor() {
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_UpdateSteamAnnouncementLastRead_Response& CPlayer_UpdateSteamAnnouncementLastRead_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_UpdateSteamAnnouncementLastRead_Response_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_UpdateSteamAnnouncementLastRead_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_UpdateSteamAnnouncementLastRead_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_UpdateSteamAnnouncementLastRead_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_UpdateSteamAnnouncementLastRead_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_UpdateSteamAnnouncementLastRead_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
}

::google::protobuf::uint8* CPlayer_UpdateSteamAnnouncementLastRead_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  return target;
}

size_t CPlayer_UpdateSteamAnnouncementLastRead_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_UpdateSteamAnnouncementLastRead_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_UpdateSteamAnnouncementLastRead_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
    MergeFrom(*source);
  }
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::MergeFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_UpdateSteamAnnouncementLastRead_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_UpdateSteamAnnouncementLastRead_Response::IsInitialized() const {
  return true;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::Swap(CPlayer_UpdateSteamAnnouncementLastRead_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_UpdateSteamAnnouncementLastRead_Response::InternalSwap(CPlayer_UpdateSteamAnnouncementLastRead_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CPlayer_UpdateSteamAnnouncementLastRead_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_LastPlayedTimes_Notification::InitAsDefaultInstance() {
}
class CPlayer_LastPlayedTimes_Notification::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_LastPlayedTimes_Notification::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_LastPlayedTimes_Notification::CPlayer_LastPlayedTimes_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_LastPlayedTimes_Notification)
}
CPlayer_LastPlayedTimes_Notification::CPlayer_LastPlayedTimes_Notification(const CPlayer_LastPlayedTimes_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      games_(from.games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_LastPlayedTimes_Notification)
}

void CPlayer_LastPlayedTimes_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_LastPlayedTimes_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
}

CPlayer_LastPlayedTimes_Notification::~CPlayer_LastPlayedTimes_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_LastPlayedTimes_Notification)
  SharedDtor();
}

void CPlayer_LastPlayedTimes_Notification::SharedDtor() {
}

void CPlayer_LastPlayedTimes_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_LastPlayedTimes_Notification& CPlayer_LastPlayedTimes_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_LastPlayedTimes_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_LastPlayedTimes_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_LastPlayedTimes_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_LastPlayedTimes_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game::_InternalParse;
          object = msg->add_games();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_LastPlayedTimes_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_LastPlayedTimes_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_LastPlayedTimes_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_LastPlayedTimes_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->games(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_LastPlayedTimes_Notification)
}

::google::protobuf::uint8* CPlayer_LastPlayedTimes_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->games(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_LastPlayedTimes_Notification)
  return target;
}

size_t CPlayer_LastPlayedTimes_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->games(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_LastPlayedTimes_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_LastPlayedTimes_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_LastPlayedTimes_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_LastPlayedTimes_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_LastPlayedTimes_Notification)
    MergeFrom(*source);
  }
}

void CPlayer_LastPlayedTimes_Notification::MergeFrom(const CPlayer_LastPlayedTimes_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CPlayer_LastPlayedTimes_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_LastPlayedTimes_Notification::CopyFrom(const CPlayer_LastPlayedTimes_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_LastPlayedTimes_Notification::IsInitialized() const {
  return true;
}

void CPlayer_LastPlayedTimes_Notification::Swap(CPlayer_LastPlayedTimes_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_LastPlayedTimes_Notification::InternalSwap(CPlayer_LastPlayedTimes_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&games_)->InternalSwap(CastToBase(&other->games_));
}

::google::protobuf::Metadata CPlayer_LastPlayedTimes_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_FriendNicknameChanged_Notification::InitAsDefaultInstance() {
}
class CPlayer_FriendNicknameChanged_Notification::HasBitSetters {
 public:
  static void set_has_accountid(CPlayer_FriendNicknameChanged_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_nickname(CPlayer_FriendNicknameChanged_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_echo_to_self(CPlayer_FriendNicknameChanged_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_FriendNicknameChanged_Notification::kAccountidFieldNumber;
const int CPlayer_FriendNicknameChanged_Notification::kNicknameFieldNumber;
const int CPlayer_FriendNicknameChanged_Notification::kIsEchoToSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_FriendNicknameChanged_Notification::CPlayer_FriendNicknameChanged_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_FriendNicknameChanged_Notification)
}
CPlayer_FriendNicknameChanged_Notification::CPlayer_FriendNicknameChanged_Notification(const CPlayer_FriendNicknameChanged_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_echo_to_self_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(is_echo_to_self_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_FriendNicknameChanged_Notification)
}

void CPlayer_FriendNicknameChanged_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_FriendNicknameChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_echo_to_self_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(is_echo_to_self_));
}

CPlayer_FriendNicknameChanged_Notification::~CPlayer_FriendNicknameChanged_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  SharedDtor();
}

void CPlayer_FriendNicknameChanged_Notification::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_FriendNicknameChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_FriendNicknameChanged_Notification& CPlayer_FriendNicknameChanged_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_FriendNicknameChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_FriendNicknameChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_echo_to_self_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(is_echo_to_self_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_FriendNicknameChanged_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_FriendNicknameChanged_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_accountid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional string nickname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname");
        object = msg->mutable_nickname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_echo_to_self = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_is_echo_to_self(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_FriendNicknameChanged_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_echo_to_self = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_is_echo_to_self(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_echo_to_self_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_FriendNicknameChanged_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->accountid(), output);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional bool is_echo_to_self = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_echo_to_self(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_FriendNicknameChanged_Notification)
}

::google::protobuf::uint8* CPlayer_FriendNicknameChanged_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional bool is_echo_to_self = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_echo_to_self(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  return target;
}

size_t CPlayer_FriendNicknameChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool is_echo_to_self = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_FriendNicknameChanged_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_FriendNicknameChanged_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_FriendNicknameChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_FriendNicknameChanged_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_FriendNicknameChanged_Notification)
    MergeFrom(*source);
  }
}

void CPlayer_FriendNicknameChanged_Notification::MergeFrom(const CPlayer_FriendNicknameChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_echo_to_self_ = from.is_echo_to_self_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_FriendNicknameChanged_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_FriendNicknameChanged_Notification::CopyFrom(const CPlayer_FriendNicknameChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_FriendNicknameChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_FriendNicknameChanged_Notification::IsInitialized() const {
  return true;
}

void CPlayer_FriendNicknameChanged_Notification::Swap(CPlayer_FriendNicknameChanged_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_FriendNicknameChanged_Notification::InternalSwap(CPlayer_FriendNicknameChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accountid_, other->accountid_);
  swap(is_echo_to_self_, other->is_echo_to_self_);
}

::google::protobuf::Metadata CPlayer_FriendNicknameChanged_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_NewSteamAnnouncementState_Notification::InitAsDefaultInstance() {
}
class CPlayer_NewSteamAnnouncementState_Notification::HasBitSetters {
 public:
  static void set_has_state(CPlayer_NewSteamAnnouncementState_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_announcement_headline(CPlayer_NewSteamAnnouncementState_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_announcement_url(CPlayer_NewSteamAnnouncementState_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_posted(CPlayer_NewSteamAnnouncementState_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_announcement_gid(CPlayer_NewSteamAnnouncementState_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_NewSteamAnnouncementState_Notification::kStateFieldNumber;
const int CPlayer_NewSteamAnnouncementState_Notification::kAnnouncementHeadlineFieldNumber;
const int CPlayer_NewSteamAnnouncementState_Notification::kAnnouncementUrlFieldNumber;
const int CPlayer_NewSteamAnnouncementState_Notification::kTimePostedFieldNumber;
const int CPlayer_NewSteamAnnouncementState_Notification::kAnnouncementGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_NewSteamAnnouncementState_Notification::CPlayer_NewSteamAnnouncementState_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
}
CPlayer_NewSteamAnnouncementState_Notification::CPlayer_NewSteamAnnouncementState_Notification(const CPlayer_NewSteamAnnouncementState_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  announcement_headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement_headline()) {
    announcement_headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_headline_);
  }
  announcement_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_announcement_url()) {
    announcement_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_url_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&announcement_gid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
}

void CPlayer_NewSteamAnnouncementState_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_NewSteamAnnouncementState_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  announcement_headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&announcement_gid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
}

CPlayer_NewSteamAnnouncementState_Notification::~CPlayer_NewSteamAnnouncementState_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  SharedDtor();
}

void CPlayer_NewSteamAnnouncementState_Notification::SharedDtor() {
  announcement_headline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  announcement_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_NewSteamAnnouncementState_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_NewSteamAnnouncementState_Notification& CPlayer_NewSteamAnnouncementState_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_NewSteamAnnouncementState_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_NewSteamAnnouncementState_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      announcement_headline_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&announcement_gid_) -
        reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_NewSteamAnnouncementState_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_NewSteamAnnouncementState_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string announcement_headline = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline");
        object = msg->mutable_announcement_headline();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string announcement_url = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url");
        object = msg->mutable_announcement_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 time_posted = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time_posted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 announcement_gid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_announcement_gid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_NewSteamAnnouncementState_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string announcement_headline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->announcement_headline().data(), static_cast<int>(this->announcement_headline().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string announcement_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->announcement_url().data(), static_cast<int>(this->announcement_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_posted = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time_posted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_posted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 announcement_gid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_announcement_gid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &announcement_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_NewSteamAnnouncementState_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string announcement_headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement_headline().data(), static_cast<int>(this->announcement_headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->announcement_headline(), output);
  }

  // optional string announcement_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement_url().data(), static_cast<int>(this->announcement_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->announcement_url(), output);
  }

  // optional uint32 time_posted = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_posted(), output);
  }

  // optional uint64 announcement_gid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->announcement_gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
}

::google::protobuf::uint8* CPlayer_NewSteamAnnouncementState_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional string announcement_headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement_headline().data(), static_cast<int>(this->announcement_headline().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_headline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->announcement_headline(), target);
  }

  // optional string announcement_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->announcement_url().data(), static_cast<int>(this->announcement_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPlayer_NewSteamAnnouncementState_Notification.announcement_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->announcement_url(), target);
  }

  // optional uint32 time_posted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_posted(), target);
  }

  // optional uint64 announcement_gid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->announcement_gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  return target;
}

size_t CPlayer_NewSteamAnnouncementState_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string announcement_headline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement_headline());
    }

    // optional string announcement_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement_url());
    }

    // optional int32 state = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint32 time_posted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_posted());
    }

    // optional uint64 announcement_gid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->announcement_gid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_NewSteamAnnouncementState_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_NewSteamAnnouncementState_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_NewSteamAnnouncementState_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
    MergeFrom(*source);
  }
}

void CPlayer_NewSteamAnnouncementState_Notification::MergeFrom(const CPlayer_NewSteamAnnouncementState_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      announcement_headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_headline_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      announcement_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.announcement_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_posted_ = from.time_posted_;
    }
    if (cached_has_bits & 0x00000010u) {
      announcement_gid_ = from.announcement_gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_NewSteamAnnouncementState_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_NewSteamAnnouncementState_Notification::CopyFrom(const CPlayer_NewSteamAnnouncementState_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_NewSteamAnnouncementState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_NewSteamAnnouncementState_Notification::IsInitialized() const {
  return true;
}

void CPlayer_NewSteamAnnouncementState_Notification::Swap(CPlayer_NewSteamAnnouncementState_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_NewSteamAnnouncementState_Notification::InternalSwap(CPlayer_NewSteamAnnouncementState_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  announcement_headline_.Swap(&other->announcement_headline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  announcement_url_.Swap(&other->announcement_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(time_posted_, other->time_posted_);
  swap(announcement_gid_, other->announcement_gid_);
}

::google::protobuf::Metadata CPlayer_NewSteamAnnouncementState_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_CommunityPreferencesChanged_Notification::InitAsDefaultInstance() {
  ::proto::steam::_CPlayer_CommunityPreferencesChanged_Notification_default_instance_._instance.get_mutable()->preferences_ = const_cast< ::proto::steam::CPlayer_CommunityPreferences*>(
      ::proto::steam::CPlayer_CommunityPreferences::internal_default_instance());
}
class CPlayer_CommunityPreferencesChanged_Notification::HasBitSetters {
 public:
  static const ::proto::steam::CPlayer_CommunityPreferences& preferences(const CPlayer_CommunityPreferencesChanged_Notification* msg);
  static void set_has_preferences(CPlayer_CommunityPreferencesChanged_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::CPlayer_CommunityPreferences&
CPlayer_CommunityPreferencesChanged_Notification::HasBitSetters::preferences(const CPlayer_CommunityPreferencesChanged_Notification* msg) {
  return *msg->preferences_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_CommunityPreferencesChanged_Notification::kPreferencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_CommunityPreferencesChanged_Notification::CPlayer_CommunityPreferencesChanged_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
}
CPlayer_CommunityPreferencesChanged_Notification::CPlayer_CommunityPreferencesChanged_Notification(const CPlayer_CommunityPreferencesChanged_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preferences()) {
    preferences_ = new ::proto::steam::CPlayer_CommunityPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
}

void CPlayer_CommunityPreferencesChanged_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_CommunityPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  preferences_ = nullptr;
}

CPlayer_CommunityPreferencesChanged_Notification::~CPlayer_CommunityPreferencesChanged_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  SharedDtor();
}

void CPlayer_CommunityPreferencesChanged_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_CommunityPreferencesChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_CommunityPreferencesChanged_Notification& CPlayer_CommunityPreferencesChanged_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_CommunityPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_CommunityPreferencesChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_CommunityPreferencesChanged_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_CommunityPreferencesChanged_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CPlayer_CommunityPreferences::_InternalParse;
        object = msg->mutable_preferences();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_CommunityPreferencesChanged_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_CommunityPreferencesChanged_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::preferences(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
}

::google::protobuf::uint8* CPlayer_CommunityPreferencesChanged_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::preferences(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  return target;
}

size_t CPlayer_CommunityPreferencesChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.steam.CPlayer_CommunityPreferences preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *preferences_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_CommunityPreferencesChanged_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_CommunityPreferencesChanged_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_CommunityPreferencesChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
    MergeFrom(*source);
  }
}

void CPlayer_CommunityPreferencesChanged_Notification::MergeFrom(const CPlayer_CommunityPreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_preferences()) {
    mutable_preferences()->::proto::steam::CPlayer_CommunityPreferences::MergeFrom(from.preferences());
  }
}

void CPlayer_CommunityPreferencesChanged_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_CommunityPreferencesChanged_Notification::CopyFrom(const CPlayer_CommunityPreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_CommunityPreferencesChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_CommunityPreferencesChanged_Notification::IsInitialized() const {
  return true;
}

void CPlayer_CommunityPreferencesChanged_Notification::Swap(CPlayer_CommunityPreferencesChanged_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_CommunityPreferencesChanged_Notification::InternalSwap(CPlayer_CommunityPreferencesChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
}

::google::protobuf::Metadata CPlayer_CommunityPreferencesChanged_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CPlayer_PerFriendPreferencesChanged_Notification::InitAsDefaultInstance() {
  ::proto::steam::_CPlayer_PerFriendPreferencesChanged_Notification_default_instance_._instance.get_mutable()->preferences_ = const_cast< ::proto::steam::PerFriendPreferences*>(
      ::proto::steam::PerFriendPreferences::internal_default_instance());
}
class CPlayer_PerFriendPreferencesChanged_Notification::HasBitSetters {
 public:
  static void set_has_accountid(CPlayer_PerFriendPreferencesChanged_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::steam::PerFriendPreferences& preferences(const CPlayer_PerFriendPreferencesChanged_Notification* msg);
  static void set_has_preferences(CPlayer_PerFriendPreferencesChanged_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::steam::PerFriendPreferences&
CPlayer_PerFriendPreferencesChanged_Notification::HasBitSetters::preferences(const CPlayer_PerFriendPreferencesChanged_Notification* msg) {
  return *msg->preferences_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_PerFriendPreferencesChanged_Notification::kAccountidFieldNumber;
const int CPlayer_PerFriendPreferencesChanged_Notification::kPreferencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_PerFriendPreferencesChanged_Notification::CPlayer_PerFriendPreferencesChanged_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
}
CPlayer_PerFriendPreferencesChanged_Notification::CPlayer_PerFriendPreferencesChanged_Notification(const CPlayer_PerFriendPreferencesChanged_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preferences()) {
    preferences_ = new ::proto::steam::PerFriendPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
}

void CPlayer_PerFriendPreferencesChanged_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CPlayer_PerFriendPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  ::memset(&preferences_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&preferences_)) + sizeof(accountid_));
}

CPlayer_PerFriendPreferencesChanged_Notification::~CPlayer_PerFriendPreferencesChanged_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  SharedDtor();
}

void CPlayer_PerFriendPreferencesChanged_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_PerFriendPreferencesChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPlayer_PerFriendPreferencesChanged_Notification& CPlayer_PerFriendPreferencesChanged_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CPlayer_PerFriendPreferencesChanged_Notification_steammessages_5fplayer_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CPlayer_PerFriendPreferencesChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CPlayer_PerFriendPreferencesChanged_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CPlayer_PerFriendPreferencesChanged_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_accountid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional .proto.steam.PerFriendPreferences preferences = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::PerFriendPreferences::_InternalParse;
        object = msg->mutable_preferences();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CPlayer_PerFriendPreferencesChanged_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_accountid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.PerFriendPreferences preferences = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_preferences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CPlayer_PerFriendPreferencesChanged_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->accountid(), output);
  }

  // optional .proto.steam.PerFriendPreferences preferences = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::preferences(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
}

::google::protobuf::uint8* CPlayer_PerFriendPreferencesChanged_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->accountid(), target);
  }

  // optional .proto.steam.PerFriendPreferences preferences = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::preferences(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  return target;
}

size_t CPlayer_PerFriendPreferencesChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.steam.PerFriendPreferences preferences = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *preferences_);
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_PerFriendPreferencesChanged_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_PerFriendPreferencesChanged_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CPlayer_PerFriendPreferencesChanged_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
    MergeFrom(*source);
  }
}

void CPlayer_PerFriendPreferencesChanged_Notification::MergeFrom(const CPlayer_PerFriendPreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_preferences()->::proto::steam::PerFriendPreferences::MergeFrom(from.preferences());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_PerFriendPreferencesChanged_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_PerFriendPreferencesChanged_Notification::CopyFrom(const CPlayer_PerFriendPreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_PerFriendPreferencesChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_PerFriendPreferencesChanged_Notification::IsInitialized() const {
  return true;
}

void CPlayer_PerFriendPreferencesChanged_Notification::Swap(CPlayer_PerFriendPreferencesChanged_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_PerFriendPreferencesChanged_Notification::InternalSwap(CPlayer_PerFriendPreferencesChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
  swap(accountid_, other->accountid_);
}

::google::protobuf::Metadata CPlayer_PerFriendPreferencesChanged_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

Player::~Player() {}

const ::google::protobuf::ServiceDescriptor* Player::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* Player::GetDescriptor() {
  return descriptor();
}

void Player::GetMutualFriendsForIncomingInvites(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request*,
                         ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMutualFriendsForIncomingInvites() not implemented.");
  done->Run();
}

void Player::GetGameBadgeLevels(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_GetGameBadgeLevels_Request*,
                         ::proto::steam::CPlayer_GetGameBadgeLevels_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameBadgeLevels() not implemented.");
  done->Run();
}

void Player::ClientGetLastPlayedTimes(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_GetLastPlayedTimes_Request*,
                         ::proto::steam::CPlayer_GetLastPlayedTimes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetLastPlayedTimes() not implemented.");
  done->Run();
}

void Player::AcceptSSA(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_AcceptSSA_Request*,
                         ::proto::steam::CPlayer_AcceptSSA_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptSSA() not implemented.");
  done->Run();
}

void Player::GetNicknameList(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_GetNicknameList_Request*,
                         ::proto::steam::CPlayer_GetNicknameList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNicknameList() not implemented.");
  done->Run();
}

void Player::GetPerFriendPreferences(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_GetPerFriendPreferences_Request*,
                         ::proto::steam::CPlayer_GetPerFriendPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPerFriendPreferences() not implemented.");
  done->Run();
}

void Player::SetPerFriendPreferences(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_SetPerFriendPreferences_Request*,
                         ::proto::steam::CPlayer_SetPerFriendPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetPerFriendPreferences() not implemented.");
  done->Run();
}

void Player::AddFriend(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_AddFriend_Request*,
                         ::proto::steam::CPlayer_AddFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddFriend() not implemented.");
  done->Run();
}

void Player::RemoveFriend(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_RemoveFriend_Request*,
                         ::proto::steam::CPlayer_RemoveFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveFriend() not implemented.");
  done->Run();
}

void Player::IgnoreFriend(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_IgnoreFriend_Request*,
                         ::proto::steam::CPlayer_IgnoreFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IgnoreFriend() not implemented.");
  done->Run();
}

void Player::GetCommunityPreferences(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_GetCommunityPreferences_Request*,
                         ::proto::steam::CPlayer_GetCommunityPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCommunityPreferences() not implemented.");
  done->Run();
}

void Player::SetCommunityPreferences(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_SetCommunityPreferences_Request*,
                         ::proto::steam::CPlayer_SetCommunityPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetCommunityPreferences() not implemented.");
  done->Run();
}

void Player::GetNewSteamAnnouncementState(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request*,
                         ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNewSteamAnnouncementState() not implemented.");
  done->Run();
}

void Player::UpdateSteamAnnouncementLastRead(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request*,
                         ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateSteamAnnouncementLastRead() not implemented.");
  done->Run();
}

void Player::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetMutualFriendsForIncomingInvites(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response*>(response),
             done);
      break;
    case 1:
      GetGameBadgeLevels(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_GetGameBadgeLevels_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_GetGameBadgeLevels_Response*>(response),
             done);
      break;
    case 2:
      ClientGetLastPlayedTimes(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_GetLastPlayedTimes_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_GetLastPlayedTimes_Response*>(response),
             done);
      break;
    case 3:
      AcceptSSA(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_AcceptSSA_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_AcceptSSA_Response*>(response),
             done);
      break;
    case 4:
      GetNicknameList(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_GetNicknameList_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_GetNicknameList_Response*>(response),
             done);
      break;
    case 5:
      GetPerFriendPreferences(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_GetPerFriendPreferences_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_GetPerFriendPreferences_Response*>(response),
             done);
      break;
    case 6:
      SetPerFriendPreferences(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_SetPerFriendPreferences_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_SetPerFriendPreferences_Response*>(response),
             done);
      break;
    case 7:
      AddFriend(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_AddFriend_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_AddFriend_Response*>(response),
             done);
      break;
    case 8:
      RemoveFriend(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_RemoveFriend_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_RemoveFriend_Response*>(response),
             done);
      break;
    case 9:
      IgnoreFriend(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_IgnoreFriend_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_IgnoreFriend_Response*>(response),
             done);
      break;
    case 10:
      GetCommunityPreferences(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_GetCommunityPreferences_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_GetCommunityPreferences_Response*>(response),
             done);
      break;
    case 11:
      SetCommunityPreferences(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_SetCommunityPreferences_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_SetCommunityPreferences_Response*>(response),
             done);
      break;
    case 12:
      GetNewSteamAnnouncementState(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response*>(response),
             done);
      break;
    case 13:
      UpdateSteamAnnouncementLastRead(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Player::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request::default_instance();
    case 1:
      return ::proto::steam::CPlayer_GetGameBadgeLevels_Request::default_instance();
    case 2:
      return ::proto::steam::CPlayer_GetLastPlayedTimes_Request::default_instance();
    case 3:
      return ::proto::steam::CPlayer_AcceptSSA_Request::default_instance();
    case 4:
      return ::proto::steam::CPlayer_GetNicknameList_Request::default_instance();
    case 5:
      return ::proto::steam::CPlayer_GetPerFriendPreferences_Request::default_instance();
    case 6:
      return ::proto::steam::CPlayer_SetPerFriendPreferences_Request::default_instance();
    case 7:
      return ::proto::steam::CPlayer_AddFriend_Request::default_instance();
    case 8:
      return ::proto::steam::CPlayer_RemoveFriend_Request::default_instance();
    case 9:
      return ::proto::steam::CPlayer_IgnoreFriend_Request::default_instance();
    case 10:
      return ::proto::steam::CPlayer_GetCommunityPreferences_Request::default_instance();
    case 11:
      return ::proto::steam::CPlayer_SetCommunityPreferences_Request::default_instance();
    case 12:
      return ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request::default_instance();
    case 13:
      return ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Player::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response::default_instance();
    case 1:
      return ::proto::steam::CPlayer_GetGameBadgeLevels_Response::default_instance();
    case 2:
      return ::proto::steam::CPlayer_GetLastPlayedTimes_Response::default_instance();
    case 3:
      return ::proto::steam::CPlayer_AcceptSSA_Response::default_instance();
    case 4:
      return ::proto::steam::CPlayer_GetNicknameList_Response::default_instance();
    case 5:
      return ::proto::steam::CPlayer_GetPerFriendPreferences_Response::default_instance();
    case 6:
      return ::proto::steam::CPlayer_SetPerFriendPreferences_Response::default_instance();
    case 7:
      return ::proto::steam::CPlayer_AddFriend_Response::default_instance();
    case 8:
      return ::proto::steam::CPlayer_RemoveFriend_Response::default_instance();
    case 9:
      return ::proto::steam::CPlayer_IgnoreFriend_Response::default_instance();
    case 10:
      return ::proto::steam::CPlayer_GetCommunityPreferences_Response::default_instance();
    case 11:
      return ::proto::steam::CPlayer_SetCommunityPreferences_Response::default_instance();
    case 12:
      return ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response::default_instance();
    case 13:
      return ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Player_Stub::Player_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Player_Stub::Player_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Player_Stub::~Player_Stub() {
  if (owns_channel_) delete channel_;
}

void Player_Stub::GetMutualFriendsForIncomingInvites(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request* request,
                              ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Player_Stub::GetGameBadgeLevels(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_GetGameBadgeLevels_Request* request,
                              ::proto::steam::CPlayer_GetGameBadgeLevels_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Player_Stub::ClientGetLastPlayedTimes(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_GetLastPlayedTimes_Request* request,
                              ::proto::steam::CPlayer_GetLastPlayedTimes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Player_Stub::AcceptSSA(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_AcceptSSA_Request* request,
                              ::proto::steam::CPlayer_AcceptSSA_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Player_Stub::GetNicknameList(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_GetNicknameList_Request* request,
                              ::proto::steam::CPlayer_GetNicknameList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Player_Stub::GetPerFriendPreferences(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_GetPerFriendPreferences_Request* request,
                              ::proto::steam::CPlayer_GetPerFriendPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Player_Stub::SetPerFriendPreferences(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_SetPerFriendPreferences_Request* request,
                              ::proto::steam::CPlayer_SetPerFriendPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Player_Stub::AddFriend(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_AddFriend_Request* request,
                              ::proto::steam::CPlayer_AddFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Player_Stub::RemoveFriend(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_RemoveFriend_Request* request,
                              ::proto::steam::CPlayer_RemoveFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Player_Stub::IgnoreFriend(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_IgnoreFriend_Request* request,
                              ::proto::steam::CPlayer_IgnoreFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Player_Stub::GetCommunityPreferences(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_GetCommunityPreferences_Request* request,
                              ::proto::steam::CPlayer_GetCommunityPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Player_Stub::SetCommunityPreferences(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_SetCommunityPreferences_Request* request,
                              ::proto::steam::CPlayer_SetCommunityPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Player_Stub::GetNewSteamAnnouncementState(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request* request,
                              ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Player_Stub::UpdateSteamAnnouncementLastRead(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request* request,
                              ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
// ===================================================================

PlayerClient::~PlayerClient() {}

const ::google::protobuf::ServiceDescriptor* PlayerClient::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fplayer_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[1];
}

const ::google::protobuf::ServiceDescriptor* PlayerClient::GetDescriptor() {
  return descriptor();
}

void PlayerClient::NotifyLastPlayedTimes(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_LastPlayedTimes_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyLastPlayedTimes() not implemented.");
  done->Run();
}

void PlayerClient::NotifyFriendNicknameChanged(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_FriendNicknameChanged_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyFriendNicknameChanged() not implemented.");
  done->Run();
}

void PlayerClient::NotifyNewSteamAnnouncementState(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyNewSteamAnnouncementState() not implemented.");
  done->Run();
}

void PlayerClient::NotifyCommunityPreferencesChanged(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyCommunityPreferencesChanged() not implemented.");
  done->Run();
}

void PlayerClient::NotifyPerFriendPreferencesChanged(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyPerFriendPreferencesChanged() not implemented.");
  done->Run();
}

void PlayerClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyLastPlayedTimes(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_LastPlayedTimes_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 1:
      NotifyFriendNicknameChanged(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_FriendNicknameChanged_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 2:
      NotifyNewSteamAnnouncementState(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 3:
      NotifyCommunityPreferencesChanged(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 4:
      NotifyPerFriendPreferencesChanged(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PlayerClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPlayer_LastPlayedTimes_Notification::default_instance();
    case 1:
      return ::proto::steam::CPlayer_FriendNicknameChanged_Notification::default_instance();
    case 2:
      return ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification::default_instance();
    case 3:
      return ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification::default_instance();
    case 4:
      return ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& PlayerClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::NoResponse::default_instance();
    case 1:
      return ::proto::steam::NoResponse::default_instance();
    case 2:
      return ::proto::steam::NoResponse::default_instance();
    case 3:
      return ::proto::steam::NoResponse::default_instance();
    case 4:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PlayerClient_Stub::PlayerClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PlayerClient_Stub::PlayerClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PlayerClient_Stub::~PlayerClient_Stub() {
  if (owns_channel_) delete channel_;
}

void PlayerClient_Stub::NotifyLastPlayedTimes(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_LastPlayedTimes_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyFriendNicknameChanged(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_FriendNicknameChanged_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyNewSteamAnnouncementState(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyCommunityPreferencesChanged(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyPerFriendPreferencesChanged(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_IncomingInviteMutualFriendList* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_IncomingInviteMutualFriendList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_IncomingInviteMutualFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetMutualFriendsForIncomingInvites_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetGameBadgeLevels_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetGameBadgeLevels_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetGameBadgeLevels_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetGameBadgeLevels_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetGameBadgeLevels_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetGameBadgeLevels_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetLastPlayedTimes_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetLastPlayedTimes_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetLastPlayedTimes_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetLastPlayedTimes_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetLastPlayedTimes_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetLastPlayedTimes_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_AcceptSSA_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_AcceptSSA_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_AcceptSSA_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_AcceptSSA_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_AcceptSSA_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_AcceptSSA_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetNicknameList_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetNicknameList_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetNicknameList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetNicknameList_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetNicknameList_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetNicknameList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetPerFriendPreferences_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetPerFriendPreferences_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetPerFriendPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::PerFriendPreferences* Arena::CreateMaybeMessage< ::proto::steam::PerFriendPreferences >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::PerFriendPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetPerFriendPreferences_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetPerFriendPreferences_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetPerFriendPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_SetPerFriendPreferences_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_SetPerFriendPreferences_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_SetPerFriendPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_SetPerFriendPreferences_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_SetPerFriendPreferences_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_SetPerFriendPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_AddFriend_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_AddFriend_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_AddFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_AddFriend_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_AddFriend_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_AddFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_RemoveFriend_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_RemoveFriend_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_RemoveFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_RemoveFriend_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_RemoveFriend_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_RemoveFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_IgnoreFriend_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_IgnoreFriend_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_IgnoreFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_IgnoreFriend_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_IgnoreFriend_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_IgnoreFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetCommunityPreferences_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetCommunityPreferences_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetCommunityPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_CommunityPreferences* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_CommunityPreferences >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_CommunityPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetCommunityPreferences_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetCommunityPreferences_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetCommunityPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_SetCommunityPreferences_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_SetCommunityPreferences_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_SetCommunityPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_SetCommunityPreferences_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_SetCommunityPreferences_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_SetCommunityPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_GetNewSteamAnnouncementState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_UpdateSteamAnnouncementLastRead_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_LastPlayedTimes_Notification* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_LastPlayedTimes_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_LastPlayedTimes_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_FriendNicknameChanged_Notification* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_FriendNicknameChanged_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_FriendNicknameChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_NewSteamAnnouncementState_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_CommunityPreferencesChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification* Arena::CreateMaybeMessage< ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CPlayer_PerFriendPreferencesChanged_Notification >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
