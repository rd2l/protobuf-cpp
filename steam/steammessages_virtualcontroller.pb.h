// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_virtualcontroller.proto

#ifndef PROTOBUF_INCLUDED_steammessages_5fvirtualcontroller_2eproto
#define PROTOBUF_INCLUDED_steammessages_5fvirtualcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fvirtualcontroller_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fvirtualcontroller_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_steammessages_5fvirtualcontroller_2eproto();
namespace proto {
namespace steam {
class CVirtualControllerConfig;
class CVirtualControllerConfigDefaultTypeInternal;
extern CVirtualControllerConfigDefaultTypeInternal _CVirtualControllerConfig_default_instance_;
class CVirtualControllerConfig_ActionSet;
class CVirtualControllerConfig_ActionSetDefaultTypeInternal;
extern CVirtualControllerConfig_ActionSetDefaultTypeInternal _CVirtualControllerConfig_ActionSet_default_instance_;
class CVirtualControllerConfig_Control;
class CVirtualControllerConfig_ControlDefaultTypeInternal;
extern CVirtualControllerConfig_ControlDefaultTypeInternal _CVirtualControllerConfig_Control_default_instance_;
class CVirtualControllerElement;
class CVirtualControllerElementDefaultTypeInternal;
extern CVirtualControllerElementDefaultTypeInternal _CVirtualControllerElement_default_instance_;
class CVirtualControllerGlobalConfig;
class CVirtualControllerGlobalConfigDefaultTypeInternal;
extern CVirtualControllerGlobalConfigDefaultTypeInternal _CVirtualControllerGlobalConfig_default_instance_;
class CVirtualControllerLayout;
class CVirtualControllerLayoutDefaultTypeInternal;
extern CVirtualControllerLayoutDefaultTypeInternal _CVirtualControllerLayout_default_instance_;
class CVirtualControllerLayoutPackage;
class CVirtualControllerLayoutPackageDefaultTypeInternal;
extern CVirtualControllerLayoutPackageDefaultTypeInternal _CVirtualControllerLayoutPackage_default_instance_;
class CVirtualControllerLayouts;
class CVirtualControllerLayoutsDefaultTypeInternal;
extern CVirtualControllerLayoutsDefaultTypeInternal _CVirtualControllerLayouts_default_instance_;
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::steam::CVirtualControllerConfig* Arena::CreateMaybeMessage<::proto::steam::CVirtualControllerConfig>(Arena*);
template<> ::proto::steam::CVirtualControllerConfig_ActionSet* Arena::CreateMaybeMessage<::proto::steam::CVirtualControllerConfig_ActionSet>(Arena*);
template<> ::proto::steam::CVirtualControllerConfig_Control* Arena::CreateMaybeMessage<::proto::steam::CVirtualControllerConfig_Control>(Arena*);
template<> ::proto::steam::CVirtualControllerElement* Arena::CreateMaybeMessage<::proto::steam::CVirtualControllerElement>(Arena*);
template<> ::proto::steam::CVirtualControllerGlobalConfig* Arena::CreateMaybeMessage<::proto::steam::CVirtualControllerGlobalConfig>(Arena*);
template<> ::proto::steam::CVirtualControllerLayout* Arena::CreateMaybeMessage<::proto::steam::CVirtualControllerLayout>(Arena*);
template<> ::proto::steam::CVirtualControllerLayoutPackage* Arena::CreateMaybeMessage<::proto::steam::CVirtualControllerLayoutPackage>(Arena*);
template<> ::proto::steam::CVirtualControllerLayouts* Arena::CreateMaybeMessage<::proto::steam::CVirtualControllerLayouts>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace steam {

enum EInputMode {
  k_EInputModeUnknown = 0,
  k_EInputModeMouse = 1,
  k_EInputModeController = 2,
  k_EInputModeMouseAndController = 3
};
bool EInputMode_IsValid(int value);
const EInputMode EInputMode_MIN = k_EInputModeUnknown;
const EInputMode EInputMode_MAX = k_EInputModeMouseAndController;
const int EInputMode_ARRAYSIZE = EInputMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EInputMode_descriptor();
inline const ::std::string& EInputMode_Name(EInputMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EInputMode_descriptor(), value);
}
inline bool EInputMode_Parse(
    const ::std::string& name, EInputMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EInputMode>(
    EInputMode_descriptor(), name, value);
}
enum EControllerElementType {
  k_EControllerElementTypeNone = -1,
  k_EControllerElementTypeThumb = 0,
  k_EControllerElementTypeButtonSteam = 1,
  k_EControllerElementTypeJoystickLeft = 2,
  k_EControllerElementTypeButtonJoystickLeft = 3,
  k_EControllerElementTypeJoystickRight = 4,
  k_EControllerElementTypeButtonJoystickRight = 5,
  k_EControllerElementTypeDPad = 6,
  k_EControllerElementTypeButtonA = 7,
  k_EControllerElementTypeButtonB = 8,
  k_EControllerElementTypeButtonX = 9,
  k_EControllerElementTypeButtonY = 10,
  k_EControllerElementTypeButtonSelect = 11,
  k_EControllerElementTypeButtonStart = 12,
  k_EControllerElementTypeButtonTriggerLeft = 13,
  k_EControllerElementTypeButtonTriggerRight = 14,
  k_EControllerElementTypeButtonBumperLeft = 15,
  k_EControllerElementTypeButtonBumperRight = 16,
  k_EControllerElementTypeButtonMacro0 = 17,
  k_EControllerElementTypeButtonMacro1 = 18,
  k_EControllerElementTypeButtonMacro2 = 19,
  k_EControllerElementTypeButtonMacro3 = 20,
  k_EControllerElementTypeButtonMacro4 = 21,
  k_EControllerElementTypeButtonMacro5 = 22,
  k_EControllerElementTypeButtonMacro6 = 23,
  k_EControllerElementTypeButtonMacro7 = 24,
  k_EControllerElementTypeTrackpadCenter = 25,
  k_EControllerElementTypeTrackpadLeft = 26,
  k_EControllerElementTypeTrackpadRight = 27,
  k_EControllerElementTypeMax = 28
};
bool EControllerElementType_IsValid(int value);
const EControllerElementType EControllerElementType_MIN = k_EControllerElementTypeNone;
const EControllerElementType EControllerElementType_MAX = k_EControllerElementTypeMax;
const int EControllerElementType_ARRAYSIZE = EControllerElementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EControllerElementType_descriptor();
inline const ::std::string& EControllerElementType_Name(EControllerElementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EControllerElementType_descriptor(), value);
}
inline bool EControllerElementType_Parse(
    const ::std::string& name, EControllerElementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EControllerElementType>(
    EControllerElementType_descriptor(), name, value);
}
// ===================================================================

class CVirtualControllerElement final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CVirtualControllerElement) */ {
 public:
  CVirtualControllerElement();
  virtual ~CVirtualControllerElement();

  CVirtualControllerElement(const CVirtualControllerElement& from);

  inline CVirtualControllerElement& operator=(const CVirtualControllerElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerElement(CVirtualControllerElement&& from) noexcept
    : CVirtualControllerElement() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerElement& operator=(CVirtualControllerElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CVirtualControllerElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerElement* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerElement*>(
               &_CVirtualControllerElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CVirtualControllerElement* other);
  friend void swap(CVirtualControllerElement& a, CVirtualControllerElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerElement* New() const final {
    return CreateMaybeMessage<CVirtualControllerElement>(nullptr);
  }

  CVirtualControllerElement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerElement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerElement& from);
  void MergeFrom(const CVirtualControllerElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool visible = 2;
  bool has_visible() const;
  void clear_visible();
  static const int kVisibleFieldNumber = 2;
  bool visible() const;
  void set_visible(bool value);

  // optional float x_position = 3;
  bool has_x_position() const;
  void clear_x_position();
  static const int kXPositionFieldNumber = 3;
  float x_position() const;
  void set_x_position(float value);

  // optional float y_position = 4;
  bool has_y_position() const;
  void clear_y_position();
  static const int kYPositionFieldNumber = 4;
  float y_position() const;
  void set_y_position(float value);

  // optional float y_scale = 6 [default = 1];
  bool has_y_scale() const;
  void clear_y_scale();
  static const int kYScaleFieldNumber = 6;
  float y_scale() const;
  void set_y_scale(float value);

  // optional .proto.steam.EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::proto::steam::EControllerElementType type() const;
  void set_type(::proto::steam::EControllerElementType value);

  // optional float x_scale = 5 [default = 1];
  bool has_x_scale() const;
  void clear_x_scale();
  static const int kXScaleFieldNumber = 5;
  float x_scale() const;
  void set_x_scale(float value);

  // @@protoc_insertion_point(class_scope:proto.steam.CVirtualControllerElement)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool visible_;
  float x_position_;
  float y_position_;
  float y_scale_;
  int type_;
  float x_scale_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerLayout final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CVirtualControllerLayout) */ {
 public:
  CVirtualControllerLayout();
  virtual ~CVirtualControllerLayout();

  CVirtualControllerLayout(const CVirtualControllerLayout& from);

  inline CVirtualControllerLayout& operator=(const CVirtualControllerLayout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerLayout(CVirtualControllerLayout&& from) noexcept
    : CVirtualControllerLayout() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerLayout& operator=(CVirtualControllerLayout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CVirtualControllerLayout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerLayout* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerLayout*>(
               &_CVirtualControllerLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CVirtualControllerLayout* other);
  friend void swap(CVirtualControllerLayout& a, CVirtualControllerLayout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerLayout* New() const final {
    return CreateMaybeMessage<CVirtualControllerLayout>(nullptr);
  }

  CVirtualControllerLayout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerLayout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerLayout& from);
  void MergeFrom(const CVirtualControllerLayout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerLayout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CVirtualControllerElement elements = 4;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 4;
  ::proto::steam::CVirtualControllerElement* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerElement >*
      mutable_elements();
  const ::proto::steam::CVirtualControllerElement& elements(int index) const;
  ::proto::steam::CVirtualControllerElement* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerElement >&
      elements() const;

  // optional int32 layout_version = 1;
  bool has_layout_version() const;
  void clear_layout_version();
  static const int kLayoutVersionFieldNumber = 1;
  ::google::protobuf::int32 layout_version() const;
  void set_layout_version(::google::protobuf::int32 value);

  // optional int32 actionset_id = 2;
  bool has_actionset_id() const;
  void clear_actionset_id();
  static const int kActionsetIdFieldNumber = 2;
  ::google::protobuf::int32 actionset_id() const;
  void set_actionset_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CVirtualControllerLayout)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerElement > elements_;
  ::google::protobuf::int32 layout_version_;
  ::google::protobuf::int32 actionset_id_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerLayouts final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CVirtualControllerLayouts) */ {
 public:
  CVirtualControllerLayouts();
  virtual ~CVirtualControllerLayouts();

  CVirtualControllerLayouts(const CVirtualControllerLayouts& from);

  inline CVirtualControllerLayouts& operator=(const CVirtualControllerLayouts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerLayouts(CVirtualControllerLayouts&& from) noexcept
    : CVirtualControllerLayouts() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerLayouts& operator=(CVirtualControllerLayouts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CVirtualControllerLayouts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerLayouts* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerLayouts*>(
               &_CVirtualControllerLayouts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CVirtualControllerLayouts* other);
  friend void swap(CVirtualControllerLayouts& a, CVirtualControllerLayouts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerLayouts* New() const final {
    return CreateMaybeMessage<CVirtualControllerLayouts>(nullptr);
  }

  CVirtualControllerLayouts* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerLayouts>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerLayouts& from);
  void MergeFrom(const CVirtualControllerLayouts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerLayouts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CVirtualControllerLayout layouts = 1;
  int layouts_size() const;
  void clear_layouts();
  static const int kLayoutsFieldNumber = 1;
  ::proto::steam::CVirtualControllerLayout* mutable_layouts(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerLayout >*
      mutable_layouts();
  const ::proto::steam::CVirtualControllerLayout& layouts(int index) const;
  ::proto::steam::CVirtualControllerLayout* add_layouts();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerLayout >&
      layouts() const;

  // optional .proto.steam.EInputMode input_mode = 2 [default = k_EInputModeUnknown];
  bool has_input_mode() const;
  void clear_input_mode();
  static const int kInputModeFieldNumber = 2;
  ::proto::steam::EInputMode input_mode() const;
  void set_input_mode(::proto::steam::EInputMode value);

  // @@protoc_insertion_point(class_scope:proto.steam.CVirtualControllerLayouts)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerLayout > layouts_;
  int input_mode_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerConfig_Control final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CVirtualControllerConfig.Control) */ {
 public:
  CVirtualControllerConfig_Control();
  virtual ~CVirtualControllerConfig_Control();

  CVirtualControllerConfig_Control(const CVirtualControllerConfig_Control& from);

  inline CVirtualControllerConfig_Control& operator=(const CVirtualControllerConfig_Control& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerConfig_Control(CVirtualControllerConfig_Control&& from) noexcept
    : CVirtualControllerConfig_Control() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerConfig_Control& operator=(CVirtualControllerConfig_Control&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CVirtualControllerConfig_Control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerConfig_Control* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerConfig_Control*>(
               &_CVirtualControllerConfig_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CVirtualControllerConfig_Control* other);
  friend void swap(CVirtualControllerConfig_Control& a, CVirtualControllerConfig_Control& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerConfig_Control* New() const final {
    return CreateMaybeMessage<CVirtualControllerConfig_Control>(nullptr);
  }

  CVirtualControllerConfig_Control* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerConfig_Control>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerConfig_Control& from);
  void MergeFrom(const CVirtualControllerConfig_Control& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerConfig_Control* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string icon = 2;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 2;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // optional string icon_foreground = 9;
  bool has_icon_foreground() const;
  void clear_icon_foreground();
  static const int kIconForegroundFieldNumber = 9;
  const ::std::string& icon_foreground() const;
  void set_icon_foreground(const ::std::string& value);
  #if LANG_CXX11
  void set_icon_foreground(::std::string&& value);
  #endif
  void set_icon_foreground(const char* value);
  void set_icon_foreground(const char* value, size_t size);
  ::std::string* mutable_icon_foreground();
  ::std::string* release_icon_foreground();
  void set_allocated_icon_foreground(::std::string* icon_foreground);

  // optional string icon_background = 10;
  bool has_icon_background() const;
  void clear_icon_background();
  static const int kIconBackgroundFieldNumber = 10;
  const ::std::string& icon_background() const;
  void set_icon_background(const ::std::string& value);
  #if LANG_CXX11
  void set_icon_background(::std::string&& value);
  #endif
  void set_icon_background(const char* value);
  void set_icon_background(const char* value, size_t size);
  ::std::string* mutable_icon_background();
  ::std::string* release_icon_background();
  void set_allocated_icon_background(::std::string* icon_background);

  // optional int32 input_source = 3;
  bool has_input_source() const;
  void clear_input_source();
  static const int kInputSourceFieldNumber = 3;
  ::google::protobuf::int32 input_source() const;
  void set_input_source(::google::protobuf::int32 value);

  // optional int32 input_mode = 4;
  bool has_input_mode() const;
  void clear_input_mode();
  static const int kInputModeFieldNumber = 4;
  ::google::protobuf::int32 input_mode() const;
  void set_input_mode(::google::protobuf::int32 value);

  // optional int32 input_element = 5;
  bool has_input_element() const;
  void clear_input_element();
  static const int kInputElementFieldNumber = 5;
  ::google::protobuf::int32 input_element() const;
  void set_input_element(::google::protobuf::int32 value);

  // optional int32 output_gamepad = 6;
  bool has_output_gamepad() const;
  void clear_output_gamepad();
  static const int kOutputGamepadFieldNumber = 6;
  ::google::protobuf::int32 output_gamepad() const;
  void set_output_gamepad(::google::protobuf::int32 value);

  // optional int32 output_keyboard = 7;
  bool has_output_keyboard() const;
  void clear_output_keyboard();
  static const int kOutputKeyboardFieldNumber = 7;
  ::google::protobuf::int32 output_keyboard() const;
  void set_output_keyboard(::google::protobuf::int32 value);

  // optional int32 output_mouse = 8;
  bool has_output_mouse() const;
  void clear_output_mouse();
  static const int kOutputMouseFieldNumber = 8;
  ::google::protobuf::int32 output_mouse() const;
  void set_output_mouse(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CVirtualControllerConfig.Control)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr icon_foreground_;
  ::google::protobuf::internal::ArenaStringPtr icon_background_;
  ::google::protobuf::int32 input_source_;
  ::google::protobuf::int32 input_mode_;
  ::google::protobuf::int32 input_element_;
  ::google::protobuf::int32 output_gamepad_;
  ::google::protobuf::int32 output_keyboard_;
  ::google::protobuf::int32 output_mouse_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerConfig_ActionSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CVirtualControllerConfig.ActionSet) */ {
 public:
  CVirtualControllerConfig_ActionSet();
  virtual ~CVirtualControllerConfig_ActionSet();

  CVirtualControllerConfig_ActionSet(const CVirtualControllerConfig_ActionSet& from);

  inline CVirtualControllerConfig_ActionSet& operator=(const CVirtualControllerConfig_ActionSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerConfig_ActionSet(CVirtualControllerConfig_ActionSet&& from) noexcept
    : CVirtualControllerConfig_ActionSet() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerConfig_ActionSet& operator=(CVirtualControllerConfig_ActionSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CVirtualControllerConfig_ActionSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerConfig_ActionSet* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerConfig_ActionSet*>(
               &_CVirtualControllerConfig_ActionSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CVirtualControllerConfig_ActionSet* other);
  friend void swap(CVirtualControllerConfig_ActionSet& a, CVirtualControllerConfig_ActionSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerConfig_ActionSet* New() const final {
    return CreateMaybeMessage<CVirtualControllerConfig_ActionSet>(nullptr);
  }

  CVirtualControllerConfig_ActionSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerConfig_ActionSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerConfig_ActionSet& from);
  void MergeFrom(const CVirtualControllerConfig_ActionSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerConfig_ActionSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CVirtualControllerConfig.Control controls = 4;
  int controls_size() const;
  void clear_controls();
  static const int kControlsFieldNumber = 4;
  ::proto::steam::CVirtualControllerConfig_Control* mutable_controls(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_Control >*
      mutable_controls();
  const ::proto::steam::CVirtualControllerConfig_Control& controls(int index) const;
  ::proto::steam::CVirtualControllerConfig_Control* add_controls();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_Control >&
      controls() const;

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 parent_id = 2;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  ::google::protobuf::int32 parent_id() const;
  void set_parent_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CVirtualControllerConfig.ActionSet)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_Control > controls_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CVirtualControllerConfig) */ {
 public:
  CVirtualControllerConfig();
  virtual ~CVirtualControllerConfig();

  CVirtualControllerConfig(const CVirtualControllerConfig& from);

  inline CVirtualControllerConfig& operator=(const CVirtualControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerConfig(CVirtualControllerConfig&& from) noexcept
    : CVirtualControllerConfig() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerConfig& operator=(CVirtualControllerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CVirtualControllerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerConfig* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerConfig*>(
               &_CVirtualControllerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CVirtualControllerConfig* other);
  friend void swap(CVirtualControllerConfig& a, CVirtualControllerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerConfig* New() const final {
    return CreateMaybeMessage<CVirtualControllerConfig>(nullptr);
  }

  CVirtualControllerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerConfig& from);
  void MergeFrom(const CVirtualControllerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CVirtualControllerConfig_Control Control;
  typedef CVirtualControllerConfig_ActionSet ActionSet;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CVirtualControllerConfig.ActionSet actionsets = 2;
  int actionsets_size() const;
  void clear_actionsets();
  static const int kActionsetsFieldNumber = 2;
  ::proto::steam::CVirtualControllerConfig_ActionSet* mutable_actionsets(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_ActionSet >*
      mutable_actionsets();
  const ::proto::steam::CVirtualControllerConfig_ActionSet& actionsets(int index) const;
  ::proto::steam::CVirtualControllerConfig_ActionSet* add_actionsets();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_ActionSet >&
      actionsets() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto.steam.CVirtualControllerConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_ActionSet > actionsets_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerLayoutPackage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CVirtualControllerLayoutPackage) */ {
 public:
  CVirtualControllerLayoutPackage();
  virtual ~CVirtualControllerLayoutPackage();

  CVirtualControllerLayoutPackage(const CVirtualControllerLayoutPackage& from);

  inline CVirtualControllerLayoutPackage& operator=(const CVirtualControllerLayoutPackage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerLayoutPackage(CVirtualControllerLayoutPackage&& from) noexcept
    : CVirtualControllerLayoutPackage() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerLayoutPackage& operator=(CVirtualControllerLayoutPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CVirtualControllerLayoutPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerLayoutPackage* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerLayoutPackage*>(
               &_CVirtualControllerLayoutPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CVirtualControllerLayoutPackage* other);
  friend void swap(CVirtualControllerLayoutPackage& a, CVirtualControllerLayoutPackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerLayoutPackage* New() const final {
    return CreateMaybeMessage<CVirtualControllerLayoutPackage>(nullptr);
  }

  CVirtualControllerLayoutPackage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerLayoutPackage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerLayoutPackage& from);
  void MergeFrom(const CVirtualControllerLayoutPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerLayoutPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.steam.CVirtualControllerConfig config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::proto::steam::CVirtualControllerConfig& config() const;
  ::proto::steam::CVirtualControllerConfig* release_config();
  ::proto::steam::CVirtualControllerConfig* mutable_config();
  void set_allocated_config(::proto::steam::CVirtualControllerConfig* config);

  // optional .proto.steam.CVirtualControllerLayouts layouts = 4;
  bool has_layouts() const;
  void clear_layouts();
  static const int kLayoutsFieldNumber = 4;
  const ::proto::steam::CVirtualControllerLayouts& layouts() const;
  ::proto::steam::CVirtualControllerLayouts* release_layouts();
  ::proto::steam::CVirtualControllerLayouts* mutable_layouts();
  void set_allocated_layouts(::proto::steam::CVirtualControllerLayouts* layouts);

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // optional uint32 revision = 2;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 2;
  ::google::protobuf::uint32 revision() const;
  void set_revision(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CVirtualControllerLayoutPackage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::steam::CVirtualControllerConfig* config_;
  ::proto::steam::CVirtualControllerLayouts* layouts_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 revision_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// -------------------------------------------------------------------

class CVirtualControllerGlobalConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CVirtualControllerGlobalConfig) */ {
 public:
  CVirtualControllerGlobalConfig();
  virtual ~CVirtualControllerGlobalConfig();

  CVirtualControllerGlobalConfig(const CVirtualControllerGlobalConfig& from);

  inline CVirtualControllerGlobalConfig& operator=(const CVirtualControllerGlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CVirtualControllerGlobalConfig(CVirtualControllerGlobalConfig&& from) noexcept
    : CVirtualControllerGlobalConfig() {
    *this = ::std::move(from);
  }

  inline CVirtualControllerGlobalConfig& operator=(CVirtualControllerGlobalConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CVirtualControllerGlobalConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CVirtualControllerGlobalConfig* internal_default_instance() {
    return reinterpret_cast<const CVirtualControllerGlobalConfig*>(
               &_CVirtualControllerGlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CVirtualControllerGlobalConfig* other);
  friend void swap(CVirtualControllerGlobalConfig& a, CVirtualControllerGlobalConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CVirtualControllerGlobalConfig* New() const final {
    return CreateMaybeMessage<CVirtualControllerGlobalConfig>(nullptr);
  }

  CVirtualControllerGlobalConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CVirtualControllerGlobalConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CVirtualControllerGlobalConfig& from);
  void MergeFrom(const CVirtualControllerGlobalConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVirtualControllerGlobalConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool feedback_enabled = 1;
  bool has_feedback_enabled() const;
  void clear_feedback_enabled();
  static const int kFeedbackEnabledFieldNumber = 1;
  bool feedback_enabled() const;
  void set_feedback_enabled(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CVirtualControllerGlobalConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool feedback_enabled_;
  friend struct ::TableStruct_steammessages_5fvirtualcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CVirtualControllerElement

// optional .proto.steam.EControllerElementType type = 1 [default = k_EControllerElementTypeNone];
inline bool CVirtualControllerElement::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CVirtualControllerElement::clear_type() {
  type_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::proto::steam::EControllerElementType CVirtualControllerElement::type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerElement.type)
  return static_cast< ::proto::steam::EControllerElementType >(type_);
}
inline void CVirtualControllerElement::set_type(::proto::steam::EControllerElementType value) {
  assert(::proto::steam::EControllerElementType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerElement.type)
}

// optional bool visible = 2;
inline bool CVirtualControllerElement::has_visible() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerElement::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CVirtualControllerElement::visible() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerElement.visible)
  return visible_;
}
inline void CVirtualControllerElement::set_visible(bool value) {
  _has_bits_[0] |= 0x00000001u;
  visible_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerElement.visible)
}

// optional float x_position = 3;
inline bool CVirtualControllerElement::has_x_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerElement::clear_x_position() {
  x_position_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CVirtualControllerElement::x_position() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerElement.x_position)
  return x_position_;
}
inline void CVirtualControllerElement::set_x_position(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_position_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerElement.x_position)
}

// optional float y_position = 4;
inline bool CVirtualControllerElement::has_y_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerElement::clear_y_position() {
  y_position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CVirtualControllerElement::y_position() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerElement.y_position)
  return y_position_;
}
inline void CVirtualControllerElement::set_y_position(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_position_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerElement.y_position)
}

// optional float x_scale = 5 [default = 1];
inline bool CVirtualControllerElement::has_x_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CVirtualControllerElement::clear_x_scale() {
  x_scale_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CVirtualControllerElement::x_scale() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerElement.x_scale)
  return x_scale_;
}
inline void CVirtualControllerElement::set_x_scale(float value) {
  _has_bits_[0] |= 0x00000020u;
  x_scale_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerElement.x_scale)
}

// optional float y_scale = 6 [default = 1];
inline bool CVirtualControllerElement::has_y_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVirtualControllerElement::clear_y_scale() {
  y_scale_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CVirtualControllerElement::y_scale() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerElement.y_scale)
  return y_scale_;
}
inline void CVirtualControllerElement::set_y_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_scale_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerElement.y_scale)
}

// -------------------------------------------------------------------

// CVirtualControllerLayout

// optional int32 layout_version = 1;
inline bool CVirtualControllerLayout::has_layout_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerLayout::clear_layout_version() {
  layout_version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 CVirtualControllerLayout::layout_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerLayout.layout_version)
  return layout_version_;
}
inline void CVirtualControllerLayout::set_layout_version(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  layout_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerLayout.layout_version)
}

// optional int32 actionset_id = 2;
inline bool CVirtualControllerLayout::has_actionset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerLayout::clear_actionset_id() {
  actionset_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CVirtualControllerLayout::actionset_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerLayout.actionset_id)
  return actionset_id_;
}
inline void CVirtualControllerLayout::set_actionset_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  actionset_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerLayout.actionset_id)
}

// repeated .proto.steam.CVirtualControllerElement elements = 4;
inline int CVirtualControllerLayout::elements_size() const {
  return elements_.size();
}
inline void CVirtualControllerLayout::clear_elements() {
  elements_.Clear();
}
inline ::proto::steam::CVirtualControllerElement* CVirtualControllerLayout::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerLayout.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerElement >*
CVirtualControllerLayout::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CVirtualControllerLayout.elements)
  return &elements_;
}
inline const ::proto::steam::CVirtualControllerElement& CVirtualControllerLayout::elements(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerLayout.elements)
  return elements_.Get(index);
}
inline ::proto::steam::CVirtualControllerElement* CVirtualControllerLayout::add_elements() {
  // @@protoc_insertion_point(field_add:proto.steam.CVirtualControllerLayout.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerElement >&
CVirtualControllerLayout::elements() const {
  // @@protoc_insertion_point(field_list:proto.steam.CVirtualControllerLayout.elements)
  return elements_;
}

// -------------------------------------------------------------------

// CVirtualControllerLayouts

// repeated .proto.steam.CVirtualControllerLayout layouts = 1;
inline int CVirtualControllerLayouts::layouts_size() const {
  return layouts_.size();
}
inline void CVirtualControllerLayouts::clear_layouts() {
  layouts_.Clear();
}
inline ::proto::steam::CVirtualControllerLayout* CVirtualControllerLayouts::mutable_layouts(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerLayouts.layouts)
  return layouts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerLayout >*
CVirtualControllerLayouts::mutable_layouts() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CVirtualControllerLayouts.layouts)
  return &layouts_;
}
inline const ::proto::steam::CVirtualControllerLayout& CVirtualControllerLayouts::layouts(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerLayouts.layouts)
  return layouts_.Get(index);
}
inline ::proto::steam::CVirtualControllerLayout* CVirtualControllerLayouts::add_layouts() {
  // @@protoc_insertion_point(field_add:proto.steam.CVirtualControllerLayouts.layouts)
  return layouts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerLayout >&
CVirtualControllerLayouts::layouts() const {
  // @@protoc_insertion_point(field_list:proto.steam.CVirtualControllerLayouts.layouts)
  return layouts_;
}

// optional .proto.steam.EInputMode input_mode = 2 [default = k_EInputModeUnknown];
inline bool CVirtualControllerLayouts::has_input_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerLayouts::clear_input_mode() {
  input_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::proto::steam::EInputMode CVirtualControllerLayouts::input_mode() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerLayouts.input_mode)
  return static_cast< ::proto::steam::EInputMode >(input_mode_);
}
inline void CVirtualControllerLayouts::set_input_mode(::proto::steam::EInputMode value) {
  assert(::proto::steam::EInputMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  input_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerLayouts.input_mode)
}

// -------------------------------------------------------------------

// CVirtualControllerConfig_Control

// optional string name = 1;
inline bool CVirtualControllerConfig_Control::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CVirtualControllerConfig_Control::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.name)
  return name_.GetNoArena();
}
inline void CVirtualControllerConfig_Control::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.name)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_Control::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CVirtualControllerConfig.Control.name)
}
#endif
inline void CVirtualControllerConfig_Control::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CVirtualControllerConfig.Control.name)
}
inline void CVirtualControllerConfig_Control::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CVirtualControllerConfig.Control.name)
}
inline ::std::string* CVirtualControllerConfig_Control::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerConfig.Control.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_Control::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CVirtualControllerConfig.Control.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_Control::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVirtualControllerConfig.Control.name)
}

// optional string icon = 2;
inline bool CVirtualControllerConfig_Control::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CVirtualControllerConfig_Control::icon() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.icon)
  return icon_.GetNoArena();
}
inline void CVirtualControllerConfig_Control::set_icon(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.icon)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_Control::set_icon(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CVirtualControllerConfig.Control.icon)
}
#endif
inline void CVirtualControllerConfig_Control::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CVirtualControllerConfig.Control.icon)
}
inline void CVirtualControllerConfig_Control::set_icon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CVirtualControllerConfig.Control.icon)
}
inline ::std::string* CVirtualControllerConfig_Control::mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerConfig.Control.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_Control::release_icon() {
  // @@protoc_insertion_point(field_release:proto.steam.CVirtualControllerConfig.Control.icon)
  if (!has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return icon_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_Control::set_allocated_icon(::std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVirtualControllerConfig.Control.icon)
}

// optional int32 input_source = 3;
inline bool CVirtualControllerConfig_Control::has_input_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_input_source() {
  input_source_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::input_source() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.input_source)
  return input_source_;
}
inline void CVirtualControllerConfig_Control::set_input_source(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  input_source_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.input_source)
}

// optional int32 input_mode = 4;
inline bool CVirtualControllerConfig_Control::has_input_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_input_mode() {
  input_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::input_mode() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.input_mode)
  return input_mode_;
}
inline void CVirtualControllerConfig_Control::set_input_mode(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  input_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.input_mode)
}

// optional int32 input_element = 5;
inline bool CVirtualControllerConfig_Control::has_input_element() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_input_element() {
  input_element_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::input_element() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.input_element)
  return input_element_;
}
inline void CVirtualControllerConfig_Control::set_input_element(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  input_element_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.input_element)
}

// optional int32 output_gamepad = 6;
inline bool CVirtualControllerConfig_Control::has_output_gamepad() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_output_gamepad() {
  output_gamepad_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::output_gamepad() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.output_gamepad)
  return output_gamepad_;
}
inline void CVirtualControllerConfig_Control::set_output_gamepad(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  output_gamepad_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.output_gamepad)
}

// optional int32 output_keyboard = 7;
inline bool CVirtualControllerConfig_Control::has_output_keyboard() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_output_keyboard() {
  output_keyboard_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::output_keyboard() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.output_keyboard)
  return output_keyboard_;
}
inline void CVirtualControllerConfig_Control::set_output_keyboard(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  output_keyboard_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.output_keyboard)
}

// optional int32 output_mouse = 8;
inline bool CVirtualControllerConfig_Control::has_output_mouse() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_output_mouse() {
  output_mouse_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 CVirtualControllerConfig_Control::output_mouse() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.output_mouse)
  return output_mouse_;
}
inline void CVirtualControllerConfig_Control::set_output_mouse(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  output_mouse_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.output_mouse)
}

// optional string icon_foreground = 9;
inline bool CVirtualControllerConfig_Control::has_icon_foreground() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_icon_foreground() {
  icon_foreground_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CVirtualControllerConfig_Control::icon_foreground() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.icon_foreground)
  return icon_foreground_.GetNoArena();
}
inline void CVirtualControllerConfig_Control::set_icon_foreground(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_foreground_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.icon_foreground)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_Control::set_icon_foreground(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_foreground_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CVirtualControllerConfig.Control.icon_foreground)
}
#endif
inline void CVirtualControllerConfig_Control::set_icon_foreground(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  icon_foreground_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CVirtualControllerConfig.Control.icon_foreground)
}
inline void CVirtualControllerConfig_Control::set_icon_foreground(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  icon_foreground_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CVirtualControllerConfig.Control.icon_foreground)
}
inline ::std::string* CVirtualControllerConfig_Control::mutable_icon_foreground() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerConfig.Control.icon_foreground)
  return icon_foreground_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_Control::release_icon_foreground() {
  // @@protoc_insertion_point(field_release:proto.steam.CVirtualControllerConfig.Control.icon_foreground)
  if (!has_icon_foreground()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return icon_foreground_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_Control::set_allocated_icon_foreground(::std::string* icon_foreground) {
  if (icon_foreground != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_foreground_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_foreground);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVirtualControllerConfig.Control.icon_foreground)
}

// optional string icon_background = 10;
inline bool CVirtualControllerConfig_Control::has_icon_background() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVirtualControllerConfig_Control::clear_icon_background() {
  icon_background_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CVirtualControllerConfig_Control::icon_background() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.Control.icon_background)
  return icon_background_.GetNoArena();
}
inline void CVirtualControllerConfig_Control::set_icon_background(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_background_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.Control.icon_background)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_Control::set_icon_background(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_background_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CVirtualControllerConfig.Control.icon_background)
}
#endif
inline void CVirtualControllerConfig_Control::set_icon_background(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  icon_background_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CVirtualControllerConfig.Control.icon_background)
}
inline void CVirtualControllerConfig_Control::set_icon_background(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  icon_background_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CVirtualControllerConfig.Control.icon_background)
}
inline ::std::string* CVirtualControllerConfig_Control::mutable_icon_background() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerConfig.Control.icon_background)
  return icon_background_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_Control::release_icon_background() {
  // @@protoc_insertion_point(field_release:proto.steam.CVirtualControllerConfig.Control.icon_background)
  if (!has_icon_background()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return icon_background_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_Control::set_allocated_icon_background(::std::string* icon_background) {
  if (icon_background != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  icon_background_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_background);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVirtualControllerConfig.Control.icon_background)
}

// -------------------------------------------------------------------

// CVirtualControllerConfig_ActionSet

// optional int32 id = 1;
inline bool CVirtualControllerConfig_ActionSet::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerConfig_ActionSet::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CVirtualControllerConfig_ActionSet::id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.ActionSet.id)
  return id_;
}
inline void CVirtualControllerConfig_ActionSet::set_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.ActionSet.id)
}

// optional int32 parent_id = 2;
inline bool CVirtualControllerConfig_ActionSet::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerConfig_ActionSet::clear_parent_id() {
  parent_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CVirtualControllerConfig_ActionSet::parent_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.ActionSet.parent_id)
  return parent_id_;
}
inline void CVirtualControllerConfig_ActionSet::set_parent_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.ActionSet.parent_id)
}

// optional string name = 3;
inline bool CVirtualControllerConfig_ActionSet::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerConfig_ActionSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CVirtualControllerConfig_ActionSet::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.ActionSet.name)
  return name_.GetNoArena();
}
inline void CVirtualControllerConfig_ActionSet::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.ActionSet.name)
}
#if LANG_CXX11
inline void CVirtualControllerConfig_ActionSet::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CVirtualControllerConfig.ActionSet.name)
}
#endif
inline void CVirtualControllerConfig_ActionSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CVirtualControllerConfig.ActionSet.name)
}
inline void CVirtualControllerConfig_ActionSet::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CVirtualControllerConfig.ActionSet.name)
}
inline ::std::string* CVirtualControllerConfig_ActionSet::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerConfig.ActionSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig_ActionSet::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CVirtualControllerConfig.ActionSet.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig_ActionSet::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVirtualControllerConfig.ActionSet.name)
}

// repeated .proto.steam.CVirtualControllerConfig.Control controls = 4;
inline int CVirtualControllerConfig_ActionSet::controls_size() const {
  return controls_.size();
}
inline void CVirtualControllerConfig_ActionSet::clear_controls() {
  controls_.Clear();
}
inline ::proto::steam::CVirtualControllerConfig_Control* CVirtualControllerConfig_ActionSet::mutable_controls(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerConfig.ActionSet.controls)
  return controls_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_Control >*
CVirtualControllerConfig_ActionSet::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CVirtualControllerConfig.ActionSet.controls)
  return &controls_;
}
inline const ::proto::steam::CVirtualControllerConfig_Control& CVirtualControllerConfig_ActionSet::controls(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.ActionSet.controls)
  return controls_.Get(index);
}
inline ::proto::steam::CVirtualControllerConfig_Control* CVirtualControllerConfig_ActionSet::add_controls() {
  // @@protoc_insertion_point(field_add:proto.steam.CVirtualControllerConfig.ActionSet.controls)
  return controls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_Control >&
CVirtualControllerConfig_ActionSet::controls() const {
  // @@protoc_insertion_point(field_list:proto.steam.CVirtualControllerConfig.ActionSet.controls)
  return controls_;
}

// -------------------------------------------------------------------

// CVirtualControllerConfig

// optional string name = 1;
inline bool CVirtualControllerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CVirtualControllerConfig::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.name)
  return name_.GetNoArena();
}
inline void CVirtualControllerConfig::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerConfig.name)
}
#if LANG_CXX11
inline void CVirtualControllerConfig::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CVirtualControllerConfig.name)
}
#endif
inline void CVirtualControllerConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CVirtualControllerConfig.name)
}
inline void CVirtualControllerConfig::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CVirtualControllerConfig.name)
}
inline ::std::string* CVirtualControllerConfig::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CVirtualControllerConfig::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CVirtualControllerConfig.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CVirtualControllerConfig::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVirtualControllerConfig.name)
}

// repeated .proto.steam.CVirtualControllerConfig.ActionSet actionsets = 2;
inline int CVirtualControllerConfig::actionsets_size() const {
  return actionsets_.size();
}
inline void CVirtualControllerConfig::clear_actionsets() {
  actionsets_.Clear();
}
inline ::proto::steam::CVirtualControllerConfig_ActionSet* CVirtualControllerConfig::mutable_actionsets(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerConfig.actionsets)
  return actionsets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_ActionSet >*
CVirtualControllerConfig::mutable_actionsets() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CVirtualControllerConfig.actionsets)
  return &actionsets_;
}
inline const ::proto::steam::CVirtualControllerConfig_ActionSet& CVirtualControllerConfig::actionsets(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerConfig.actionsets)
  return actionsets_.Get(index);
}
inline ::proto::steam::CVirtualControllerConfig_ActionSet* CVirtualControllerConfig::add_actionsets() {
  // @@protoc_insertion_point(field_add:proto.steam.CVirtualControllerConfig.actionsets)
  return actionsets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CVirtualControllerConfig_ActionSet >&
CVirtualControllerConfig::actionsets() const {
  // @@protoc_insertion_point(field_list:proto.steam.CVirtualControllerConfig.actionsets)
  return actionsets_;
}

// -------------------------------------------------------------------

// CVirtualControllerLayoutPackage

// optional uint32 appid = 1;
inline bool CVirtualControllerLayoutPackage::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVirtualControllerLayoutPackage::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CVirtualControllerLayoutPackage::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerLayoutPackage.appid)
  return appid_;
}
inline void CVirtualControllerLayoutPackage::set_appid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerLayoutPackage.appid)
}

// optional uint32 revision = 2;
inline bool CVirtualControllerLayoutPackage::has_revision() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVirtualControllerLayoutPackage::clear_revision() {
  revision_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CVirtualControllerLayoutPackage::revision() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerLayoutPackage.revision)
  return revision_;
}
inline void CVirtualControllerLayoutPackage::set_revision(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  revision_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerLayoutPackage.revision)
}

// optional .proto.steam.CVirtualControllerConfig config = 3;
inline bool CVirtualControllerLayoutPackage::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerLayoutPackage::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::steam::CVirtualControllerConfig& CVirtualControllerLayoutPackage::config() const {
  const ::proto::steam::CVirtualControllerConfig* p = config_;
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerLayoutPackage.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CVirtualControllerConfig*>(
      &::proto::steam::_CVirtualControllerConfig_default_instance_);
}
inline ::proto::steam::CVirtualControllerConfig* CVirtualControllerLayoutPackage::release_config() {
  // @@protoc_insertion_point(field_release:proto.steam.CVirtualControllerLayoutPackage.config)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::steam::CVirtualControllerConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::proto::steam::CVirtualControllerConfig* CVirtualControllerLayoutPackage::mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CVirtualControllerConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerLayoutPackage.config)
  return config_;
}
inline void CVirtualControllerLayoutPackage::set_allocated_config(::proto::steam::CVirtualControllerConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVirtualControllerLayoutPackage.config)
}

// optional .proto.steam.CVirtualControllerLayouts layouts = 4;
inline bool CVirtualControllerLayoutPackage::has_layouts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVirtualControllerLayoutPackage::clear_layouts() {
  if (layouts_ != nullptr) layouts_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::steam::CVirtualControllerLayouts& CVirtualControllerLayoutPackage::layouts() const {
  const ::proto::steam::CVirtualControllerLayouts* p = layouts_;
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerLayoutPackage.layouts)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::steam::CVirtualControllerLayouts*>(
      &::proto::steam::_CVirtualControllerLayouts_default_instance_);
}
inline ::proto::steam::CVirtualControllerLayouts* CVirtualControllerLayoutPackage::release_layouts() {
  // @@protoc_insertion_point(field_release:proto.steam.CVirtualControllerLayoutPackage.layouts)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::steam::CVirtualControllerLayouts* temp = layouts_;
  layouts_ = nullptr;
  return temp;
}
inline ::proto::steam::CVirtualControllerLayouts* CVirtualControllerLayoutPackage::mutable_layouts() {
  _has_bits_[0] |= 0x00000002u;
  if (layouts_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::steam::CVirtualControllerLayouts>(GetArenaNoVirtual());
    layouts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CVirtualControllerLayoutPackage.layouts)
  return layouts_;
}
inline void CVirtualControllerLayoutPackage::set_allocated_layouts(::proto::steam::CVirtualControllerLayouts* layouts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete layouts_;
  }
  if (layouts) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layouts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, layouts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  layouts_ = layouts;
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CVirtualControllerLayoutPackage.layouts)
}

// -------------------------------------------------------------------

// CVirtualControllerGlobalConfig

// optional bool feedback_enabled = 1;
inline bool CVirtualControllerGlobalConfig::has_feedback_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVirtualControllerGlobalConfig::clear_feedback_enabled() {
  feedback_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CVirtualControllerGlobalConfig::feedback_enabled() const {
  // @@protoc_insertion_point(field_get:proto.steam.CVirtualControllerGlobalConfig.feedback_enabled)
  return feedback_enabled_;
}
inline void CVirtualControllerGlobalConfig::set_feedback_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  feedback_enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CVirtualControllerGlobalConfig.feedback_enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::steam::EInputMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::EInputMode>() {
  return ::proto::steam::EInputMode_descriptor();
}
template <> struct is_proto_enum< ::proto::steam::EControllerElementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::steam::EControllerElementType>() {
  return ::proto::steam::EControllerElementType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_steammessages_5fvirtualcontroller_2eproto
