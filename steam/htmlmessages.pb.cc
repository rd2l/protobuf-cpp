// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: htmlmessages.proto

#include "htmlmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_htmlmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CCookie_htmlmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_htmlmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHTMLHeader_htmlmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_htmlmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHTMLPageSecurityInfo_htmlmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_htmlmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMSgJumpListMRUApp_htmlmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_htmlmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDraggableRegionsChanged_DraggableRects_htmlmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_htmlmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJSValue_htmlmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_htmlmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJumpListLink_htmlmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_htmlmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetLocalFileRequestMapping_AdditionalRoute_htmlmessages_2eproto;
namespace proto {
namespace steam {
class CMsgKeyUpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgKeyUp> _instance;
} _CMsgKeyUp_default_instance_;
class CMsgKeyDownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgKeyDown> _instance;
} _CMsgKeyDown_default_instance_;
class CMsgKeyCharDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgKeyChar> _instance;
} _CMsgKeyChar_default_instance_;
class CMsgMouseDownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseDown> _instance;
} _CMsgMouseDown_default_instance_;
class CMsgMouseUpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseUp> _instance;
} _CMsgMouseUp_default_instance_;
class CMsgMouseDblClickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseDblClick> _instance;
} _CMsgMouseDblClick_default_instance_;
class CMsgMouseWheelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseWheel> _instance;
} _CMsgMouseWheel_default_instance_;
class CMsgMouseMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseMove> _instance;
} _CMsgMouseMove_default_instance_;
class CMsgMouseLeaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMouseLeave> _instance;
} _CMsgMouseLeave_default_instance_;
class CMsgBrowserCreateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserCreate> _instance;
} _CMsgBrowserCreate_default_instance_;
class CMsgBrowserCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserCreateResponse> _instance;
} _CMsgBrowserCreateResponse_default_instance_;
class CMsgBrowserRemoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserRemove> _instance;
} _CMsgBrowserRemove_default_instance_;
class CMsgSetLocalFileRequestMapping_AdditionalRouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetLocalFileRequestMapping_AdditionalRoute> _instance;
} _CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_;
class CMsgSetLocalFileRequestMappingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetLocalFileRequestMapping> _instance;
} _CMsgSetLocalFileRequestMapping_default_instance_;
class CMsgBrowserErrorStringsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserErrorStrings> _instance;
} _CMsgBrowserErrorStrings_default_instance_;
class CMsgBrowserSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserSize> _instance;
} _CMsgBrowserSize_default_instance_;
class CMsgBrowserSetMinSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserSetMinSize> _instance;
} _CMsgBrowserSetMinSize_default_instance_;
class CMsgBrowserPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserPosition> _instance;
} _CMsgBrowserPosition_default_instance_;
class CMsgBrowserResizedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserResized> _instance;
} _CMsgBrowserResized_default_instance_;
class CMsgPostURLDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPostURL> _instance;
} _CMsgPostURL_default_instance_;
class CMsgAddHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddHeader> _instance;
} _CMsgAddHeader_default_instance_;
class CMsgStopLoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgStopLoad> _instance;
} _CMsgStopLoad_default_instance_;
class CMsgReloadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgReload> _instance;
} _CMsgReload_default_instance_;
class CMsgGoForwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGoForward> _instance;
} _CMsgGoForward_default_instance_;
class CMsgGoBackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGoBack> _instance;
} _CMsgGoBack_default_instance_;
class CMsgWasHiddenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgWasHidden> _instance;
} _CMsgWasHidden_default_instance_;
class CMsgClearHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearHistory> _instance;
} _CMsgClearHistory_default_instance_;
class CMsgClearAllBrowsingDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearAllBrowsingData> _instance;
} _CMsgClearAllBrowsingData_default_instance_;
class CMsgCopyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCopy> _instance;
} _CMsgCopy_default_instance_;
class CMsgPasteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPaste> _instance;
} _CMsgPaste_default_instance_;
class CMsgExecuteJavaScriptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgExecuteJavaScript> _instance;
} _CMsgExecuteJavaScript_default_instance_;
class CMsgSetFocusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetFocus> _instance;
} _CMsgSetFocus_default_instance_;
class CMsgHorizontalScrollBarSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHorizontalScrollBarSize> _instance;
} _CMsgHorizontalScrollBarSize_default_instance_;
class CMsgHorizontalScrollBarSizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHorizontalScrollBarSizeResponse> _instance;
} _CMsgHorizontalScrollBarSizeResponse_default_instance_;
class CMsgVerticalScrollBarSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgVerticalScrollBarSize> _instance;
} _CMsgVerticalScrollBarSize_default_instance_;
class CMsgVerticalScrollBarSizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgVerticalScrollBarSizeResponse> _instance;
} _CMsgVerticalScrollBarSizeResponse_default_instance_;
class CMsgFindDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFind> _instance;
} _CMsgFind_default_instance_;
class CMsgStopFindDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgStopFind> _instance;
} _CMsgStopFind_default_instance_;
class CMsgSetHorizontalScrollDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetHorizontalScroll> _instance;
} _CMsgSetHorizontalScroll_default_instance_;
class CMsgSetVerticalScrollDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetVerticalScroll> _instance;
} _CMsgSetVerticalScroll_default_instance_;
class CMsgSetZoomLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetZoomLevel> _instance;
} _CMsgSetZoomLevel_default_instance_;
class CMsgViewSourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgViewSource> _instance;
} _CMsgViewSource_default_instance_;
class CMsgBrowserReadyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBrowserReady> _instance;
} _CMsgBrowserReady_default_instance_;
class CMsgURLChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgURLChanged> _instance;
} _CMsgURLChanged_default_instance_;
class CHTMLHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHTMLHeader> _instance;
} _CHTMLHeader_default_instance_;
class CHTMLPageSecurityInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHTMLPageSecurityInfo> _instance;
} _CHTMLPageSecurityInfo_default_instance_;
class CMsgFinishedRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFinishedRequest> _instance;
} _CMsgFinishedRequest_default_instance_;
class CMsgLoadedRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLoadedRequest> _instance;
} _CMsgLoadedRequest_default_instance_;
class CMsgPageSecurityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPageSecurity> _instance;
} _CMsgPageSecurity_default_instance_;
class CMsgStartRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgStartRequest> _instance;
} _CMsgStartRequest_default_instance_;
class CMsgStartRequestResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgStartRequestResponse> _instance;
} _CMsgStartRequestResponse_default_instance_;
class CMsgShowPopupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgShowPopup> _instance;
} _CMsgShowPopup_default_instance_;
class CMsgHidePopupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHidePopup> _instance;
} _CMsgHidePopup_default_instance_;
class CMsgSizePopupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSizePopup> _instance;
} _CMsgSizePopup_default_instance_;
class CMsgOpenNewTabDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgOpenNewTab> _instance;
} _CMsgOpenNewTab_default_instance_;
class CMsgPopupHTMLWindowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPopupHTMLWindow> _instance;
} _CMsgPopupHTMLWindow_default_instance_;
class CMsgPopupHTMLWindowResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPopupHTMLWindowResponse> _instance;
} _CMsgPopupHTMLWindowResponse_default_instance_;
class CMsgSetHTMLTitleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetHTMLTitle> _instance;
} _CMsgSetHTMLTitle_default_instance_;
class CMsgLoadingResourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLoadingResource> _instance;
} _CMsgLoadingResource_default_instance_;
class CMsgStatusTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgStatusText> _instance;
} _CMsgStatusText_default_instance_;
class CMsgSetCursorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetCursor> _instance;
} _CMsgSetCursor_default_instance_;
class CMsgFileLoadDialogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFileLoadDialog> _instance;
} _CMsgFileLoadDialog_default_instance_;
class CMsgFileLoadDialogResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFileLoadDialogResponse> _instance;
} _CMsgFileLoadDialogResponse_default_instance_;
class CMsgShowToolTipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgShowToolTip> _instance;
} _CMsgShowToolTip_default_instance_;
class CMsgUpdateToolTipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgUpdateToolTip> _instance;
} _CMsgUpdateToolTip_default_instance_;
class CMsgHideToolTipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHideToolTip> _instance;
} _CMsgHideToolTip_default_instance_;
class CMsgSearchResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSearchResults> _instance;
} _CMsgSearchResults_default_instance_;
class CMsgCloseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClose> _instance;
} _CMsgClose_default_instance_;
class CMsgSetSharedPaintBuffersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetSharedPaintBuffers> _instance;
} _CMsgSetSharedPaintBuffers_default_instance_;
class CMsgAckSharedPaintBuffersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAckSharedPaintBuffers> _instance;
} _CMsgAckSharedPaintBuffers_default_instance_;
class CMsgNeedsPaintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgNeedsPaint> _instance;
} _CMsgNeedsPaint_default_instance_;
class CMsgComboNeedsPaintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgComboNeedsPaint> _instance;
} _CMsgComboNeedsPaint_default_instance_;
class CMsgNeedsSharedTexturePaintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgNeedsSharedTexturePaint> _instance;
} _CMsgNeedsSharedTexturePaint_default_instance_;
class CMsgGameOverlayTexturePaintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameOverlayTexturePaint> _instance;
} _CMsgGameOverlayTexturePaint_default_instance_;
class CMsgGetZoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGetZoom> _instance;
} _CMsgGetZoom_default_instance_;
class CMsgGetZoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGetZoomResponse> _instance;
} _CMsgGetZoomResponse_default_instance_;
class CMsgLinkAtPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLinkAtPosition> _instance;
} _CMsgLinkAtPosition_default_instance_;
class CMsgLinkAtPositionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLinkAtPositionResponse> _instance;
} _CMsgLinkAtPositionResponse_default_instance_;
class CMsgZoomToElementAtPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgZoomToElementAtPosition> _instance;
} _CMsgZoomToElementAtPosition_default_instance_;
class CMsgZoomToElementAtPositionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgZoomToElementAtPositionResponse> _instance;
} _CMsgZoomToElementAtPositionResponse_default_instance_;
class CMsgScalePageToValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgScalePageToValue> _instance;
} _CMsgScalePageToValue_default_instance_;
class CMsgScalePageToValueResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgScalePageToValueResponse> _instance;
} _CMsgScalePageToValueResponse_default_instance_;
class CMsgSavePageToJPEGDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSavePageToJPEG> _instance;
} _CMsgSavePageToJPEG_default_instance_;
class CMsgSavePageToJPEGResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSavePageToJPEGResponse> _instance;
} _CMsgSavePageToJPEGResponse_default_instance_;
class CMsgJSAlertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSAlert> _instance;
} _CMsgJSAlert_default_instance_;
class CMsgJSConfirmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSConfirm> _instance;
} _CMsgJSConfirm_default_instance_;
class CMsgJSDialogResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSDialogResponse> _instance;
} _CMsgJSDialogResponse_default_instance_;
class CMsgCanGoBackAndForwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCanGoBackAndForward> _instance;
} _CMsgCanGoBackAndForward_default_instance_;
class CMsgOpenSteamURLDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgOpenSteamURL> _instance;
} _CMsgOpenSteamURL_default_instance_;
class CMsgSetCookieDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetCookie> _instance;
} _CMsgSetCookie_default_instance_;
class CMsgSetTargetFrameRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetTargetFrameRate> _instance;
} _CMsgSetTargetFrameRate_default_instance_;
class CMsgPauseRepaintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPauseRepaint> _instance;
} _CMsgPauseRepaint_default_instance_;
class CMsgFullRepaintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFullRepaint> _instance;
} _CMsgFullRepaint_default_instance_;
class CMsgRequestFullScreenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRequestFullScreen> _instance;
} _CMsgRequestFullScreen_default_instance_;
class CMsgExitFullScreenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgExitFullScreen> _instance;
} _CMsgExitFullScreen_default_instance_;
class CMsgToggleFindInPageDialogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgToggleFindInPageDialog> _instance;
} _CMsgToggleFindInPageDialog_default_instance_;
class CMsgSetPIDShuttingDownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetPIDShuttingDown> _instance;
} _CMsgSetPIDShuttingDown_default_instance_;
class CMsgDisableBackgroundThrottlingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDisableBackgroundThrottling> _instance;
} _CMsgDisableBackgroundThrottling_default_instance_;
class CMsgAckPIDShuttingDownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAckPIDShuttingDown> _instance;
} _CMsgAckPIDShuttingDown_default_instance_;
class CMsgGetCookiesForURLDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGetCookiesForURL> _instance;
} _CMsgGetCookiesForURL_default_instance_;
class CCookieDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCookie> _instance;
} _CCookie_default_instance_;
class CMsgGetCookiesForURLResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGetCookiesForURLResponse> _instance;
} _CMsgGetCookiesForURLResponse_default_instance_;
class CMsgNodeHasFocusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgNodeHasFocus> _instance;
} _CMsgNodeHasFocus_default_instance_;
class CMsgZoomToFocusedElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgZoomToFocusedElement> _instance;
} _CMsgZoomToFocusedElement_default_instance_;
class CMsgCloseFullScreenFlashIfOpenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCloseFullScreenFlashIfOpen> _instance;
} _CMsgCloseFullScreenFlashIfOpen_default_instance_;
class CMsgPauseFullScreenFlashMovieIfOpenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPauseFullScreenFlashMovieIfOpen> _instance;
} _CMsgPauseFullScreenFlashMovieIfOpen_default_instance_;
class CMsgFocusedNodeTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFocusedNodeText> _instance;
} _CMsgFocusedNodeText_default_instance_;
class CMsgFocusedNodeTextResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFocusedNodeTextResponse> _instance;
} _CMsgFocusedNodeTextResponse_default_instance_;
class CMsgBuildIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBuildID> _instance;
} _CMsgBuildID_default_instance_;
class CMsgOpenDevToolsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgOpenDevTools> _instance;
} _CMsgOpenDevTools_default_instance_;
class CMsgCloseDevToolsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCloseDevTools> _instance;
} _CMsgCloseDevTools_default_instance_;
class CMsgUnlockH264DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgUnlockH264> _instance;
} _CMsgUnlockH264_default_instance_;
class CMsgScreenInformationChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgScreenInformationChanged> _instance;
} _CMsgScreenInformationChanged_default_instance_;
class CMsgClearAllCookiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearAllCookies> _instance;
} _CMsgClearAllCookies_default_instance_;
class CMsgScreenDPIDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgScreenDPI> _instance;
} _CMsgScreenDPI_default_instance_;
class CMsgAuthedSteamDomainsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAuthedSteamDomains> _instance;
} _CMsgAuthedSteamDomains_default_instance_;
class CMsgSteamAuthNeededDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamAuthNeeded> _instance;
} _CMsgSteamAuthNeeded_default_instance_;
class CMsgSteamAuthCookiesSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamAuthCookiesSet> _instance;
} _CMsgSteamAuthCookiesSet_default_instance_;
class CMsgJSRegisterMethodDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSRegisterMethod> _instance;
} _CMsgJSRegisterMethod_default_instance_;
class CJSMethodArgumentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CJSMethodArgument> _instance;
} _CJSMethodArgument_default_instance_;
class CMsgJSValue_JSObjectPropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSValue_JSObjectProperty> _instance;
} _CMsgJSValue_JSObjectProperty_default_instance_;
class CMsgJSValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSValue> _instance;
} _CMsgJSValue_default_instance_;
class CMsgJSMethodCallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSMethodCall> _instance;
} _CMsgJSMethodCall_default_instance_;
class CMsgJSExecuteCallbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSExecuteCallback> _instance;
} _CMsgJSExecuteCallback_default_instance_;
class CMsgJSReleaseCallbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSReleaseCallback> _instance;
} _CMsgJSReleaseCallback_default_instance_;
class CMsgJSRaiseExceptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJSRaiseException> _instance;
} _CMsgJSRaiseException_default_instance_;
class CMsgLoadLocalizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLoadLocalization> _instance;
} _CMsgLoadLocalization_default_instance_;
class CMsgJumpListLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgJumpListLink> _instance;
} _CMsgJumpListLink_default_instance_;
class CMSgJumpListMRUAppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMSgJumpListMRUApp> _instance;
} _CMSgJumpListMRUApp_default_instance_;
class CMsgSetJumpListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetJumpList> _instance;
} _CMsgSetJumpList_default_instance_;
class CMsgSetGameOverlayTargetPIDsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetGameOverlayTargetPIDs> _instance;
} _CMsgSetGameOverlayTargetPIDs_default_instance_;
class CMsgGameOverlayTargetTextureIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGameOverlayTargetTextureID> _instance;
} _CMsgGameOverlayTargetTextureID_default_instance_;
class CMsgDraggableRegionsChanged_DraggableRectsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDraggableRegionsChanged_DraggableRects> _instance;
} _CMsgDraggableRegionsChanged_DraggableRects_default_instance_;
class CMsgDraggableRegionsChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDraggableRegionsChanged> _instance;
} _CMsgDraggableRegionsChanged_default_instance_;
class CMsgResizeGripChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgResizeGripChanged> _instance;
} _CMsgResizeGripChanged_default_instance_;
class CMsgSetWindowPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetWindowPosition> _instance;
} _CMsgSetWindowPosition_default_instance_;
class CMsgShowWindowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgShowWindow> _instance;
} _CMsgShowWindow_default_instance_;
class CMsgHideWindowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgHideWindow> _instance;
} _CMsgHideWindow_default_instance_;
class CMsgBringWindowToFrontDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgBringWindowToFront> _instance;
} _CMsgBringWindowToFront_default_instance_;
class CMsgSetForegroundWindowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetForegroundWindow> _instance;
} _CMsgSetForegroundWindow_default_instance_;
class CMsgMaximizeRestoreWindowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMaximizeRestoreWindow> _instance;
} _CMsgMaximizeRestoreWindow_default_instance_;
class CMsgMinimizeWindowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgMinimizeWindow> _instance;
} _CMsgMinimizeWindow_default_instance_;
class CMsgShowBrowserContextMenuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgShowBrowserContextMenu> _instance;
} _CMsgShowBrowserContextMenu_default_instance_;
class CMsgImeSetCompositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgImeSetComposition> _instance;
} _CMsgImeSetComposition_default_instance_;
class CMsgImeCommitTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgImeCommitText> _instance;
} _CMsgImeCommitText_default_instance_;
class CMsgImeCancelCompositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgImeCancelComposition> _instance;
} _CMsgImeCancelComposition_default_instance_;
class CMsgImeCompositionRangeChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgImeCompositionRangeChanged> _instance;
} _CMsgImeCompositionRangeChanged_default_instance_;
class CMsgInspectElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgInspectElement> _instance;
} _CMsgInspectElement_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCMsgKeyUp_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgKeyUp_default_instance_;
    new (ptr) ::proto::steam::CMsgKeyUp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgKeyUp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgKeyUp_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgKeyUp_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgKeyDown_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgKeyDown_default_instance_;
    new (ptr) ::proto::steam::CMsgKeyDown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgKeyDown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgKeyDown_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgKeyDown_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgKeyChar_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgKeyChar_default_instance_;
    new (ptr) ::proto::steam::CMsgKeyChar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgKeyChar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgKeyChar_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgKeyChar_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgMouseDown_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgMouseDown_default_instance_;
    new (ptr) ::proto::steam::CMsgMouseDown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgMouseDown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMouseDown_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMouseDown_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgMouseUp_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgMouseUp_default_instance_;
    new (ptr) ::proto::steam::CMsgMouseUp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgMouseUp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMouseUp_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMouseUp_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgMouseDblClick_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgMouseDblClick_default_instance_;
    new (ptr) ::proto::steam::CMsgMouseDblClick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgMouseDblClick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMouseDblClick_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMouseDblClick_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgMouseWheel_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgMouseWheel_default_instance_;
    new (ptr) ::proto::steam::CMsgMouseWheel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgMouseWheel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMouseWheel_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMouseWheel_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgMouseMove_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgMouseMove_default_instance_;
    new (ptr) ::proto::steam::CMsgMouseMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgMouseMove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMouseMove_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMouseMove_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgMouseLeave_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgMouseLeave_default_instance_;
    new (ptr) ::proto::steam::CMsgMouseLeave();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgMouseLeave::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMouseLeave_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMouseLeave_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBrowserCreate_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBrowserCreate_default_instance_;
    new (ptr) ::proto::steam::CMsgBrowserCreate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBrowserCreate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBrowserCreate_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBrowserCreate_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBrowserCreateResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBrowserCreateResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgBrowserCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBrowserCreateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBrowserCreateResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBrowserCreateResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBrowserRemove_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBrowserRemove_default_instance_;
    new (ptr) ::proto::steam::CMsgBrowserRemove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBrowserRemove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBrowserRemove_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBrowserRemove_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetLocalFileRequestMapping_AdditionalRoute_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_;
    new (ptr) ::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetLocalFileRequestMapping_AdditionalRoute_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetLocalFileRequestMapping_AdditionalRoute_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetLocalFileRequestMapping_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetLocalFileRequestMapping_default_instance_;
    new (ptr) ::proto::steam::CMsgSetLocalFileRequestMapping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetLocalFileRequestMapping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSetLocalFileRequestMapping_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSetLocalFileRequestMapping_htmlmessages_2eproto}, {
      &scc_info_CMsgSetLocalFileRequestMapping_AdditionalRoute_htmlmessages_2eproto.base,}};

static void InitDefaultsCMsgBrowserErrorStrings_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBrowserErrorStrings_default_instance_;
    new (ptr) ::proto::steam::CMsgBrowserErrorStrings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBrowserErrorStrings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBrowserErrorStrings_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBrowserErrorStrings_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBrowserSize_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBrowserSize_default_instance_;
    new (ptr) ::proto::steam::CMsgBrowserSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBrowserSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBrowserSize_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBrowserSize_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBrowserSetMinSize_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBrowserSetMinSize_default_instance_;
    new (ptr) ::proto::steam::CMsgBrowserSetMinSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBrowserSetMinSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBrowserSetMinSize_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBrowserSetMinSize_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBrowserPosition_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBrowserPosition_default_instance_;
    new (ptr) ::proto::steam::CMsgBrowserPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBrowserPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBrowserPosition_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBrowserPosition_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBrowserResized_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBrowserResized_default_instance_;
    new (ptr) ::proto::steam::CMsgBrowserResized();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBrowserResized::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBrowserResized_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBrowserResized_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgPostURL_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgPostURL_default_instance_;
    new (ptr) ::proto::steam::CMsgPostURL();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgPostURL::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPostURL_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPostURL_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgAddHeader_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgAddHeader_default_instance_;
    new (ptr) ::proto::steam::CMsgAddHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgAddHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAddHeader_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAddHeader_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgStopLoad_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgStopLoad_default_instance_;
    new (ptr) ::proto::steam::CMsgStopLoad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgStopLoad::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgStopLoad_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgStopLoad_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgReload_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgReload_default_instance_;
    new (ptr) ::proto::steam::CMsgReload();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgReload::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgReload_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgReload_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgGoForward_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGoForward_default_instance_;
    new (ptr) ::proto::steam::CMsgGoForward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGoForward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGoForward_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGoForward_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgGoBack_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGoBack_default_instance_;
    new (ptr) ::proto::steam::CMsgGoBack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGoBack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGoBack_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGoBack_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgWasHidden_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgWasHidden_default_instance_;
    new (ptr) ::proto::steam::CMsgWasHidden();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgWasHidden::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgWasHidden_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgWasHidden_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgClearHistory_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClearHistory_default_instance_;
    new (ptr) ::proto::steam::CMsgClearHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClearHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClearHistory_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClearHistory_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgClearAllBrowsingData_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClearAllBrowsingData_default_instance_;
    new (ptr) ::proto::steam::CMsgClearAllBrowsingData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClearAllBrowsingData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClearAllBrowsingData_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClearAllBrowsingData_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgCopy_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgCopy_default_instance_;
    new (ptr) ::proto::steam::CMsgCopy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgCopy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgCopy_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgCopy_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgPaste_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgPaste_default_instance_;
    new (ptr) ::proto::steam::CMsgPaste();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgPaste::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPaste_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPaste_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgExecuteJavaScript_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgExecuteJavaScript_default_instance_;
    new (ptr) ::proto::steam::CMsgExecuteJavaScript();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgExecuteJavaScript::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgExecuteJavaScript_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgExecuteJavaScript_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetFocus_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetFocus_default_instance_;
    new (ptr) ::proto::steam::CMsgSetFocus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetFocus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetFocus_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetFocus_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgHorizontalScrollBarSize_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgHorizontalScrollBarSize_default_instance_;
    new (ptr) ::proto::steam::CMsgHorizontalScrollBarSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgHorizontalScrollBarSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHorizontalScrollBarSize_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgHorizontalScrollBarSize_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgHorizontalScrollBarSizeResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgHorizontalScrollBarSizeResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgHorizontalScrollBarSizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgHorizontalScrollBarSizeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHorizontalScrollBarSizeResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgHorizontalScrollBarSizeResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgVerticalScrollBarSize_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgVerticalScrollBarSize_default_instance_;
    new (ptr) ::proto::steam::CMsgVerticalScrollBarSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgVerticalScrollBarSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgVerticalScrollBarSize_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgVerticalScrollBarSize_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgVerticalScrollBarSizeResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgVerticalScrollBarSizeResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgVerticalScrollBarSizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgVerticalScrollBarSizeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgVerticalScrollBarSizeResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgVerticalScrollBarSizeResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgFind_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgFind_default_instance_;
    new (ptr) ::proto::steam::CMsgFind();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgFind::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFind_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgFind_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgStopFind_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgStopFind_default_instance_;
    new (ptr) ::proto::steam::CMsgStopFind();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgStopFind::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgStopFind_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgStopFind_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetHorizontalScroll_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetHorizontalScroll_default_instance_;
    new (ptr) ::proto::steam::CMsgSetHorizontalScroll();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetHorizontalScroll::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetHorizontalScroll_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetHorizontalScroll_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetVerticalScroll_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetVerticalScroll_default_instance_;
    new (ptr) ::proto::steam::CMsgSetVerticalScroll();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetVerticalScroll::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetVerticalScroll_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetVerticalScroll_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetZoomLevel_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetZoomLevel_default_instance_;
    new (ptr) ::proto::steam::CMsgSetZoomLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetZoomLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetZoomLevel_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetZoomLevel_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgViewSource_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgViewSource_default_instance_;
    new (ptr) ::proto::steam::CMsgViewSource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgViewSource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgViewSource_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgViewSource_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBrowserReady_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBrowserReady_default_instance_;
    new (ptr) ::proto::steam::CMsgBrowserReady();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBrowserReady::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBrowserReady_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBrowserReady_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgURLChanged_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgURLChanged_default_instance_;
    new (ptr) ::proto::steam::CMsgURLChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgURLChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgURLChanged_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgURLChanged_htmlmessages_2eproto}, {}};

static void InitDefaultsCHTMLHeader_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CHTMLHeader_default_instance_;
    new (ptr) ::proto::steam::CHTMLHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CHTMLHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHTMLHeader_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHTMLHeader_htmlmessages_2eproto}, {}};

static void InitDefaultsCHTMLPageSecurityInfo_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CHTMLPageSecurityInfo_default_instance_;
    new (ptr) ::proto::steam::CHTMLPageSecurityInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CHTMLPageSecurityInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHTMLPageSecurityInfo_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHTMLPageSecurityInfo_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgFinishedRequest_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgFinishedRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgFinishedRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgFinishedRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFinishedRequest_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgFinishedRequest_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgLoadedRequest_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgLoadedRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgLoadedRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgLoadedRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgLoadedRequest_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgLoadedRequest_htmlmessages_2eproto}, {
      &scc_info_CHTMLHeader_htmlmessages_2eproto.base,}};

static void InitDefaultsCMsgPageSecurity_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgPageSecurity_default_instance_;
    new (ptr) ::proto::steam::CMsgPageSecurity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgPageSecurity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPageSecurity_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgPageSecurity_htmlmessages_2eproto}, {
      &scc_info_CHTMLPageSecurityInfo_htmlmessages_2eproto.base,}};

static void InitDefaultsCMsgStartRequest_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgStartRequest_default_instance_;
    new (ptr) ::proto::steam::CMsgStartRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgStartRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgStartRequest_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgStartRequest_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgStartRequestResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgStartRequestResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgStartRequestResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgStartRequestResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgStartRequestResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgStartRequestResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgShowPopup_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgShowPopup_default_instance_;
    new (ptr) ::proto::steam::CMsgShowPopup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgShowPopup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgShowPopup_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgShowPopup_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgHidePopup_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgHidePopup_default_instance_;
    new (ptr) ::proto::steam::CMsgHidePopup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgHidePopup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHidePopup_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgHidePopup_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSizePopup_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSizePopup_default_instance_;
    new (ptr) ::proto::steam::CMsgSizePopup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSizePopup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSizePopup_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSizePopup_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgOpenNewTab_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgOpenNewTab_default_instance_;
    new (ptr) ::proto::steam::CMsgOpenNewTab();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgOpenNewTab::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgOpenNewTab_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgOpenNewTab_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgPopupHTMLWindow_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgPopupHTMLWindow_default_instance_;
    new (ptr) ::proto::steam::CMsgPopupHTMLWindow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgPopupHTMLWindow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPopupHTMLWindow_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPopupHTMLWindow_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgPopupHTMLWindowResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgPopupHTMLWindowResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgPopupHTMLWindowResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgPopupHTMLWindowResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPopupHTMLWindowResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPopupHTMLWindowResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetHTMLTitle_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetHTMLTitle_default_instance_;
    new (ptr) ::proto::steam::CMsgSetHTMLTitle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetHTMLTitle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetHTMLTitle_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetHTMLTitle_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgLoadingResource_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgLoadingResource_default_instance_;
    new (ptr) ::proto::steam::CMsgLoadingResource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgLoadingResource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLoadingResource_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLoadingResource_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgStatusText_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgStatusText_default_instance_;
    new (ptr) ::proto::steam::CMsgStatusText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgStatusText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgStatusText_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgStatusText_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetCursor_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetCursor_default_instance_;
    new (ptr) ::proto::steam::CMsgSetCursor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetCursor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetCursor_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetCursor_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgFileLoadDialog_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgFileLoadDialog_default_instance_;
    new (ptr) ::proto::steam::CMsgFileLoadDialog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgFileLoadDialog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFileLoadDialog_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgFileLoadDialog_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgFileLoadDialogResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgFileLoadDialogResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgFileLoadDialogResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgFileLoadDialogResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFileLoadDialogResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgFileLoadDialogResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgShowToolTip_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgShowToolTip_default_instance_;
    new (ptr) ::proto::steam::CMsgShowToolTip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgShowToolTip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgShowToolTip_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgShowToolTip_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgUpdateToolTip_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgUpdateToolTip_default_instance_;
    new (ptr) ::proto::steam::CMsgUpdateToolTip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgUpdateToolTip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgUpdateToolTip_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgUpdateToolTip_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgHideToolTip_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgHideToolTip_default_instance_;
    new (ptr) ::proto::steam::CMsgHideToolTip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgHideToolTip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHideToolTip_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgHideToolTip_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSearchResults_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSearchResults_default_instance_;
    new (ptr) ::proto::steam::CMsgSearchResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSearchResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSearchResults_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSearchResults_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgClose_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClose_default_instance_;
    new (ptr) ::proto::steam::CMsgClose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClose_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClose_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetSharedPaintBuffers_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetSharedPaintBuffers_default_instance_;
    new (ptr) ::proto::steam::CMsgSetSharedPaintBuffers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetSharedPaintBuffers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetSharedPaintBuffers_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetSharedPaintBuffers_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgAckSharedPaintBuffers_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgAckSharedPaintBuffers_default_instance_;
    new (ptr) ::proto::steam::CMsgAckSharedPaintBuffers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgAckSharedPaintBuffers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAckSharedPaintBuffers_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAckSharedPaintBuffers_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgNeedsPaint_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgNeedsPaint_default_instance_;
    new (ptr) ::proto::steam::CMsgNeedsPaint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgNeedsPaint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgNeedsPaint_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgNeedsPaint_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgComboNeedsPaint_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgComboNeedsPaint_default_instance_;
    new (ptr) ::proto::steam::CMsgComboNeedsPaint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgComboNeedsPaint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgComboNeedsPaint_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgComboNeedsPaint_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgNeedsSharedTexturePaint_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgNeedsSharedTexturePaint_default_instance_;
    new (ptr) ::proto::steam::CMsgNeedsSharedTexturePaint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgNeedsSharedTexturePaint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgNeedsSharedTexturePaint_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgNeedsSharedTexturePaint_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgGameOverlayTexturePaint_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGameOverlayTexturePaint_default_instance_;
    new (ptr) ::proto::steam::CMsgGameOverlayTexturePaint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGameOverlayTexturePaint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameOverlayTexturePaint_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameOverlayTexturePaint_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgGetZoom_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGetZoom_default_instance_;
    new (ptr) ::proto::steam::CMsgGetZoom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGetZoom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGetZoom_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGetZoom_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgGetZoomResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGetZoomResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgGetZoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGetZoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGetZoomResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGetZoomResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgLinkAtPosition_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgLinkAtPosition_default_instance_;
    new (ptr) ::proto::steam::CMsgLinkAtPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgLinkAtPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLinkAtPosition_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLinkAtPosition_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgLinkAtPositionResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgLinkAtPositionResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgLinkAtPositionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgLinkAtPositionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLinkAtPositionResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLinkAtPositionResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgZoomToElementAtPosition_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgZoomToElementAtPosition_default_instance_;
    new (ptr) ::proto::steam::CMsgZoomToElementAtPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgZoomToElementAtPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgZoomToElementAtPosition_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgZoomToElementAtPosition_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgZoomToElementAtPositionResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgZoomToElementAtPositionResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgZoomToElementAtPositionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgZoomToElementAtPositionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgZoomToElementAtPositionResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgZoomToElementAtPositionResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgScalePageToValue_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgScalePageToValue_default_instance_;
    new (ptr) ::proto::steam::CMsgScalePageToValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgScalePageToValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgScalePageToValue_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgScalePageToValue_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgScalePageToValueResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgScalePageToValueResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgScalePageToValueResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgScalePageToValueResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgScalePageToValueResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgScalePageToValueResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSavePageToJPEG_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSavePageToJPEG_default_instance_;
    new (ptr) ::proto::steam::CMsgSavePageToJPEG();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSavePageToJPEG::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSavePageToJPEG_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSavePageToJPEG_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSavePageToJPEGResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSavePageToJPEGResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgSavePageToJPEGResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSavePageToJPEGResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSavePageToJPEGResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSavePageToJPEGResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgJSAlert_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJSAlert_default_instance_;
    new (ptr) ::proto::steam::CMsgJSAlert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJSAlert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJSAlert_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJSAlert_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgJSConfirm_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJSConfirm_default_instance_;
    new (ptr) ::proto::steam::CMsgJSConfirm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJSConfirm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJSConfirm_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJSConfirm_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgJSDialogResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJSDialogResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgJSDialogResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJSDialogResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJSDialogResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJSDialogResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgCanGoBackAndForward_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgCanGoBackAndForward_default_instance_;
    new (ptr) ::proto::steam::CMsgCanGoBackAndForward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgCanGoBackAndForward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgCanGoBackAndForward_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgCanGoBackAndForward_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgOpenSteamURL_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgOpenSteamURL_default_instance_;
    new (ptr) ::proto::steam::CMsgOpenSteamURL();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgOpenSteamURL::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgOpenSteamURL_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgOpenSteamURL_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetCookie_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetCookie_default_instance_;
    new (ptr) ::proto::steam::CMsgSetCookie();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetCookie::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetCookie_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetCookie_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetTargetFrameRate_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetTargetFrameRate_default_instance_;
    new (ptr) ::proto::steam::CMsgSetTargetFrameRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetTargetFrameRate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetTargetFrameRate_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetTargetFrameRate_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgPauseRepaint_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgPauseRepaint_default_instance_;
    new (ptr) ::proto::steam::CMsgPauseRepaint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgPauseRepaint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPauseRepaint_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPauseRepaint_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgFullRepaint_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgFullRepaint_default_instance_;
    new (ptr) ::proto::steam::CMsgFullRepaint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgFullRepaint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFullRepaint_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgFullRepaint_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgRequestFullScreen_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgRequestFullScreen_default_instance_;
    new (ptr) ::proto::steam::CMsgRequestFullScreen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgRequestFullScreen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRequestFullScreen_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRequestFullScreen_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgExitFullScreen_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgExitFullScreen_default_instance_;
    new (ptr) ::proto::steam::CMsgExitFullScreen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgExitFullScreen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgExitFullScreen_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgExitFullScreen_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgToggleFindInPageDialog_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgToggleFindInPageDialog_default_instance_;
    new (ptr) ::proto::steam::CMsgToggleFindInPageDialog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgToggleFindInPageDialog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgToggleFindInPageDialog_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgToggleFindInPageDialog_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetPIDShuttingDown_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetPIDShuttingDown_default_instance_;
    new (ptr) ::proto::steam::CMsgSetPIDShuttingDown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetPIDShuttingDown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetPIDShuttingDown_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetPIDShuttingDown_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgDisableBackgroundThrottling_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgDisableBackgroundThrottling_default_instance_;
    new (ptr) ::proto::steam::CMsgDisableBackgroundThrottling();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgDisableBackgroundThrottling::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDisableBackgroundThrottling_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDisableBackgroundThrottling_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgAckPIDShuttingDown_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgAckPIDShuttingDown_default_instance_;
    new (ptr) ::proto::steam::CMsgAckPIDShuttingDown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgAckPIDShuttingDown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAckPIDShuttingDown_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAckPIDShuttingDown_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgGetCookiesForURL_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGetCookiesForURL_default_instance_;
    new (ptr) ::proto::steam::CMsgGetCookiesForURL();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGetCookiesForURL::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGetCookiesForURL_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGetCookiesForURL_htmlmessages_2eproto}, {}};

static void InitDefaultsCCookie_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CCookie_default_instance_;
    new (ptr) ::proto::steam::CCookie();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CCookie::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CCookie_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCCookie_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgGetCookiesForURLResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGetCookiesForURLResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgGetCookiesForURLResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGetCookiesForURLResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGetCookiesForURLResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGetCookiesForURLResponse_htmlmessages_2eproto}, {
      &scc_info_CCookie_htmlmessages_2eproto.base,}};

static void InitDefaultsCMsgNodeHasFocus_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgNodeHasFocus_default_instance_;
    new (ptr) ::proto::steam::CMsgNodeHasFocus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgNodeHasFocus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgNodeHasFocus_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgNodeHasFocus_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgZoomToFocusedElement_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgZoomToFocusedElement_default_instance_;
    new (ptr) ::proto::steam::CMsgZoomToFocusedElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgZoomToFocusedElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgZoomToFocusedElement_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgZoomToFocusedElement_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgCloseFullScreenFlashIfOpen_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgCloseFullScreenFlashIfOpen_default_instance_;
    new (ptr) ::proto::steam::CMsgCloseFullScreenFlashIfOpen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgCloseFullScreenFlashIfOpen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgCloseFullScreenFlashIfOpen_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgCloseFullScreenFlashIfOpen_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgPauseFullScreenFlashMovieIfOpen_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgPauseFullScreenFlashMovieIfOpen_default_instance_;
    new (ptr) ::proto::steam::CMsgPauseFullScreenFlashMovieIfOpen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgPauseFullScreenFlashMovieIfOpen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPauseFullScreenFlashMovieIfOpen_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPauseFullScreenFlashMovieIfOpen_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgFocusedNodeText_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgFocusedNodeText_default_instance_;
    new (ptr) ::proto::steam::CMsgFocusedNodeText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgFocusedNodeText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFocusedNodeText_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgFocusedNodeText_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgFocusedNodeTextResponse_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgFocusedNodeTextResponse_default_instance_;
    new (ptr) ::proto::steam::CMsgFocusedNodeTextResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgFocusedNodeTextResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgFocusedNodeTextResponse_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgFocusedNodeTextResponse_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBuildID_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBuildID_default_instance_;
    new (ptr) ::proto::steam::CMsgBuildID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBuildID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBuildID_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBuildID_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgOpenDevTools_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgOpenDevTools_default_instance_;
    new (ptr) ::proto::steam::CMsgOpenDevTools();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgOpenDevTools::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgOpenDevTools_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgOpenDevTools_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgCloseDevTools_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgCloseDevTools_default_instance_;
    new (ptr) ::proto::steam::CMsgCloseDevTools();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgCloseDevTools::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgCloseDevTools_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgCloseDevTools_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgUnlockH264_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgUnlockH264_default_instance_;
    new (ptr) ::proto::steam::CMsgUnlockH264();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgUnlockH264::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgUnlockH264_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgUnlockH264_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgScreenInformationChanged_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgScreenInformationChanged_default_instance_;
    new (ptr) ::proto::steam::CMsgScreenInformationChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgScreenInformationChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgScreenInformationChanged_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgScreenInformationChanged_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgClearAllCookies_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgClearAllCookies_default_instance_;
    new (ptr) ::proto::steam::CMsgClearAllCookies();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgClearAllCookies::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClearAllCookies_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClearAllCookies_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgScreenDPI_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgScreenDPI_default_instance_;
    new (ptr) ::proto::steam::CMsgScreenDPI();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgScreenDPI::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgScreenDPI_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgScreenDPI_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgAuthedSteamDomains_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgAuthedSteamDomains_default_instance_;
    new (ptr) ::proto::steam::CMsgAuthedSteamDomains();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgAuthedSteamDomains::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAuthedSteamDomains_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAuthedSteamDomains_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSteamAuthNeeded_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamAuthNeeded_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamAuthNeeded();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamAuthNeeded::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamAuthNeeded_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamAuthNeeded_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSteamAuthCookiesSet_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSteamAuthCookiesSet_default_instance_;
    new (ptr) ::proto::steam::CMsgSteamAuthCookiesSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSteamAuthCookiesSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSteamAuthCookiesSet_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSteamAuthCookiesSet_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgJSRegisterMethod_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJSRegisterMethod_default_instance_;
    new (ptr) ::proto::steam::CMsgJSRegisterMethod();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJSRegisterMethod::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJSRegisterMethod_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJSRegisterMethod_htmlmessages_2eproto}, {}};

static void InitDefaultsCJSMethodArgument_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CJSMethodArgument_default_instance_;
    new (ptr) ::proto::steam::CJSMethodArgument();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CJSMethodArgument::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CJSMethodArgument_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCJSMethodArgument_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgJSValue_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJSValue_JSObjectProperty_default_instance_;
    new (ptr) ::proto::steam::CMsgJSValue_JSObjectProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::proto::steam::_CMsgJSValue_default_instance_;
    new (ptr) ::proto::steam::CMsgJSValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJSValue_JSObjectProperty::InitAsDefaultInstance();
  ::proto::steam::CMsgJSValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJSValue_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJSValue_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgJSMethodCall_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJSMethodCall_default_instance_;
    new (ptr) ::proto::steam::CMsgJSMethodCall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJSMethodCall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgJSMethodCall_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgJSMethodCall_htmlmessages_2eproto}, {
      &scc_info_CMsgJSValue_htmlmessages_2eproto.base,}};

static void InitDefaultsCMsgJSExecuteCallback_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJSExecuteCallback_default_instance_;
    new (ptr) ::proto::steam::CMsgJSExecuteCallback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJSExecuteCallback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgJSExecuteCallback_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgJSExecuteCallback_htmlmessages_2eproto}, {
      &scc_info_CMsgJSValue_htmlmessages_2eproto.base,}};

static void InitDefaultsCMsgJSReleaseCallback_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJSReleaseCallback_default_instance_;
    new (ptr) ::proto::steam::CMsgJSReleaseCallback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJSReleaseCallback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJSReleaseCallback_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJSReleaseCallback_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgJSRaiseException_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJSRaiseException_default_instance_;
    new (ptr) ::proto::steam::CMsgJSRaiseException();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJSRaiseException::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJSRaiseException_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJSRaiseException_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgLoadLocalization_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgLoadLocalization_default_instance_;
    new (ptr) ::proto::steam::CMsgLoadLocalization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgLoadLocalization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLoadLocalization_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLoadLocalization_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgJumpListLink_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgJumpListLink_default_instance_;
    new (ptr) ::proto::steam::CMsgJumpListLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgJumpListLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgJumpListLink_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgJumpListLink_htmlmessages_2eproto}, {}};

static void InitDefaultsCMSgJumpListMRUApp_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMSgJumpListMRUApp_default_instance_;
    new (ptr) ::proto::steam::CMSgJumpListMRUApp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMSgJumpListMRUApp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMSgJumpListMRUApp_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMSgJumpListMRUApp_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetJumpList_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetJumpList_default_instance_;
    new (ptr) ::proto::steam::CMsgSetJumpList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetJumpList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgSetJumpList_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgSetJumpList_htmlmessages_2eproto}, {
      &scc_info_CMSgJumpListMRUApp_htmlmessages_2eproto.base,
      &scc_info_CMsgJumpListLink_htmlmessages_2eproto.base,}};

static void InitDefaultsCMsgSetGameOverlayTargetPIDs_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetGameOverlayTargetPIDs_default_instance_;
    new (ptr) ::proto::steam::CMsgSetGameOverlayTargetPIDs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetGameOverlayTargetPIDs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetGameOverlayTargetPIDs_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetGameOverlayTargetPIDs_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgGameOverlayTargetTextureID_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgGameOverlayTargetTextureID_default_instance_;
    new (ptr) ::proto::steam::CMsgGameOverlayTargetTextureID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgGameOverlayTargetTextureID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGameOverlayTargetTextureID_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGameOverlayTargetTextureID_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgDraggableRegionsChanged_DraggableRects_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgDraggableRegionsChanged_DraggableRects_default_instance_;
    new (ptr) ::proto::steam::CMsgDraggableRegionsChanged_DraggableRects();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgDraggableRegionsChanged_DraggableRects::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDraggableRegionsChanged_DraggableRects_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDraggableRegionsChanged_DraggableRects_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgDraggableRegionsChanged_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgDraggableRegionsChanged_default_instance_;
    new (ptr) ::proto::steam::CMsgDraggableRegionsChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgDraggableRegionsChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDraggableRegionsChanged_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDraggableRegionsChanged_htmlmessages_2eproto}, {
      &scc_info_CMsgDraggableRegionsChanged_DraggableRects_htmlmessages_2eproto.base,}};

static void InitDefaultsCMsgResizeGripChanged_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgResizeGripChanged_default_instance_;
    new (ptr) ::proto::steam::CMsgResizeGripChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgResizeGripChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgResizeGripChanged_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgResizeGripChanged_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetWindowPosition_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetWindowPosition_default_instance_;
    new (ptr) ::proto::steam::CMsgSetWindowPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetWindowPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetWindowPosition_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetWindowPosition_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgShowWindow_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgShowWindow_default_instance_;
    new (ptr) ::proto::steam::CMsgShowWindow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgShowWindow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgShowWindow_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgShowWindow_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgHideWindow_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgHideWindow_default_instance_;
    new (ptr) ::proto::steam::CMsgHideWindow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgHideWindow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgHideWindow_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgHideWindow_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgBringWindowToFront_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgBringWindowToFront_default_instance_;
    new (ptr) ::proto::steam::CMsgBringWindowToFront();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgBringWindowToFront::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgBringWindowToFront_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgBringWindowToFront_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgSetForegroundWindow_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgSetForegroundWindow_default_instance_;
    new (ptr) ::proto::steam::CMsgSetForegroundWindow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgSetForegroundWindow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetForegroundWindow_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetForegroundWindow_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgMaximizeRestoreWindow_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgMaximizeRestoreWindow_default_instance_;
    new (ptr) ::proto::steam::CMsgMaximizeRestoreWindow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgMaximizeRestoreWindow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMaximizeRestoreWindow_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMaximizeRestoreWindow_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgMinimizeWindow_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgMinimizeWindow_default_instance_;
    new (ptr) ::proto::steam::CMsgMinimizeWindow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgMinimizeWindow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgMinimizeWindow_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgMinimizeWindow_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgShowBrowserContextMenu_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgShowBrowserContextMenu_default_instance_;
    new (ptr) ::proto::steam::CMsgShowBrowserContextMenu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgShowBrowserContextMenu::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgShowBrowserContextMenu_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgShowBrowserContextMenu_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgImeSetComposition_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgImeSetComposition_default_instance_;
    new (ptr) ::proto::steam::CMsgImeSetComposition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgImeSetComposition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgImeSetComposition_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgImeSetComposition_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgImeCommitText_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgImeCommitText_default_instance_;
    new (ptr) ::proto::steam::CMsgImeCommitText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgImeCommitText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgImeCommitText_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgImeCommitText_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgImeCancelComposition_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgImeCancelComposition_default_instance_;
    new (ptr) ::proto::steam::CMsgImeCancelComposition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgImeCancelComposition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgImeCancelComposition_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgImeCancelComposition_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgImeCompositionRangeChanged_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgImeCompositionRangeChanged_default_instance_;
    new (ptr) ::proto::steam::CMsgImeCompositionRangeChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgImeCompositionRangeChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgImeCompositionRangeChanged_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgImeCompositionRangeChanged_htmlmessages_2eproto}, {}};

static void InitDefaultsCMsgInspectElement_htmlmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CMsgInspectElement_default_instance_;
    new (ptr) ::proto::steam::CMsgInspectElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CMsgInspectElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgInspectElement_htmlmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgInspectElement_htmlmessages_2eproto}, {}};

void InitDefaults_htmlmessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgKeyUp_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgKeyDown_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgKeyChar_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMouseDown_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMouseUp_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMouseDblClick_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMouseWheel_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMouseMove_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMouseLeave_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBrowserCreate_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBrowserCreateResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBrowserRemove_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetLocalFileRequestMapping_AdditionalRoute_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetLocalFileRequestMapping_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBrowserErrorStrings_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBrowserSize_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBrowserSetMinSize_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBrowserPosition_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBrowserResized_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPostURL_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAddHeader_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgStopLoad_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgReload_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGoForward_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGoBack_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgWasHidden_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClearHistory_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClearAllBrowsingData_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgCopy_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPaste_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgExecuteJavaScript_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetFocus_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHorizontalScrollBarSize_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHorizontalScrollBarSizeResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgVerticalScrollBarSize_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgVerticalScrollBarSizeResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFind_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgStopFind_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetHorizontalScroll_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetVerticalScroll_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetZoomLevel_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgViewSource_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBrowserReady_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgURLChanged_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHTMLHeader_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHTMLPageSecurityInfo_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFinishedRequest_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLoadedRequest_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPageSecurity_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgStartRequest_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgStartRequestResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgShowPopup_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHidePopup_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSizePopup_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgOpenNewTab_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPopupHTMLWindow_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPopupHTMLWindowResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetHTMLTitle_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLoadingResource_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgStatusText_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetCursor_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFileLoadDialog_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFileLoadDialogResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgShowToolTip_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgUpdateToolTip_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHideToolTip_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSearchResults_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClose_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetSharedPaintBuffers_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAckSharedPaintBuffers_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgNeedsPaint_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgComboNeedsPaint_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgNeedsSharedTexturePaint_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameOverlayTexturePaint_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGetZoom_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGetZoomResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLinkAtPosition_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLinkAtPositionResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgZoomToElementAtPosition_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgZoomToElementAtPositionResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgScalePageToValue_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgScalePageToValueResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSavePageToJPEG_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSavePageToJPEGResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJSAlert_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJSConfirm_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJSDialogResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgCanGoBackAndForward_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgOpenSteamURL_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetCookie_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetTargetFrameRate_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPauseRepaint_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFullRepaint_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRequestFullScreen_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgExitFullScreen_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgToggleFindInPageDialog_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetPIDShuttingDown_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDisableBackgroundThrottling_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAckPIDShuttingDown_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGetCookiesForURL_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CCookie_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGetCookiesForURLResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgNodeHasFocus_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgZoomToFocusedElement_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgCloseFullScreenFlashIfOpen_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPauseFullScreenFlashMovieIfOpen_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFocusedNodeText_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFocusedNodeTextResponse_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBuildID_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgOpenDevTools_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgCloseDevTools_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgUnlockH264_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgScreenInformationChanged_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClearAllCookies_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgScreenDPI_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAuthedSteamDomains_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamAuthNeeded_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSteamAuthCookiesSet_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJSRegisterMethod_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CJSMethodArgument_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJSValue_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJSMethodCall_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJSExecuteCallback_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJSReleaseCallback_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJSRaiseException_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLoadLocalization_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgJumpListLink_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMSgJumpListMRUApp_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetJumpList_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetGameOverlayTargetPIDs_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGameOverlayTargetTextureID_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDraggableRegionsChanged_DraggableRects_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDraggableRegionsChanged_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgResizeGripChanged_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetWindowPosition_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgShowWindow_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgHideWindow_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgBringWindowToFront_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetForegroundWindow_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMaximizeRestoreWindow_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgMinimizeWindow_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgShowBrowserContextMenu_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgImeSetComposition_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgImeCommitText_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgImeCancelComposition_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgImeCompositionRangeChanged_htmlmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgInspectElement_htmlmessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_htmlmessages_2eproto[148];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_htmlmessages_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_htmlmessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_htmlmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyUp, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyUp, keycode_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyUp, modifiers_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyDown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyDown, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyDown, keycode_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyDown, modifiers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyDown, is_system_key_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyChar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyChar, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyChar, unichar_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgKeyChar, modifiers_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDown, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDown, mouse_button_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDown, modifiers_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseUp, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseUp, mouse_button_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseUp, modifiers_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseUp, is_off_panel_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseUp, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseUp, y_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDblClick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDblClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDblClick, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDblClick, mouse_button_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseDblClick, modifiers_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseWheel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseWheel, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseWheel, deltax_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseWheel, deltay_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseWheel, modifiers_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseMove, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseMove, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseMove, y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseMove, modifiers_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseLeave, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMouseLeave, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, request_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, useragent_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, user_css_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, native_dropdowns_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, dpi_scaling_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, offscreen_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, initial_width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, initial_height_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, window_icon_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, borderless_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, vroverlay_key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, browser_type_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, initial_top_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, initial_left_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, only_allow_trusted_popups_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, initial_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreate, hwnd_parent_),
  5,
  0,
  1,
  9,
  6,
  15,
  7,
  8,
  2,
  10,
  3,
  12,
  16,
  14,
  11,
  4,
  13,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreateResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserCreateResponse, request_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserRemove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserRemove, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute, relative_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute, local_path_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute, allowed_extensions_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping, request_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping, default_local_path_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetLocalFileRequestMapping, routes_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, title_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, header_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, cache_miss_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, bad_url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, connection_problem_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, proxy_problem_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserErrorStrings, unknown_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSize, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSize, width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSize, height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSetMinSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSetMinSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSetMinSize, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSetMinSize, width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserSetMinSize, height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserPosition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserPosition, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserPosition, y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserPosition, x_local_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserPosition, y_local_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserResized, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserResized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserResized, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserResized, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserResized, y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserResized, width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserResized, height_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPostURL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPostURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPostURL, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPostURL, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPostURL, post_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPostURL, pageserial_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAddHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAddHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAddHeader, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAddHeader, key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAddHeader, value_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStopLoad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStopLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStopLoad, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgReload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgReload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgReload, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGoForward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGoForward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGoForward, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGoBack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGoBack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGoBack, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgWasHidden, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgWasHidden, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgWasHidden, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgWasHidden, hidden_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClearHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClearHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClearHistory, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClearAllBrowsingData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClearAllBrowsingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClearAllBrowsingData, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCopy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCopy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCopy, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPaste, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPaste, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPaste, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgExecuteJavaScript, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgExecuteJavaScript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgExecuteJavaScript, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgExecuteJavaScript, script_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetFocus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetFocus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetFocus, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetFocus, focus_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSize, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSizeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSizeResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSizeResponse, scroll_max_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSizeResponse, scroll_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSizeResponse, zoom_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSizeResponse, visible_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHorizontalScrollBarSizeResponse, page_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSize, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSizeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSizeResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSizeResponse, scroll_max_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSizeResponse, scroll_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSizeResponse, zoom_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSizeResponse, visible_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgVerticalScrollBarSizeResponse, page_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFind, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFind, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFind, find_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFind, infind_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFind, reverse_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStopFind, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStopFind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStopFind, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetHorizontalScroll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetHorizontalScroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetHorizontalScroll, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetHorizontalScroll, scroll_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetVerticalScroll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetVerticalScroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetVerticalScroll, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetVerticalScroll, scroll_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetZoomLevel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetZoomLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetZoomLevel, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetZoomLevel, zoom_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgViewSource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgViewSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgViewSource, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserReady, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserReady, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserReady, vr_overlay_key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBrowserReady, hwnd_browser_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgURLChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgURLChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgURLChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgURLChanged, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgURLChanged, postdata_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgURLChanged, bisredirect_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgURLChanged, pagetitle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgURLChanged, bnewnavigation_),
  3,
  0,
  1,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLHeader, key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLHeader, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLPageSecurityInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLPageSecurityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLPageSecurityInfo, bissecure_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLPageSecurityInfo, bhascerterror_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLPageSecurityInfo, issuername_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLPageSecurityInfo, certname_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLPageSecurityInfo, certexpiry_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLPageSecurityInfo, ncertbits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CHTMLPageSecurityInfo, bisevcert_),
  2,
  3,
  0,
  1,
  5,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFinishedRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFinishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFinishedRequest, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFinishedRequest, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFinishedRequest, pagetitle_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadedRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadedRequest, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadedRequest, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadedRequest, pagetitle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadedRequest, headers_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPageSecurity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPageSecurity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPageSecurity, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPageSecurity, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPageSecurity, security_info_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequest, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequest, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequest, target_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequest, postdata_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequest, bisredirect_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequestResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequestResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStartRequestResponse, ballow_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowPopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowPopup, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHidePopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHidePopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHidePopup, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSizePopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSizePopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSizePopup, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSizePopup, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSizePopup, y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSizePopup, wide_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSizePopup, tall_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenNewTab, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenNewTab, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenNewTab, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenNewTab, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenNewTab, bforeground_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, wide_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, tall_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, popup_index_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindow, trusted_creator_),
  1,
  0,
  6,
  7,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindowResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindowResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPopupHTMLWindowResponse, ballow_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetHTMLTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetHTMLTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetHTMLTitle, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetHTMLTitle, title_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadingResource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadingResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadingResource, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadingResource, url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStatusText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStatusText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStatusText, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgStatusText, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCursor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCursor, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCursor, cursor_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCursor, custom_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCursor, wide_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCursor, tall_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCursor, xhotspot_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCursor, yhotspot_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFileLoadDialog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFileLoadDialog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFileLoadDialog, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFileLoadDialog, title_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFileLoadDialog, initialfile_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFileLoadDialogResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFileLoadDialogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFileLoadDialogResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFileLoadDialogResponse, files_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowToolTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowToolTip, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowToolTip, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgUpdateToolTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgUpdateToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgUpdateToolTip, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgUpdateToolTip, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHideToolTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHideToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHideToolTip, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSearchResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSearchResults, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSearchResults, activematch_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSearchResults, results_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClose, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetSharedPaintBuffers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetSharedPaintBuffers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetSharedPaintBuffers, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetSharedPaintBuffers, wide_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetSharedPaintBuffers, tall_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetSharedPaintBuffers, source_pid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetSharedPaintBuffers, source_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetSharedPaintBuffers, handle_),
  0,
  1,
  5,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAckSharedPaintBuffers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAckSharedPaintBuffers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAckSharedPaintBuffers, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsPaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsPaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsPaint, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsPaint, scrollx_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsPaint, scrolly_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsPaint, pagescale_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsPaint, pageserial_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgComboNeedsPaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgComboNeedsPaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgComboNeedsPaint, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgComboNeedsPaint, rgba_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgComboNeedsPaint, combobox_wide_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgComboNeedsPaint, combobox_tall_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgComboNeedsPaint, shared_memory_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgComboNeedsPaint, shared_memory_size_),
  1,
  0,
  2,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, share_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, height_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, scrollx_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, scrolly_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, pagescale_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNeedsSharedTexturePaint, pageserial_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTexturePaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTexturePaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTexturePaint, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTexturePaint, width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTexturePaint, height_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTexturePaint, scrollx_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTexturePaint, scrolly_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTexturePaint, pagescale_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTexturePaint, pageserial_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetZoom, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetZoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetZoom, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetZoomResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetZoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetZoomResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetZoomResponse, zoom_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPosition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPosition, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPosition, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPositionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPositionResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPositionResponse, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPositionResponse, y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPositionResponse, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPositionResponse, blivelink_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLinkAtPositionResponse, binput_),
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPosition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPosition, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPosition, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPositionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPositionResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPositionResponse, scale_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToElementAtPositionResponse, duration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValue, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValue, scale_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValue, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValue, y_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValueResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValueResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScalePageToValueResponse, zoom_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEG, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEG, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEG, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEG, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEG, width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEG, height_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEGResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEGResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEGResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEGResponse, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSavePageToJPEGResponse, filename_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSAlert, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSAlert, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSConfirm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSConfirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSConfirm, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSConfirm, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSDialogResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSDialogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSDialogResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSDialogResponse, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCanGoBackAndForward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCanGoBackAndForward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCanGoBackAndForward, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCanGoBackAndForward, bgoback_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCanGoBackAndForward, bgoforward_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenSteamURL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenSteamURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenSteamURL, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenSteamURL, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenSteamURL, referrer_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCookie, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCookie, key_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCookie, value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCookie, path_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCookie, host_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCookie, expires_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCookie, secure_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetCookie, httponly_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetTargetFrameRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetTargetFrameRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetTargetFrameRate, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetTargetFrameRate, ntargetframerate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPauseRepaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPauseRepaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPauseRepaint, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFullRepaint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFullRepaint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFullRepaint, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRequestFullScreen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRequestFullScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgRequestFullScreen, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgExitFullScreen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgExitFullScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgExitFullScreen, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgToggleFindInPageDialog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgToggleFindInPageDialog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgToggleFindInPageDialog, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetPIDShuttingDown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetPIDShuttingDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetPIDShuttingDown, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDisableBackgroundThrottling, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDisableBackgroundThrottling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDisableBackgroundThrottling, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAckPIDShuttingDown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAckPIDShuttingDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAckPIDShuttingDown, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetCookiesForURL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetCookiesForURL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetCookiesForURL, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetCookiesForURL, url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCookie, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCookie, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCookie, value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCookie, domain_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CCookie, path_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetCookiesForURLResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetCookiesForURLResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetCookiesForURLResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetCookiesForURLResponse, url_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGetCookiesForURLResponse, cookies_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNodeHasFocus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNodeHasFocus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNodeHasFocus, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNodeHasFocus, binput_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNodeHasFocus, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNodeHasFocus, elementtagname_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNodeHasFocus, searchbuttontext_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNodeHasFocus, bhasmultipleinputs_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgNodeHasFocus, input_type_),
  4,
  5,
  0,
  1,
  2,
  6,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToFocusedElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToFocusedElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgZoomToFocusedElement, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCloseFullScreenFlashIfOpen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCloseFullScreenFlashIfOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCloseFullScreenFlashIfOpen, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPauseFullScreenFlashMovieIfOpen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPauseFullScreenFlashMovieIfOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgPauseFullScreenFlashMovieIfOpen, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFocusedNodeText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFocusedNodeText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFocusedNodeText, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFocusedNodeTextResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFocusedNodeTextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFocusedNodeTextResponse, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgFocusedNodeTextResponse, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBuildID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBuildID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBuildID, build_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenDevTools, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenDevTools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgOpenDevTools, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCloseDevTools, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCloseDevTools, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgCloseDevTools, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgUnlockH264, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgUnlockH264, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgUnlockH264, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgUnlockH264, unlock_code_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, override_width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, override_height_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, monitor_left_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, monitor_top_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, monitor_right_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, monitor_bottom_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, usable_left_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, usable_top_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, usable_right_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenInformationChanged, usable_bottom_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClearAllCookies, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClearAllCookies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgClearAllCookies, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenDPI, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenDPI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenDPI, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgScreenDPI, dpi_scaling_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAuthedSteamDomains, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAuthedSteamDomains, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgAuthedSteamDomains, domains_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamAuthNeeded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamAuthNeeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamAuthNeeded, filler_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamAuthCookiesSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamAuthCookiesSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSteamAuthCookiesSet, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSRegisterMethod, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSRegisterMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSRegisterMethod, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSRegisterMethod, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSRegisterMethod, method_type_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CJSMethodArgument, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CJSMethodArgument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CJSMethodArgument, json_data_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CJSMethodArgument, function_handle_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue_JSObjectProperty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue_JSObjectProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue_JSObjectProperty, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue_JSObjectProperty, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, bool_value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, int_value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, uint_value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, double_value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, string_value_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, function_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, is_array_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, array_values_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, is_object_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSValue, object_properties_),
  5,
  1,
  2,
  3,
  0,
  4,
  6,
  ~0u,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSMethodCall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSMethodCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSMethodCall, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSMethodCall, name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSMethodCall, arguments_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSExecuteCallback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSExecuteCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSExecuteCallback, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSExecuteCallback, function_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSExecuteCallback, arguments_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSReleaseCallback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSReleaseCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSReleaseCallback, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSReleaseCallback, function_handle_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSRaiseException, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSRaiseException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSRaiseException, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJSRaiseException, exception_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadLocalization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadLocalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadLocalization, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadLocalization, localization_path_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgLoadLocalization, language_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJumpListLink, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJumpListLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJumpListLink, display_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJumpListLink, url_link_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgJumpListLink, icon_path_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMSgJumpListMRUApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMSgJumpListMRUApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMSgJumpListMRUApp, appid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMSgJumpListMRUApp, display_name_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMSgJumpListMRUApp, url_link_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMSgJumpListMRUApp, icon_path_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetJumpList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetJumpList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetJumpList, steam_path_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetJumpList, mru_title_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetJumpList, apps_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetJumpList, links_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetGameOverlayTargetPIDs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetGameOverlayTargetPIDs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetGameOverlayTargetPIDs, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetGameOverlayTargetPIDs, target_pid_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTargetTextureID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTargetTextureID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTargetTextureID, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTargetTextureID, target_pid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgGameOverlayTargetTextureID, texture_handle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged_DraggableRects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged_DraggableRects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged_DraggableRects, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged_DraggableRects, y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged_DraggableRects, width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged_DraggableRects, height_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged_DraggableRects, draggable_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgDraggableRegionsChanged, rects_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgResizeGripChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgResizeGripChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgResizeGripChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgResizeGripChanged, width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgResizeGripChanged, height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetWindowPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetWindowPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetWindowPosition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetWindowPosition, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetWindowPosition, y_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetWindowPosition, width_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetWindowPosition, height_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHideWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHideWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgHideWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBringWindowToFront, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBringWindowToFront, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgBringWindowToFront, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetForegroundWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetForegroundWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgSetForegroundWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMaximizeRestoreWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMaximizeRestoreWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMaximizeRestoreWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMinimizeWindow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMinimizeWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgMinimizeWindow, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowBrowserContextMenu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowBrowserContextMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgShowBrowserContextMenu, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeSetComposition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeSetComposition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeSetComposition, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeSetComposition, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCommitText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCommitText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCommitText, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCommitText, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCancelComposition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCancelComposition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCancelComposition, browser_handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCompositionRangeChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCompositionRangeChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCompositionRangeChanged, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCompositionRangeChanged, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgImeCompositionRangeChanged, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgInspectElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgInspectElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgInspectElement, browser_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgInspectElement, x_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CMsgInspectElement, y_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::proto::steam::CMsgKeyUp)},
  { 11, 20, sizeof(::proto::steam::CMsgKeyDown)},
  { 24, 32, sizeof(::proto::steam::CMsgKeyChar)},
  { 35, 43, sizeof(::proto::steam::CMsgMouseDown)},
  { 46, 57, sizeof(::proto::steam::CMsgMouseUp)},
  { 63, 71, sizeof(::proto::steam::CMsgMouseDblClick)},
  { 74, 83, sizeof(::proto::steam::CMsgMouseWheel)},
  { 87, 96, sizeof(::proto::steam::CMsgMouseMove)},
  { 100, 106, sizeof(::proto::steam::CMsgMouseLeave)},
  { 107, 129, sizeof(::proto::steam::CMsgBrowserCreate)},
  { 146, 153, sizeof(::proto::steam::CMsgBrowserCreateResponse)},
  { 155, 161, sizeof(::proto::steam::CMsgBrowserRemove)},
  { 162, 170, sizeof(::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute)},
  { 173, 182, sizeof(::proto::steam::CMsgSetLocalFileRequestMapping)},
  { 186, 199, sizeof(::proto::steam::CMsgBrowserErrorStrings)},
  { 207, 215, sizeof(::proto::steam::CMsgBrowserSize)},
  { 218, 226, sizeof(::proto::steam::CMsgBrowserSetMinSize)},
  { 229, 239, sizeof(::proto::steam::CMsgBrowserPosition)},
  { 244, 254, sizeof(::proto::steam::CMsgBrowserResized)},
  { 259, 268, sizeof(::proto::steam::CMsgPostURL)},
  { 272, 280, sizeof(::proto::steam::CMsgAddHeader)},
  { 283, 289, sizeof(::proto::steam::CMsgStopLoad)},
  { 290, 296, sizeof(::proto::steam::CMsgReload)},
  { 297, 303, sizeof(::proto::steam::CMsgGoForward)},
  { 304, 310, sizeof(::proto::steam::CMsgGoBack)},
  { 311, 318, sizeof(::proto::steam::CMsgWasHidden)},
  { 320, 326, sizeof(::proto::steam::CMsgClearHistory)},
  { 327, 333, sizeof(::proto::steam::CMsgClearAllBrowsingData)},
  { 334, 340, sizeof(::proto::steam::CMsgCopy)},
  { 341, 347, sizeof(::proto::steam::CMsgPaste)},
  { 348, 355, sizeof(::proto::steam::CMsgExecuteJavaScript)},
  { 357, 364, sizeof(::proto::steam::CMsgSetFocus)},
  { 366, 372, sizeof(::proto::steam::CMsgHorizontalScrollBarSize)},
  { 373, 384, sizeof(::proto::steam::CMsgHorizontalScrollBarSizeResponse)},
  { 390, 396, sizeof(::proto::steam::CMsgVerticalScrollBarSize)},
  { 397, 408, sizeof(::proto::steam::CMsgVerticalScrollBarSizeResponse)},
  { 414, 423, sizeof(::proto::steam::CMsgFind)},
  { 427, 433, sizeof(::proto::steam::CMsgStopFind)},
  { 434, 441, sizeof(::proto::steam::CMsgSetHorizontalScroll)},
  { 443, 450, sizeof(::proto::steam::CMsgSetVerticalScroll)},
  { 452, 459, sizeof(::proto::steam::CMsgSetZoomLevel)},
  { 461, 467, sizeof(::proto::steam::CMsgViewSource)},
  { 468, 476, sizeof(::proto::steam::CMsgBrowserReady)},
  { 479, 490, sizeof(::proto::steam::CMsgURLChanged)},
  { 496, 503, sizeof(::proto::steam::CHTMLHeader)},
  { 505, 517, sizeof(::proto::steam::CHTMLPageSecurityInfo)},
  { 524, 532, sizeof(::proto::steam::CMsgFinishedRequest)},
  { 535, 544, sizeof(::proto::steam::CMsgLoadedRequest)},
  { 548, 556, sizeof(::proto::steam::CMsgPageSecurity)},
  { 559, 569, sizeof(::proto::steam::CMsgStartRequest)},
  { 574, 581, sizeof(::proto::steam::CMsgStartRequestResponse)},
  { 583, 589, sizeof(::proto::steam::CMsgShowPopup)},
  { 590, 596, sizeof(::proto::steam::CMsgHidePopup)},
  { 597, 607, sizeof(::proto::steam::CMsgSizePopup)},
  { 612, 620, sizeof(::proto::steam::CMsgOpenNewTab)},
  { 623, 636, sizeof(::proto::steam::CMsgPopupHTMLWindow)},
  { 644, 651, sizeof(::proto::steam::CMsgPopupHTMLWindowResponse)},
  { 653, 660, sizeof(::proto::steam::CMsgSetHTMLTitle)},
  { 662, 669, sizeof(::proto::steam::CMsgLoadingResource)},
  { 671, 678, sizeof(::proto::steam::CMsgStatusText)},
  { 680, 692, sizeof(::proto::steam::CMsgSetCursor)},
  { 699, 707, sizeof(::proto::steam::CMsgFileLoadDialog)},
  { 710, 717, sizeof(::proto::steam::CMsgFileLoadDialogResponse)},
  { 719, 726, sizeof(::proto::steam::CMsgShowToolTip)},
  { 728, 735, sizeof(::proto::steam::CMsgUpdateToolTip)},
  { 737, 743, sizeof(::proto::steam::CMsgHideToolTip)},
  { 744, 752, sizeof(::proto::steam::CMsgSearchResults)},
  { 755, 761, sizeof(::proto::steam::CMsgClose)},
  { 762, 773, sizeof(::proto::steam::CMsgSetSharedPaintBuffers)},
  { 779, 785, sizeof(::proto::steam::CMsgAckSharedPaintBuffers)},
  { 786, 796, sizeof(::proto::steam::CMsgNeedsPaint)},
  { 801, 812, sizeof(::proto::steam::CMsgComboNeedsPaint)},
  { 818, 831, sizeof(::proto::steam::CMsgNeedsSharedTexturePaint)},
  { 839, 851, sizeof(::proto::steam::CMsgGameOverlayTexturePaint)},
  { 858, 864, sizeof(::proto::steam::CMsgGetZoom)},
  { 865, 872, sizeof(::proto::steam::CMsgGetZoomResponse)},
  { 874, 882, sizeof(::proto::steam::CMsgLinkAtPosition)},
  { 885, 896, sizeof(::proto::steam::CMsgLinkAtPositionResponse)},
  { 902, 910, sizeof(::proto::steam::CMsgZoomToElementAtPosition)},
  { 913, 921, sizeof(::proto::steam::CMsgZoomToElementAtPositionResponse)},
  { 924, 933, sizeof(::proto::steam::CMsgScalePageToValue)},
  { 937, 944, sizeof(::proto::steam::CMsgScalePageToValueResponse)},
  { 946, 956, sizeof(::proto::steam::CMsgSavePageToJPEG)},
  { 961, 969, sizeof(::proto::steam::CMsgSavePageToJPEGResponse)},
  { 972, 979, sizeof(::proto::steam::CMsgJSAlert)},
  { 981, 988, sizeof(::proto::steam::CMsgJSConfirm)},
  { 990, 997, sizeof(::proto::steam::CMsgJSDialogResponse)},
  { 999, 1007, sizeof(::proto::steam::CMsgCanGoBackAndForward)},
  { 1010, 1018, sizeof(::proto::steam::CMsgOpenSteamURL)},
  { 1021, 1033, sizeof(::proto::steam::CMsgSetCookie)},
  { 1040, 1047, sizeof(::proto::steam::CMsgSetTargetFrameRate)},
  { 1049, 1055, sizeof(::proto::steam::CMsgPauseRepaint)},
  { 1056, 1062, sizeof(::proto::steam::CMsgFullRepaint)},
  { 1063, 1069, sizeof(::proto::steam::CMsgRequestFullScreen)},
  { 1070, 1076, sizeof(::proto::steam::CMsgExitFullScreen)},
  { 1077, 1083, sizeof(::proto::steam::CMsgToggleFindInPageDialog)},
  { 1084, 1090, sizeof(::proto::steam::CMsgSetPIDShuttingDown)},
  { 1091, 1097, sizeof(::proto::steam::CMsgDisableBackgroundThrottling)},
  { 1098, 1104, sizeof(::proto::steam::CMsgAckPIDShuttingDown)},
  { 1105, 1112, sizeof(::proto::steam::CMsgGetCookiesForURL)},
  { 1114, 1123, sizeof(::proto::steam::CCookie)},
  { 1127, 1135, sizeof(::proto::steam::CMsgGetCookiesForURLResponse)},
  { 1138, 1150, sizeof(::proto::steam::CMsgNodeHasFocus)},
  { 1157, 1163, sizeof(::proto::steam::CMsgZoomToFocusedElement)},
  { 1164, 1170, sizeof(::proto::steam::CMsgCloseFullScreenFlashIfOpen)},
  { 1171, 1177, sizeof(::proto::steam::CMsgPauseFullScreenFlashMovieIfOpen)},
  { 1178, 1184, sizeof(::proto::steam::CMsgFocusedNodeText)},
  { 1185, 1192, sizeof(::proto::steam::CMsgFocusedNodeTextResponse)},
  { 1194, 1200, sizeof(::proto::steam::CMsgBuildID)},
  { 1201, 1207, sizeof(::proto::steam::CMsgOpenDevTools)},
  { 1208, 1214, sizeof(::proto::steam::CMsgCloseDevTools)},
  { 1215, 1222, sizeof(::proto::steam::CMsgUnlockH264)},
  { 1224, 1240, sizeof(::proto::steam::CMsgScreenInformationChanged)},
  { 1251, 1257, sizeof(::proto::steam::CMsgClearAllCookies)},
  { 1258, 1265, sizeof(::proto::steam::CMsgScreenDPI)},
  { 1267, 1273, sizeof(::proto::steam::CMsgAuthedSteamDomains)},
  { 1274, 1280, sizeof(::proto::steam::CMsgSteamAuthNeeded)},
  { 1281, 1287, sizeof(::proto::steam::CMsgSteamAuthCookiesSet)},
  { 1288, 1296, sizeof(::proto::steam::CMsgJSRegisterMethod)},
  { 1299, 1306, sizeof(::proto::steam::CJSMethodArgument)},
  { 1308, 1315, sizeof(::proto::steam::CMsgJSValue_JSObjectProperty)},
  { 1317, 1332, sizeof(::proto::steam::CMsgJSValue)},
  { 1342, 1350, sizeof(::proto::steam::CMsgJSMethodCall)},
  { 1353, 1361, sizeof(::proto::steam::CMsgJSExecuteCallback)},
  { 1364, 1371, sizeof(::proto::steam::CMsgJSReleaseCallback)},
  { 1373, 1380, sizeof(::proto::steam::CMsgJSRaiseException)},
  { 1382, 1390, sizeof(::proto::steam::CMsgLoadLocalization)},
  { 1393, 1401, sizeof(::proto::steam::CMsgJumpListLink)},
  { 1404, 1413, sizeof(::proto::steam::CMSgJumpListMRUApp)},
  { 1417, 1426, sizeof(::proto::steam::CMsgSetJumpList)},
  { 1430, 1437, sizeof(::proto::steam::CMsgSetGameOverlayTargetPIDs)},
  { 1439, 1447, sizeof(::proto::steam::CMsgGameOverlayTargetTextureID)},
  { 1450, 1460, sizeof(::proto::steam::CMsgDraggableRegionsChanged_DraggableRects)},
  { 1465, 1472, sizeof(::proto::steam::CMsgDraggableRegionsChanged)},
  { 1474, 1482, sizeof(::proto::steam::CMsgResizeGripChanged)},
  { 1485, 1495, sizeof(::proto::steam::CMsgSetWindowPosition)},
  { 1500, 1506, sizeof(::proto::steam::CMsgShowWindow)},
  { 1507, 1513, sizeof(::proto::steam::CMsgHideWindow)},
  { 1514, 1520, sizeof(::proto::steam::CMsgBringWindowToFront)},
  { 1521, 1527, sizeof(::proto::steam::CMsgSetForegroundWindow)},
  { 1528, 1534, sizeof(::proto::steam::CMsgMaximizeRestoreWindow)},
  { 1535, 1541, sizeof(::proto::steam::CMsgMinimizeWindow)},
  { 1542, 1548, sizeof(::proto::steam::CMsgShowBrowserContextMenu)},
  { 1549, 1556, sizeof(::proto::steam::CMsgImeSetComposition)},
  { 1558, 1565, sizeof(::proto::steam::CMsgImeCommitText)},
  { 1567, 1573, sizeof(::proto::steam::CMsgImeCancelComposition)},
  { 1574, 1582, sizeof(::proto::steam::CMsgImeCompositionRangeChanged)},
  { 1585, 1593, sizeof(::proto::steam::CMsgInspectElement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgKeyUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgKeyDown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgKeyChar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgMouseDown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgMouseUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgMouseDblClick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgMouseWheel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgMouseMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgMouseLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBrowserCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBrowserCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBrowserRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetLocalFileRequestMapping_AdditionalRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetLocalFileRequestMapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBrowserErrorStrings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBrowserSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBrowserSetMinSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBrowserPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBrowserResized_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgPostURL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgAddHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgStopLoad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgReload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGoForward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGoBack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgWasHidden_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClearHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClearAllBrowsingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgCopy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgPaste_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgExecuteJavaScript_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetFocus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgHorizontalScrollBarSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgHorizontalScrollBarSizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgVerticalScrollBarSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgVerticalScrollBarSizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgFind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgStopFind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetHorizontalScroll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetVerticalScroll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetZoomLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgViewSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBrowserReady_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgURLChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CHTMLHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CHTMLPageSecurityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgFinishedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgLoadedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgPageSecurity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgStartRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgStartRequestResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgShowPopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgHidePopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSizePopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgOpenNewTab_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgPopupHTMLWindow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgPopupHTMLWindowResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetHTMLTitle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgLoadingResource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgStatusText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetCursor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgFileLoadDialog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgFileLoadDialogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgShowToolTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgUpdateToolTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgHideToolTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSearchResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetSharedPaintBuffers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgAckSharedPaintBuffers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgNeedsPaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgComboNeedsPaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgNeedsSharedTexturePaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGameOverlayTexturePaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGetZoom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGetZoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgLinkAtPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgLinkAtPositionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgZoomToElementAtPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgZoomToElementAtPositionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgScalePageToValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgScalePageToValueResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSavePageToJPEG_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSavePageToJPEGResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSConfirm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSDialogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgCanGoBackAndForward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgOpenSteamURL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetCookie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetTargetFrameRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgPauseRepaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgFullRepaint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgRequestFullScreen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgExitFullScreen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgToggleFindInPageDialog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetPIDShuttingDown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgDisableBackgroundThrottling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgAckPIDShuttingDown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGetCookiesForURL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CCookie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGetCookiesForURLResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgNodeHasFocus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgZoomToFocusedElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgCloseFullScreenFlashIfOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgPauseFullScreenFlashMovieIfOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgFocusedNodeText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgFocusedNodeTextResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBuildID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgOpenDevTools_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgCloseDevTools_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgUnlockH264_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgScreenInformationChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgClearAllCookies_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgScreenDPI_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgAuthedSteamDomains_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamAuthNeeded_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSteamAuthCookiesSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSRegisterMethod_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CJSMethodArgument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSValue_JSObjectProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSMethodCall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSExecuteCallback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSReleaseCallback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJSRaiseException_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgLoadLocalization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgJumpListLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMSgJumpListMRUApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetJumpList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetGameOverlayTargetPIDs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgGameOverlayTargetTextureID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgDraggableRegionsChanged_DraggableRects_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgDraggableRegionsChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgResizeGripChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetWindowPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgShowWindow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgHideWindow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgBringWindowToFront_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgSetForegroundWindow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgMaximizeRestoreWindow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgMinimizeWindow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgShowBrowserContextMenu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgImeSetComposition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgImeCommitText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgImeCancelComposition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgImeCompositionRangeChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CMsgInspectElement_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_htmlmessages_2eproto = {
  {}, AddDescriptors_htmlmessages_2eproto, "htmlmessages.proto", schemas,
  file_default_instances, TableStruct_htmlmessages_2eproto::offsets,
  file_level_metadata_htmlmessages_2eproto, 148, file_level_enum_descriptors_htmlmessages_2eproto, file_level_service_descriptors_htmlmessages_2eproto,
};

const char descriptor_table_protodef_htmlmessages_2eproto[] =
  "\n\022htmlmessages.proto\022\013proto.steam\"G\n\tCMs"
  "gKeyUp\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007keyCod"
  "e\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001(\r\"`\n\013CMsgKeyDow"
  "n\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007keyCode\030\002 \001"
  "(\r\022\021\n\tmodifiers\030\003 \001(\r\022\025\n\ris_system_key\030\004"
  " \001(\010\"I\n\013CMsgKeyChar\022\026\n\016browser_handle\030\001 "
  "\001(\r\022\017\n\007unichar\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001(\r\""
  "P\n\rCMsgMouseDown\022\026\n\016browser_handle\030\001 \001(\r"
  "\022\024\n\014mouse_button\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001("
  "\r\"z\n\013CMsgMouseUp\022\026\n\016browser_handle\030\001 \001(\r"
  "\022\024\n\014mouse_button\030\002 \001(\r\022\021\n\tmodifiers\030\003 \001("
  "\r\022\024\n\014is_off_panel\030\004 \001(\010\022\t\n\001x\030\005 \001(\005\022\t\n\001y\030"
  "\006 \001(\005\"T\n\021CMsgMouseDblClick\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\024\n\014mouse_button\030\002 \001(\r\022\021\n\tmodi"
  "fiers\030\003 \001(\r\"[\n\016CMsgMouseWheel\022\026\n\016browser"
  "_handle\030\001 \001(\r\022\016\n\006deltax\030\002 \001(\005\022\016\n\006deltay\030"
  "\003 \001(\005\022\021\n\tmodifiers\030\004 \001(\r\"P\n\rCMsgMouseMov"
  "e\022\026\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001"
  "y\030\003 \001(\005\022\021\n\tmodifiers\030\004 \001(\r\"(\n\016CMsgMouseL"
  "eave\022\026\n\016browser_handle\030\001 \001(\r\"\302\003\n\021CMsgBro"
  "wserCreate\022\022\n\nrequest_id\030\001 \001(\r\022\021\n\tuserag"
  "ent\030\003 \001(\t\022\020\n\010user_css\030\005 \001(\t\022\030\n\020native_dr"
  "opdowns\030\006 \001(\010\022\023\n\013dpi_scaling\030\007 \001(\002\022\027\n\tof"
  "fscreen\030\010 \001(\010:\004true\022\030\n\rinitial_width\030\t \001"
  "(\r:\0010\022\031\n\016initial_height\030\n \001(\r:\0010\022\023\n\013wind"
  "ow_icon\030\013 \001(\t\022\031\n\nborderless\030\014 \001(\010:\005false"
  "\022\025\n\rvroverlay_key\030\r \001(\t\022\027\n\014browser_type\030"
  "\016 \001(\r:\0010\022 \n\013initial_top\030\017 \001(\005:\013-21474836"
  "48\022!\n\014initial_left\030\020 \001(\005:\013-2147483648\022(\n"
  "\031only_allow_trusted_popups\030\021 \001(\010:\005false\022"
  "\023\n\013initial_url\030\022 \001(\t\022\023\n\013hwnd_parent\030\023 \001("
  "\006\"G\n\031CMsgBrowserCreateResponse\022\026\n\016browse"
  "r_handle\030\001 \001(\r\022\022\n\nrequest_id\030\002 \001(\r\"+\n\021CM"
  "sgBrowserRemove\022\026\n\016browser_handle\030\001 \001(\r\""
  "\217\002\n\036CMsgSetLocalFileRequestMapping\022\026\n\016br"
  "owser_handle\030\001 \001(\r\022\023\n\013request_url\030\002 \001(\t\022"
  "\032\n\022default_local_path\030\003 \001(\t\022K\n\006routes\030\004 "
  "\003(\0132;.proto.steam.CMsgSetLocalFileReques"
  "tMapping.AdditionalRoute\032W\n\017AdditionalRo"
  "ute\022\024\n\014relative_url\030\001 \001(\t\022\022\n\nlocal_path\030"
  "\002 \001(\t\022\032\n\022allowed_extensions\030\003 \001(\t\"\271\001\n\027CM"
  "sgBrowserErrorStrings\022\026\n\016browser_handle\030"
  "\001 \001(\r\022\r\n\005title\030\002 \001(\t\022\016\n\006header\030\003 \001(\t\022\022\n\n"
  "cache_miss\030\004 \001(\t\022\017\n\007bad_url\030\005 \001(\t\022\032\n\022con"
  "nection_problem\030\006 \001(\t\022\025\n\rproxy_problem\030\007"
  " \001(\t\022\017\n\007unknown\030\010 \001(\t\"H\n\017CMsgBrowserSize"
  "\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005width\030\002 \001(\r\022"
  "\016\n\006height\030\003 \001(\r\"N\n\025CMsgBrowserSetMinSize"
  "\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005width\030\002 \001(\r\022"
  "\016\n\006height\030\003 \001(\r\"e\n\023CMsgBrowserPosition\022\026"
  "\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003"
  " \001(\005\022\017\n\007x_local\030\004 \001(\005\022\017\n\007y_local\030\005 \001(\005\"a"
  "\n\022CMsgBrowserResized\022\026\n\016browser_handle\030\001"
  " \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\r\n\005width\030\004 \001("
  "\r\022\016\n\006height\030\005 \001(\r\"T\n\013CMsgPostURL\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\014\n\004post\030\003 "
  "\001(\t\022\022\n\npageserial\030\004 \001(\r\"C\n\rCMsgAddHeader"
  "\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003key\030\002 \001(\t\022\r\n"
  "\005value\030\003 \001(\t\"&\n\014CMsgStopLoad\022\026\n\016browser_"
  "handle\030\001 \001(\r\"$\n\nCMsgReload\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\"\'\n\rCMsgGoForward\022\026\n\016browser_h"
  "andle\030\001 \001(\r\"$\n\nCMsgGoBack\022\026\n\016browser_han"
  "dle\030\001 \001(\r\"7\n\rCMsgWasHidden\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\022\016\n\006hidden\030\002 \001(\010\"*\n\020CMsgClearH"
  "istory\022\026\n\016browser_handle\030\001 \001(\r\"2\n\030CMsgCl"
  "earAllBrowsingData\022\026\n\016browser_handle\030\001 \001"
  "(\r\"\"\n\010CMsgCopy\022\026\n\016browser_handle\030\001 \001(\r\"#"
  "\n\tCMsgPaste\022\026\n\016browser_handle\030\001 \001(\r\"\?\n\025C"
  "MsgExecuteJavaScript\022\026\n\016browser_handle\030\001"
  " \001(\r\022\016\n\006script\030\002 \001(\t\"5\n\014CMsgSetFocus\022\026\n\016"
  "browser_handle\030\001 \001(\r\022\r\n\005focus\030\002 \001(\010\"5\n\033C"
  "MsgHorizontalScrollBarSize\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\"\223\001\n#CMsgHorizontalScrollBarSi"
  "zeResponse\022\026\n\016browser_handle\030\001 \001(\r\022\022\n\nsc"
  "roll_max\030\006 \001(\r\022\016\n\006scroll\030\007 \001(\r\022\014\n\004zoom\030\010"
  " \001(\002\022\017\n\007visible\030\t \001(\010\022\021\n\tpage_size\030\n \001(\r"
  "\"3\n\031CMsgVerticalScrollBarSize\022\026\n\016browser"
  "_handle\030\001 \001(\r\"\221\001\n!CMsgVerticalScrollBarS"
  "izeResponse\022\026\n\016browser_handle\030\001 \001(\r\022\022\n\ns"
  "croll_max\030\006 \001(\r\022\016\n\006scroll\030\007 \001(\r\022\014\n\004zoom\030"
  "\010 \001(\002\022\017\n\007visible\030\t \001(\010\022\021\n\tpage_size\030\n \001("
  "\r\"X\n\010CMsgFind\022\026\n\016browser_handle\030\001 \001(\r\022\014\n"
  "\004find\030\002 \001(\t\022\016\n\006infind\030\003 \001(\010\022\026\n\007reverse\030\004"
  " \001(\010:\005false\"&\n\014CMsgStopFind\022\026\n\016browser_h"
  "andle\030\001 \001(\r\"A\n\027CMsgSetHorizontalScroll\022\026"
  "\n\016browser_handle\030\001 \001(\r\022\016\n\006scroll\030\002 \001(\r\"\?"
  "\n\025CMsgSetVerticalScroll\022\026\n\016browser_handl"
  "e\030\001 \001(\r\022\016\n\006scroll\030\002 \001(\r\"8\n\020CMsgSetZoomLe"
  "vel\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004zoom\030\002 \001("
  "\001\"(\n\016CMsgViewSource\022\026\n\016browser_handle\030\001 "
  "\001(\r\"X\n\020CMsgBrowserReady\022\026\n\016browser_handl"
  "e\030\001 \001(\r\022\026\n\016vr_overlay_key\030\002 \001(\t\022\024\n\014hwnd_"
  "browser\030\003 \001(\006\"\207\001\n\016CMsgURLChanged\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010postDat"
  "a\030\003 \001(\t\022\023\n\013bIsRedirect\030\004 \001(\010\022\021\n\tpagetitl"
  "e\030\005 \001(\t\022\026\n\016bNewNavigation\030\006 \001(\010\")\n\013CHTML"
  "Header\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\274\001\n\025C"
  "HTMLPageSecurityInfo\022\030\n\tbIsSecure\030\001 \001(\010:"
  "\005false\022\034\n\rbHasCertError\030\002 \001(\010:\005false\022\022\n\n"
  "issuerName\030\003 \001(\t\022\020\n\010certName\030\004 \001(\t\022\025\n\nce"
  "rtExpiry\030\005 \001(\005:\0010\022\024\n\tnCertBits\030\006 \001(\005:\0010\022"
  "\030\n\tbIsEVCert\030\007 \001(\010:\005false\"M\n\023CMsgFinishe"
  "dRequest\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030"
  "\002 \001(\t\022\021\n\tpageTitle\030\003 \001(\t\"v\n\021CMsgLoadedRe"
  "quest\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001"
  "(\t\022\021\n\tpageTitle\030\003 \001(\t\022)\n\007headers\030\005 \003(\0132\030"
  ".proto.steam.CHTMLHeader\"r\n\020CMsgPageSecu"
  "rity\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001("
  "\t\0229\n\rsecurity_info\030\003 \001(\0132\".proto.steam.C"
  "HTMLPageSecurityInfo\"n\n\020CMsgStartRequest"
  "\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\016\n"
  "\006target\030\003 \001(\t\022\020\n\010postData\030\004 \001(\t\022\023\n\013bIsRe"
  "direct\030\005 \001(\010\"B\n\030CMsgStartRequestResponse"
  "\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006bAllow\030\002 \001(\010"
  "\"\'\n\rCMsgShowPopup\022\026\n\016browser_handle\030\001 \001("
  "\r\"\'\n\rCMsgHidePopup\022\026\n\016browser_handle\030\001 \001"
  "(\r\"Y\n\rCMsgSizePopup\022\026\n\016browser_handle\030\001 "
  "\001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\014\n\004wide\030\004 \001(\r\022"
  "\014\n\004tall\030\005 \001(\r\"J\n\016CMsgOpenNewTab\022\026\n\016brows"
  "er_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\023\n\013bForegro"
  "und\030\003 \001(\010\"\264\001\n\023CMsgPopupHTMLWindow\022\026\n\016bro"
  "wser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\026\n\001x\030\003 \001("
  "\005:\013-2147483648\022\026\n\001y\030\004 \001(\005:\013-2147483648\022\014"
  "\n\004wide\030\005 \001(\r\022\014\n\004tall\030\006 \001(\r\022\023\n\013popup_inde"
  "x\030\007 \001(\r\022\027\n\017trusted_creator\030\010 \001(\010\"E\n\033CMsg"
  "PopupHTMLWindowResponse\022\026\n\016browser_handl"
  "e\030\001 \001(\r\022\016\n\006bAllow\030\002 \001(\010\"9\n\020CMsgSetHTMLTi"
  "tle\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005title\030\002 \001"
  "(\t\":\n\023CMsgLoadingResource\022\026\n\016browser_han"
  "dle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\"6\n\016CMsgStatusText"
  "\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"\214"
  "\001\n\rCMsgSetCursor\022\026\n\016browser_handle\030\001 \001(\r"
  "\022\016\n\006cursor\030\002 \001(\r\022\023\n\013custom_data\030\003 \001(\014\022\014\n"
  "\004wide\030\004 \001(\r\022\014\n\004tall\030\005 \001(\r\022\020\n\010xhotspot\030\006 "
  "\001(\r\022\020\n\010yhotspot\030\007 \001(\r\"P\n\022CMsgFileLoadDia"
  "log\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005title\030\002 \001"
  "(\t\022\023\n\013initialFile\030\003 \001(\t\"C\n\032CMsgFileLoadD"
  "ialogResponse\022\026\n\016browser_handle\030\001 \001(\r\022\r\n"
  "\005files\030\002 \003(\t\"7\n\017CMsgShowToolTip\022\026\n\016brows"
  "er_handle\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"9\n\021CMsgUpd"
  "ateToolTip\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004te"
  "xt\030\002 \001(\t\")\n\017CMsgHideToolTip\022\026\n\016browser_h"
  "andle\030\001 \001(\r\"Q\n\021CMsgSearchResults\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\022\023\n\013activeMatch\030\002 \001(\005\022\017\n"
  "\007results\030\003 \001(\005\"#\n\tCMsgClose\022\026\n\016browser_h"
  "andle\030\001 \001(\r\"\212\001\n\031CMsgSetSharedPaintBuffer"
  "s\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004wide\030\002 \001(\r\022"
  "\014\n\004tall\030\003 \001(\r\022\022\n\nsource_pid\030\004 \001(\004\022\025\n\rsou"
  "rce_handle\030\005 \001(\004\022\016\n\006handle\030\006 \001(\004\"3\n\031CMsg"
  "AckSharedPaintBuffers\022\026\n\016browser_handle\030"
  "\001 \001(\r\"q\n\016CMsgNeedsPaint\022\026\n\016browser_handl"
  "e\030\001 \001(\r\022\017\n\007scrollx\030\n \001(\r\022\017\n\007scrolly\030\013 \001("
  "\r\022\021\n\tpagescale\030\014 \001(\002\022\022\n\npageserial\030\017 \001(\r"
  "\"\257\001\n\023CMsgComboNeedsPaint\022\026\n\016browser_hand"
  "le\030\001 \001(\r\022\014\n\004rgba\030\002 \001(\004\022\030\n\rcombobox_wide\030"
  "\003 \001(\r:\0010\022\030\n\rcombobox_tall\030\004 \001(\r:\0010\022\037\n\024sh"
  "ared_memory_handle\030\005 \001(\004:\0010\022\035\n\022shared_me"
  "mory_size\030\007 \001(\004:\0010\"\263\001\n\033CMsgNeedsSharedTe"
  "xturePaint\022\026\n\016browser_handle\030\001 \001(\r\022\024\n\014sh"
  "are_handle\030\002 \001(\r\022\r\n\005width\030\003 \001(\r\022\016\n\006heigh"
  "t\030\004 \001(\r\022\017\n\007scrollx\030\005 \001(\r\022\017\n\007scrolly\030\006 \001("
  "\r\022\021\n\tpagescale\030\007 \001(\002\022\022\n\npageserial\030\010 \001(\r"
  "\"\235\001\n\033CMsgGameOverlayTexturePaint\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\022\r\n\005width\030\003 \001(\r\022\016\n\006heigh"
  "t\030\004 \001(\r\022\017\n\007scrollx\030\005 \001(\r\022\017\n\007scrolly\030\006 \001("
  "\r\022\021\n\tpagescale\030\007 \001(\002\022\022\n\npageserial\030\010 \001(\r"
  "\"%\n\013CMsgGetZoom\022\026\n\016browser_handle\030\001 \001(\r\""
  ";\n\023CMsgGetZoomResponse\022\026\n\016browser_handle"
  "\030\001 \001(\r\022\014\n\004zoom\030\002 \001(\002\"B\n\022CMsgLinkAtPositi"
  "on\022\026\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n"
  "\001y\030\003 \001(\r\"z\n\032CMsgLinkAtPositionResponse\022\026"
  "\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003"
  " \001(\r\022\013\n\003url\030\004 \001(\t\022\021\n\tblivelink\030\005 \001(\010\022\016\n\006"
  "binput\030\006 \001(\010\"K\n\033CMsgZoomToElementAtPosit"
  "ion\022\026\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t"
  "\n\001y\030\003 \001(\r\"^\n#CMsgZoomToElementAtPosition"
  "Response\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005scal"
  "e\030\002 \001(\002\022\020\n\010duration\030\003 \001(\002\"S\n\024CMsgScalePa"
  "geToValue\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005sca"
  "le\030\002 \001(\002\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\"D\n\034CMsgSc"
  "alePageToValueResponse\022\026\n\016browser_handle"
  "\030\001 \001(\r\022\014\n\004zoom\030\002 \001(\002\"j\n\022CMsgSavePageToJP"
  "EG\022\026\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022"
  "\020\n\010filename\030\003 \001(\t\022\r\n\005width\030\004 \001(\r\022\016\n\006heig"
  "ht\030\005 \001(\r\"S\n\032CMsgSavePageToJPEGResponse\022\026"
  "\n\016browser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010f"
  "ilename\030\003 \001(\t\"6\n\013CMsgJSAlert\022\026\n\016browser_"
  "handle\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\"8\n\rCMsgJSC"
  "onfirm\022\026\n\016browser_handle\030\001 \001(\r\022\017\n\007messag"
  "e\030\002 \001(\t\">\n\024CMsgJSDialogResponse\022\026\n\016brows"
  "er_handle\030\001 \001(\r\022\016\n\006result\030\002 \001(\010\"V\n\027CMsgC"
  "anGoBackAndForward\022\026\n\016browser_handle\030\001 \001"
  "(\r\022\017\n\007bgoback\030\002 \001(\010\022\022\n\nbgoforward\030\003 \001(\010\""
  "I\n\020CMsgOpenSteamURL\022\026\n\016browser_handle\030\001 "
  "\001(\r\022\013\n\003url\030\002 \001(\t\022\020\n\010referrer\030\003 \001(\t\"z\n\rCM"
  "sgSetCookie\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022"
  "\014\n\004path\030\003 \001(\t\022\014\n\004host\030\004 \001(\t\022\017\n\007expires\030\005"
  " \001(\r\022\016\n\006secure\030\006 \001(\010\022\020\n\010httponly\030\007 \001(\010\"J"
  "\n\026CMsgSetTargetFrameRate\022\026\n\016browser_hand"
  "le\030\001 \001(\r\022\030\n\020nTargetFrameRate\030\002 \001(\r\"*\n\020CM"
  "sgPauseRepaint\022\026\n\016browser_handle\030\001 \001(\r\")"
  "\n\017CMsgFullRepaint\022\026\n\016browser_handle\030\001 \001("
  "\r\"/\n\025CMsgRequestFullScreen\022\026\n\016browser_ha"
  "ndle\030\001 \001(\r\",\n\022CMsgExitFullScreen\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\"4\n\032CMsgToggleFindInPage"
  "Dialog\022\026\n\016browser_handle\030\001 \001(\r\"0\n\026CMsgSe"
  "tPIDShuttingDown\022\026\n\016browser_handle\030\001 \001(\r"
  "\"9\n\037CMsgDisableBackgroundThrottling\022\026\n\016b"
  "rowser_handle\030\001 \001(\r\"0\n\026CMsgAckPIDShuttin"
  "gDown\022\026\n\016browser_handle\030\001 \001(\r\";\n\024CMsgGet"
  "CookiesForURL\022\026\n\016browser_handle\030\001 \001(\r\022\013\n"
  "\003url\030\002 \001(\t\"D\n\007CCookie\022\014\n\004name\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\014\n\004path\030\004 \001(\t"
  "\"j\n\034CMsgGetCookiesForURLResponse\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\022\013\n\003url\030\002 \001(\t\022%\n\007cookies"
  "\030\003 \003(\0132\024.proto.steam.CCookie\"\252\001\n\020CMsgNod"
  "eHasFocus\022\026\n\016browser_handle\030\001 \001(\r\022\016\n\006bIn"
  "put\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\022\026\n\016elementtagnam"
  "e\030\004 \001(\t\022\030\n\020searchbuttontext\030\005 \001(\t\022\032\n\022bHa"
  "sMultipleInputs\030\006 \001(\010\022\022\n\ninput_type\030\007 \001("
  "\t\"2\n\030CMsgZoomToFocusedElement\022\026\n\016browser"
  "_handle\030\001 \001(\r\"8\n\036CMsgCloseFullScreenFlas"
  "hIfOpen\022\026\n\016browser_handle\030\001 \001(\r\"=\n#CMsgP"
  "auseFullScreenFlashMovieIfOpen\022\026\n\016browse"
  "r_handle\030\001 \001(\r\"-\n\023CMsgFocusedNodeText\022\026\n"
  "\016browser_handle\030\001 \001(\r\"D\n\033CMsgFocusedNode"
  "TextResponse\022\026\n\016browser_handle\030\001 \001(\r\022\r\n\005"
  "value\030\002 \001(\t\"\037\n\013CMsgBuildID\022\020\n\010build_id\030\001"
  " \001(\004\"*\n\020CMsgOpenDevTools\022\026\n\016browser_hand"
  "le\030\001 \001(\r\"+\n\021CMsgCloseDevTools\022\026\n\016browser"
  "_handle\030\001 \001(\r\"=\n\016CMsgUnlockH264\022\026\n\016brows"
  "er_handle\030\001 \001(\r\022\023\n\013unlock_code\030\002 \001(\t\"\227\002\n"
  "\034CMsgScreenInformationChanged\022\026\n\016browser"
  "_handle\030\001 \001(\r\022\026\n\016override_width\030\002 \001(\r\022\027\n"
  "\017override_height\030\003 \001(\r\022\024\n\014monitor_left\030\004"
  " \001(\r\022\023\n\013monitor_top\030\005 \001(\r\022\025\n\rmonitor_rig"
  "ht\030\006 \001(\r\022\026\n\016monitor_bottom\030\007 \001(\r\022\023\n\013usab"
  "le_left\030\010 \001(\r\022\022\n\nusable_top\030\t \001(\r\022\024\n\014usa"
  "ble_right\030\n \001(\r\022\025\n\rusable_bottom\030\013 \001(\r\"-"
  "\n\023CMsgClearAllCookies\022\026\n\016browser_handle\030"
  "\001 \001(\r\"<\n\rCMsgScreenDPI\022\026\n\016browser_handle"
  "\030\001 \001(\r\022\023\n\013dpi_scaling\030\002 \001(\002\")\n\026CMsgAuthe"
  "dSteamDomains\022\017\n\007domains\030\001 \003(\t\"%\n\023CMsgSt"
  "eamAuthNeeded\022\016\n\006filler\030\001 \001(\010\"*\n\027CMsgSte"
  "amAuthCookiesSet\022\017\n\007success\030\001 \001(\010\"\226\001\n\024CM"
  "sgJSRegisterMethod\022\026\n\016browser_handle\030\001 \001"
  "(\r\022\014\n\004name\030\002 \001(\t\022X\n\013method_type\030\003 \001(\0162\"."
  "proto.steam.EJSRegisterMethodType:\037k_EJS"
  "RegisterMethodType_Invalid\"\?\n\021CJSMethodA"
  "rgument\022\021\n\tjson_data\030\001 \001(\t\022\027\n\017function_h"
  "andle\030\002 \001(\004\"\363\002\n\013CMsgJSValue\022\022\n\nbool_valu"
  "e\030\001 \001(\010\022\021\n\tint_value\030\002 \001(\005\022\022\n\nuint_value"
  "\030\003 \001(\r\022\024\n\014double_value\030\004 \001(\001\022\024\n\014string_v"
  "alue\030\005 \001(\t\022\027\n\017function_handle\030\006 \001(\004\022\020\n\010i"
  "s_array\030\010 \001(\010\022.\n\014array_values\030\t \003(\0132\030.pr"
  "oto.steam.CMsgJSValue\022\021\n\tis_object\030\n \001(\010"
  "\022D\n\021object_properties\030\013 \003(\0132).proto.stea"
  "m.CMsgJSValue.JSObjectProperty\032I\n\020JSObje"
  "ctProperty\022\014\n\004name\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132"
  "\030.proto.steam.CMsgJSValue\"e\n\020CMsgJSMetho"
  "dCall\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004name\030\002 "
  "\001(\t\022+\n\targuments\030\003 \003(\0132\030.proto.steam.CMs"
  "gJSValue\"u\n\025CMsgJSExecuteCallback\022\026\n\016bro"
  "wser_handle\030\001 \001(\r\022\027\n\017function_handle\030\002 \001"
  "(\004\022+\n\targuments\030\003 \003(\0132\030.proto.steam.CMsg"
  "JSValue\"H\n\025CMsgJSReleaseCallback\022\026\n\016brow"
  "ser_handle\030\001 \001(\r\022\027\n\017function_handle\030\002 \001("
  "\004\"A\n\024CMsgJSRaiseException\022\026\n\016browser_han"
  "dle\030\001 \001(\r\022\021\n\texception\030\002 \001(\t\"[\n\024CMsgLoad"
  "Localization\022\026\n\016browser_handle\030\001 \001(\r\022\031\n\021"
  "localization_path\030\002 \001(\t\022\020\n\010language\030\003 \001("
  "\t\"M\n\020CMsgJumpListLink\022\024\n\014display_name\030\001 "
  "\001(\t\022\020\n\010url_link\030\002 \001(\t\022\021\n\ticon_path\030\003 \001(\t"
  "\"^\n\022CMSgJumpListMRUApp\022\r\n\005appid\030\001 \001(\r\022\024\n"
  "\014display_name\030\002 \001(\t\022\020\n\010url_link\030\003 \001(\t\022\021\n"
  "\ticon_path\030\004 \001(\t\"\225\001\n\017CMsgSetJumpList\022\022\n\n"
  "steam_path\030\001 \001(\t\022\021\n\tmru_title\030\002 \001(\t\022-\n\004a"
  "pps\030\003 \003(\0132\037.proto.steam.CMSgJumpListMRUA"
  "pp\022,\n\005links\030\004 \003(\0132\035.proto.steam.CMsgJump"
  "ListLink\"J\n\034CMsgSetGameOverlayTargetPIDs"
  "\022\026\n\016browser_handle\030\001 \001(\r\022\022\n\ntarget_pid\030\002"
  " \003(\r\"d\n\036CMsgGameOverlayTargetTextureID\022\026"
  "\n\016browser_handle\030\001 \001(\r\022\022\n\ntarget_pid\030\002 \001"
  "(\r\022\026\n\016texture_handle\030\003 \001(\r\"\327\001\n\033CMsgDragg"
  "ableRegionsChanged\022\026\n\016browser_handle\030\001 \001"
  "(\r\022F\n\005rects\030\002 \003(\01327.proto.steam.CMsgDrag"
  "gableRegionsChanged.DraggableRects\032X\n\016Dr"
  "aggableRects\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005wi"
  "dth\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\022\021\n\tdraggable\030\005"
  " \001(\010\"N\n\025CMsgResizeGripChanged\022\026\n\016browser"
  "_handle\030\001 \001(\r\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003"
  " \001(\005\"d\n\025CMsgSetWindowPosition\022\026\n\016browser"
  "_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\r\n\005w"
  "idth\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\"(\n\016CMsgShowWi"
  "ndow\022\026\n\016browser_handle\030\001 \001(\r\"(\n\016CMsgHide"
  "Window\022\026\n\016browser_handle\030\001 \001(\r\"0\n\026CMsgBr"
  "ingWindowToFront\022\026\n\016browser_handle\030\001 \001(\r"
  "\"1\n\027CMsgSetForegroundWindow\022\026\n\016browser_h"
  "andle\030\001 \001(\r\"3\n\031CMsgMaximizeRestoreWindow"
  "\022\026\n\016browser_handle\030\001 \001(\r\",\n\022CMsgMinimize"
  "Window\022\026\n\016browser_handle\030\001 \001(\r\"4\n\032CMsgSh"
  "owBrowserContextMenu\022\026\n\016browser_handle\030\001"
  " \001(\r\"=\n\025CMsgImeSetComposition\022\026\n\016browser"
  "_handle\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"9\n\021CMsgImeCo"
  "mmitText\022\026\n\016browser_handle\030\001 \001(\r\022\014\n\004text"
  "\030\002 \001(\t\"2\n\030CMsgImeCancelComposition\022\026\n\016br"
  "owser_handle\030\001 \001(\r\"N\n\036CMsgImeComposition"
  "RangeChanged\022\026\n\016browser_handle\030\001 \001(\r\022\t\n\001"
  "x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"B\n\022CMsgInspectElement"
  "\022\026\n\016browser_handle\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y"
  "\030\003 \001(\r*\255\001\n\025EJSRegisterMethodType\022#\n\037k_EJ"
  "SRegisterMethodType_Invalid\020\000\022$\n k_EJSRe"
  "gisterMethodType_Function\020\001\022$\n k_EJSRegi"
  "sterMethodType_Callback\020\002\022#\n\037k_EJSRegist"
  "erMethodType_Promise\020\003B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_htmlmessages_2eproto = {
  false, InitDefaults_htmlmessages_2eproto, 
  descriptor_table_protodef_htmlmessages_2eproto,
  "htmlmessages.proto", &assign_descriptors_table_htmlmessages_2eproto, 12589,
};

void AddDescriptors_htmlmessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_htmlmessages_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_htmlmessages_2eproto = []() { AddDescriptors_htmlmessages_2eproto(); return true; }();
namespace proto {
namespace steam {
const ::google::protobuf::EnumDescriptor* EJSRegisterMethodType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_htmlmessages_2eproto);
  return file_level_enum_descriptors_htmlmessages_2eproto[0];
}
bool EJSRegisterMethodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgKeyUp::InitAsDefaultInstance() {
}
class CMsgKeyUp::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgKeyUp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_keycode(CMsgKeyUp* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_modifiers(CMsgKeyUp* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgKeyUp::kBrowserHandleFieldNumber;
const int CMsgKeyUp::kKeyCodeFieldNumber;
const int CMsgKeyUp::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgKeyUp::CMsgKeyUp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgKeyUp)
}
CMsgKeyUp::CMsgKeyUp(const CMsgKeyUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgKeyUp)
}

void CMsgKeyUp::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgKeyUp::~CMsgKeyUp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgKeyUp)
  SharedDtor();
}

void CMsgKeyUp::SharedDtor() {
}

void CMsgKeyUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgKeyUp& CMsgKeyUp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgKeyUp_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgKeyUp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgKeyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgKeyUp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgKeyUp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 keyCode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_keycode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_modifiers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgKeyUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgKeyUp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 keyCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_keycode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_modifiers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgKeyUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgKeyUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgKeyUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgKeyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keycode(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgKeyUp)
}

::google::protobuf::uint8* CMsgKeyUp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgKeyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keycode(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgKeyUp)
  return target;
}

size_t CMsgKeyUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgKeyUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 keyCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keycode());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgKeyUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgKeyUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKeyUp* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgKeyUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgKeyUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgKeyUp)
    MergeFrom(*source);
  }
}

void CMsgKeyUp::MergeFrom(const CMsgKeyUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgKeyUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      keycode_ = from.keycode_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgKeyUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgKeyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyUp::CopyFrom(const CMsgKeyUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgKeyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyUp::IsInitialized() const {
  return true;
}

void CMsgKeyUp::Swap(CMsgKeyUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgKeyUp::InternalSwap(CMsgKeyUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(keycode_, other->keycode_);
  swap(modifiers_, other->modifiers_);
}

::google::protobuf::Metadata CMsgKeyUp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgKeyDown::InitAsDefaultInstance() {
}
class CMsgKeyDown::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgKeyDown* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_keycode(CMsgKeyDown* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_modifiers(CMsgKeyDown* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_is_system_key(CMsgKeyDown* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgKeyDown::kBrowserHandleFieldNumber;
const int CMsgKeyDown::kKeyCodeFieldNumber;
const int CMsgKeyDown::kModifiersFieldNumber;
const int CMsgKeyDown::kIsSystemKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgKeyDown::CMsgKeyDown()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgKeyDown)
}
CMsgKeyDown::CMsgKeyDown(const CMsgKeyDown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_system_key_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(is_system_key_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgKeyDown)
}

void CMsgKeyDown::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_system_key_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(is_system_key_));
}

CMsgKeyDown::~CMsgKeyDown() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgKeyDown)
  SharedDtor();
}

void CMsgKeyDown::SharedDtor() {
}

void CMsgKeyDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgKeyDown& CMsgKeyDown::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgKeyDown_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgKeyDown::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgKeyDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_system_key_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(is_system_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgKeyDown::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgKeyDown*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 keyCode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_keycode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_modifiers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_system_key = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_system_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgKeyDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgKeyDown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 keyCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_keycode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_modifiers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_system_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_system_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgKeyDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgKeyDown)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgKeyDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgKeyDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keycode(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  // optional bool is_system_key = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_system_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgKeyDown)
}

::google::protobuf::uint8* CMsgKeyDown::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgKeyDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 keyCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keycode(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  // optional bool is_system_key = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_system_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgKeyDown)
  return target;
}

size_t CMsgKeyDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgKeyDown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 keyCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keycode());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

    // optional bool is_system_key = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgKeyDown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgKeyDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKeyDown* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgKeyDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgKeyDown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgKeyDown)
    MergeFrom(*source);
  }
}

void CMsgKeyDown::MergeFrom(const CMsgKeyDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgKeyDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      keycode_ = from.keycode_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_system_key_ = from.is_system_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgKeyDown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgKeyDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyDown::CopyFrom(const CMsgKeyDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgKeyDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyDown::IsInitialized() const {
  return true;
}

void CMsgKeyDown::Swap(CMsgKeyDown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgKeyDown::InternalSwap(CMsgKeyDown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(keycode_, other->keycode_);
  swap(modifiers_, other->modifiers_);
  swap(is_system_key_, other->is_system_key_);
}

::google::protobuf::Metadata CMsgKeyDown::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgKeyChar::InitAsDefaultInstance() {
}
class CMsgKeyChar::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgKeyChar* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_unichar(CMsgKeyChar* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_modifiers(CMsgKeyChar* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgKeyChar::kBrowserHandleFieldNumber;
const int CMsgKeyChar::kUnicharFieldNumber;
const int CMsgKeyChar::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgKeyChar::CMsgKeyChar()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgKeyChar)
}
CMsgKeyChar::CMsgKeyChar(const CMsgKeyChar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgKeyChar)
}

void CMsgKeyChar::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgKeyChar::~CMsgKeyChar() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgKeyChar)
  SharedDtor();
}

void CMsgKeyChar::SharedDtor() {
}

void CMsgKeyChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgKeyChar& CMsgKeyChar::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgKeyChar_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgKeyChar::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgKeyChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgKeyChar::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgKeyChar*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 unichar = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_unichar(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_modifiers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgKeyChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgKeyChar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unichar = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_unichar(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unichar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_modifiers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgKeyChar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgKeyChar)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgKeyChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgKeyChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 unichar = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unichar(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgKeyChar)
}

::google::protobuf::uint8* CMsgKeyChar::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgKeyChar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 unichar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unichar(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgKeyChar)
  return target;
}

size_t CMsgKeyChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgKeyChar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 unichar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unichar());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgKeyChar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgKeyChar)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKeyChar* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgKeyChar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgKeyChar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgKeyChar)
    MergeFrom(*source);
  }
}

void CMsgKeyChar::MergeFrom(const CMsgKeyChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgKeyChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      unichar_ = from.unichar_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgKeyChar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgKeyChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyChar::CopyFrom(const CMsgKeyChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgKeyChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyChar::IsInitialized() const {
  return true;
}

void CMsgKeyChar::Swap(CMsgKeyChar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgKeyChar::InternalSwap(CMsgKeyChar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(unichar_, other->unichar_);
  swap(modifiers_, other->modifiers_);
}

::google::protobuf::Metadata CMsgKeyChar::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMouseDown::InitAsDefaultInstance() {
}
class CMsgMouseDown::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgMouseDown* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_mouse_button(CMsgMouseDown* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_modifiers(CMsgMouseDown* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseDown::kBrowserHandleFieldNumber;
const int CMsgMouseDown::kMouseButtonFieldNumber;
const int CMsgMouseDown::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseDown::CMsgMouseDown()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseDown)
}
CMsgMouseDown::CMsgMouseDown(const CMsgMouseDown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseDown)
}

void CMsgMouseDown::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgMouseDown::~CMsgMouseDown() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseDown)
  SharedDtor();
}

void CMsgMouseDown::SharedDtor() {
}

void CMsgMouseDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMouseDown& CMsgMouseDown::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMouseDown_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgMouseDown::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMouseDown::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMouseDown*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 mouse_button = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_mouse_button(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_modifiers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMouseDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseDown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mouse_button = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_mouse_button(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_modifiers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseDown)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMouseDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mouse_button(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseDown)
}

::google::protobuf::uint8* CMsgMouseDown::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mouse_button(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseDown)
  return target;
}

size_t CMsgMouseDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseDown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 mouse_button = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_button());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseDown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseDown* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMouseDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseDown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseDown)
    MergeFrom(*source);
  }
}

void CMsgMouseDown::MergeFrom(const CMsgMouseDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      mouse_button_ = from.mouse_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseDown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseDown::CopyFrom(const CMsgMouseDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseDown::IsInitialized() const {
  return true;
}

void CMsgMouseDown::Swap(CMsgMouseDown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseDown::InternalSwap(CMsgMouseDown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(mouse_button_, other->mouse_button_);
  swap(modifiers_, other->modifiers_);
}

::google::protobuf::Metadata CMsgMouseDown::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMouseUp::InitAsDefaultInstance() {
}
class CMsgMouseUp::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgMouseUp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_mouse_button(CMsgMouseUp* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_modifiers(CMsgMouseUp* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_is_off_panel(CMsgMouseUp* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_x(CMsgMouseUp* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_y(CMsgMouseUp* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseUp::kBrowserHandleFieldNumber;
const int CMsgMouseUp::kMouseButtonFieldNumber;
const int CMsgMouseUp::kModifiersFieldNumber;
const int CMsgMouseUp::kIsOffPanelFieldNumber;
const int CMsgMouseUp::kXFieldNumber;
const int CMsgMouseUp::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseUp::CMsgMouseUp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseUp)
}
CMsgMouseUp::CMsgMouseUp(const CMsgMouseUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseUp)
}

void CMsgMouseUp::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgMouseUp::~CMsgMouseUp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseUp)
  SharedDtor();
}

void CMsgMouseUp::SharedDtor() {
}

void CMsgMouseUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMouseUp& CMsgMouseUp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMouseUp_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgMouseUp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMouseUp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMouseUp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 mouse_button = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_mouse_button(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_modifiers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_off_panel = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_off_panel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 x = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 y = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMouseUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseUp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mouse_button = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_mouse_button(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_modifiers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_off_panel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_is_off_panel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_off_panel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMouseUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mouse_button(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  // optional bool is_off_panel = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_off_panel(), output);
  }

  // optional int32 x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->x(), output);
  }

  // optional int32 y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseUp)
}

::google::protobuf::uint8* CMsgMouseUp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mouse_button(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  // optional bool is_off_panel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_off_panel(), target);
  }

  // optional int32 x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->x(), target);
  }

  // optional int32 y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseUp)
  return target;
}

size_t CMsgMouseUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 mouse_button = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_button());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

    // optional bool is_off_panel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 x = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseUp* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMouseUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseUp)
    MergeFrom(*source);
  }
}

void CMsgMouseUp::MergeFrom(const CMsgMouseUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      mouse_button_ = from.mouse_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_off_panel_ = from.is_off_panel_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseUp::CopyFrom(const CMsgMouseUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseUp::IsInitialized() const {
  return true;
}

void CMsgMouseUp::Swap(CMsgMouseUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseUp::InternalSwap(CMsgMouseUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(mouse_button_, other->mouse_button_);
  swap(modifiers_, other->modifiers_);
  swap(is_off_panel_, other->is_off_panel_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata CMsgMouseUp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMouseDblClick::InitAsDefaultInstance() {
}
class CMsgMouseDblClick::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgMouseDblClick* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_mouse_button(CMsgMouseDblClick* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_modifiers(CMsgMouseDblClick* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseDblClick::kBrowserHandleFieldNumber;
const int CMsgMouseDblClick::kMouseButtonFieldNumber;
const int CMsgMouseDblClick::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseDblClick::CMsgMouseDblClick()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseDblClick)
}
CMsgMouseDblClick::CMsgMouseDblClick(const CMsgMouseDblClick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseDblClick)
}

void CMsgMouseDblClick::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgMouseDblClick::~CMsgMouseDblClick() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseDblClick)
  SharedDtor();
}

void CMsgMouseDblClick::SharedDtor() {
}

void CMsgMouseDblClick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMouseDblClick& CMsgMouseDblClick::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMouseDblClick_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgMouseDblClick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseDblClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMouseDblClick::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMouseDblClick*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 mouse_button = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_mouse_button(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_modifiers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMouseDblClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseDblClick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mouse_button = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_mouse_button(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouse_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_modifiers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseDblClick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseDblClick)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMouseDblClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseDblClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mouse_button(), output);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseDblClick)
}

::google::protobuf::uint8* CMsgMouseDblClick::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseDblClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 mouse_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mouse_button(), target);
  }

  // optional uint32 modifiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseDblClick)
  return target;
}

size_t CMsgMouseDblClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseDblClick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 mouse_button = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouse_button());
    }

    // optional uint32 modifiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseDblClick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseDblClick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseDblClick* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMouseDblClick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseDblClick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseDblClick)
    MergeFrom(*source);
  }
}

void CMsgMouseDblClick::MergeFrom(const CMsgMouseDblClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseDblClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      mouse_button_ = from.mouse_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseDblClick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseDblClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseDblClick::CopyFrom(const CMsgMouseDblClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseDblClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseDblClick::IsInitialized() const {
  return true;
}

void CMsgMouseDblClick::Swap(CMsgMouseDblClick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseDblClick::InternalSwap(CMsgMouseDblClick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(mouse_button_, other->mouse_button_);
  swap(modifiers_, other->modifiers_);
}

::google::protobuf::Metadata CMsgMouseDblClick::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMouseWheel::InitAsDefaultInstance() {
}
class CMsgMouseWheel::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgMouseWheel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_deltax(CMsgMouseWheel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_deltay(CMsgMouseWheel* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_modifiers(CMsgMouseWheel* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseWheel::kBrowserHandleFieldNumber;
const int CMsgMouseWheel::kDeltaxFieldNumber;
const int CMsgMouseWheel::kDeltayFieldNumber;
const int CMsgMouseWheel::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseWheel::CMsgMouseWheel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseWheel)
}
CMsgMouseWheel::CMsgMouseWheel(const CMsgMouseWheel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseWheel)
}

void CMsgMouseWheel::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgMouseWheel::~CMsgMouseWheel() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseWheel)
  SharedDtor();
}

void CMsgMouseWheel::SharedDtor() {
}

void CMsgMouseWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMouseWheel& CMsgMouseWheel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMouseWheel_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgMouseWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMouseWheel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMouseWheel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 deltax = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_deltax(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 deltay = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_deltay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 modifiers = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_modifiers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMouseWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseWheel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 deltax = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_deltax(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deltax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 deltay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_deltay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deltay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_modifiers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseWheel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMouseWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 deltax = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deltax(), output);
  }

  // optional int32 deltay = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deltay(), output);
  }

  // optional uint32 modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseWheel)
}

::google::protobuf::uint8* CMsgMouseWheel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 deltax = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deltax(), target);
  }

  // optional int32 deltay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deltay(), target);
  }

  // optional uint32 modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseWheel)
  return target;
}

size_t CMsgMouseWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseWheel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 deltax = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deltax());
    }

    // optional int32 deltay = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deltay());
    }

    // optional uint32 modifiers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseWheel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseWheel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMouseWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseWheel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseWheel)
    MergeFrom(*source);
  }
}

void CMsgMouseWheel::MergeFrom(const CMsgMouseWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      deltax_ = from.deltax_;
    }
    if (cached_has_bits & 0x00000004u) {
      deltay_ = from.deltay_;
    }
    if (cached_has_bits & 0x00000008u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseWheel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseWheel::CopyFrom(const CMsgMouseWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseWheel::IsInitialized() const {
  return true;
}

void CMsgMouseWheel::Swap(CMsgMouseWheel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseWheel::InternalSwap(CMsgMouseWheel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(deltax_, other->deltax_);
  swap(deltay_, other->deltay_);
  swap(modifiers_, other->modifiers_);
}

::google::protobuf::Metadata CMsgMouseWheel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMouseMove::InitAsDefaultInstance() {
}
class CMsgMouseMove::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgMouseMove* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgMouseMove* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(CMsgMouseMove* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_modifiers(CMsgMouseMove* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseMove::kBrowserHandleFieldNumber;
const int CMsgMouseMove::kXFieldNumber;
const int CMsgMouseMove::kYFieldNumber;
const int CMsgMouseMove::kModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseMove::CMsgMouseMove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseMove)
}
CMsgMouseMove::CMsgMouseMove(const CMsgMouseMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&modifiers_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseMove)
}

void CMsgMouseMove::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modifiers_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
}

CMsgMouseMove::~CMsgMouseMove() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseMove)
  SharedDtor();
}

void CMsgMouseMove::SharedDtor() {
}

void CMsgMouseMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMouseMove& CMsgMouseMove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMouseMove_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgMouseMove::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifiers_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMouseMove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMouseMove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 modifiers = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_modifiers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMouseMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseMove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifiers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_modifiers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseMove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMouseMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional uint32 modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseMove)
}

::google::protobuf::uint8* CMsgMouseMove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional uint32 modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseMove)
  return target;
}

size_t CMsgMouseMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 modifiers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseMove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseMove* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMouseMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseMove)
    MergeFrom(*source);
  }
}

void CMsgMouseMove::MergeFrom(const CMsgMouseMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      modifiers_ = from.modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMouseMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseMove::CopyFrom(const CMsgMouseMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseMove::IsInitialized() const {
  return true;
}

void CMsgMouseMove::Swap(CMsgMouseMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseMove::InternalSwap(CMsgMouseMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(modifiers_, other->modifiers_);
}

::google::protobuf::Metadata CMsgMouseMove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMouseLeave::InitAsDefaultInstance() {
}
class CMsgMouseLeave::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgMouseLeave* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMouseLeave::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMouseLeave::CMsgMouseLeave()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMouseLeave)
}
CMsgMouseLeave::CMsgMouseLeave(const CMsgMouseLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMouseLeave)
}

void CMsgMouseLeave::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgMouseLeave::~CMsgMouseLeave() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMouseLeave)
  SharedDtor();
}

void CMsgMouseLeave::SharedDtor() {
}

void CMsgMouseLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMouseLeave& CMsgMouseLeave::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMouseLeave_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgMouseLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMouseLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMouseLeave::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMouseLeave*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMouseLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMouseLeave)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMouseLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMouseLeave)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMouseLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMouseLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMouseLeave)
}

::google::protobuf::uint8* CMsgMouseLeave::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMouseLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMouseLeave)
  return target;
}

size_t CMsgMouseLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMouseLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMouseLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMouseLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMouseLeave* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMouseLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMouseLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMouseLeave)
    MergeFrom(*source);
  }
}

void CMsgMouseLeave::MergeFrom(const CMsgMouseLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMouseLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgMouseLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMouseLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMouseLeave::CopyFrom(const CMsgMouseLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMouseLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMouseLeave::IsInitialized() const {
  return true;
}

void CMsgMouseLeave::Swap(CMsgMouseLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMouseLeave::InternalSwap(CMsgMouseLeave* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgMouseLeave::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBrowserCreate::InitAsDefaultInstance() {
}
class CMsgBrowserCreate::HasBitSetters {
 public:
  static void set_has_request_id(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_useragent(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_user_css(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_native_dropdowns(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_dpi_scaling(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_offscreen(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_initial_width(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_initial_height(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_window_icon(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_borderless(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_vroverlay_key(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_browser_type(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_initial_top(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_initial_left(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_only_allow_trusted_popups(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_initial_url(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_hwnd_parent(CMsgBrowserCreate* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserCreate::kRequestIdFieldNumber;
const int CMsgBrowserCreate::kUseragentFieldNumber;
const int CMsgBrowserCreate::kUserCssFieldNumber;
const int CMsgBrowserCreate::kNativeDropdownsFieldNumber;
const int CMsgBrowserCreate::kDpiScalingFieldNumber;
const int CMsgBrowserCreate::kOffscreenFieldNumber;
const int CMsgBrowserCreate::kInitialWidthFieldNumber;
const int CMsgBrowserCreate::kInitialHeightFieldNumber;
const int CMsgBrowserCreate::kWindowIconFieldNumber;
const int CMsgBrowserCreate::kBorderlessFieldNumber;
const int CMsgBrowserCreate::kVroverlayKeyFieldNumber;
const int CMsgBrowserCreate::kBrowserTypeFieldNumber;
const int CMsgBrowserCreate::kInitialTopFieldNumber;
const int CMsgBrowserCreate::kInitialLeftFieldNumber;
const int CMsgBrowserCreate::kOnlyAllowTrustedPopupsFieldNumber;
const int CMsgBrowserCreate::kInitialUrlFieldNumber;
const int CMsgBrowserCreate::kHwndParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserCreate::CMsgBrowserCreate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserCreate)
}
CMsgBrowserCreate::CMsgBrowserCreate(const CMsgBrowserCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useragent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_useragent()) {
    useragent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useragent_);
  }
  user_css_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_css()) {
    user_css_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_css_);
  }
  window_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_window_icon()) {
    window_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.window_icon_);
  }
  vroverlay_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vroverlay_key()) {
    vroverlay_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vroverlay_key_);
  }
  initial_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_initial_url()) {
    initial_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_url_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_top_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(initial_top_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserCreate)
}

void CMsgBrowserCreate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgBrowserCreate_htmlmessages_2eproto.base);
  useragent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_css_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  window_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vroverlay_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hwnd_parent_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(hwnd_parent_));
  initial_left_ = -2147483647 - 1;
  offscreen_ = true;
  initial_top_ = -2147483647 - 1;
}

CMsgBrowserCreate::~CMsgBrowserCreate() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserCreate)
  SharedDtor();
}

void CMsgBrowserCreate::SharedDtor() {
  useragent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_css_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  window_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vroverlay_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBrowserCreate& CMsgBrowserCreate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBrowserCreate_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBrowserCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      useragent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_css_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      window_icon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      vroverlay_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      initial_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&initial_width_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(initial_width_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&initial_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hwnd_parent_) -
        reinterpret_cast<char*>(&initial_height_)) + sizeof(hwnd_parent_));
    initial_left_ = -2147483647 - 1;
    offscreen_ = true;
  }
  initial_top_ = -2147483647 - 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBrowserCreate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBrowserCreate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string useragent = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserCreate.useragent");
        object = msg->mutable_useragent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string user_css = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserCreate.user_css");
        object = msg->mutable_user_css();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool native_dropdowns = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_native_dropdowns(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float dpi_scaling = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_dpi_scaling(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool offscreen = 8 [default = true];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_offscreen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 initial_width = 9 [default = 0];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_initial_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 initial_height = 10 [default = 0];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_initial_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string window_icon = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserCreate.window_icon");
        object = msg->mutable_window_icon();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool borderless = 12 [default = false];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_borderless(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string vroverlay_key = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserCreate.vroverlay_key");
        object = msg->mutable_vroverlay_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 browser_type = 14 [default = 0];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_browser_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 initial_top = 15 [default = -2147483648];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_initial_top(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 initial_left = 16 [default = -2147483648];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_initial_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool only_allow_trusted_popups = 17 [default = false];
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_only_allow_trusted_popups(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string initial_url = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserCreate.initial_url");
        object = msg->mutable_initial_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 hwnd_parent = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 153) goto handle_unusual;
        msg->set_hwnd_parent(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBrowserCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserCreate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_request_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string useragent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useragent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->useragent().data(), static_cast<int>(this->useragent().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserCreate.useragent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_css = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_css()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_css().data(), static_cast<int>(this->user_css().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserCreate.user_css");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool native_dropdowns = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_native_dropdowns(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &native_dropdowns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dpi_scaling = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_dpi_scaling(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpi_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool offscreen = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_offscreen(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offscreen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_width = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_initial_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_height = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_initial_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string window_icon = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_window_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->window_icon().data(), static_cast<int>(this->window_icon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserCreate.window_icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool borderless = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_borderless(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &borderless_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vroverlay_key = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vroverlay_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vroverlay_key().data(), static_cast<int>(this->vroverlay_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserCreate.vroverlay_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 browser_type = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_browser_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 initial_top = 15 [default = -2147483648];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_initial_top(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 initial_left = 16 [default = -2147483648];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_initial_left(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_allow_trusted_popups = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_only_allow_trusted_popups(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_allow_trusted_popups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string initial_url = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initial_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initial_url().data(), static_cast<int>(this->initial_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserCreate.initial_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hwnd_parent = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (153 & 0xFF)) {
          HasBitSetters::set_has_hwnd_parent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hwnd_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBrowserCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional string useragent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useragent().data(), static_cast<int>(this->useragent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.useragent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->useragent(), output);
  }

  // optional string user_css = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_css().data(), static_cast<int>(this->user_css().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.user_css");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_css(), output);
  }

  // optional bool native_dropdowns = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->native_dropdowns(), output);
  }

  // optional float dpi_scaling = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dpi_scaling(), output);
  }

  // optional bool offscreen = 8 [default = true];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->offscreen(), output);
  }

  // optional uint32 initial_width = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->initial_width(), output);
  }

  // optional uint32 initial_height = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->initial_height(), output);
  }

  // optional string window_icon = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->window_icon().data(), static_cast<int>(this->window_icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.window_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->window_icon(), output);
  }

  // optional bool borderless = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->borderless(), output);
  }

  // optional string vroverlay_key = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vroverlay_key().data(), static_cast<int>(this->vroverlay_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.vroverlay_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->vroverlay_key(), output);
  }

  // optional uint32 browser_type = 14 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->browser_type(), output);
  }

  // optional int32 initial_top = 15 [default = -2147483648];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->initial_top(), output);
  }

  // optional int32 initial_left = 16 [default = -2147483648];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->initial_left(), output);
  }

  // optional bool only_allow_trusted_popups = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->only_allow_trusted_popups(), output);
  }

  // optional string initial_url = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initial_url().data(), static_cast<int>(this->initial_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.initial_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->initial_url(), output);
  }

  // optional fixed64 hwnd_parent = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(19, this->hwnd_parent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserCreate)
}

::google::protobuf::uint8* CMsgBrowserCreate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional string useragent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->useragent().data(), static_cast<int>(this->useragent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.useragent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useragent(), target);
  }

  // optional string user_css = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_css().data(), static_cast<int>(this->user_css().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.user_css");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_css(), target);
  }

  // optional bool native_dropdowns = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->native_dropdowns(), target);
  }

  // optional float dpi_scaling = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dpi_scaling(), target);
  }

  // optional bool offscreen = 8 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->offscreen(), target);
  }

  // optional uint32 initial_width = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->initial_width(), target);
  }

  // optional uint32 initial_height = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->initial_height(), target);
  }

  // optional string window_icon = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->window_icon().data(), static_cast<int>(this->window_icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.window_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->window_icon(), target);
  }

  // optional bool borderless = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->borderless(), target);
  }

  // optional string vroverlay_key = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vroverlay_key().data(), static_cast<int>(this->vroverlay_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.vroverlay_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->vroverlay_key(), target);
  }

  // optional uint32 browser_type = 14 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->browser_type(), target);
  }

  // optional int32 initial_top = 15 [default = -2147483648];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->initial_top(), target);
  }

  // optional int32 initial_left = 16 [default = -2147483648];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->initial_left(), target);
  }

  // optional bool only_allow_trusted_popups = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->only_allow_trusted_popups(), target);
  }

  // optional string initial_url = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initial_url().data(), static_cast<int>(this->initial_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserCreate.initial_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->initial_url(), target);
  }

  // optional fixed64 hwnd_parent = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(19, this->hwnd_parent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserCreate)
  return target;
}

size_t CMsgBrowserCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string useragent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useragent());
    }

    // optional string user_css = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_css());
    }

    // optional string window_icon = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->window_icon());
    }

    // optional string vroverlay_key = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vroverlay_key());
    }

    // optional string initial_url = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initial_url());
    }

    // optional uint32 request_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional float dpi_scaling = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 initial_width = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_width());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 initial_height = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_height());
    }

    // optional bool native_dropdowns = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool borderless = 12 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool only_allow_trusted_popups = 17 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional uint32 browser_type = 14 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_type());
    }

    // optional fixed64 hwnd_parent = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional int32 initial_left = 16 [default = -2147483648];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initial_left());
    }

    // optional bool offscreen = 8 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 initial_top = 15 [default = -2147483648];
  if (cached_has_bits & 0x00010000u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initial_top());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserCreate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBrowserCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserCreate)
    MergeFrom(*source);
  }
}

void CMsgBrowserCreate::MergeFrom(const CMsgBrowserCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      useragent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.useragent_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      user_css_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_css_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      window_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.window_icon_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      vroverlay_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vroverlay_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      initial_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_url_);
    }
    if (cached_has_bits & 0x00000020u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      dpi_scaling_ = from.dpi_scaling_;
    }
    if (cached_has_bits & 0x00000080u) {
      initial_width_ = from.initial_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      initial_height_ = from.initial_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      native_dropdowns_ = from.native_dropdowns_;
    }
    if (cached_has_bits & 0x00000400u) {
      borderless_ = from.borderless_;
    }
    if (cached_has_bits & 0x00000800u) {
      only_allow_trusted_popups_ = from.only_allow_trusted_popups_;
    }
    if (cached_has_bits & 0x00001000u) {
      browser_type_ = from.browser_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      hwnd_parent_ = from.hwnd_parent_;
    }
    if (cached_has_bits & 0x00004000u) {
      initial_left_ = from.initial_left_;
    }
    if (cached_has_bits & 0x00008000u) {
      offscreen_ = from.offscreen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_initial_top(from.initial_top());
  }
}

void CMsgBrowserCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserCreate::CopyFrom(const CMsgBrowserCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserCreate::IsInitialized() const {
  return true;
}

void CMsgBrowserCreate::Swap(CMsgBrowserCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserCreate::InternalSwap(CMsgBrowserCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  useragent_.Swap(&other->useragent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_css_.Swap(&other->user_css_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  window_icon_.Swap(&other->window_icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vroverlay_key_.Swap(&other->vroverlay_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  initial_url_.Swap(&other->initial_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_id_, other->request_id_);
  swap(dpi_scaling_, other->dpi_scaling_);
  swap(initial_width_, other->initial_width_);
  swap(initial_height_, other->initial_height_);
  swap(native_dropdowns_, other->native_dropdowns_);
  swap(borderless_, other->borderless_);
  swap(only_allow_trusted_popups_, other->only_allow_trusted_popups_);
  swap(browser_type_, other->browser_type_);
  swap(hwnd_parent_, other->hwnd_parent_);
  swap(initial_left_, other->initial_left_);
  swap(offscreen_, other->offscreen_);
  swap(initial_top_, other->initial_top_);
}

::google::protobuf::Metadata CMsgBrowserCreate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBrowserCreateResponse::InitAsDefaultInstance() {
}
class CMsgBrowserCreateResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgBrowserCreateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_request_id(CMsgBrowserCreateResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserCreateResponse::kBrowserHandleFieldNumber;
const int CMsgBrowserCreateResponse::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserCreateResponse::CMsgBrowserCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserCreateResponse)
}
CMsgBrowserCreateResponse::CMsgBrowserCreateResponse(const CMsgBrowserCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(request_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserCreateResponse)
}

void CMsgBrowserCreateResponse::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(request_id_));
}

CMsgBrowserCreateResponse::~CMsgBrowserCreateResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserCreateResponse)
  SharedDtor();
}

void CMsgBrowserCreateResponse::SharedDtor() {
}

void CMsgBrowserCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBrowserCreateResponse& CMsgBrowserCreateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBrowserCreateResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBrowserCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_id_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(request_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBrowserCreateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBrowserCreateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 request_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBrowserCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserCreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 request_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_request_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserCreateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBrowserCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserCreateResponse)
}

::google::protobuf::uint8* CMsgBrowserCreateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserCreateResponse)
  return target;
}

size_t CMsgBrowserCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 request_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserCreateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBrowserCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgBrowserCreateResponse::MergeFrom(const CMsgBrowserCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserCreateResponse::CopyFrom(const CMsgBrowserCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserCreateResponse::IsInitialized() const {
  return true;
}

void CMsgBrowserCreateResponse::Swap(CMsgBrowserCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserCreateResponse::InternalSwap(CMsgBrowserCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(request_id_, other->request_id_);
}

::google::protobuf::Metadata CMsgBrowserCreateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBrowserRemove::InitAsDefaultInstance() {
}
class CMsgBrowserRemove::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgBrowserRemove* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserRemove::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserRemove::CMsgBrowserRemove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserRemove)
}
CMsgBrowserRemove::CMsgBrowserRemove(const CMsgBrowserRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserRemove)
}

void CMsgBrowserRemove::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgBrowserRemove::~CMsgBrowserRemove() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserRemove)
  SharedDtor();
}

void CMsgBrowserRemove::SharedDtor() {
}

void CMsgBrowserRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBrowserRemove& CMsgBrowserRemove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBrowserRemove_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBrowserRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBrowserRemove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBrowserRemove*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBrowserRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserRemove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserRemove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBrowserRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserRemove)
}

::google::protobuf::uint8* CMsgBrowserRemove::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserRemove)
  return target;
}

size_t CMsgBrowserRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserRemove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserRemove* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBrowserRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserRemove)
    MergeFrom(*source);
  }
}

void CMsgBrowserRemove::MergeFrom(const CMsgBrowserRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgBrowserRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserRemove::CopyFrom(const CMsgBrowserRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserRemove::IsInitialized() const {
  return true;
}

void CMsgBrowserRemove::Swap(CMsgBrowserRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserRemove::InternalSwap(CMsgBrowserRemove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgBrowserRemove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetLocalFileRequestMapping_AdditionalRoute::InitAsDefaultInstance() {
}
class CMsgSetLocalFileRequestMapping_AdditionalRoute::HasBitSetters {
 public:
  static void set_has_relative_url(CMsgSetLocalFileRequestMapping_AdditionalRoute* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_local_path(CMsgSetLocalFileRequestMapping_AdditionalRoute* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_allowed_extensions(CMsgSetLocalFileRequestMapping_AdditionalRoute* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetLocalFileRequestMapping_AdditionalRoute::kRelativeUrlFieldNumber;
const int CMsgSetLocalFileRequestMapping_AdditionalRoute::kLocalPathFieldNumber;
const int CMsgSetLocalFileRequestMapping_AdditionalRoute::kAllowedExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetLocalFileRequestMapping_AdditionalRoute::CMsgSetLocalFileRequestMapping_AdditionalRoute()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
}
CMsgSetLocalFileRequestMapping_AdditionalRoute::CMsgSetLocalFileRequestMapping_AdditionalRoute(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relative_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_relative_url()) {
    relative_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_url_);
  }
  local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_path()) {
    local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  allowed_extensions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_allowed_extensions()) {
    allowed_extensions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allowed_extensions_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSetLocalFileRequestMapping_AdditionalRoute_htmlmessages_2eproto.base);
  relative_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allowed_extensions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSetLocalFileRequestMapping_AdditionalRoute::~CMsgSetLocalFileRequestMapping_AdditionalRoute() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  SharedDtor();
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SharedDtor() {
  relative_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allowed_extensions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetLocalFileRequestMapping_AdditionalRoute& CMsgSetLocalFileRequestMapping_AdditionalRoute::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetLocalFileRequestMapping_AdditionalRoute_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetLocalFileRequestMapping_AdditionalRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      relative_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      local_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      allowed_extensions_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetLocalFileRequestMapping_AdditionalRoute::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetLocalFileRequestMapping_AdditionalRoute*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string relative_url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url");
        object = msg->mutable_relative_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string local_path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path");
        object = msg->mutable_local_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string allowed_extensions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions");
        object = msg->mutable_allowed_extensions();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetLocalFileRequestMapping_AdditionalRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string relative_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relative_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relative_url().data(), static_cast<int>(this->relative_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string local_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_path().data(), static_cast<int>(this->local_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string allowed_extensions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allowed_extensions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->allowed_extensions().data(), static_cast<int>(this->allowed_extensions().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetLocalFileRequestMapping_AdditionalRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relative_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relative_url().data(), static_cast<int>(this->relative_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->relative_url(), output);
  }

  // optional string local_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_path(), output);
  }

  // optional string allowed_extensions = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowed_extensions().data(), static_cast<int>(this->allowed_extensions().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->allowed_extensions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
}

::google::protobuf::uint8* CMsgSetLocalFileRequestMapping_AdditionalRoute::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relative_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relative_url().data(), static_cast<int>(this->relative_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.relative_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->relative_url(), target);
  }

  // optional string local_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.local_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_path(), target);
  }

  // optional string allowed_extensions = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowed_extensions().data(), static_cast<int>(this->allowed_extensions().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute.allowed_extensions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->allowed_extensions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  return target;
}

size_t CMsgSetLocalFileRequestMapping_AdditionalRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string relative_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relative_url());
    }

    // optional string local_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_path());
    }

    // optional string allowed_extensions = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->allowed_extensions());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetLocalFileRequestMapping_AdditionalRoute* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetLocalFileRequestMapping_AdditionalRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
    MergeFrom(*source);
  }
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::MergeFrom(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      relative_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      allowed_extensions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allowed_extensions_);
    }
  }
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::CopyFrom(const CMsgSetLocalFileRequestMapping_AdditionalRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetLocalFileRequestMapping_AdditionalRoute::IsInitialized() const {
  return true;
}

void CMsgSetLocalFileRequestMapping_AdditionalRoute::Swap(CMsgSetLocalFileRequestMapping_AdditionalRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetLocalFileRequestMapping_AdditionalRoute::InternalSwap(CMsgSetLocalFileRequestMapping_AdditionalRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relative_url_.Swap(&other->relative_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_path_.Swap(&other->local_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  allowed_extensions_.Swap(&other->allowed_extensions_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgSetLocalFileRequestMapping_AdditionalRoute::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetLocalFileRequestMapping::InitAsDefaultInstance() {
}
class CMsgSetLocalFileRequestMapping::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetLocalFileRequestMapping* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_request_url(CMsgSetLocalFileRequestMapping* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_default_local_path(CMsgSetLocalFileRequestMapping* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetLocalFileRequestMapping::kBrowserHandleFieldNumber;
const int CMsgSetLocalFileRequestMapping::kRequestUrlFieldNumber;
const int CMsgSetLocalFileRequestMapping::kDefaultLocalPathFieldNumber;
const int CMsgSetLocalFileRequestMapping::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetLocalFileRequestMapping::CMsgSetLocalFileRequestMapping()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetLocalFileRequestMapping)
}
CMsgSetLocalFileRequestMapping::CMsgSetLocalFileRequestMapping(const CMsgSetLocalFileRequestMapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_url()) {
    request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_url_);
  }
  default_local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_local_path()) {
    default_local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_local_path_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetLocalFileRequestMapping)
}

void CMsgSetLocalFileRequestMapping::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSetLocalFileRequestMapping_htmlmessages_2eproto.base);
  request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_local_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgSetLocalFileRequestMapping::~CMsgSetLocalFileRequestMapping() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetLocalFileRequestMapping)
  SharedDtor();
}

void CMsgSetLocalFileRequestMapping::SharedDtor() {
  request_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_local_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetLocalFileRequestMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetLocalFileRequestMapping& CMsgSetLocalFileRequestMapping::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetLocalFileRequestMapping_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetLocalFileRequestMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetLocalFileRequestMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      request_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      default_local_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetLocalFileRequestMapping::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetLocalFileRequestMapping*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string request_url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetLocalFileRequestMapping.request_url");
        object = msg->mutable_request_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string default_local_path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetLocalFileRequestMapping.default_local_path");
        object = msg->mutable_default_local_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute::_InternalParse;
          object = msg->add_routes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetLocalFileRequestMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetLocalFileRequestMapping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_url().data(), static_cast<int>(this->request_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.request_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_local_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_local_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_local_path().data(), static_cast<int>(this->default_local_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetLocalFileRequestMapping.default_local_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetLocalFileRequestMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetLocalFileRequestMapping)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetLocalFileRequestMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetLocalFileRequestMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string request_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_url().data(), static_cast<int>(this->request_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.request_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_url(), output);
  }

  // optional string default_local_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_local_path().data(), static_cast<int>(this->default_local_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.default_local_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->default_local_path(), output);
  }

  // repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->routes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetLocalFileRequestMapping)
}

::google::protobuf::uint8* CMsgSetLocalFileRequestMapping::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetLocalFileRequestMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string request_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_url().data(), static_cast<int>(this->request_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.request_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_url(), target);
  }

  // optional string default_local_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_local_path().data(), static_cast<int>(this->default_local_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetLocalFileRequestMapping.default_local_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->default_local_path(), target);
  }

  // repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->routes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetLocalFileRequestMapping)
  return target;
}

size_t CMsgSetLocalFileRequestMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetLocalFileRequestMapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgSetLocalFileRequestMapping.AdditionalRoute routes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->routes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->routes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string request_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_url());
    }

    // optional string default_local_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_local_path());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetLocalFileRequestMapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetLocalFileRequestMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetLocalFileRequestMapping* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetLocalFileRequestMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetLocalFileRequestMapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetLocalFileRequestMapping)
    MergeFrom(*source);
  }
}

void CMsgSetLocalFileRequestMapping::MergeFrom(const CMsgSetLocalFileRequestMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetLocalFileRequestMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      default_local_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_local_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetLocalFileRequestMapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetLocalFileRequestMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetLocalFileRequestMapping::CopyFrom(const CMsgSetLocalFileRequestMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetLocalFileRequestMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetLocalFileRequestMapping::IsInitialized() const {
  return true;
}

void CMsgSetLocalFileRequestMapping::Swap(CMsgSetLocalFileRequestMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetLocalFileRequestMapping::InternalSwap(CMsgSetLocalFileRequestMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&routes_)->InternalSwap(CastToBase(&other->routes_));
  request_url_.Swap(&other->request_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  default_local_path_.Swap(&other->default_local_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgSetLocalFileRequestMapping::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBrowserErrorStrings::InitAsDefaultInstance() {
}
class CMsgBrowserErrorStrings::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgBrowserErrorStrings* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_title(CMsgBrowserErrorStrings* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_header(CMsgBrowserErrorStrings* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cache_miss(CMsgBrowserErrorStrings* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bad_url(CMsgBrowserErrorStrings* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_connection_problem(CMsgBrowserErrorStrings* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_proxy_problem(CMsgBrowserErrorStrings* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_unknown(CMsgBrowserErrorStrings* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserErrorStrings::kBrowserHandleFieldNumber;
const int CMsgBrowserErrorStrings::kTitleFieldNumber;
const int CMsgBrowserErrorStrings::kHeaderFieldNumber;
const int CMsgBrowserErrorStrings::kCacheMissFieldNumber;
const int CMsgBrowserErrorStrings::kBadUrlFieldNumber;
const int CMsgBrowserErrorStrings::kConnectionProblemFieldNumber;
const int CMsgBrowserErrorStrings::kProxyProblemFieldNumber;
const int CMsgBrowserErrorStrings::kUnknownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserErrorStrings::CMsgBrowserErrorStrings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserErrorStrings)
}
CMsgBrowserErrorStrings::CMsgBrowserErrorStrings(const CMsgBrowserErrorStrings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header()) {
    header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  cache_miss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cache_miss()) {
    cache_miss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_miss_);
  }
  bad_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bad_url()) {
    bad_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bad_url_);
  }
  connection_problem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connection_problem()) {
    connection_problem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_problem_);
  }
  proxy_problem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proxy_problem()) {
    proxy_problem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_problem_);
  }
  unknown_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unknown()) {
    unknown_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unknown_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserErrorStrings)
}

void CMsgBrowserErrorStrings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgBrowserErrorStrings_htmlmessages_2eproto.base);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache_miss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bad_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_problem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_problem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgBrowserErrorStrings::~CMsgBrowserErrorStrings() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserErrorStrings)
  SharedDtor();
}

void CMsgBrowserErrorStrings::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache_miss_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bad_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_problem_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_problem_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unknown_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserErrorStrings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBrowserErrorStrings& CMsgBrowserErrorStrings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBrowserErrorStrings_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBrowserErrorStrings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserErrorStrings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      header_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      cache_miss_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      bad_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      connection_problem_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      proxy_problem_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      unknown_.ClearNonDefaultToEmptyNoArena();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBrowserErrorStrings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBrowserErrorStrings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string title = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserErrorStrings.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string header = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserErrorStrings.header");
        object = msg->mutable_header();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string cache_miss = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserErrorStrings.cache_miss");
        object = msg->mutable_cache_miss();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string bad_url = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserErrorStrings.bad_url");
        object = msg->mutable_bad_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string connection_problem = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserErrorStrings.connection_problem");
        object = msg->mutable_connection_problem();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string proxy_problem = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserErrorStrings.proxy_problem");
        object = msg->mutable_proxy_problem();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string unknown = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserErrorStrings.unknown");
        object = msg->mutable_unknown();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBrowserErrorStrings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserErrorStrings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header().data(), static_cast<int>(this->header().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.header");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cache_miss = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_miss()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cache_miss().data(), static_cast<int>(this->cache_miss().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.cache_miss");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bad_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bad_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bad_url().data(), static_cast<int>(this->bad_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.bad_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connection_problem = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_problem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connection_problem().data(), static_cast<int>(this->connection_problem().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.connection_problem");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proxy_problem = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_problem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxy_problem().data(), static_cast<int>(this->proxy_problem().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.proxy_problem");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unknown = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unknown()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unknown().data(), static_cast<int>(this->unknown().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserErrorStrings.unknown");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserErrorStrings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserErrorStrings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBrowserErrorStrings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserErrorStrings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string header = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), static_cast<int>(this->header().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->header(), output);
  }

  // optional string cache_miss = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_miss().data(), static_cast<int>(this->cache_miss().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.cache_miss");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cache_miss(), output);
  }

  // optional string bad_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bad_url().data(), static_cast<int>(this->bad_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.bad_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bad_url(), output);
  }

  // optional string connection_problem = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_problem().data(), static_cast<int>(this->connection_problem().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.connection_problem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->connection_problem(), output);
  }

  // optional string proxy_problem = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_problem().data(), static_cast<int>(this->proxy_problem().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.proxy_problem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->proxy_problem(), output);
  }

  // optional string unknown = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unknown().data(), static_cast<int>(this->unknown().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.unknown");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->unknown(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserErrorStrings)
}

::google::protobuf::uint8* CMsgBrowserErrorStrings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserErrorStrings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string header = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), static_cast<int>(this->header().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->header(), target);
  }

  // optional string cache_miss = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_miss().data(), static_cast<int>(this->cache_miss().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.cache_miss");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cache_miss(), target);
  }

  // optional string bad_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bad_url().data(), static_cast<int>(this->bad_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.bad_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bad_url(), target);
  }

  // optional string connection_problem = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connection_problem().data(), static_cast<int>(this->connection_problem().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.connection_problem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->connection_problem(), target);
  }

  // optional string proxy_problem = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_problem().data(), static_cast<int>(this->proxy_problem().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.proxy_problem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->proxy_problem(), target);
  }

  // optional string unknown = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unknown().data(), static_cast<int>(this->unknown().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserErrorStrings.unknown");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->unknown(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserErrorStrings)
  return target;
}

size_t CMsgBrowserErrorStrings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserErrorStrings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string header = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
    }

    // optional string cache_miss = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_miss());
    }

    // optional string bad_url = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bad_url());
    }

    // optional string connection_problem = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_problem());
    }

    // optional string proxy_problem = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxy_problem());
    }

    // optional string unknown = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unknown());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserErrorStrings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserErrorStrings)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserErrorStrings* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBrowserErrorStrings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserErrorStrings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserErrorStrings)
    MergeFrom(*source);
  }
}

void CMsgBrowserErrorStrings::MergeFrom(const CMsgBrowserErrorStrings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserErrorStrings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      cache_miss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_miss_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      bad_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bad_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      connection_problem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_problem_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      proxy_problem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_problem_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      unknown_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unknown_);
    }
    if (cached_has_bits & 0x00000080u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserErrorStrings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserErrorStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserErrorStrings::CopyFrom(const CMsgBrowserErrorStrings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserErrorStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserErrorStrings::IsInitialized() const {
  return true;
}

void CMsgBrowserErrorStrings::Swap(CMsgBrowserErrorStrings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserErrorStrings::InternalSwap(CMsgBrowserErrorStrings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_.Swap(&other->header_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cache_miss_.Swap(&other->cache_miss_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bad_url_.Swap(&other->bad_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  connection_problem_.Swap(&other->connection_problem_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proxy_problem_.Swap(&other->proxy_problem_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unknown_.Swap(&other->unknown_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgBrowserErrorStrings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBrowserSize::InitAsDefaultInstance() {
}
class CMsgBrowserSize::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgBrowserSize* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_width(CMsgBrowserSize* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_height(CMsgBrowserSize* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserSize::kBrowserHandleFieldNumber;
const int CMsgBrowserSize::kWidthFieldNumber;
const int CMsgBrowserSize::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserSize::CMsgBrowserSize()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserSize)
}
CMsgBrowserSize::CMsgBrowserSize(const CMsgBrowserSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserSize)
}

void CMsgBrowserSize::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
}

CMsgBrowserSize::~CMsgBrowserSize() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserSize)
  SharedDtor();
}

void CMsgBrowserSize::SharedDtor() {
}

void CMsgBrowserSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBrowserSize& CMsgBrowserSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBrowserSize_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBrowserSize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBrowserSize::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBrowserSize*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 width = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBrowserSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserSize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBrowserSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserSize)
}

::google::protobuf::uint8* CMsgBrowserSize::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserSize)
  return target;
}

size_t CMsgBrowserSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserSize* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBrowserSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserSize)
    MergeFrom(*source);
  }
}

void CMsgBrowserSize::MergeFrom(const CMsgBrowserSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserSize::CopyFrom(const CMsgBrowserSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserSize::IsInitialized() const {
  return true;
}

void CMsgBrowserSize::Swap(CMsgBrowserSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserSize::InternalSwap(CMsgBrowserSize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::google::protobuf::Metadata CMsgBrowserSize::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBrowserSetMinSize::InitAsDefaultInstance() {
}
class CMsgBrowserSetMinSize::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgBrowserSetMinSize* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_width(CMsgBrowserSetMinSize* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_height(CMsgBrowserSetMinSize* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserSetMinSize::kBrowserHandleFieldNumber;
const int CMsgBrowserSetMinSize::kWidthFieldNumber;
const int CMsgBrowserSetMinSize::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserSetMinSize::CMsgBrowserSetMinSize()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserSetMinSize)
}
CMsgBrowserSetMinSize::CMsgBrowserSetMinSize(const CMsgBrowserSetMinSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserSetMinSize)
}

void CMsgBrowserSetMinSize::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
}

CMsgBrowserSetMinSize::~CMsgBrowserSetMinSize() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserSetMinSize)
  SharedDtor();
}

void CMsgBrowserSetMinSize::SharedDtor() {
}

void CMsgBrowserSetMinSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBrowserSetMinSize& CMsgBrowserSetMinSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBrowserSetMinSize_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBrowserSetMinSize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserSetMinSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBrowserSetMinSize::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBrowserSetMinSize*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 width = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBrowserSetMinSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserSetMinSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserSetMinSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserSetMinSize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBrowserSetMinSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserSetMinSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserSetMinSize)
}

::google::protobuf::uint8* CMsgBrowserSetMinSize::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserSetMinSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserSetMinSize)
  return target;
}

size_t CMsgBrowserSetMinSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserSetMinSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserSetMinSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserSetMinSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserSetMinSize* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBrowserSetMinSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserSetMinSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserSetMinSize)
    MergeFrom(*source);
  }
}

void CMsgBrowserSetMinSize::MergeFrom(const CMsgBrowserSetMinSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserSetMinSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserSetMinSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserSetMinSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserSetMinSize::CopyFrom(const CMsgBrowserSetMinSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserSetMinSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserSetMinSize::IsInitialized() const {
  return true;
}

void CMsgBrowserSetMinSize::Swap(CMsgBrowserSetMinSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserSetMinSize::InternalSwap(CMsgBrowserSetMinSize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::google::protobuf::Metadata CMsgBrowserSetMinSize::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBrowserPosition::InitAsDefaultInstance() {
}
class CMsgBrowserPosition::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgBrowserPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgBrowserPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(CMsgBrowserPosition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_x_local(CMsgBrowserPosition* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_y_local(CMsgBrowserPosition* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserPosition::kBrowserHandleFieldNumber;
const int CMsgBrowserPosition::kXFieldNumber;
const int CMsgBrowserPosition::kYFieldNumber;
const int CMsgBrowserPosition::kXLocalFieldNumber;
const int CMsgBrowserPosition::kYLocalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserPosition::CMsgBrowserPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserPosition)
}
CMsgBrowserPosition::CMsgBrowserPosition(const CMsgBrowserPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_local_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_local_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserPosition)
}

void CMsgBrowserPosition::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_local_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_local_));
}

CMsgBrowserPosition::~CMsgBrowserPosition() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserPosition)
  SharedDtor();
}

void CMsgBrowserPosition::SharedDtor() {
}

void CMsgBrowserPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBrowserPosition& CMsgBrowserPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBrowserPosition_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBrowserPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_local_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_local_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBrowserPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBrowserPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 x_local = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_x_local(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 y_local = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_y_local(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBrowserPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x_local = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_x_local(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y_local = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_y_local(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBrowserPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 x_local = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x_local(), output);
  }

  // optional int32 y_local = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y_local(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserPosition)
}

::google::protobuf::uint8* CMsgBrowserPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional int32 x_local = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x_local(), target);
  }

  // optional int32 y_local = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y_local(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserPosition)
  return target;
}

size_t CMsgBrowserPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 x_local = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_local());
    }

    // optional int32 y_local = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_local());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBrowserPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserPosition)
    MergeFrom(*source);
  }
}

void CMsgBrowserPosition::MergeFrom(const CMsgBrowserPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_local_ = from.x_local_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_local_ = from.y_local_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserPosition::CopyFrom(const CMsgBrowserPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserPosition::IsInitialized() const {
  return true;
}

void CMsgBrowserPosition::Swap(CMsgBrowserPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserPosition::InternalSwap(CMsgBrowserPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(x_local_, other->x_local_);
  swap(y_local_, other->y_local_);
}

::google::protobuf::Metadata CMsgBrowserPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBrowserResized::InitAsDefaultInstance() {
}
class CMsgBrowserResized::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgBrowserResized* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgBrowserResized* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(CMsgBrowserResized* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_width(CMsgBrowserResized* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_height(CMsgBrowserResized* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserResized::kBrowserHandleFieldNumber;
const int CMsgBrowserResized::kXFieldNumber;
const int CMsgBrowserResized::kYFieldNumber;
const int CMsgBrowserResized::kWidthFieldNumber;
const int CMsgBrowserResized::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserResized::CMsgBrowserResized()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserResized)
}
CMsgBrowserResized::CMsgBrowserResized(const CMsgBrowserResized& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserResized)
}

void CMsgBrowserResized::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
}

CMsgBrowserResized::~CMsgBrowserResized() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserResized)
  SharedDtor();
}

void CMsgBrowserResized::SharedDtor() {
}

void CMsgBrowserResized::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBrowserResized& CMsgBrowserResized::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBrowserResized_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBrowserResized::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserResized)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBrowserResized::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBrowserResized*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 width = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 height = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBrowserResized::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserResized)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserResized)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserResized)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBrowserResized::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserResized)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserResized)
}

::google::protobuf::uint8* CMsgBrowserResized::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserResized)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserResized)
  return target;
}

size_t CMsgBrowserResized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserResized)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserResized::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserResized)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserResized* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBrowserResized>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserResized)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserResized)
    MergeFrom(*source);
  }
}

void CMsgBrowserResized::MergeFrom(const CMsgBrowserResized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserResized)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserResized::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserResized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserResized::CopyFrom(const CMsgBrowserResized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserResized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserResized::IsInitialized() const {
  return true;
}

void CMsgBrowserResized::Swap(CMsgBrowserResized* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserResized::InternalSwap(CMsgBrowserResized* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::google::protobuf::Metadata CMsgBrowserResized::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPostURL::InitAsDefaultInstance() {
}
class CMsgPostURL::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgPostURL* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgPostURL* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_post(CMsgPostURL* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_pageserial(CMsgPostURL* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPostURL::kBrowserHandleFieldNumber;
const int CMsgPostURL::kUrlFieldNumber;
const int CMsgPostURL::kPostFieldNumber;
const int CMsgPostURL::kPageserialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPostURL::CMsgPostURL()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPostURL)
}
CMsgPostURL::CMsgPostURL(const CMsgPostURL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  post_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_post()) {
    post_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.post_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&pageserial_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPostURL)
}

void CMsgPostURL::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPostURL_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pageserial_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
}

CMsgPostURL::~CMsgPostURL() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPostURL)
  SharedDtor();
}

void CMsgPostURL::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPostURL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPostURL& CMsgPostURL::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPostURL_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgPostURL::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPostURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      post_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pageserial_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPostURL::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPostURL*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgPostURL.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string post = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgPostURL.post");
        object = msg->mutable_post();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 pageserial = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_pageserial(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPostURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPostURL)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPostURL.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string post = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->post().data(), static_cast<int>(this->post().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPostURL.post");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pageserial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_pageserial(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageserial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPostURL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPostURL)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPostURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPostURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPostURL.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string post = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->post().data(), static_cast<int>(this->post().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPostURL.post");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->post(), output);
  }

  // optional uint32 pageserial = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pageserial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPostURL)
}

::google::protobuf::uint8* CMsgPostURL::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPostURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPostURL.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string post = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->post().data(), static_cast<int>(this->post().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPostURL.post");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->post(), target);
  }

  // optional uint32 pageserial = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pageserial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPostURL)
  return target;
}

size_t CMsgPostURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPostURL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string post = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 pageserial = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageserial());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPostURL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPostURL)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPostURL* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPostURL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPostURL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPostURL)
    MergeFrom(*source);
  }
}

void CMsgPostURL::MergeFrom(const CMsgPostURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPostURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      post_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.post_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      pageserial_ = from.pageserial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPostURL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPostURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPostURL::CopyFrom(const CMsgPostURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPostURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPostURL::IsInitialized() const {
  return true;
}

void CMsgPostURL::Swap(CMsgPostURL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPostURL::InternalSwap(CMsgPostURL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  post_.Swap(&other->post_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(pageserial_, other->pageserial_);
}

::google::protobuf::Metadata CMsgPostURL::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAddHeader::InitAsDefaultInstance() {
}
class CMsgAddHeader::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgAddHeader* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_key(CMsgAddHeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgAddHeader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddHeader::kBrowserHandleFieldNumber;
const int CMsgAddHeader::kKeyFieldNumber;
const int CMsgAddHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddHeader::CMsgAddHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgAddHeader)
}
CMsgAddHeader::CMsgAddHeader(const CMsgAddHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgAddHeader)
}

void CMsgAddHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAddHeader_htmlmessages_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgAddHeader::~CMsgAddHeader() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgAddHeader)
  SharedDtor();
}

void CMsgAddHeader::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAddHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAddHeader& CMsgAddHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAddHeader_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAddHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgAddHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAddHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAddHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgAddHeader.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgAddHeader.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAddHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgAddHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgAddHeader.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgAddHeader.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgAddHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgAddHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAddHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgAddHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAddHeader.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAddHeader.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgAddHeader)
}

::google::protobuf::uint8* CMsgAddHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgAddHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAddHeader.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAddHeader.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgAddHeader)
  return target;
}

size_t CMsgAddHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgAddHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgAddHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddHeader* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAddHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgAddHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgAddHeader)
    MergeFrom(*source);
  }
}

void CMsgAddHeader::MergeFrom(const CMsgAddHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgAddHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgAddHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddHeader::CopyFrom(const CMsgAddHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgAddHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddHeader::IsInitialized() const {
  return true;
}

void CMsgAddHeader::Swap(CMsgAddHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddHeader::InternalSwap(CMsgAddHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgAddHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgStopLoad::InitAsDefaultInstance() {
}
class CMsgStopLoad::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgStopLoad* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStopLoad::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStopLoad::CMsgStopLoad()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStopLoad)
}
CMsgStopLoad::CMsgStopLoad(const CMsgStopLoad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStopLoad)
}

void CMsgStopLoad::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgStopLoad::~CMsgStopLoad() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStopLoad)
  SharedDtor();
}

void CMsgStopLoad::SharedDtor() {
}

void CMsgStopLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgStopLoad& CMsgStopLoad::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgStopLoad_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgStopLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStopLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgStopLoad::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgStopLoad*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgStopLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStopLoad)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStopLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStopLoad)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgStopLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStopLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStopLoad)
}

::google::protobuf::uint8* CMsgStopLoad::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStopLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStopLoad)
  return target;
}

size_t CMsgStopLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStopLoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStopLoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStopLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStopLoad* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgStopLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStopLoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStopLoad)
    MergeFrom(*source);
  }
}

void CMsgStopLoad::MergeFrom(const CMsgStopLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStopLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgStopLoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStopLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopLoad::CopyFrom(const CMsgStopLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStopLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopLoad::IsInitialized() const {
  return true;
}

void CMsgStopLoad::Swap(CMsgStopLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStopLoad::InternalSwap(CMsgStopLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgStopLoad::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgReload::InitAsDefaultInstance() {
}
class CMsgReload::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgReload* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReload::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReload::CMsgReload()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgReload)
}
CMsgReload::CMsgReload(const CMsgReload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgReload)
}

void CMsgReload::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgReload::~CMsgReload() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgReload)
  SharedDtor();
}

void CMsgReload::SharedDtor() {
}

void CMsgReload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgReload& CMsgReload::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgReload_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgReload::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgReload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgReload::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgReload*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgReload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgReload)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgReload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgReload)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgReload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgReload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgReload)
}

::google::protobuf::uint8* CMsgReload::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgReload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgReload)
  return target;
}

size_t CMsgReload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgReload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgReload)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReload* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgReload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgReload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgReload)
    MergeFrom(*source);
  }
}

void CMsgReload::MergeFrom(const CMsgReload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgReload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgReload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgReload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReload::CopyFrom(const CMsgReload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgReload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReload::IsInitialized() const {
  return true;
}

void CMsgReload::Swap(CMsgReload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReload::InternalSwap(CMsgReload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgReload::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGoForward::InitAsDefaultInstance() {
}
class CMsgGoForward::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgGoForward* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGoForward::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGoForward::CMsgGoForward()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGoForward)
}
CMsgGoForward::CMsgGoForward(const CMsgGoForward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGoForward)
}

void CMsgGoForward::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgGoForward::~CMsgGoForward() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGoForward)
  SharedDtor();
}

void CMsgGoForward::SharedDtor() {
}

void CMsgGoForward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGoForward& CMsgGoForward::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGoForward_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGoForward::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGoForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGoForward::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGoForward*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGoForward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGoForward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGoForward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGoForward)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGoForward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGoForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGoForward)
}

::google::protobuf::uint8* CMsgGoForward::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGoForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGoForward)
  return target;
}

size_t CMsgGoForward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGoForward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGoForward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGoForward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGoForward* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGoForward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGoForward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGoForward)
    MergeFrom(*source);
  }
}

void CMsgGoForward::MergeFrom(const CMsgGoForward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGoForward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgGoForward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGoForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGoForward::CopyFrom(const CMsgGoForward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGoForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGoForward::IsInitialized() const {
  return true;
}

void CMsgGoForward::Swap(CMsgGoForward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGoForward::InternalSwap(CMsgGoForward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgGoForward::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGoBack::InitAsDefaultInstance() {
}
class CMsgGoBack::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgGoBack* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGoBack::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGoBack::CMsgGoBack()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGoBack)
}
CMsgGoBack::CMsgGoBack(const CMsgGoBack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGoBack)
}

void CMsgGoBack::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgGoBack::~CMsgGoBack() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGoBack)
  SharedDtor();
}

void CMsgGoBack::SharedDtor() {
}

void CMsgGoBack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGoBack& CMsgGoBack::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGoBack_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGoBack::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGoBack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGoBack::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGoBack*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGoBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGoBack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGoBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGoBack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGoBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGoBack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGoBack)
}

::google::protobuf::uint8* CMsgGoBack::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGoBack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGoBack)
  return target;
}

size_t CMsgGoBack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGoBack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGoBack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGoBack)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGoBack* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGoBack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGoBack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGoBack)
    MergeFrom(*source);
  }
}

void CMsgGoBack::MergeFrom(const CMsgGoBack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGoBack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgGoBack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGoBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGoBack::CopyFrom(const CMsgGoBack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGoBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGoBack::IsInitialized() const {
  return true;
}

void CMsgGoBack::Swap(CMsgGoBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGoBack::InternalSwap(CMsgGoBack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgGoBack::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgWasHidden::InitAsDefaultInstance() {
}
class CMsgWasHidden::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgWasHidden* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hidden(CMsgWasHidden* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWasHidden::kBrowserHandleFieldNumber;
const int CMsgWasHidden::kHiddenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWasHidden::CMsgWasHidden()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgWasHidden)
}
CMsgWasHidden::CMsgWasHidden(const CMsgWasHidden& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(hidden_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgWasHidden)
}

void CMsgWasHidden::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hidden_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(hidden_));
}

CMsgWasHidden::~CMsgWasHidden() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgWasHidden)
  SharedDtor();
}

void CMsgWasHidden::SharedDtor() {
}

void CMsgWasHidden::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgWasHidden& CMsgWasHidden::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgWasHidden_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgWasHidden::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgWasHidden)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hidden_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(hidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgWasHidden::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgWasHidden*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hidden = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hidden(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgWasHidden::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgWasHidden)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hidden = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hidden(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgWasHidden)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgWasHidden)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgWasHidden::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgWasHidden)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool hidden = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hidden(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgWasHidden)
}

::google::protobuf::uint8* CMsgWasHidden::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgWasHidden)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool hidden = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hidden(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgWasHidden)
  return target;
}

size_t CMsgWasHidden::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgWasHidden)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool hidden = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWasHidden::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgWasHidden)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWasHidden* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgWasHidden>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgWasHidden)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgWasHidden)
    MergeFrom(*source);
  }
}

void CMsgWasHidden::MergeFrom(const CMsgWasHidden& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgWasHidden)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      hidden_ = from.hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWasHidden::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgWasHidden)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWasHidden::CopyFrom(const CMsgWasHidden& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgWasHidden)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWasHidden::IsInitialized() const {
  return true;
}

void CMsgWasHidden::Swap(CMsgWasHidden* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWasHidden::InternalSwap(CMsgWasHidden* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(hidden_, other->hidden_);
}

::google::protobuf::Metadata CMsgWasHidden::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClearHistory::InitAsDefaultInstance() {
}
class CMsgClearHistory::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgClearHistory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClearHistory::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearHistory::CMsgClearHistory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClearHistory)
}
CMsgClearHistory::CMsgClearHistory(const CMsgClearHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClearHistory)
}

void CMsgClearHistory::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgClearHistory::~CMsgClearHistory() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClearHistory)
  SharedDtor();
}

void CMsgClearHistory::SharedDtor() {
}

void CMsgClearHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClearHistory& CMsgClearHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClearHistory_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgClearHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClearHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClearHistory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClearHistory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClearHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClearHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClearHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClearHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClearHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClearHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClearHistory)
}

::google::protobuf::uint8* CMsgClearHistory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClearHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClearHistory)
  return target;
}

size_t CMsgClearHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClearHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClearHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearHistory* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClearHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClearHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClearHistory)
    MergeFrom(*source);
  }
}

void CMsgClearHistory::MergeFrom(const CMsgClearHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClearHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgClearHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClearHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearHistory::CopyFrom(const CMsgClearHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClearHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearHistory::IsInitialized() const {
  return true;
}

void CMsgClearHistory::Swap(CMsgClearHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearHistory::InternalSwap(CMsgClearHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgClearHistory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClearAllBrowsingData::InitAsDefaultInstance() {
}
class CMsgClearAllBrowsingData::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgClearAllBrowsingData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClearAllBrowsingData::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearAllBrowsingData::CMsgClearAllBrowsingData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClearAllBrowsingData)
}
CMsgClearAllBrowsingData::CMsgClearAllBrowsingData(const CMsgClearAllBrowsingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClearAllBrowsingData)
}

void CMsgClearAllBrowsingData::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgClearAllBrowsingData::~CMsgClearAllBrowsingData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClearAllBrowsingData)
  SharedDtor();
}

void CMsgClearAllBrowsingData::SharedDtor() {
}

void CMsgClearAllBrowsingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClearAllBrowsingData& CMsgClearAllBrowsingData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClearAllBrowsingData_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgClearAllBrowsingData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClearAllBrowsingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClearAllBrowsingData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClearAllBrowsingData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClearAllBrowsingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClearAllBrowsingData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClearAllBrowsingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClearAllBrowsingData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClearAllBrowsingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClearAllBrowsingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClearAllBrowsingData)
}

::google::protobuf::uint8* CMsgClearAllBrowsingData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClearAllBrowsingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClearAllBrowsingData)
  return target;
}

size_t CMsgClearAllBrowsingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClearAllBrowsingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearAllBrowsingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClearAllBrowsingData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearAllBrowsingData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClearAllBrowsingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClearAllBrowsingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClearAllBrowsingData)
    MergeFrom(*source);
  }
}

void CMsgClearAllBrowsingData::MergeFrom(const CMsgClearAllBrowsingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClearAllBrowsingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgClearAllBrowsingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClearAllBrowsingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearAllBrowsingData::CopyFrom(const CMsgClearAllBrowsingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClearAllBrowsingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearAllBrowsingData::IsInitialized() const {
  return true;
}

void CMsgClearAllBrowsingData::Swap(CMsgClearAllBrowsingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearAllBrowsingData::InternalSwap(CMsgClearAllBrowsingData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgClearAllBrowsingData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgCopy::InitAsDefaultInstance() {
}
class CMsgCopy::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgCopy* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCopy::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCopy::CMsgCopy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgCopy)
}
CMsgCopy::CMsgCopy(const CMsgCopy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgCopy)
}

void CMsgCopy::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgCopy::~CMsgCopy() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgCopy)
  SharedDtor();
}

void CMsgCopy::SharedDtor() {
}

void CMsgCopy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCopy& CMsgCopy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgCopy_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgCopy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgCopy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgCopy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgCopy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgCopy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgCopy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgCopy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgCopy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgCopy)
}

::google::protobuf::uint8* CMsgCopy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgCopy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgCopy)
  return target;
}

size_t CMsgCopy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgCopy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCopy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgCopy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCopy* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgCopy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgCopy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgCopy)
    MergeFrom(*source);
  }
}

void CMsgCopy::MergeFrom(const CMsgCopy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgCopy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgCopy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgCopy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCopy::CopyFrom(const CMsgCopy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgCopy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCopy::IsInitialized() const {
  return true;
}

void CMsgCopy::Swap(CMsgCopy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCopy::InternalSwap(CMsgCopy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgCopy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPaste::InitAsDefaultInstance() {
}
class CMsgPaste::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgPaste* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPaste::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPaste::CMsgPaste()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPaste)
}
CMsgPaste::CMsgPaste(const CMsgPaste& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPaste)
}

void CMsgPaste::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgPaste::~CMsgPaste() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPaste)
  SharedDtor();
}

void CMsgPaste::SharedDtor() {
}

void CMsgPaste::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPaste& CMsgPaste::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPaste_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgPaste::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPaste)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPaste::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPaste*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPaste::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPaste)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPaste)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPaste)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPaste::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPaste)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPaste)
}

::google::protobuf::uint8* CMsgPaste::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPaste)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPaste)
  return target;
}

size_t CMsgPaste::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPaste)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPaste::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPaste)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPaste* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPaste>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPaste)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPaste)
    MergeFrom(*source);
  }
}

void CMsgPaste::MergeFrom(const CMsgPaste& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPaste)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgPaste::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPaste)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaste::CopyFrom(const CMsgPaste& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPaste)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaste::IsInitialized() const {
  return true;
}

void CMsgPaste::Swap(CMsgPaste* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPaste::InternalSwap(CMsgPaste* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgPaste::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgExecuteJavaScript::InitAsDefaultInstance() {
}
class CMsgExecuteJavaScript::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgExecuteJavaScript* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_script(CMsgExecuteJavaScript* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExecuteJavaScript::kBrowserHandleFieldNumber;
const int CMsgExecuteJavaScript::kScriptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExecuteJavaScript::CMsgExecuteJavaScript()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgExecuteJavaScript)
}
CMsgExecuteJavaScript::CMsgExecuteJavaScript(const CMsgExecuteJavaScript& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_script()) {
    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgExecuteJavaScript)
}

void CMsgExecuteJavaScript::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgExecuteJavaScript_htmlmessages_2eproto.base);
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgExecuteJavaScript::~CMsgExecuteJavaScript() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgExecuteJavaScript)
  SharedDtor();
}

void CMsgExecuteJavaScript::SharedDtor() {
  script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgExecuteJavaScript::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgExecuteJavaScript& CMsgExecuteJavaScript::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgExecuteJavaScript_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgExecuteJavaScript::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgExecuteJavaScript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    script_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgExecuteJavaScript::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgExecuteJavaScript*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string script = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgExecuteJavaScript.script");
        object = msg->mutable_script();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgExecuteJavaScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgExecuteJavaScript)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string script = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->script().data(), static_cast<int>(this->script().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgExecuteJavaScript.script");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgExecuteJavaScript)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgExecuteJavaScript)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgExecuteJavaScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgExecuteJavaScript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string script = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgExecuteJavaScript.script");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->script(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgExecuteJavaScript)
}

::google::protobuf::uint8* CMsgExecuteJavaScript::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgExecuteJavaScript)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string script = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script().data(), static_cast<int>(this->script().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgExecuteJavaScript.script");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->script(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgExecuteJavaScript)
  return target;
}

size_t CMsgExecuteJavaScript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgExecuteJavaScript)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string script = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExecuteJavaScript::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgExecuteJavaScript)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExecuteJavaScript* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgExecuteJavaScript>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgExecuteJavaScript)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgExecuteJavaScript)
    MergeFrom(*source);
  }
}

void CMsgExecuteJavaScript::MergeFrom(const CMsgExecuteJavaScript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgExecuteJavaScript)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExecuteJavaScript::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgExecuteJavaScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExecuteJavaScript::CopyFrom(const CMsgExecuteJavaScript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgExecuteJavaScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExecuteJavaScript::IsInitialized() const {
  return true;
}

void CMsgExecuteJavaScript::Swap(CMsgExecuteJavaScript* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExecuteJavaScript::InternalSwap(CMsgExecuteJavaScript* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  script_.Swap(&other->script_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgExecuteJavaScript::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetFocus::InitAsDefaultInstance() {
}
class CMsgSetFocus::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetFocus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_focus(CMsgSetFocus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetFocus::kBrowserHandleFieldNumber;
const int CMsgSetFocus::kFocusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetFocus::CMsgSetFocus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetFocus)
}
CMsgSetFocus::CMsgSetFocus(const CMsgSetFocus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&focus_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(focus_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetFocus)
}

void CMsgSetFocus::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&focus_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(focus_));
}

CMsgSetFocus::~CMsgSetFocus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetFocus)
  SharedDtor();
}

void CMsgSetFocus::SharedDtor() {
}

void CMsgSetFocus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetFocus& CMsgSetFocus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetFocus_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetFocus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&focus_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(focus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetFocus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetFocus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool focus = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_focus(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetFocus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool focus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_focus(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetFocus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetFocus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool focus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->focus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetFocus)
}

::google::protobuf::uint8* CMsgSetFocus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool focus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->focus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetFocus)
  return target;
}

size_t CMsgSetFocus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetFocus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool focus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetFocus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetFocus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetFocus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetFocus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetFocus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetFocus)
    MergeFrom(*source);
  }
}

void CMsgSetFocus::MergeFrom(const CMsgSetFocus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetFocus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      focus_ = from.focus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetFocus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetFocus::CopyFrom(const CMsgSetFocus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetFocus::IsInitialized() const {
  return true;
}

void CMsgSetFocus::Swap(CMsgSetFocus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetFocus::InternalSwap(CMsgSetFocus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(focus_, other->focus_);
}

::google::protobuf::Metadata CMsgSetFocus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHorizontalScrollBarSize::InitAsDefaultInstance() {
}
class CMsgHorizontalScrollBarSize::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgHorizontalScrollBarSize* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHorizontalScrollBarSize::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHorizontalScrollBarSize::CMsgHorizontalScrollBarSize()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgHorizontalScrollBarSize)
}
CMsgHorizontalScrollBarSize::CMsgHorizontalScrollBarSize(const CMsgHorizontalScrollBarSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgHorizontalScrollBarSize)
}

void CMsgHorizontalScrollBarSize::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgHorizontalScrollBarSize::~CMsgHorizontalScrollBarSize() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgHorizontalScrollBarSize)
  SharedDtor();
}

void CMsgHorizontalScrollBarSize::SharedDtor() {
}

void CMsgHorizontalScrollBarSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHorizontalScrollBarSize& CMsgHorizontalScrollBarSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHorizontalScrollBarSize_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHorizontalScrollBarSize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgHorizontalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHorizontalScrollBarSize::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHorizontalScrollBarSize*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHorizontalScrollBarSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgHorizontalScrollBarSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgHorizontalScrollBarSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgHorizontalScrollBarSize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHorizontalScrollBarSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgHorizontalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgHorizontalScrollBarSize)
}

::google::protobuf::uint8* CMsgHorizontalScrollBarSize::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgHorizontalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgHorizontalScrollBarSize)
  return target;
}

size_t CMsgHorizontalScrollBarSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgHorizontalScrollBarSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHorizontalScrollBarSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgHorizontalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHorizontalScrollBarSize* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHorizontalScrollBarSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgHorizontalScrollBarSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgHorizontalScrollBarSize)
    MergeFrom(*source);
  }
}

void CMsgHorizontalScrollBarSize::MergeFrom(const CMsgHorizontalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgHorizontalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgHorizontalScrollBarSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgHorizontalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSize::CopyFrom(const CMsgHorizontalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgHorizontalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHorizontalScrollBarSize::IsInitialized() const {
  return true;
}

void CMsgHorizontalScrollBarSize::Swap(CMsgHorizontalScrollBarSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHorizontalScrollBarSize::InternalSwap(CMsgHorizontalScrollBarSize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgHorizontalScrollBarSize::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHorizontalScrollBarSizeResponse::InitAsDefaultInstance() {
}
class CMsgHorizontalScrollBarSizeResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgHorizontalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scroll_max(CMsgHorizontalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scroll(CMsgHorizontalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_zoom(CMsgHorizontalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_visible(CMsgHorizontalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_page_size(CMsgHorizontalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHorizontalScrollBarSizeResponse::kBrowserHandleFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kScrollMaxFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kScrollFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kZoomFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kVisibleFieldNumber;
const int CMsgHorizontalScrollBarSizeResponse::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHorizontalScrollBarSizeResponse::CMsgHorizontalScrollBarSizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgHorizontalScrollBarSizeResponse)
}
CMsgHorizontalScrollBarSizeResponse::CMsgHorizontalScrollBarSizeResponse(const CMsgHorizontalScrollBarSizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgHorizontalScrollBarSizeResponse)
}

void CMsgHorizontalScrollBarSizeResponse::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
}

CMsgHorizontalScrollBarSizeResponse::~CMsgHorizontalScrollBarSizeResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  SharedDtor();
}

void CMsgHorizontalScrollBarSizeResponse::SharedDtor() {
}

void CMsgHorizontalScrollBarSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHorizontalScrollBarSizeResponse& CMsgHorizontalScrollBarSizeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHorizontalScrollBarSizeResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHorizontalScrollBarSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_size_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHorizontalScrollBarSizeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHorizontalScrollBarSizeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scroll_max = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_scroll_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scroll = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_scroll(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float zoom = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_zoom(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool visible = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_visible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 page_size = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHorizontalScrollBarSizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_scroll_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_scroll(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float zoom = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_zoom(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visible = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_visible(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_page_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHorizontalScrollBarSizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scroll_max(), output);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scroll(), output);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->zoom(), output);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->visible(), output);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->page_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgHorizontalScrollBarSizeResponse)
}

::google::protobuf::uint8* CMsgHorizontalScrollBarSizeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scroll_max(), target);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scroll(), target);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->zoom(), target);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->visible(), target);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->page_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  return target;
}

size_t CMsgHorizontalScrollBarSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scroll_max = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll_max());
    }

    // optional uint32 scroll = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }

    // optional float zoom = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool visible = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 page_size = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHorizontalScrollBarSizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHorizontalScrollBarSizeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHorizontalScrollBarSizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgHorizontalScrollBarSizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgHorizontalScrollBarSizeResponse)
    MergeFrom(*source);
  }
}

void CMsgHorizontalScrollBarSizeResponse::MergeFrom(const CMsgHorizontalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_max_ = from.scroll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      scroll_ = from.scroll_;
    }
    if (cached_has_bits & 0x00000008u) {
      zoom_ = from.zoom_;
    }
    if (cached_has_bits & 0x00000010u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_size_ = from.page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHorizontalScrollBarSizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHorizontalScrollBarSizeResponse::CopyFrom(const CMsgHorizontalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgHorizontalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHorizontalScrollBarSizeResponse::IsInitialized() const {
  return true;
}

void CMsgHorizontalScrollBarSizeResponse::Swap(CMsgHorizontalScrollBarSizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHorizontalScrollBarSizeResponse::InternalSwap(CMsgHorizontalScrollBarSizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(scroll_max_, other->scroll_max_);
  swap(scroll_, other->scroll_);
  swap(zoom_, other->zoom_);
  swap(visible_, other->visible_);
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata CMsgHorizontalScrollBarSizeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgVerticalScrollBarSize::InitAsDefaultInstance() {
}
class CMsgVerticalScrollBarSize::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgVerticalScrollBarSize* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgVerticalScrollBarSize::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgVerticalScrollBarSize::CMsgVerticalScrollBarSize()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgVerticalScrollBarSize)
}
CMsgVerticalScrollBarSize::CMsgVerticalScrollBarSize(const CMsgVerticalScrollBarSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgVerticalScrollBarSize)
}

void CMsgVerticalScrollBarSize::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgVerticalScrollBarSize::~CMsgVerticalScrollBarSize() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgVerticalScrollBarSize)
  SharedDtor();
}

void CMsgVerticalScrollBarSize::SharedDtor() {
}

void CMsgVerticalScrollBarSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgVerticalScrollBarSize& CMsgVerticalScrollBarSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgVerticalScrollBarSize_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgVerticalScrollBarSize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgVerticalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgVerticalScrollBarSize::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgVerticalScrollBarSize*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgVerticalScrollBarSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgVerticalScrollBarSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgVerticalScrollBarSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgVerticalScrollBarSize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgVerticalScrollBarSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgVerticalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgVerticalScrollBarSize)
}

::google::protobuf::uint8* CMsgVerticalScrollBarSize::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgVerticalScrollBarSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgVerticalScrollBarSize)
  return target;
}

size_t CMsgVerticalScrollBarSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgVerticalScrollBarSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVerticalScrollBarSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgVerticalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVerticalScrollBarSize* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgVerticalScrollBarSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgVerticalScrollBarSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgVerticalScrollBarSize)
    MergeFrom(*source);
  }
}

void CMsgVerticalScrollBarSize::MergeFrom(const CMsgVerticalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgVerticalScrollBarSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgVerticalScrollBarSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgVerticalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSize::CopyFrom(const CMsgVerticalScrollBarSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgVerticalScrollBarSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVerticalScrollBarSize::IsInitialized() const {
  return true;
}

void CMsgVerticalScrollBarSize::Swap(CMsgVerticalScrollBarSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgVerticalScrollBarSize::InternalSwap(CMsgVerticalScrollBarSize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgVerticalScrollBarSize::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgVerticalScrollBarSizeResponse::InitAsDefaultInstance() {
}
class CMsgVerticalScrollBarSizeResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgVerticalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scroll_max(CMsgVerticalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scroll(CMsgVerticalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_zoom(CMsgVerticalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_visible(CMsgVerticalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_page_size(CMsgVerticalScrollBarSizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgVerticalScrollBarSizeResponse::kBrowserHandleFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kScrollMaxFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kScrollFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kZoomFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kVisibleFieldNumber;
const int CMsgVerticalScrollBarSizeResponse::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgVerticalScrollBarSizeResponse::CMsgVerticalScrollBarSizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgVerticalScrollBarSizeResponse)
}
CMsgVerticalScrollBarSizeResponse::CMsgVerticalScrollBarSizeResponse(const CMsgVerticalScrollBarSizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgVerticalScrollBarSizeResponse)
}

void CMsgVerticalScrollBarSizeResponse::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
}

CMsgVerticalScrollBarSizeResponse::~CMsgVerticalScrollBarSizeResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgVerticalScrollBarSizeResponse)
  SharedDtor();
}

void CMsgVerticalScrollBarSizeResponse::SharedDtor() {
}

void CMsgVerticalScrollBarSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgVerticalScrollBarSizeResponse& CMsgVerticalScrollBarSizeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgVerticalScrollBarSizeResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgVerticalScrollBarSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_size_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(page_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgVerticalScrollBarSizeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgVerticalScrollBarSizeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scroll_max = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_scroll_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scroll = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_scroll(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float zoom = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_zoom(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool visible = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_visible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 page_size = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgVerticalScrollBarSizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_scroll_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_scroll(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float zoom = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_zoom(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visible = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_visible(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_page_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgVerticalScrollBarSizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgVerticalScrollBarSizeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgVerticalScrollBarSizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scroll_max(), output);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scroll(), output);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->zoom(), output);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->visible(), output);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->page_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgVerticalScrollBarSizeResponse)
}

::google::protobuf::uint8* CMsgVerticalScrollBarSizeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scroll_max = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scroll_max(), target);
  }

  // optional uint32 scroll = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scroll(), target);
  }

  // optional float zoom = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->zoom(), target);
  }

  // optional bool visible = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->visible(), target);
  }

  // optional uint32 page_size = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->page_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgVerticalScrollBarSizeResponse)
  return target;
}

size_t CMsgVerticalScrollBarSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scroll_max = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll_max());
    }

    // optional uint32 scroll = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }

    // optional float zoom = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool visible = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 page_size = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVerticalScrollBarSizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVerticalScrollBarSizeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgVerticalScrollBarSizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgVerticalScrollBarSizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgVerticalScrollBarSizeResponse)
    MergeFrom(*source);
  }
}

void CMsgVerticalScrollBarSizeResponse::MergeFrom(const CMsgVerticalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_max_ = from.scroll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      scroll_ = from.scroll_;
    }
    if (cached_has_bits & 0x00000008u) {
      zoom_ = from.zoom_;
    }
    if (cached_has_bits & 0x00000010u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_size_ = from.page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVerticalScrollBarSizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVerticalScrollBarSizeResponse::CopyFrom(const CMsgVerticalScrollBarSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgVerticalScrollBarSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVerticalScrollBarSizeResponse::IsInitialized() const {
  return true;
}

void CMsgVerticalScrollBarSizeResponse::Swap(CMsgVerticalScrollBarSizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgVerticalScrollBarSizeResponse::InternalSwap(CMsgVerticalScrollBarSizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(scroll_max_, other->scroll_max_);
  swap(scroll_, other->scroll_);
  swap(zoom_, other->zoom_);
  swap(visible_, other->visible_);
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata CMsgVerticalScrollBarSizeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFind::InitAsDefaultInstance() {
}
class CMsgFind::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgFind* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_find(CMsgFind* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_infind(CMsgFind* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_reverse(CMsgFind* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFind::kBrowserHandleFieldNumber;
const int CMsgFind::kFindFieldNumber;
const int CMsgFind::kInfindFieldNumber;
const int CMsgFind::kReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFind::CMsgFind()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFind)
}
CMsgFind::CMsgFind(const CMsgFind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  find_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_find()) {
    find_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.find_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(reverse_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFind)
}

void CMsgFind::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgFind_htmlmessages_2eproto.base);
  find_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(reverse_));
}

CMsgFind::~CMsgFind() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFind)
  SharedDtor();
}

void CMsgFind::SharedDtor() {
  find_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgFind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFind& CMsgFind::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFind_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgFind::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    find_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(reverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFind::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFind*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string find = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgFind.find");
        object = msg->mutable_find();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool infind = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_infind(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool reverse = 4 [default = false];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_reverse(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFind)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string find = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_find()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->find().data(), static_cast<int>(this->find().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFind.find");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool infind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_infind(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_reverse(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFind)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string find = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->find().data(), static_cast<int>(this->find().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFind.find");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->find(), output);
  }

  // optional bool infind = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->infind(), output);
  }

  // optional bool reverse = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reverse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFind)
}

::google::protobuf::uint8* CMsgFind::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string find = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->find().data(), static_cast<int>(this->find().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFind.find");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->find(), target);
  }

  // optional bool infind = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->infind(), target);
  }

  // optional bool reverse = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reverse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFind)
  return target;
}

size_t CMsgFind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFind)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string find = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->find());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool infind = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool reverse = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFind)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFind* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFind)
    MergeFrom(*source);
  }
}

void CMsgFind::MergeFrom(const CMsgFind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      find_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.find_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      infind_ = from.infind_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFind::CopyFrom(const CMsgFind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFind::IsInitialized() const {
  return true;
}

void CMsgFind::Swap(CMsgFind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFind::InternalSwap(CMsgFind* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  find_.Swap(&other->find_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(infind_, other->infind_);
  swap(reverse_, other->reverse_);
}

::google::protobuf::Metadata CMsgFind::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgStopFind::InitAsDefaultInstance() {
}
class CMsgStopFind::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgStopFind* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStopFind::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStopFind::CMsgStopFind()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStopFind)
}
CMsgStopFind::CMsgStopFind(const CMsgStopFind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStopFind)
}

void CMsgStopFind::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgStopFind::~CMsgStopFind() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStopFind)
  SharedDtor();
}

void CMsgStopFind::SharedDtor() {
}

void CMsgStopFind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgStopFind& CMsgStopFind::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgStopFind_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgStopFind::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStopFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgStopFind::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgStopFind*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgStopFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStopFind)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStopFind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStopFind)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgStopFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStopFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStopFind)
}

::google::protobuf::uint8* CMsgStopFind::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStopFind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStopFind)
  return target;
}

size_t CMsgStopFind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStopFind)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStopFind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStopFind)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStopFind* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgStopFind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStopFind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStopFind)
    MergeFrom(*source);
  }
}

void CMsgStopFind::MergeFrom(const CMsgStopFind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStopFind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgStopFind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStopFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopFind::CopyFrom(const CMsgStopFind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStopFind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopFind::IsInitialized() const {
  return true;
}

void CMsgStopFind::Swap(CMsgStopFind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStopFind::InternalSwap(CMsgStopFind* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgStopFind::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetHorizontalScroll::InitAsDefaultInstance() {
}
class CMsgSetHorizontalScroll::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetHorizontalScroll* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scroll(CMsgSetHorizontalScroll* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetHorizontalScroll::kBrowserHandleFieldNumber;
const int CMsgSetHorizontalScroll::kScrollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetHorizontalScroll::CMsgSetHorizontalScroll()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetHorizontalScroll)
}
CMsgSetHorizontalScroll::CMsgSetHorizontalScroll(const CMsgSetHorizontalScroll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetHorizontalScroll)
}

void CMsgSetHorizontalScroll::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scroll_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
}

CMsgSetHorizontalScroll::~CMsgSetHorizontalScroll() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetHorizontalScroll)
  SharedDtor();
}

void CMsgSetHorizontalScroll::SharedDtor() {
}

void CMsgSetHorizontalScroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetHorizontalScroll& CMsgSetHorizontalScroll::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetHorizontalScroll_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetHorizontalScroll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetHorizontalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scroll_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetHorizontalScroll::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetHorizontalScroll*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scroll = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_scroll(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetHorizontalScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetHorizontalScroll)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scroll(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetHorizontalScroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetHorizontalScroll)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetHorizontalScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetHorizontalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scroll(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetHorizontalScroll)
}

::google::protobuf::uint8* CMsgSetHorizontalScroll::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetHorizontalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scroll(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetHorizontalScroll)
  return target;
}

size_t CMsgSetHorizontalScroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetHorizontalScroll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scroll = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetHorizontalScroll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetHorizontalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetHorizontalScroll* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetHorizontalScroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetHorizontalScroll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetHorizontalScroll)
    MergeFrom(*source);
  }
}

void CMsgSetHorizontalScroll::MergeFrom(const CMsgSetHorizontalScroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetHorizontalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_ = from.scroll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetHorizontalScroll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetHorizontalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetHorizontalScroll::CopyFrom(const CMsgSetHorizontalScroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetHorizontalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetHorizontalScroll::IsInitialized() const {
  return true;
}

void CMsgSetHorizontalScroll::Swap(CMsgSetHorizontalScroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetHorizontalScroll::InternalSwap(CMsgSetHorizontalScroll* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(scroll_, other->scroll_);
}

::google::protobuf::Metadata CMsgSetHorizontalScroll::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetVerticalScroll::InitAsDefaultInstance() {
}
class CMsgSetVerticalScroll::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetVerticalScroll* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scroll(CMsgSetVerticalScroll* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetVerticalScroll::kBrowserHandleFieldNumber;
const int CMsgSetVerticalScroll::kScrollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetVerticalScroll::CMsgSetVerticalScroll()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetVerticalScroll)
}
CMsgSetVerticalScroll::CMsgSetVerticalScroll(const CMsgSetVerticalScroll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&scroll_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetVerticalScroll)
}

void CMsgSetVerticalScroll::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scroll_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
}

CMsgSetVerticalScroll::~CMsgSetVerticalScroll() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetVerticalScroll)
  SharedDtor();
}

void CMsgSetVerticalScroll::SharedDtor() {
}

void CMsgSetVerticalScroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetVerticalScroll& CMsgSetVerticalScroll::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetVerticalScroll_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetVerticalScroll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetVerticalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scroll_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(scroll_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetVerticalScroll::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetVerticalScroll*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scroll = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_scroll(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetVerticalScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetVerticalScroll)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scroll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scroll(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetVerticalScroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetVerticalScroll)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetVerticalScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetVerticalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scroll(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetVerticalScroll)
}

::google::protobuf::uint8* CMsgSetVerticalScroll::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetVerticalScroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scroll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scroll(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetVerticalScroll)
  return target;
}

size_t CMsgSetVerticalScroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetVerticalScroll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scroll = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scroll());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetVerticalScroll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetVerticalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetVerticalScroll* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetVerticalScroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetVerticalScroll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetVerticalScroll)
    MergeFrom(*source);
  }
}

void CMsgSetVerticalScroll::MergeFrom(const CMsgSetVerticalScroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetVerticalScroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scroll_ = from.scroll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetVerticalScroll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetVerticalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetVerticalScroll::CopyFrom(const CMsgSetVerticalScroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetVerticalScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetVerticalScroll::IsInitialized() const {
  return true;
}

void CMsgSetVerticalScroll::Swap(CMsgSetVerticalScroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetVerticalScroll::InternalSwap(CMsgSetVerticalScroll* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(scroll_, other->scroll_);
}

::google::protobuf::Metadata CMsgSetVerticalScroll::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetZoomLevel::InitAsDefaultInstance() {
}
class CMsgSetZoomLevel::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetZoomLevel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_zoom(CMsgSetZoomLevel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetZoomLevel::kBrowserHandleFieldNumber;
const int CMsgSetZoomLevel::kZoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetZoomLevel::CMsgSetZoomLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetZoomLevel)
}
CMsgSetZoomLevel::CMsgSetZoomLevel(const CMsgSetZoomLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zoom_, &from.zoom_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&zoom_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetZoomLevel)
}

void CMsgSetZoomLevel::SharedCtor() {
  ::memset(&zoom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&browser_handle_) -
      reinterpret_cast<char*>(&zoom_)) + sizeof(browser_handle_));
}

CMsgSetZoomLevel::~CMsgSetZoomLevel() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetZoomLevel)
  SharedDtor();
}

void CMsgSetZoomLevel::SharedDtor() {
}

void CMsgSetZoomLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetZoomLevel& CMsgSetZoomLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetZoomLevel_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetZoomLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetZoomLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&zoom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&zoom_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetZoomLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetZoomLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double zoom = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_zoom(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetZoomLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetZoomLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double zoom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_zoom(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetZoomLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetZoomLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetZoomLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetZoomLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional double zoom = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->zoom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetZoomLevel)
}

::google::protobuf::uint8* CMsgSetZoomLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetZoomLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional double zoom = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->zoom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetZoomLevel)
  return target;
}

size_t CMsgSetZoomLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetZoomLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double zoom = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetZoomLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetZoomLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetZoomLevel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetZoomLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetZoomLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetZoomLevel)
    MergeFrom(*source);
  }
}

void CMsgSetZoomLevel::MergeFrom(const CMsgSetZoomLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetZoomLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      zoom_ = from.zoom_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetZoomLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetZoomLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetZoomLevel::CopyFrom(const CMsgSetZoomLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetZoomLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetZoomLevel::IsInitialized() const {
  return true;
}

void CMsgSetZoomLevel::Swap(CMsgSetZoomLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetZoomLevel::InternalSwap(CMsgSetZoomLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(zoom_, other->zoom_);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgSetZoomLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgViewSource::InitAsDefaultInstance() {
}
class CMsgViewSource::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgViewSource* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgViewSource::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgViewSource::CMsgViewSource()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgViewSource)
}
CMsgViewSource::CMsgViewSource(const CMsgViewSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgViewSource)
}

void CMsgViewSource::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgViewSource::~CMsgViewSource() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgViewSource)
  SharedDtor();
}

void CMsgViewSource::SharedDtor() {
}

void CMsgViewSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgViewSource& CMsgViewSource::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgViewSource_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgViewSource::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgViewSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgViewSource::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgViewSource*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgViewSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgViewSource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgViewSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgViewSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgViewSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgViewSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgViewSource)
}

::google::protobuf::uint8* CMsgViewSource::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgViewSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgViewSource)
  return target;
}

size_t CMsgViewSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgViewSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgViewSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgViewSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgViewSource* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgViewSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgViewSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgViewSource)
    MergeFrom(*source);
  }
}

void CMsgViewSource::MergeFrom(const CMsgViewSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgViewSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgViewSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgViewSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgViewSource::CopyFrom(const CMsgViewSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgViewSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgViewSource::IsInitialized() const {
  return true;
}

void CMsgViewSource::Swap(CMsgViewSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgViewSource::InternalSwap(CMsgViewSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgViewSource::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBrowserReady::InitAsDefaultInstance() {
}
class CMsgBrowserReady::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgBrowserReady* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_vr_overlay_key(CMsgBrowserReady* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hwnd_browser(CMsgBrowserReady* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBrowserReady::kBrowserHandleFieldNumber;
const int CMsgBrowserReady::kVrOverlayKeyFieldNumber;
const int CMsgBrowserReady::kHwndBrowserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBrowserReady::CMsgBrowserReady()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBrowserReady)
}
CMsgBrowserReady::CMsgBrowserReady(const CMsgBrowserReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vr_overlay_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vr_overlay_key()) {
    vr_overlay_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_overlay_key_);
  }
  ::memcpy(&hwnd_browser_, &from.hwnd_browser_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&hwnd_browser_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBrowserReady)
}

void CMsgBrowserReady::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgBrowserReady_htmlmessages_2eproto.base);
  vr_overlay_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hwnd_browser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&browser_handle_) -
      reinterpret_cast<char*>(&hwnd_browser_)) + sizeof(browser_handle_));
}

CMsgBrowserReady::~CMsgBrowserReady() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBrowserReady)
  SharedDtor();
}

void CMsgBrowserReady::SharedDtor() {
  vr_overlay_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgBrowserReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBrowserReady& CMsgBrowserReady::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBrowserReady_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBrowserReady::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBrowserReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vr_overlay_key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&hwnd_browser_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&hwnd_browser_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBrowserReady::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBrowserReady*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string vr_overlay_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgBrowserReady.vr_overlay_key");
        object = msg->mutable_vr_overlay_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 hwnd_browser = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_hwnd_browser(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBrowserReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBrowserReady)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vr_overlay_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vr_overlay_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vr_overlay_key().data(), static_cast<int>(this->vr_overlay_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgBrowserReady.vr_overlay_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hwnd_browser = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_hwnd_browser(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hwnd_browser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBrowserReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBrowserReady)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBrowserReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBrowserReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string vr_overlay_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_overlay_key().data(), static_cast<int>(this->vr_overlay_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserReady.vr_overlay_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vr_overlay_key(), output);
  }

  // optional fixed64 hwnd_browser = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->hwnd_browser(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBrowserReady)
}

::google::protobuf::uint8* CMsgBrowserReady::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBrowserReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string vr_overlay_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vr_overlay_key().data(), static_cast<int>(this->vr_overlay_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgBrowserReady.vr_overlay_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vr_overlay_key(), target);
  }

  // optional fixed64 hwnd_browser = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->hwnd_browser(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBrowserReady)
  return target;
}

size_t CMsgBrowserReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBrowserReady)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string vr_overlay_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vr_overlay_key());
    }

    // optional fixed64 hwnd_browser = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBrowserReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBrowserReady)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBrowserReady* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBrowserReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBrowserReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBrowserReady)
    MergeFrom(*source);
  }
}

void CMsgBrowserReady::MergeFrom(const CMsgBrowserReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBrowserReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      vr_overlay_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vr_overlay_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      hwnd_browser_ = from.hwnd_browser_;
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBrowserReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBrowserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBrowserReady::CopyFrom(const CMsgBrowserReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBrowserReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBrowserReady::IsInitialized() const {
  return true;
}

void CMsgBrowserReady::Swap(CMsgBrowserReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBrowserReady::InternalSwap(CMsgBrowserReady* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vr_overlay_key_.Swap(&other->vr_overlay_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hwnd_browser_, other->hwnd_browser_);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgBrowserReady::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgURLChanged::InitAsDefaultInstance() {
}
class CMsgURLChanged::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgURLChanged* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_url(CMsgURLChanged* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_postdata(CMsgURLChanged* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bisredirect(CMsgURLChanged* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_pagetitle(CMsgURLChanged* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bnewnavigation(CMsgURLChanged* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgURLChanged::kBrowserHandleFieldNumber;
const int CMsgURLChanged::kUrlFieldNumber;
const int CMsgURLChanged::kPostDataFieldNumber;
const int CMsgURLChanged::kBIsRedirectFieldNumber;
const int CMsgURLChanged::kPagetitleFieldNumber;
const int CMsgURLChanged::kBNewNavigationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgURLChanged::CMsgURLChanged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgURLChanged)
}
CMsgURLChanged::CMsgURLChanged(const CMsgURLChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  postdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_postdata()) {
    postdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postdata_);
  }
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagetitle()) {
    pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bnewnavigation_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bnewnavigation_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgURLChanged)
}

void CMsgURLChanged::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgURLChanged_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bnewnavigation_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(bnewnavigation_));
}

CMsgURLChanged::~CMsgURLChanged() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgURLChanged)
  SharedDtor();
}

void CMsgURLChanged::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgURLChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgURLChanged& CMsgURLChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgURLChanged_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgURLChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgURLChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      postdata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      pagetitle_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bnewnavigation_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bnewnavigation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgURLChanged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgURLChanged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgURLChanged.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string postData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgURLChanged.postData");
        object = msg->mutable_postdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool bIsRedirect = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bisredirect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string pagetitle = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgURLChanged.pagetitle");
        object = msg->mutable_pagetitle();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool bNewNavigation = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bnewnavigation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgURLChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgURLChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgURLChanged.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string postData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postdata().data(), static_cast<int>(this->postdata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgURLChanged.postData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bIsRedirect = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_bisredirect(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisredirect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pagetitle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagetitle().data(), static_cast<int>(this->pagetitle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgURLChanged.pagetitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bNewNavigation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_bnewnavigation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bnewnavigation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgURLChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgURLChanged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgURLChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgURLChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string postData = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), static_cast<int>(this->postdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.postData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->postdata(), output);
  }

  // optional bool bIsRedirect = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bisredirect(), output);
  }

  // optional string pagetitle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), static_cast<int>(this->pagetitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.pagetitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pagetitle(), output);
  }

  // optional bool bNewNavigation = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bnewnavigation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgURLChanged)
}

::google::protobuf::uint8* CMsgURLChanged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgURLChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string postData = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), static_cast<int>(this->postdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.postData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->postdata(), target);
  }

  // optional bool bIsRedirect = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bisredirect(), target);
  }

  // optional string pagetitle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), static_cast<int>(this->pagetitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgURLChanged.pagetitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pagetitle(), target);
  }

  // optional bool bNewNavigation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bnewnavigation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgURLChanged)
  return target;
}

size_t CMsgURLChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgURLChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string postData = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postdata());
    }

    // optional string pagetitle = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetitle());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bIsRedirect = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool bNewNavigation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgURLChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgURLChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgURLChanged* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgURLChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgURLChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgURLChanged)
    MergeFrom(*source);
  }
}

void CMsgURLChanged::MergeFrom(const CMsgURLChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgURLChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      postdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postdata_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
    }
    if (cached_has_bits & 0x00000008u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      bisredirect_ = from.bisredirect_;
    }
    if (cached_has_bits & 0x00000020u) {
      bnewnavigation_ = from.bnewnavigation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgURLChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgURLChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgURLChanged::CopyFrom(const CMsgURLChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgURLChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgURLChanged::IsInitialized() const {
  return true;
}

void CMsgURLChanged::Swap(CMsgURLChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgURLChanged::InternalSwap(CMsgURLChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  postdata_.Swap(&other->postdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pagetitle_.Swap(&other->pagetitle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(bisredirect_, other->bisredirect_);
  swap(bnewnavigation_, other->bnewnavigation_);
}

::google::protobuf::Metadata CMsgURLChanged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CHTMLHeader::InitAsDefaultInstance() {
}
class CHTMLHeader::HasBitSetters {
 public:
  static void set_has_key(CHTMLHeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CHTMLHeader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHTMLHeader::kKeyFieldNumber;
const int CHTMLHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHTMLHeader::CHTMLHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHTMLHeader)
}
CHTMLHeader::CHTMLHeader(const CHTMLHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHTMLHeader)
}

void CHTMLHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CHTMLHeader_htmlmessages_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CHTMLHeader::~CHTMLHeader() {
  // @@protoc_insertion_point(destructor:proto.steam.CHTMLHeader)
  SharedDtor();
}

void CHTMLHeader::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHTMLHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHTMLHeader& CHTMLHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CHTMLHeader_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CHTMLHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHTMLHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CHTMLHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CHTMLHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CHTMLHeader.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CHTMLHeader.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CHTMLHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHTMLHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHTMLHeader.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHTMLHeader.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHTMLHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHTMLHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CHTMLHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHTMLHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLHeader.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLHeader.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHTMLHeader)
}

::google::protobuf::uint8* CHTMLHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHTMLHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLHeader.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLHeader.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHTMLHeader)
  return target;
}

size_t CHTMLHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHTMLHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHTMLHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHTMLHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CHTMLHeader* source =
      ::google::protobuf::DynamicCastToGenerated<CHTMLHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHTMLHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHTMLHeader)
    MergeFrom(*source);
  }
}

void CHTMLHeader::MergeFrom(const CHTMLHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHTMLHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CHTMLHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHTMLHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHTMLHeader::CopyFrom(const CHTMLHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHTMLHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHTMLHeader::IsInitialized() const {
  return true;
}

void CHTMLHeader::Swap(CHTMLHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHTMLHeader::InternalSwap(CHTMLHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CHTMLHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CHTMLPageSecurityInfo::InitAsDefaultInstance() {
}
class CHTMLPageSecurityInfo::HasBitSetters {
 public:
  static void set_has_bissecure(CHTMLPageSecurityInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bhascerterror(CHTMLPageSecurityInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_issuername(CHTMLPageSecurityInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_certname(CHTMLPageSecurityInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_certexpiry(CHTMLPageSecurityInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_ncertbits(CHTMLPageSecurityInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_bisevcert(CHTMLPageSecurityInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHTMLPageSecurityInfo::kBIsSecureFieldNumber;
const int CHTMLPageSecurityInfo::kBHasCertErrorFieldNumber;
const int CHTMLPageSecurityInfo::kIssuerNameFieldNumber;
const int CHTMLPageSecurityInfo::kCertNameFieldNumber;
const int CHTMLPageSecurityInfo::kCertExpiryFieldNumber;
const int CHTMLPageSecurityInfo::kNCertBitsFieldNumber;
const int CHTMLPageSecurityInfo::kBIsEVCertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHTMLPageSecurityInfo::CHTMLPageSecurityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHTMLPageSecurityInfo)
}
CHTMLPageSecurityInfo::CHTMLPageSecurityInfo(const CHTMLPageSecurityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuername()) {
    issuername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuername_);
  }
  certname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_certname()) {
    certname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certname_);
  }
  ::memcpy(&bissecure_, &from.bissecure_,
    static_cast<size_t>(reinterpret_cast<char*>(&ncertbits_) -
    reinterpret_cast<char*>(&bissecure_)) + sizeof(ncertbits_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHTMLPageSecurityInfo)
}

void CHTMLPageSecurityInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CHTMLPageSecurityInfo_htmlmessages_2eproto.base);
  issuername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bissecure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ncertbits_) -
      reinterpret_cast<char*>(&bissecure_)) + sizeof(ncertbits_));
}

CHTMLPageSecurityInfo::~CHTMLPageSecurityInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CHTMLPageSecurityInfo)
  SharedDtor();
}

void CHTMLPageSecurityInfo::SharedDtor() {
  issuername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHTMLPageSecurityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHTMLPageSecurityInfo& CHTMLPageSecurityInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CHTMLPageSecurityInfo_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CHTMLPageSecurityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHTMLPageSecurityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      issuername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      certname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&bissecure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ncertbits_) -
        reinterpret_cast<char*>(&bissecure_)) + sizeof(ncertbits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CHTMLPageSecurityInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CHTMLPageSecurityInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool bIsSecure = 1 [default = false];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bissecure(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bHasCertError = 2 [default = false];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bhascerterror(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string issuerName = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CHTMLPageSecurityInfo.issuerName");
        object = msg->mutable_issuername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string certName = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CHTMLPageSecurityInfo.certName");
        object = msg->mutable_certname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 certExpiry = 5 [default = 0];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_certexpiry(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 nCertBits = 6 [default = 0];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_ncertbits(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bIsEVCert = 7 [default = false];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_bisevcert(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CHTMLPageSecurityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHTMLPageSecurityInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsSecure = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bissecure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissecure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bHasCertError = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bhascerterror(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhascerterror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string issuerName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issuername().data(), static_cast<int>(this->issuername().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHTMLPageSecurityInfo.issuerName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string certName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->certname().data(), static_cast<int>(this->certname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHTMLPageSecurityInfo.certName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 certExpiry = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_certexpiry(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &certexpiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nCertBits = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_ncertbits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncertbits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bIsEVCert = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_bisevcert(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisevcert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHTMLPageSecurityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHTMLPageSecurityInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CHTMLPageSecurityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHTMLPageSecurityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bIsSecure = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bissecure(), output);
  }

  // optional bool bHasCertError = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bhascerterror(), output);
  }

  // optional string issuerName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuername().data(), static_cast<int>(this->issuername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLPageSecurityInfo.issuerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->issuername(), output);
  }

  // optional string certName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certname().data(), static_cast<int>(this->certname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLPageSecurityInfo.certName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->certname(), output);
  }

  // optional int32 certExpiry = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->certexpiry(), output);
  }

  // optional int32 nCertBits = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ncertbits(), output);
  }

  // optional bool bIsEVCert = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bisevcert(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHTMLPageSecurityInfo)
}

::google::protobuf::uint8* CHTMLPageSecurityInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHTMLPageSecurityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bIsSecure = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bissecure(), target);
  }

  // optional bool bHasCertError = 2 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bhascerterror(), target);
  }

  // optional string issuerName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuername().data(), static_cast<int>(this->issuername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLPageSecurityInfo.issuerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->issuername(), target);
  }

  // optional string certName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certname().data(), static_cast<int>(this->certname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHTMLPageSecurityInfo.certName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->certname(), target);
  }

  // optional int32 certExpiry = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->certexpiry(), target);
  }

  // optional int32 nCertBits = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ncertbits(), target);
  }

  // optional bool bIsEVCert = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bisevcert(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHTMLPageSecurityInfo)
  return target;
}

size_t CHTMLPageSecurityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHTMLPageSecurityInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string issuerName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuername());
    }

    // optional string certName = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->certname());
    }

    // optional bool bIsSecure = 1 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool bHasCertError = 2 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bIsEVCert = 7 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 certExpiry = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->certexpiry());
    }

    // optional int32 nCertBits = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncertbits());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHTMLPageSecurityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHTMLPageSecurityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CHTMLPageSecurityInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CHTMLPageSecurityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHTMLPageSecurityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHTMLPageSecurityInfo)
    MergeFrom(*source);
  }
}

void CHTMLPageSecurityInfo::MergeFrom(const CHTMLPageSecurityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHTMLPageSecurityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      issuername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuername_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      certname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certname_);
    }
    if (cached_has_bits & 0x00000004u) {
      bissecure_ = from.bissecure_;
    }
    if (cached_has_bits & 0x00000008u) {
      bhascerterror_ = from.bhascerterror_;
    }
    if (cached_has_bits & 0x00000010u) {
      bisevcert_ = from.bisevcert_;
    }
    if (cached_has_bits & 0x00000020u) {
      certexpiry_ = from.certexpiry_;
    }
    if (cached_has_bits & 0x00000040u) {
      ncertbits_ = from.ncertbits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHTMLPageSecurityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHTMLPageSecurityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHTMLPageSecurityInfo::CopyFrom(const CHTMLPageSecurityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHTMLPageSecurityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHTMLPageSecurityInfo::IsInitialized() const {
  return true;
}

void CHTMLPageSecurityInfo::Swap(CHTMLPageSecurityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHTMLPageSecurityInfo::InternalSwap(CHTMLPageSecurityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  issuername_.Swap(&other->issuername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  certname_.Swap(&other->certname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bissecure_, other->bissecure_);
  swap(bhascerterror_, other->bhascerterror_);
  swap(bisevcert_, other->bisevcert_);
  swap(certexpiry_, other->certexpiry_);
  swap(ncertbits_, other->ncertbits_);
}

::google::protobuf::Metadata CHTMLPageSecurityInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFinishedRequest::InitAsDefaultInstance() {
}
class CMsgFinishedRequest::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgFinishedRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgFinishedRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pagetitle(CMsgFinishedRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFinishedRequest::kBrowserHandleFieldNumber;
const int CMsgFinishedRequest::kUrlFieldNumber;
const int CMsgFinishedRequest::kPageTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFinishedRequest::CMsgFinishedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFinishedRequest)
}
CMsgFinishedRequest::CMsgFinishedRequest(const CMsgFinishedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagetitle()) {
    pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFinishedRequest)
}

void CMsgFinishedRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgFinishedRequest_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgFinishedRequest::~CMsgFinishedRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFinishedRequest)
  SharedDtor();
}

void CMsgFinishedRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgFinishedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFinishedRequest& CMsgFinishedRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFinishedRequest_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFinishedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pagetitle_.ClearNonDefaultToEmptyNoArena();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFinishedRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFinishedRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgFinishedRequest.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string pageTitle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgFinishedRequest.pageTitle");
        object = msg->mutable_pagetitle();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFinishedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFinishedRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFinishedRequest.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pageTitle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagetitle().data(), static_cast<int>(this->pagetitle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFinishedRequest.pageTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFinishedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFinishedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFinishedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFinishedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFinishedRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), static_cast<int>(this->pagetitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFinishedRequest.pageTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pagetitle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFinishedRequest)
}

::google::protobuf::uint8* CMsgFinishedRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFinishedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFinishedRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), static_cast<int>(this->pagetitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFinishedRequest.pageTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pagetitle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFinishedRequest)
  return target;
}

size_t CMsgFinishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFinishedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string pageTitle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetitle());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFinishedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFinishedRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFinishedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFinishedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFinishedRequest)
    MergeFrom(*source);
  }
}

void CMsgFinishedRequest::MergeFrom(const CMsgFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFinishedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFinishedRequest::CopyFrom(const CMsgFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFinishedRequest::IsInitialized() const {
  return true;
}

void CMsgFinishedRequest::Swap(CMsgFinishedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFinishedRequest::InternalSwap(CMsgFinishedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pagetitle_.Swap(&other->pagetitle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgFinishedRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLoadedRequest::InitAsDefaultInstance() {
}
class CMsgLoadedRequest::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgLoadedRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgLoadedRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pagetitle(CMsgLoadedRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLoadedRequest::kBrowserHandleFieldNumber;
const int CMsgLoadedRequest::kUrlFieldNumber;
const int CMsgLoadedRequest::kPageTitleFieldNumber;
const int CMsgLoadedRequest::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLoadedRequest::CMsgLoadedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLoadedRequest)
}
CMsgLoadedRequest::CMsgLoadedRequest(const CMsgLoadedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pagetitle()) {
    pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLoadedRequest)
}

void CMsgLoadedRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLoadedRequest_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgLoadedRequest::~CMsgLoadedRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLoadedRequest)
  SharedDtor();
}

void CMsgLoadedRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagetitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLoadedRequest& CMsgLoadedRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLoadedRequest_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgLoadedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLoadedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pagetitle_.ClearNonDefaultToEmptyNoArena();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLoadedRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLoadedRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgLoadedRequest.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string pageTitle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgLoadedRequest.pageTitle");
        object = msg->mutable_pagetitle();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CHTMLHeader headers = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CHTMLHeader::_InternalParse;
          object = msg->add_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLoadedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLoadedRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadedRequest.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pageTitle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagetitle().data(), static_cast<int>(this->pagetitle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadedRequest.pageTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CHTMLHeader headers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLoadedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLoadedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLoadedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLoadedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadedRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), static_cast<int>(this->pagetitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadedRequest.pageTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pagetitle(), output);
  }

  // repeated .proto.steam.CHTMLHeader headers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->headers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLoadedRequest)
}

::google::protobuf::uint8* CMsgLoadedRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLoadedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadedRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string pageTitle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagetitle().data(), static_cast<int>(this->pagetitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadedRequest.pageTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pagetitle(), target);
  }

  // repeated .proto.steam.CHTMLHeader headers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->headers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLoadedRequest)
  return target;
}

size_t CMsgLoadedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLoadedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CHTMLHeader headers = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string pageTitle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetitle());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLoadedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLoadedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadedRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLoadedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLoadedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLoadedRequest)
    MergeFrom(*source);
  }
}

void CMsgLoadedRequest::MergeFrom(const CMsgLoadedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLoadedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pagetitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetitle_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLoadedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadedRequest::CopyFrom(const CMsgLoadedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLoadedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadedRequest::IsInitialized() const {
  return true;
}

void CMsgLoadedRequest::Swap(CMsgLoadedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLoadedRequest::InternalSwap(CMsgLoadedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pagetitle_.Swap(&other->pagetitle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgLoadedRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPageSecurity::InitAsDefaultInstance() {
  ::proto::steam::_CMsgPageSecurity_default_instance_._instance.get_mutable()->security_info_ = const_cast< ::proto::steam::CHTMLPageSecurityInfo*>(
      ::proto::steam::CHTMLPageSecurityInfo::internal_default_instance());
}
class CMsgPageSecurity::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgPageSecurity* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgPageSecurity* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CHTMLPageSecurityInfo& security_info(const CMsgPageSecurity* msg);
  static void set_has_security_info(CMsgPageSecurity* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::steam::CHTMLPageSecurityInfo&
CMsgPageSecurity::HasBitSetters::security_info(const CMsgPageSecurity* msg) {
  return *msg->security_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPageSecurity::kBrowserHandleFieldNumber;
const int CMsgPageSecurity::kUrlFieldNumber;
const int CMsgPageSecurity::kSecurityInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPageSecurity::CMsgPageSecurity()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPageSecurity)
}
CMsgPageSecurity::CMsgPageSecurity(const CMsgPageSecurity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_security_info()) {
    security_info_ = new ::proto::steam::CHTMLPageSecurityInfo(*from.security_info_);
  } else {
    security_info_ = nullptr;
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPageSecurity)
}

void CMsgPageSecurity::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPageSecurity_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&security_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&browser_handle_) -
      reinterpret_cast<char*>(&security_info_)) + sizeof(browser_handle_));
}

CMsgPageSecurity::~CMsgPageSecurity() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPageSecurity)
  SharedDtor();
}

void CMsgPageSecurity::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete security_info_;
}

void CMsgPageSecurity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPageSecurity& CMsgPageSecurity::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPageSecurity_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgPageSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPageSecurity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(security_info_ != nullptr);
      security_info_->Clear();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPageSecurity::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPageSecurity*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgPageSecurity.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CHTMLPageSecurityInfo::_InternalParse;
        object = msg->mutable_security_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPageSecurity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPageSecurity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPageSecurity.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_security_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPageSecurity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPageSecurity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPageSecurity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPageSecurity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPageSecurity.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::security_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPageSecurity)
}

::google::protobuf::uint8* CMsgPageSecurity::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPageSecurity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPageSecurity.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::security_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPageSecurity)
  return target;
}

size_t CMsgPageSecurity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPageSecurity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .proto.steam.CHTMLPageSecurityInfo security_info = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *security_info_);
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPageSecurity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPageSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPageSecurity* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPageSecurity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPageSecurity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPageSecurity)
    MergeFrom(*source);
  }
}

void CMsgPageSecurity::MergeFrom(const CMsgPageSecurity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPageSecurity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_security_info()->::proto::steam::CHTMLPageSecurityInfo::MergeFrom(from.security_info());
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPageSecurity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPageSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPageSecurity::CopyFrom(const CMsgPageSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPageSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPageSecurity::IsInitialized() const {
  return true;
}

void CMsgPageSecurity::Swap(CMsgPageSecurity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPageSecurity::InternalSwap(CMsgPageSecurity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(security_info_, other->security_info_);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgPageSecurity::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgStartRequest::InitAsDefaultInstance() {
}
class CMsgStartRequest::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgStartRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_url(CMsgStartRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_target(CMsgStartRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_postdata(CMsgStartRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bisredirect(CMsgStartRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStartRequest::kBrowserHandleFieldNumber;
const int CMsgStartRequest::kUrlFieldNumber;
const int CMsgStartRequest::kTargetFieldNumber;
const int CMsgStartRequest::kPostDataFieldNumber;
const int CMsgStartRequest::kBIsRedirectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStartRequest::CMsgStartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStartRequest)
}
CMsgStartRequest::CMsgStartRequest(const CMsgStartRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target()) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  postdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_postdata()) {
    postdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postdata_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bisredirect_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bisredirect_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStartRequest)
}

void CMsgStartRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgStartRequest_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bisredirect_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(bisredirect_));
}

CMsgStartRequest::~CMsgStartRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStartRequest)
  SharedDtor();
}

void CMsgStartRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgStartRequest& CMsgStartRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgStartRequest_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      target_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      postdata_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bisredirect_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bisredirect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgStartRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgStartRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgStartRequest.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string target = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgStartRequest.target");
        object = msg->mutable_target();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string postData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgStartRequest.postData");
        object = msg->mutable_postdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool bIsRedirect = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bisredirect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStartRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgStartRequest.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target().data(), static_cast<int>(this->target().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgStartRequest.target");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string postData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->postdata().data(), static_cast<int>(this->postdata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgStartRequest.postData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bIsRedirect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_bisredirect(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisredirect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStartRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string target = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target(), output);
  }

  // optional string postData = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), static_cast<int>(this->postdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.postData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->postdata(), output);
  }

  // optional bool bIsRedirect = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bisredirect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStartRequest)
}

::google::protobuf::uint8* CMsgStartRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string target = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  // optional string postData = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->postdata().data(), static_cast<int>(this->postdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStartRequest.postData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->postdata(), target);
  }

  // optional bool bIsRedirect = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bisredirect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStartRequest)
  return target;
}

size_t CMsgStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStartRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string target = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional string postData = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postdata());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bIsRedirect = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStartRequest)
    MergeFrom(*source);
  }
}

void CMsgStartRequest::MergeFrom(const CMsgStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      postdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postdata_);
    }
    if (cached_has_bits & 0x00000008u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      bisredirect_ = from.bisredirect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartRequest::CopyFrom(const CMsgStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartRequest::IsInitialized() const {
  return true;
}

void CMsgStartRequest::Swap(CMsgStartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStartRequest::InternalSwap(CMsgStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_.Swap(&other->target_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  postdata_.Swap(&other->postdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(bisredirect_, other->bisredirect_);
}

::google::protobuf::Metadata CMsgStartRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgStartRequestResponse::InitAsDefaultInstance() {
}
class CMsgStartRequestResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgStartRequestResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ballow(CMsgStartRequestResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStartRequestResponse::kBrowserHandleFieldNumber;
const int CMsgStartRequestResponse::kBAllowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStartRequestResponse::CMsgStartRequestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStartRequestResponse)
}
CMsgStartRequestResponse::CMsgStartRequestResponse(const CMsgStartRequestResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStartRequestResponse)
}

void CMsgStartRequestResponse::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ballow_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
}

CMsgStartRequestResponse::~CMsgStartRequestResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStartRequestResponse)
  SharedDtor();
}

void CMsgStartRequestResponse::SharedDtor() {
}

void CMsgStartRequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgStartRequestResponse& CMsgStartRequestResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgStartRequestResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgStartRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStartRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ballow_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgStartRequestResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgStartRequestResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bAllow = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ballow(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgStartRequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStartRequestResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bAllow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ballow(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStartRequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStartRequestResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgStartRequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStartRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ballow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStartRequestResponse)
}

::google::protobuf::uint8* CMsgStartRequestResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStartRequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ballow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStartRequestResponse)
  return target;
}

size_t CMsgStartRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStartRequestResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bAllow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStartRequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStartRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartRequestResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgStartRequestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStartRequestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStartRequestResponse)
    MergeFrom(*source);
  }
}

void CMsgStartRequestResponse::MergeFrom(const CMsgStartRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStartRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ballow_ = from.ballow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartRequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStartRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartRequestResponse::CopyFrom(const CMsgStartRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStartRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartRequestResponse::IsInitialized() const {
  return true;
}

void CMsgStartRequestResponse::Swap(CMsgStartRequestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStartRequestResponse::InternalSwap(CMsgStartRequestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(ballow_, other->ballow_);
}

::google::protobuf::Metadata CMsgStartRequestResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgShowPopup::InitAsDefaultInstance() {
}
class CMsgShowPopup::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgShowPopup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgShowPopup::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgShowPopup::CMsgShowPopup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgShowPopup)
}
CMsgShowPopup::CMsgShowPopup(const CMsgShowPopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgShowPopup)
}

void CMsgShowPopup::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgShowPopup::~CMsgShowPopup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgShowPopup)
  SharedDtor();
}

void CMsgShowPopup::SharedDtor() {
}

void CMsgShowPopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgShowPopup& CMsgShowPopup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgShowPopup_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgShowPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgShowPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgShowPopup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgShowPopup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgShowPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgShowPopup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgShowPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgShowPopup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgShowPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgShowPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgShowPopup)
}

::google::protobuf::uint8* CMsgShowPopup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgShowPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgShowPopup)
  return target;
}

size_t CMsgShowPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgShowPopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgShowPopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgShowPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowPopup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgShowPopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgShowPopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgShowPopup)
    MergeFrom(*source);
  }
}

void CMsgShowPopup::MergeFrom(const CMsgShowPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgShowPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgShowPopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgShowPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowPopup::CopyFrom(const CMsgShowPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgShowPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowPopup::IsInitialized() const {
  return true;
}

void CMsgShowPopup::Swap(CMsgShowPopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgShowPopup::InternalSwap(CMsgShowPopup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgShowPopup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHidePopup::InitAsDefaultInstance() {
}
class CMsgHidePopup::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgHidePopup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHidePopup::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHidePopup::CMsgHidePopup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgHidePopup)
}
CMsgHidePopup::CMsgHidePopup(const CMsgHidePopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgHidePopup)
}

void CMsgHidePopup::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgHidePopup::~CMsgHidePopup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgHidePopup)
  SharedDtor();
}

void CMsgHidePopup::SharedDtor() {
}

void CMsgHidePopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHidePopup& CMsgHidePopup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHidePopup_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHidePopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgHidePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHidePopup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHidePopup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHidePopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgHidePopup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgHidePopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgHidePopup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHidePopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgHidePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgHidePopup)
}

::google::protobuf::uint8* CMsgHidePopup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgHidePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgHidePopup)
  return target;
}

size_t CMsgHidePopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgHidePopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHidePopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgHidePopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHidePopup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHidePopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgHidePopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgHidePopup)
    MergeFrom(*source);
  }
}

void CMsgHidePopup::MergeFrom(const CMsgHidePopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgHidePopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgHidePopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgHidePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHidePopup::CopyFrom(const CMsgHidePopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgHidePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHidePopup::IsInitialized() const {
  return true;
}

void CMsgHidePopup::Swap(CMsgHidePopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHidePopup::InternalSwap(CMsgHidePopup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgHidePopup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSizePopup::InitAsDefaultInstance() {
}
class CMsgSizePopup::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSizePopup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgSizePopup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(CMsgSizePopup* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_wide(CMsgSizePopup* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tall(CMsgSizePopup* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSizePopup::kBrowserHandleFieldNumber;
const int CMsgSizePopup::kXFieldNumber;
const int CMsgSizePopup::kYFieldNumber;
const int CMsgSizePopup::kWideFieldNumber;
const int CMsgSizePopup::kTallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSizePopup::CMsgSizePopup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSizePopup)
}
CMsgSizePopup::CMsgSizePopup(const CMsgSizePopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSizePopup)
}

void CMsgSizePopup::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tall_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
}

CMsgSizePopup::~CMsgSizePopup() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSizePopup)
  SharedDtor();
}

void CMsgSizePopup::SharedDtor() {
}

void CMsgSizePopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSizePopup& CMsgSizePopup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSizePopup_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSizePopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSizePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tall_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSizePopup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSizePopup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 wide = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_wide(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tall = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_tall(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSizePopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSizePopup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wide = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_wide(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tall = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_tall(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSizePopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSizePopup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSizePopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSizePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wide(), output);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tall(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSizePopup)
}

::google::protobuf::uint8* CMsgSizePopup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSizePopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wide(), target);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tall(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSizePopup)
  return target;
}

size_t CMsgSizePopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSizePopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 wide = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }

    // optional uint32 tall = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSizePopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSizePopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSizePopup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSizePopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSizePopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSizePopup)
    MergeFrom(*source);
  }
}

void CMsgSizePopup::MergeFrom(const CMsgSizePopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSizePopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000010u) {
      tall_ = from.tall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSizePopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSizePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSizePopup::CopyFrom(const CMsgSizePopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSizePopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSizePopup::IsInitialized() const {
  return true;
}

void CMsgSizePopup::Swap(CMsgSizePopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSizePopup::InternalSwap(CMsgSizePopup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(wide_, other->wide_);
  swap(tall_, other->tall_);
}

::google::protobuf::Metadata CMsgSizePopup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgOpenNewTab::InitAsDefaultInstance() {
}
class CMsgOpenNewTab::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgOpenNewTab* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_url(CMsgOpenNewTab* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_bforeground(CMsgOpenNewTab* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgOpenNewTab::kBrowserHandleFieldNumber;
const int CMsgOpenNewTab::kUrlFieldNumber;
const int CMsgOpenNewTab::kBForegroundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgOpenNewTab::CMsgOpenNewTab()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgOpenNewTab)
}
CMsgOpenNewTab::CMsgOpenNewTab(const CMsgOpenNewTab& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bforeground_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bforeground_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgOpenNewTab)
}

void CMsgOpenNewTab::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgOpenNewTab_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bforeground_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(bforeground_));
}

CMsgOpenNewTab::~CMsgOpenNewTab() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgOpenNewTab)
  SharedDtor();
}

void CMsgOpenNewTab::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgOpenNewTab::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgOpenNewTab& CMsgOpenNewTab::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgOpenNewTab_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgOpenNewTab::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgOpenNewTab)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bforeground_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bforeground_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgOpenNewTab::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgOpenNewTab*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgOpenNewTab.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool bForeground = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bforeground(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgOpenNewTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgOpenNewTab)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgOpenNewTab.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bForeground = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_bforeground(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bforeground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgOpenNewTab)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgOpenNewTab)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgOpenNewTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgOpenNewTab)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenNewTab.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional bool bForeground = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bforeground(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgOpenNewTab)
}

::google::protobuf::uint8* CMsgOpenNewTab::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgOpenNewTab)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenNewTab.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional bool bForeground = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bforeground(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgOpenNewTab)
  return target;
}

size_t CMsgOpenNewTab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgOpenNewTab)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bForeground = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgOpenNewTab::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgOpenNewTab)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgOpenNewTab* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgOpenNewTab>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgOpenNewTab)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgOpenNewTab)
    MergeFrom(*source);
  }
}

void CMsgOpenNewTab::MergeFrom(const CMsgOpenNewTab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgOpenNewTab)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      bforeground_ = from.bforeground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgOpenNewTab::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgOpenNewTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenNewTab::CopyFrom(const CMsgOpenNewTab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgOpenNewTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenNewTab::IsInitialized() const {
  return true;
}

void CMsgOpenNewTab::Swap(CMsgOpenNewTab* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgOpenNewTab::InternalSwap(CMsgOpenNewTab* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(bforeground_, other->bforeground_);
}

::google::protobuf::Metadata CMsgOpenNewTab::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPopupHTMLWindow::InitAsDefaultInstance() {
}
class CMsgPopupHTMLWindow::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgPopupHTMLWindow* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_url(CMsgPopupHTMLWindow* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgPopupHTMLWindow* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_y(CMsgPopupHTMLWindow* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_wide(CMsgPopupHTMLWindow* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_tall(CMsgPopupHTMLWindow* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_popup_index(CMsgPopupHTMLWindow* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_trusted_creator(CMsgPopupHTMLWindow* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPopupHTMLWindow::kBrowserHandleFieldNumber;
const int CMsgPopupHTMLWindow::kUrlFieldNumber;
const int CMsgPopupHTMLWindow::kXFieldNumber;
const int CMsgPopupHTMLWindow::kYFieldNumber;
const int CMsgPopupHTMLWindow::kWideFieldNumber;
const int CMsgPopupHTMLWindow::kTallFieldNumber;
const int CMsgPopupHTMLWindow::kPopupIndexFieldNumber;
const int CMsgPopupHTMLWindow::kTrustedCreatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPopupHTMLWindow::CMsgPopupHTMLWindow()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPopupHTMLWindow)
}
CMsgPopupHTMLWindow::CMsgPopupHTMLWindow(const CMsgPopupHTMLWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPopupHTMLWindow)
}

void CMsgPopupHTMLWindow::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPopupHTMLWindow_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trusted_creator_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(trusted_creator_));
  x_ = -2147483647 - 1;
  y_ = -2147483647 - 1;
}

CMsgPopupHTMLWindow::~CMsgPopupHTMLWindow() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPopupHTMLWindow)
  SharedDtor();
}

void CMsgPopupHTMLWindow::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPopupHTMLWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPopupHTMLWindow& CMsgPopupHTMLWindow::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPopupHTMLWindow_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgPopupHTMLWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPopupHTMLWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trusted_creator_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(trusted_creator_));
    x_ = -2147483647 - 1;
    y_ = -2147483647 - 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPopupHTMLWindow::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPopupHTMLWindow*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgPopupHTMLWindow.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 x = 3 [default = -2147483648];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 y = 4 [default = -2147483648];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 wide = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_wide(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tall = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_tall(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 popup_index = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_popup_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool trusted_creator = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_trusted_creator(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPopupHTMLWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPopupHTMLWindow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgPopupHTMLWindow.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 3 [default = -2147483648];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 4 [default = -2147483648];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wide = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_wide(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tall = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_tall(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 popup_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_popup_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &popup_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trusted_creator = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_trusted_creator(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPopupHTMLWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPopupHTMLWindow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPopupHTMLWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPopupHTMLWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPopupHTMLWindow.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional int32 x = 3 [default = -2147483648];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 y = 4 [default = -2147483648];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // optional uint32 wide = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wide(), output);
  }

  // optional uint32 tall = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tall(), output);
  }

  // optional uint32 popup_index = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->popup_index(), output);
  }

  // optional bool trusted_creator = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->trusted_creator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPopupHTMLWindow)
}

::google::protobuf::uint8* CMsgPopupHTMLWindow::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPopupHTMLWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgPopupHTMLWindow.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional int32 x = 3 [default = -2147483648];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 y = 4 [default = -2147483648];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  // optional uint32 wide = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wide(), target);
  }

  // optional uint32 tall = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tall(), target);
  }

  // optional uint32 popup_index = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->popup_index(), target);
  }

  // optional bool trusted_creator = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->trusted_creator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPopupHTMLWindow)
  return target;
}

size_t CMsgPopupHTMLWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPopupHTMLWindow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 wide = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }

    // optional uint32 tall = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }

    // optional uint32 popup_index = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->popup_index());
    }

    // optional bool trusted_creator = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 x = 3 [default = -2147483648];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 4 [default = -2147483648];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPopupHTMLWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPopupHTMLWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPopupHTMLWindow* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPopupHTMLWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPopupHTMLWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPopupHTMLWindow)
    MergeFrom(*source);
  }
}

void CMsgPopupHTMLWindow::MergeFrom(const CMsgPopupHTMLWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPopupHTMLWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000008u) {
      tall_ = from.tall_;
    }
    if (cached_has_bits & 0x00000010u) {
      popup_index_ = from.popup_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      trusted_creator_ = from.trusted_creator_;
    }
    if (cached_has_bits & 0x00000040u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000080u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPopupHTMLWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPopupHTMLWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopupHTMLWindow::CopyFrom(const CMsgPopupHTMLWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPopupHTMLWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopupHTMLWindow::IsInitialized() const {
  return true;
}

void CMsgPopupHTMLWindow::Swap(CMsgPopupHTMLWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPopupHTMLWindow::InternalSwap(CMsgPopupHTMLWindow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(wide_, other->wide_);
  swap(tall_, other->tall_);
  swap(popup_index_, other->popup_index_);
  swap(trusted_creator_, other->trusted_creator_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata CMsgPopupHTMLWindow::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPopupHTMLWindowResponse::InitAsDefaultInstance() {
}
class CMsgPopupHTMLWindowResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgPopupHTMLWindowResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ballow(CMsgPopupHTMLWindowResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPopupHTMLWindowResponse::kBrowserHandleFieldNumber;
const int CMsgPopupHTMLWindowResponse::kBAllowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPopupHTMLWindowResponse::CMsgPopupHTMLWindowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPopupHTMLWindowResponse)
}
CMsgPopupHTMLWindowResponse::CMsgPopupHTMLWindowResponse(const CMsgPopupHTMLWindowResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&ballow_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPopupHTMLWindowResponse)
}

void CMsgPopupHTMLWindowResponse::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ballow_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
}

CMsgPopupHTMLWindowResponse::~CMsgPopupHTMLWindowResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPopupHTMLWindowResponse)
  SharedDtor();
}

void CMsgPopupHTMLWindowResponse::SharedDtor() {
}

void CMsgPopupHTMLWindowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPopupHTMLWindowResponse& CMsgPopupHTMLWindowResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPopupHTMLWindowResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgPopupHTMLWindowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPopupHTMLWindowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ballow_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(ballow_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPopupHTMLWindowResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPopupHTMLWindowResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bAllow = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ballow(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPopupHTMLWindowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPopupHTMLWindowResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bAllow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ballow(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPopupHTMLWindowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPopupHTMLWindowResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPopupHTMLWindowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPopupHTMLWindowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ballow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPopupHTMLWindowResponse)
}

::google::protobuf::uint8* CMsgPopupHTMLWindowResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPopupHTMLWindowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool bAllow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ballow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPopupHTMLWindowResponse)
  return target;
}

size_t CMsgPopupHTMLWindowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPopupHTMLWindowResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bAllow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPopupHTMLWindowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPopupHTMLWindowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPopupHTMLWindowResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPopupHTMLWindowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPopupHTMLWindowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPopupHTMLWindowResponse)
    MergeFrom(*source);
  }
}

void CMsgPopupHTMLWindowResponse::MergeFrom(const CMsgPopupHTMLWindowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPopupHTMLWindowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ballow_ = from.ballow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPopupHTMLWindowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPopupHTMLWindowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPopupHTMLWindowResponse::CopyFrom(const CMsgPopupHTMLWindowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPopupHTMLWindowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPopupHTMLWindowResponse::IsInitialized() const {
  return true;
}

void CMsgPopupHTMLWindowResponse::Swap(CMsgPopupHTMLWindowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPopupHTMLWindowResponse::InternalSwap(CMsgPopupHTMLWindowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(ballow_, other->ballow_);
}

::google::protobuf::Metadata CMsgPopupHTMLWindowResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetHTMLTitle::InitAsDefaultInstance() {
}
class CMsgSetHTMLTitle::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetHTMLTitle* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_title(CMsgSetHTMLTitle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetHTMLTitle::kBrowserHandleFieldNumber;
const int CMsgSetHTMLTitle::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetHTMLTitle::CMsgSetHTMLTitle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetHTMLTitle)
}
CMsgSetHTMLTitle::CMsgSetHTMLTitle(const CMsgSetHTMLTitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetHTMLTitle)
}

void CMsgSetHTMLTitle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSetHTMLTitle_htmlmessages_2eproto.base);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgSetHTMLTitle::~CMsgSetHTMLTitle() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetHTMLTitle)
  SharedDtor();
}

void CMsgSetHTMLTitle::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetHTMLTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetHTMLTitle& CMsgSetHTMLTitle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetHTMLTitle_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetHTMLTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetHTMLTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetHTMLTitle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetHTMLTitle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string title = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetHTMLTitle.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetHTMLTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetHTMLTitle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetHTMLTitle.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetHTMLTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetHTMLTitle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetHTMLTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetHTMLTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetHTMLTitle.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetHTMLTitle)
}

::google::protobuf::uint8* CMsgSetHTMLTitle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetHTMLTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetHTMLTitle.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetHTMLTitle)
  return target;
}

size_t CMsgSetHTMLTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetHTMLTitle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetHTMLTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetHTMLTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetHTMLTitle* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetHTMLTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetHTMLTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetHTMLTitle)
    MergeFrom(*source);
  }
}

void CMsgSetHTMLTitle::MergeFrom(const CMsgSetHTMLTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetHTMLTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetHTMLTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetHTMLTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetHTMLTitle::CopyFrom(const CMsgSetHTMLTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetHTMLTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetHTMLTitle::IsInitialized() const {
  return true;
}

void CMsgSetHTMLTitle::Swap(CMsgSetHTMLTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetHTMLTitle::InternalSwap(CMsgSetHTMLTitle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgSetHTMLTitle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLoadingResource::InitAsDefaultInstance() {
}
class CMsgLoadingResource::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgLoadingResource* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_url(CMsgLoadingResource* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLoadingResource::kBrowserHandleFieldNumber;
const int CMsgLoadingResource::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLoadingResource::CMsgLoadingResource()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLoadingResource)
}
CMsgLoadingResource::CMsgLoadingResource(const CMsgLoadingResource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLoadingResource)
}

void CMsgLoadingResource::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLoadingResource_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgLoadingResource::~CMsgLoadingResource() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLoadingResource)
  SharedDtor();
}

void CMsgLoadingResource::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadingResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLoadingResource& CMsgLoadingResource::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLoadingResource_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgLoadingResource::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLoadingResource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLoadingResource::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLoadingResource*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgLoadingResource.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLoadingResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLoadingResource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadingResource.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLoadingResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLoadingResource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLoadingResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLoadingResource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadingResource.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLoadingResource)
}

::google::protobuf::uint8* CMsgLoadingResource::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLoadingResource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadingResource.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLoadingResource)
  return target;
}

size_t CMsgLoadingResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLoadingResource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLoadingResource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLoadingResource)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadingResource* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLoadingResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLoadingResource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLoadingResource)
    MergeFrom(*source);
  }
}

void CMsgLoadingResource::MergeFrom(const CMsgLoadingResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLoadingResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadingResource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLoadingResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadingResource::CopyFrom(const CMsgLoadingResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLoadingResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadingResource::IsInitialized() const {
  return true;
}

void CMsgLoadingResource::Swap(CMsgLoadingResource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLoadingResource::InternalSwap(CMsgLoadingResource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgLoadingResource::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgStatusText::InitAsDefaultInstance() {
}
class CMsgStatusText::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgStatusText* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_text(CMsgStatusText* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStatusText::kBrowserHandleFieldNumber;
const int CMsgStatusText::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStatusText::CMsgStatusText()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgStatusText)
}
CMsgStatusText::CMsgStatusText(const CMsgStatusText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgStatusText)
}

void CMsgStatusText::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgStatusText_htmlmessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgStatusText::~CMsgStatusText() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgStatusText)
  SharedDtor();
}

void CMsgStatusText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgStatusText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgStatusText& CMsgStatusText::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgStatusText_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgStatusText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgStatusText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgStatusText::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgStatusText*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgStatusText.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgStatusText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgStatusText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgStatusText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgStatusText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgStatusText)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgStatusText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgStatusText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStatusText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgStatusText)
}

::google::protobuf::uint8* CMsgStatusText::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgStatusText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgStatusText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgStatusText)
  return target;
}

size_t CMsgStatusText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgStatusText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgStatusText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgStatusText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStatusText* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgStatusText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgStatusText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgStatusText)
    MergeFrom(*source);
  }
}

void CMsgStatusText::MergeFrom(const CMsgStatusText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgStatusText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStatusText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgStatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStatusText::CopyFrom(const CMsgStatusText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgStatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStatusText::IsInitialized() const {
  return true;
}

void CMsgStatusText::Swap(CMsgStatusText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStatusText::InternalSwap(CMsgStatusText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgStatusText::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetCursor::InitAsDefaultInstance() {
}
class CMsgSetCursor::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetCursor* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cursor(CMsgSetCursor* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_custom_data(CMsgSetCursor* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_wide(CMsgSetCursor* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tall(CMsgSetCursor* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_xhotspot(CMsgSetCursor* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_yhotspot(CMsgSetCursor* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetCursor::kBrowserHandleFieldNumber;
const int CMsgSetCursor::kCursorFieldNumber;
const int CMsgSetCursor::kCustomDataFieldNumber;
const int CMsgSetCursor::kWideFieldNumber;
const int CMsgSetCursor::kTallFieldNumber;
const int CMsgSetCursor::kXhotspotFieldNumber;
const int CMsgSetCursor::kYhotspotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetCursor::CMsgSetCursor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetCursor)
}
CMsgSetCursor::CMsgSetCursor(const CMsgSetCursor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_data()) {
    custom_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_data_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&yhotspot_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(yhotspot_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetCursor)
}

void CMsgSetCursor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSetCursor_htmlmessages_2eproto.base);
  custom_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yhotspot_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(yhotspot_));
}

CMsgSetCursor::~CMsgSetCursor() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetCursor)
  SharedDtor();
}

void CMsgSetCursor::SharedDtor() {
  custom_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetCursor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetCursor& CMsgSetCursor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetCursor_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    custom_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yhotspot_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(yhotspot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetCursor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetCursor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cursor = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_cursor(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes custom_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_custom_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 wide = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_wide(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tall = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_tall(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 xhotspot = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_xhotspot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 yhotspot = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_yhotspot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetCursor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetCursor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cursor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_cursor(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes custom_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wide = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_wide(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tall = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_tall(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xhotspot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_xhotspot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xhotspot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 yhotspot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_yhotspot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yhotspot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetCursor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetCursor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetCursor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 cursor = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cursor(), output);
  }

  // optional bytes custom_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->custom_data(), output);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wide(), output);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tall(), output);
  }

  // optional uint32 xhotspot = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->xhotspot(), output);
  }

  // optional uint32 yhotspot = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->yhotspot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetCursor)
}

::google::protobuf::uint8* CMsgSetCursor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetCursor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 cursor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cursor(), target);
  }

  // optional bytes custom_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->custom_data(), target);
  }

  // optional uint32 wide = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wide(), target);
  }

  // optional uint32 tall = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tall(), target);
  }

  // optional uint32 xhotspot = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->xhotspot(), target);
  }

  // optional uint32 yhotspot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->yhotspot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetCursor)
  return target;
}

size_t CMsgSetCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetCursor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes custom_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->custom_data());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 cursor = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor());
    }

    // optional uint32 wide = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }

    // optional uint32 tall = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }

    // optional uint32 xhotspot = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xhotspot());
    }

    // optional uint32 yhotspot = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yhotspot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetCursor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetCursor)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetCursor* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetCursor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetCursor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetCursor)
    MergeFrom(*source);
  }
}

void CMsgSetCursor::MergeFrom(const CMsgSetCursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetCursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      custom_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      cursor_ = from.cursor_;
    }
    if (cached_has_bits & 0x00000008u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000010u) {
      tall_ = from.tall_;
    }
    if (cached_has_bits & 0x00000020u) {
      xhotspot_ = from.xhotspot_;
    }
    if (cached_has_bits & 0x00000040u) {
      yhotspot_ = from.yhotspot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetCursor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetCursor::CopyFrom(const CMsgSetCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetCursor::IsInitialized() const {
  return true;
}

void CMsgSetCursor::Swap(CMsgSetCursor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetCursor::InternalSwap(CMsgSetCursor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_data_.Swap(&other->custom_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(cursor_, other->cursor_);
  swap(wide_, other->wide_);
  swap(tall_, other->tall_);
  swap(xhotspot_, other->xhotspot_);
  swap(yhotspot_, other->yhotspot_);
}

::google::protobuf::Metadata CMsgSetCursor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFileLoadDialog::InitAsDefaultInstance() {
}
class CMsgFileLoadDialog::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgFileLoadDialog* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_title(CMsgFileLoadDialog* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_initialfile(CMsgFileLoadDialog* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFileLoadDialog::kBrowserHandleFieldNumber;
const int CMsgFileLoadDialog::kTitleFieldNumber;
const int CMsgFileLoadDialog::kInitialFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFileLoadDialog::CMsgFileLoadDialog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFileLoadDialog)
}
CMsgFileLoadDialog::CMsgFileLoadDialog(const CMsgFileLoadDialog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  initialfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_initialfile()) {
    initialfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initialfile_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFileLoadDialog)
}

void CMsgFileLoadDialog::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgFileLoadDialog_htmlmessages_2eproto.base);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initialfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgFileLoadDialog::~CMsgFileLoadDialog() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFileLoadDialog)
  SharedDtor();
}

void CMsgFileLoadDialog::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initialfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgFileLoadDialog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFileLoadDialog& CMsgFileLoadDialog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFileLoadDialog_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgFileLoadDialog::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFileLoadDialog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      initialfile_.ClearNonDefaultToEmptyNoArena();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFileLoadDialog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFileLoadDialog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string title = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgFileLoadDialog.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string initialFile = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgFileLoadDialog.initialFile");
        object = msg->mutable_initialfile();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFileLoadDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFileLoadDialog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFileLoadDialog.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string initialFile = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initialfile().data(), static_cast<int>(this->initialfile().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFileLoadDialog.initialFile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFileLoadDialog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFileLoadDialog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFileLoadDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFileLoadDialog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialog.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string initialFile = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialfile().data(), static_cast<int>(this->initialfile().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialog.initialFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->initialfile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFileLoadDialog)
}

::google::protobuf::uint8* CMsgFileLoadDialog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFileLoadDialog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialog.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string initialFile = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialfile().data(), static_cast<int>(this->initialfile().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialog.initialFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->initialfile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFileLoadDialog)
  return target;
}

size_t CMsgFileLoadDialog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFileLoadDialog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string initialFile = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialfile());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFileLoadDialog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFileLoadDialog)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFileLoadDialog* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFileLoadDialog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFileLoadDialog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFileLoadDialog)
    MergeFrom(*source);
  }
}

void CMsgFileLoadDialog::MergeFrom(const CMsgFileLoadDialog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFileLoadDialog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      initialfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initialfile_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFileLoadDialog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFileLoadDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFileLoadDialog::CopyFrom(const CMsgFileLoadDialog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFileLoadDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFileLoadDialog::IsInitialized() const {
  return true;
}

void CMsgFileLoadDialog::Swap(CMsgFileLoadDialog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFileLoadDialog::InternalSwap(CMsgFileLoadDialog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  initialfile_.Swap(&other->initialfile_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgFileLoadDialog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFileLoadDialogResponse::InitAsDefaultInstance() {
}
class CMsgFileLoadDialogResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgFileLoadDialogResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFileLoadDialogResponse::kBrowserHandleFieldNumber;
const int CMsgFileLoadDialogResponse::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFileLoadDialogResponse::CMsgFileLoadDialogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFileLoadDialogResponse)
}
CMsgFileLoadDialogResponse::CMsgFileLoadDialogResponse(const CMsgFileLoadDialogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFileLoadDialogResponse)
}

void CMsgFileLoadDialogResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgFileLoadDialogResponse_htmlmessages_2eproto.base);
  browser_handle_ = 0u;
}

CMsgFileLoadDialogResponse::~CMsgFileLoadDialogResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFileLoadDialogResponse)
  SharedDtor();
}

void CMsgFileLoadDialogResponse::SharedDtor() {
}

void CMsgFileLoadDialogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFileLoadDialogResponse& CMsgFileLoadDialogResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFileLoadDialogResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgFileLoadDialogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFileLoadDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFileLoadDialogResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFileLoadDialogResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string files = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CMsgFileLoadDialogResponse.files");
          object = msg->add_files();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFileLoadDialogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFileLoadDialogResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->files(this->files_size() - 1).data(),
            static_cast<int>(this->files(this->files_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFileLoadDialogResponse.files");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFileLoadDialogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFileLoadDialogResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFileLoadDialogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFileLoadDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // repeated string files = 2;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialogResponse.files");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFileLoadDialogResponse)
}

::google::protobuf::uint8* CMsgFileLoadDialogResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFileLoadDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // repeated string files = 2;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFileLoadDialogResponse.files");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->files(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFileLoadDialogResponse)
  return target;
}

size_t CMsgFileLoadDialogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFileLoadDialogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string files = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->files_size());
  for (int i = 0, n = this->files_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFileLoadDialogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFileLoadDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFileLoadDialogResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFileLoadDialogResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFileLoadDialogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFileLoadDialogResponse)
    MergeFrom(*source);
  }
}

void CMsgFileLoadDialogResponse::MergeFrom(const CMsgFileLoadDialogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFileLoadDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgFileLoadDialogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFileLoadDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFileLoadDialogResponse::CopyFrom(const CMsgFileLoadDialogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFileLoadDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFileLoadDialogResponse::IsInitialized() const {
  return true;
}

void CMsgFileLoadDialogResponse::Swap(CMsgFileLoadDialogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFileLoadDialogResponse::InternalSwap(CMsgFileLoadDialogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  files_.InternalSwap(CastToBase(&other->files_));
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgFileLoadDialogResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgShowToolTip::InitAsDefaultInstance() {
}
class CMsgShowToolTip::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgShowToolTip* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_text(CMsgShowToolTip* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgShowToolTip::kBrowserHandleFieldNumber;
const int CMsgShowToolTip::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgShowToolTip::CMsgShowToolTip()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgShowToolTip)
}
CMsgShowToolTip::CMsgShowToolTip(const CMsgShowToolTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgShowToolTip)
}

void CMsgShowToolTip::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgShowToolTip_htmlmessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgShowToolTip::~CMsgShowToolTip() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgShowToolTip)
  SharedDtor();
}

void CMsgShowToolTip::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgShowToolTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgShowToolTip& CMsgShowToolTip::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgShowToolTip_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgShowToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgShowToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgShowToolTip::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgShowToolTip*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgShowToolTip.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgShowToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgShowToolTip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgShowToolTip.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgShowToolTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgShowToolTip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgShowToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgShowToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgShowToolTip.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgShowToolTip)
}

::google::protobuf::uint8* CMsgShowToolTip::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgShowToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgShowToolTip.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgShowToolTip)
  return target;
}

size_t CMsgShowToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgShowToolTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgShowToolTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgShowToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowToolTip* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgShowToolTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgShowToolTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgShowToolTip)
    MergeFrom(*source);
  }
}

void CMsgShowToolTip::MergeFrom(const CMsgShowToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgShowToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgShowToolTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgShowToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowToolTip::CopyFrom(const CMsgShowToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgShowToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowToolTip::IsInitialized() const {
  return true;
}

void CMsgShowToolTip::Swap(CMsgShowToolTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgShowToolTip::InternalSwap(CMsgShowToolTip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgShowToolTip::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgUpdateToolTip::InitAsDefaultInstance() {
}
class CMsgUpdateToolTip::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgUpdateToolTip* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_text(CMsgUpdateToolTip* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgUpdateToolTip::kBrowserHandleFieldNumber;
const int CMsgUpdateToolTip::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgUpdateToolTip::CMsgUpdateToolTip()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgUpdateToolTip)
}
CMsgUpdateToolTip::CMsgUpdateToolTip(const CMsgUpdateToolTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgUpdateToolTip)
}

void CMsgUpdateToolTip::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgUpdateToolTip_htmlmessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgUpdateToolTip::~CMsgUpdateToolTip() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgUpdateToolTip)
  SharedDtor();
}

void CMsgUpdateToolTip::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgUpdateToolTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgUpdateToolTip& CMsgUpdateToolTip::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgUpdateToolTip_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgUpdateToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgUpdateToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgUpdateToolTip::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgUpdateToolTip*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgUpdateToolTip.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgUpdateToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgUpdateToolTip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgUpdateToolTip.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgUpdateToolTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgUpdateToolTip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgUpdateToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgUpdateToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgUpdateToolTip.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgUpdateToolTip)
}

::google::protobuf::uint8* CMsgUpdateToolTip::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgUpdateToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgUpdateToolTip.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgUpdateToolTip)
  return target;
}

size_t CMsgUpdateToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgUpdateToolTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUpdateToolTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgUpdateToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateToolTip* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgUpdateToolTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgUpdateToolTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgUpdateToolTip)
    MergeFrom(*source);
  }
}

void CMsgUpdateToolTip::MergeFrom(const CMsgUpdateToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgUpdateToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUpdateToolTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgUpdateToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateToolTip::CopyFrom(const CMsgUpdateToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgUpdateToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateToolTip::IsInitialized() const {
  return true;
}

void CMsgUpdateToolTip::Swap(CMsgUpdateToolTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgUpdateToolTip::InternalSwap(CMsgUpdateToolTip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgUpdateToolTip::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHideToolTip::InitAsDefaultInstance() {
}
class CMsgHideToolTip::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgHideToolTip* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHideToolTip::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHideToolTip::CMsgHideToolTip()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgHideToolTip)
}
CMsgHideToolTip::CMsgHideToolTip(const CMsgHideToolTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgHideToolTip)
}

void CMsgHideToolTip::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgHideToolTip::~CMsgHideToolTip() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgHideToolTip)
  SharedDtor();
}

void CMsgHideToolTip::SharedDtor() {
}

void CMsgHideToolTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHideToolTip& CMsgHideToolTip::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHideToolTip_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHideToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgHideToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHideToolTip::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHideToolTip*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHideToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgHideToolTip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgHideToolTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgHideToolTip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHideToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgHideToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgHideToolTip)
}

::google::protobuf::uint8* CMsgHideToolTip::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgHideToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgHideToolTip)
  return target;
}

size_t CMsgHideToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgHideToolTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHideToolTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgHideToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHideToolTip* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHideToolTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgHideToolTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgHideToolTip)
    MergeFrom(*source);
  }
}

void CMsgHideToolTip::MergeFrom(const CMsgHideToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgHideToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgHideToolTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgHideToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHideToolTip::CopyFrom(const CMsgHideToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgHideToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHideToolTip::IsInitialized() const {
  return true;
}

void CMsgHideToolTip::Swap(CMsgHideToolTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHideToolTip::InternalSwap(CMsgHideToolTip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgHideToolTip::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSearchResults::InitAsDefaultInstance() {
}
class CMsgSearchResults::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSearchResults* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_activematch(CMsgSearchResults* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_results(CMsgSearchResults* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSearchResults::kBrowserHandleFieldNumber;
const int CMsgSearchResults::kActiveMatchFieldNumber;
const int CMsgSearchResults::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSearchResults::CMsgSearchResults()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSearchResults)
}
CMsgSearchResults::CMsgSearchResults(const CMsgSearchResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&results_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(results_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSearchResults)
}

void CMsgSearchResults::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&results_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(results_));
}

CMsgSearchResults::~CMsgSearchResults() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSearchResults)
  SharedDtor();
}

void CMsgSearchResults::SharedDtor() {
}

void CMsgSearchResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSearchResults& CMsgSearchResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSearchResults_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSearchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&results_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(results_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSearchResults::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSearchResults*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 activeMatch = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_activematch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 results = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_results(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSearchResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSearchResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 activeMatch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_activematch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activematch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_results(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSearchResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSearchResults)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSearchResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSearchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 activeMatch = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activematch(), output);
  }

  // optional int32 results = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->results(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSearchResults)
}

::google::protobuf::uint8* CMsgSearchResults::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSearchResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 activeMatch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activematch(), target);
  }

  // optional int32 results = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->results(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSearchResults)
  return target;
}

size_t CMsgSearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSearchResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 activeMatch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activematch());
    }

    // optional int32 results = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->results());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSearchResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSearchResults* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSearchResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSearchResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSearchResults)
    MergeFrom(*source);
  }
}

void CMsgSearchResults::MergeFrom(const CMsgSearchResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSearchResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      activematch_ = from.activematch_;
    }
    if (cached_has_bits & 0x00000004u) {
      results_ = from.results_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSearchResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSearchResults::CopyFrom(const CMsgSearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSearchResults::IsInitialized() const {
  return true;
}

void CMsgSearchResults::Swap(CMsgSearchResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSearchResults::InternalSwap(CMsgSearchResults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(activematch_, other->activematch_);
  swap(results_, other->results_);
}

::google::protobuf::Metadata CMsgSearchResults::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClose::InitAsDefaultInstance() {
}
class CMsgClose::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgClose* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClose::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClose::CMsgClose()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClose)
}
CMsgClose::CMsgClose(const CMsgClose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClose)
}

void CMsgClose::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgClose::~CMsgClose() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClose)
  SharedDtor();
}

void CMsgClose::SharedDtor() {
}

void CMsgClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClose& CMsgClose::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClose_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgClose::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClose::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClose*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClose)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClose)
}

::google::protobuf::uint8* CMsgClose::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClose)
  return target;
}

size_t CMsgClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClose)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClose* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClose)
    MergeFrom(*source);
  }
}

void CMsgClose::MergeFrom(const CMsgClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgClose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClose::CopyFrom(const CMsgClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClose::IsInitialized() const {
  return true;
}

void CMsgClose::Swap(CMsgClose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClose::InternalSwap(CMsgClose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgClose::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetSharedPaintBuffers::InitAsDefaultInstance() {
}
class CMsgSetSharedPaintBuffers::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetSharedPaintBuffers* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_wide(CMsgSetSharedPaintBuffers* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_tall(CMsgSetSharedPaintBuffers* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_source_pid(CMsgSetSharedPaintBuffers* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_source_handle(CMsgSetSharedPaintBuffers* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_handle(CMsgSetSharedPaintBuffers* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetSharedPaintBuffers::kBrowserHandleFieldNumber;
const int CMsgSetSharedPaintBuffers::kWideFieldNumber;
const int CMsgSetSharedPaintBuffers::kTallFieldNumber;
const int CMsgSetSharedPaintBuffers::kSourcePidFieldNumber;
const int CMsgSetSharedPaintBuffers::kSourceHandleFieldNumber;
const int CMsgSetSharedPaintBuffers::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetSharedPaintBuffers::CMsgSetSharedPaintBuffers()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetSharedPaintBuffers)
}
CMsgSetSharedPaintBuffers::CMsgSetSharedPaintBuffers(const CMsgSetSharedPaintBuffers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&tall_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetSharedPaintBuffers)
}

void CMsgSetSharedPaintBuffers::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tall_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
}

CMsgSetSharedPaintBuffers::~CMsgSetSharedPaintBuffers() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetSharedPaintBuffers)
  SharedDtor();
}

void CMsgSetSharedPaintBuffers::SharedDtor() {
}

void CMsgSetSharedPaintBuffers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetSharedPaintBuffers& CMsgSetSharedPaintBuffers::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetSharedPaintBuffers_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetSharedPaintBuffers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetSharedPaintBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tall_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(tall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetSharedPaintBuffers::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetSharedPaintBuffers*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 wide = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_wide(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tall = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_tall(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 source_pid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_source_pid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 source_handle = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_source_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 handle = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetSharedPaintBuffers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetSharedPaintBuffers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wide = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_wide(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tall = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_tall(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_pid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_source_pid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_handle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_source_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetSharedPaintBuffers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetSharedPaintBuffers)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetSharedPaintBuffers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetSharedPaintBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 wide = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wide(), output);
  }

  // optional uint32 tall = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tall(), output);
  }

  // optional uint64 source_pid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->source_pid(), output);
  }

  // optional uint64 source_handle = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->source_handle(), output);
  }

  // optional uint64 handle = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetSharedPaintBuffers)
}

::google::protobuf::uint8* CMsgSetSharedPaintBuffers::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetSharedPaintBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 wide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wide(), target);
  }

  // optional uint32 tall = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tall(), target);
  }

  // optional uint64 source_pid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->source_pid(), target);
  }

  // optional uint64 source_handle = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->source_handle(), target);
  }

  // optional uint64 handle = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetSharedPaintBuffers)
  return target;
}

size_t CMsgSetSharedPaintBuffers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetSharedPaintBuffers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 wide = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wide());
    }

    // optional uint64 source_pid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_pid());
    }

    // optional uint64 source_handle = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_handle());
    }

    // optional uint64 handle = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }

    // optional uint32 tall = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tall());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetSharedPaintBuffers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetSharedPaintBuffers* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetSharedPaintBuffers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetSharedPaintBuffers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetSharedPaintBuffers)
    MergeFrom(*source);
  }
}

void CMsgSetSharedPaintBuffers::MergeFrom(const CMsgSetSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      wide_ = from.wide_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_pid_ = from.source_pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_handle_ = from.source_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      tall_ = from.tall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetSharedPaintBuffers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetSharedPaintBuffers::CopyFrom(const CMsgSetSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetSharedPaintBuffers::IsInitialized() const {
  return true;
}

void CMsgSetSharedPaintBuffers::Swap(CMsgSetSharedPaintBuffers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetSharedPaintBuffers::InternalSwap(CMsgSetSharedPaintBuffers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(wide_, other->wide_);
  swap(source_pid_, other->source_pid_);
  swap(source_handle_, other->source_handle_);
  swap(handle_, other->handle_);
  swap(tall_, other->tall_);
}

::google::protobuf::Metadata CMsgSetSharedPaintBuffers::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAckSharedPaintBuffers::InitAsDefaultInstance() {
}
class CMsgAckSharedPaintBuffers::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgAckSharedPaintBuffers* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAckSharedPaintBuffers::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAckSharedPaintBuffers::CMsgAckSharedPaintBuffers()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgAckSharedPaintBuffers)
}
CMsgAckSharedPaintBuffers::CMsgAckSharedPaintBuffers(const CMsgAckSharedPaintBuffers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgAckSharedPaintBuffers)
}

void CMsgAckSharedPaintBuffers::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgAckSharedPaintBuffers::~CMsgAckSharedPaintBuffers() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgAckSharedPaintBuffers)
  SharedDtor();
}

void CMsgAckSharedPaintBuffers::SharedDtor() {
}

void CMsgAckSharedPaintBuffers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAckSharedPaintBuffers& CMsgAckSharedPaintBuffers::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAckSharedPaintBuffers_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAckSharedPaintBuffers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgAckSharedPaintBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAckSharedPaintBuffers::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAckSharedPaintBuffers*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAckSharedPaintBuffers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgAckSharedPaintBuffers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgAckSharedPaintBuffers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgAckSharedPaintBuffers)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAckSharedPaintBuffers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgAckSharedPaintBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgAckSharedPaintBuffers)
}

::google::protobuf::uint8* CMsgAckSharedPaintBuffers::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgAckSharedPaintBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgAckSharedPaintBuffers)
  return target;
}

size_t CMsgAckSharedPaintBuffers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgAckSharedPaintBuffers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAckSharedPaintBuffers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgAckSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAckSharedPaintBuffers* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAckSharedPaintBuffers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgAckSharedPaintBuffers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgAckSharedPaintBuffers)
    MergeFrom(*source);
  }
}

void CMsgAckSharedPaintBuffers::MergeFrom(const CMsgAckSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgAckSharedPaintBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgAckSharedPaintBuffers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgAckSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAckSharedPaintBuffers::CopyFrom(const CMsgAckSharedPaintBuffers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgAckSharedPaintBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAckSharedPaintBuffers::IsInitialized() const {
  return true;
}

void CMsgAckSharedPaintBuffers::Swap(CMsgAckSharedPaintBuffers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAckSharedPaintBuffers::InternalSwap(CMsgAckSharedPaintBuffers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgAckSharedPaintBuffers::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgNeedsPaint::InitAsDefaultInstance() {
}
class CMsgNeedsPaint::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scrollx(CMsgNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scrolly(CMsgNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_pagescale(CMsgNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_pageserial(CMsgNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNeedsPaint::kBrowserHandleFieldNumber;
const int CMsgNeedsPaint::kScrollxFieldNumber;
const int CMsgNeedsPaint::kScrollyFieldNumber;
const int CMsgNeedsPaint::kPagescaleFieldNumber;
const int CMsgNeedsPaint::kPageserialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNeedsPaint::CMsgNeedsPaint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgNeedsPaint)
}
CMsgNeedsPaint::CMsgNeedsPaint(const CMsgNeedsPaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&pagescale_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pagescale_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgNeedsPaint)
}

void CMsgNeedsPaint::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagescale_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(pagescale_));
}

CMsgNeedsPaint::~CMsgNeedsPaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgNeedsPaint)
  SharedDtor();
}

void CMsgNeedsPaint::SharedDtor() {
}

void CMsgNeedsPaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgNeedsPaint& CMsgNeedsPaint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgNeedsPaint_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgNeedsPaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pagescale_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(pagescale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgNeedsPaint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgNeedsPaint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scrollx = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_scrollx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scrolly = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_scrolly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float pagescale = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_pagescale(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 pageserial = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_pageserial(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgNeedsPaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgNeedsPaint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scrollx = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_scrollx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrollx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scrolly = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_scrolly(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrolly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pagescale = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_pagescale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pagescale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pageserial = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_pageserial(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageserial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgNeedsPaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgNeedsPaint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgNeedsPaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 scrollx = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->scrollx(), output);
  }

  // optional uint32 scrolly = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->scrolly(), output);
  }

  // optional float pagescale = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pagescale(), output);
  }

  // optional uint32 pageserial = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pageserial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgNeedsPaint)
}

::google::protobuf::uint8* CMsgNeedsPaint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 scrollx = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->scrollx(), target);
  }

  // optional uint32 scrolly = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->scrolly(), target);
  }

  // optional float pagescale = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pagescale(), target);
  }

  // optional uint32 pageserial = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pageserial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgNeedsPaint)
  return target;
}

size_t CMsgNeedsPaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgNeedsPaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 scrollx = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrollx());
    }

    // optional uint32 pageserial = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageserial());
    }

    // optional uint32 scrolly = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrolly());
    }

    // optional float pagescale = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNeedsPaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNeedsPaint* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgNeedsPaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgNeedsPaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgNeedsPaint)
    MergeFrom(*source);
  }
}

void CMsgNeedsPaint::MergeFrom(const CMsgNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scrollx_ = from.scrollx_;
    }
    if (cached_has_bits & 0x00000004u) {
      pageserial_ = from.pageserial_;
    }
    if (cached_has_bits & 0x00000008u) {
      scrolly_ = from.scrolly_;
    }
    if (cached_has_bits & 0x00000010u) {
      pagescale_ = from.pagescale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNeedsPaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNeedsPaint::CopyFrom(const CMsgNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeedsPaint::IsInitialized() const {
  return true;
}

void CMsgNeedsPaint::Swap(CMsgNeedsPaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNeedsPaint::InternalSwap(CMsgNeedsPaint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(scrollx_, other->scrollx_);
  swap(pageserial_, other->pageserial_);
  swap(scrolly_, other->scrolly_);
  swap(pagescale_, other->pagescale_);
}

::google::protobuf::Metadata CMsgNeedsPaint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgComboNeedsPaint::InitAsDefaultInstance() {
}
class CMsgComboNeedsPaint::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgComboNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_rgba(CMsgComboNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_combobox_wide(CMsgComboNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_combobox_tall(CMsgComboNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_shared_memory_handle(CMsgComboNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_shared_memory_size(CMsgComboNeedsPaint* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgComboNeedsPaint::kBrowserHandleFieldNumber;
const int CMsgComboNeedsPaint::kRgbaFieldNumber;
const int CMsgComboNeedsPaint::kComboboxWideFieldNumber;
const int CMsgComboNeedsPaint::kComboboxTallFieldNumber;
const int CMsgComboNeedsPaint::kSharedMemoryHandleFieldNumber;
const int CMsgComboNeedsPaint::kSharedMemorySizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgComboNeedsPaint::CMsgComboNeedsPaint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgComboNeedsPaint)
}
CMsgComboNeedsPaint::CMsgComboNeedsPaint(const CMsgComboNeedsPaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rgba_, &from.rgba_,
    static_cast<size_t>(reinterpret_cast<char*>(&combobox_tall_) -
    reinterpret_cast<char*>(&rgba_)) + sizeof(combobox_tall_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgComboNeedsPaint)
}

void CMsgComboNeedsPaint::SharedCtor() {
  ::memset(&rgba_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&combobox_tall_) -
      reinterpret_cast<char*>(&rgba_)) + sizeof(combobox_tall_));
}

CMsgComboNeedsPaint::~CMsgComboNeedsPaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgComboNeedsPaint)
  SharedDtor();
}

void CMsgComboNeedsPaint::SharedDtor() {
}

void CMsgComboNeedsPaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgComboNeedsPaint& CMsgComboNeedsPaint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgComboNeedsPaint_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgComboNeedsPaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgComboNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&rgba_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&combobox_tall_) -
        reinterpret_cast<char*>(&rgba_)) + sizeof(combobox_tall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgComboNeedsPaint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgComboNeedsPaint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 rgba = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_rgba(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 combobox_wide = 3 [default = 0];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_combobox_wide(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 combobox_tall = 4 [default = 0];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_combobox_tall(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 shared_memory_handle = 5 [default = 0];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_shared_memory_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 shared_memory_size = 7 [default = 0];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_shared_memory_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgComboNeedsPaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgComboNeedsPaint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rgba = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_rgba(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rgba_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 combobox_wide = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_combobox_wide(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combobox_wide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 combobox_tall = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_combobox_tall(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combobox_tall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 shared_memory_handle = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_shared_memory_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_memory_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 shared_memory_size = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_shared_memory_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_memory_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgComboNeedsPaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgComboNeedsPaint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgComboNeedsPaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgComboNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint64 rgba = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rgba(), output);
  }

  // optional uint32 combobox_wide = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->combobox_wide(), output);
  }

  // optional uint32 combobox_tall = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->combobox_tall(), output);
  }

  // optional uint64 shared_memory_handle = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->shared_memory_handle(), output);
  }

  // optional uint64 shared_memory_size = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->shared_memory_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgComboNeedsPaint)
}

::google::protobuf::uint8* CMsgComboNeedsPaint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgComboNeedsPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint64 rgba = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rgba(), target);
  }

  // optional uint32 combobox_wide = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->combobox_wide(), target);
  }

  // optional uint32 combobox_tall = 4 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->combobox_tall(), target);
  }

  // optional uint64 shared_memory_handle = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->shared_memory_handle(), target);
  }

  // optional uint64 shared_memory_size = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->shared_memory_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgComboNeedsPaint)
  return target;
}

size_t CMsgComboNeedsPaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgComboNeedsPaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 rgba = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rgba());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 combobox_wide = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combobox_wide());
    }

    // optional uint64 shared_memory_handle = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_memory_handle());
    }

    // optional uint64 shared_memory_size = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_memory_size());
    }

    // optional uint32 combobox_tall = 4 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combobox_tall());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgComboNeedsPaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgComboNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgComboNeedsPaint* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgComboNeedsPaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgComboNeedsPaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgComboNeedsPaint)
    MergeFrom(*source);
  }
}

void CMsgComboNeedsPaint::MergeFrom(const CMsgComboNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgComboNeedsPaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      rgba_ = from.rgba_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      combobox_wide_ = from.combobox_wide_;
    }
    if (cached_has_bits & 0x00000008u) {
      shared_memory_handle_ = from.shared_memory_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      shared_memory_size_ = from.shared_memory_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      combobox_tall_ = from.combobox_tall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgComboNeedsPaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgComboNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgComboNeedsPaint::CopyFrom(const CMsgComboNeedsPaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgComboNeedsPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgComboNeedsPaint::IsInitialized() const {
  return true;
}

void CMsgComboNeedsPaint::Swap(CMsgComboNeedsPaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgComboNeedsPaint::InternalSwap(CMsgComboNeedsPaint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rgba_, other->rgba_);
  swap(browser_handle_, other->browser_handle_);
  swap(combobox_wide_, other->combobox_wide_);
  swap(shared_memory_handle_, other->shared_memory_handle_);
  swap(shared_memory_size_, other->shared_memory_size_);
  swap(combobox_tall_, other->combobox_tall_);
}

::google::protobuf::Metadata CMsgComboNeedsPaint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgNeedsSharedTexturePaint::InitAsDefaultInstance() {
}
class CMsgNeedsSharedTexturePaint::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgNeedsSharedTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_share_handle(CMsgNeedsSharedTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_width(CMsgNeedsSharedTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_height(CMsgNeedsSharedTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_scrollx(CMsgNeedsSharedTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_scrolly(CMsgNeedsSharedTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_pagescale(CMsgNeedsSharedTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_pageserial(CMsgNeedsSharedTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNeedsSharedTexturePaint::kBrowserHandleFieldNumber;
const int CMsgNeedsSharedTexturePaint::kShareHandleFieldNumber;
const int CMsgNeedsSharedTexturePaint::kWidthFieldNumber;
const int CMsgNeedsSharedTexturePaint::kHeightFieldNumber;
const int CMsgNeedsSharedTexturePaint::kScrollxFieldNumber;
const int CMsgNeedsSharedTexturePaint::kScrollyFieldNumber;
const int CMsgNeedsSharedTexturePaint::kPagescaleFieldNumber;
const int CMsgNeedsSharedTexturePaint::kPageserialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNeedsSharedTexturePaint::CMsgNeedsSharedTexturePaint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgNeedsSharedTexturePaint)
}
CMsgNeedsSharedTexturePaint::CMsgNeedsSharedTexturePaint(const CMsgNeedsSharedTexturePaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&pageserial_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgNeedsSharedTexturePaint)
}

void CMsgNeedsSharedTexturePaint::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pageserial_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
}

CMsgNeedsSharedTexturePaint::~CMsgNeedsSharedTexturePaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgNeedsSharedTexturePaint)
  SharedDtor();
}

void CMsgNeedsSharedTexturePaint::SharedDtor() {
}

void CMsgNeedsSharedTexturePaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgNeedsSharedTexturePaint& CMsgNeedsSharedTexturePaint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgNeedsSharedTexturePaint_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgNeedsSharedTexturePaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgNeedsSharedTexturePaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pageserial_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgNeedsSharedTexturePaint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgNeedsSharedTexturePaint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 share_handle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_share_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 width = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 height = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scrollx = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_scrollx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scrolly = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_scrolly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float pagescale = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_pagescale(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 pageserial = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_pageserial(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgNeedsSharedTexturePaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgNeedsSharedTexturePaint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 share_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_share_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &share_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scrollx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_scrollx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrollx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scrolly = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_scrolly(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrolly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pagescale = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_pagescale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pagescale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pageserial = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_pageserial(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageserial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgNeedsSharedTexturePaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgNeedsSharedTexturePaint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgNeedsSharedTexturePaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgNeedsSharedTexturePaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 share_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->share_handle(), output);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional uint32 scrollx = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scrollx(), output);
  }

  // optional uint32 scrolly = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scrolly(), output);
  }

  // optional float pagescale = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pagescale(), output);
  }

  // optional uint32 pageserial = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pageserial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgNeedsSharedTexturePaint)
}

::google::protobuf::uint8* CMsgNeedsSharedTexturePaint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgNeedsSharedTexturePaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 share_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->share_handle(), target);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional uint32 scrollx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scrollx(), target);
  }

  // optional uint32 scrolly = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scrolly(), target);
  }

  // optional float pagescale = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pagescale(), target);
  }

  // optional uint32 pageserial = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pageserial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgNeedsSharedTexturePaint)
  return target;
}

size_t CMsgNeedsSharedTexturePaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgNeedsSharedTexturePaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 share_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->share_handle());
    }

    // optional uint32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 scrollx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrollx());
    }

    // optional uint32 scrolly = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrolly());
    }

    // optional float pagescale = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 pageserial = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageserial());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNeedsSharedTexturePaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgNeedsSharedTexturePaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNeedsSharedTexturePaint* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgNeedsSharedTexturePaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgNeedsSharedTexturePaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgNeedsSharedTexturePaint)
    MergeFrom(*source);
  }
}

void CMsgNeedsSharedTexturePaint::MergeFrom(const CMsgNeedsSharedTexturePaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgNeedsSharedTexturePaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      share_handle_ = from.share_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      scrollx_ = from.scrollx_;
    }
    if (cached_has_bits & 0x00000020u) {
      scrolly_ = from.scrolly_;
    }
    if (cached_has_bits & 0x00000040u) {
      pagescale_ = from.pagescale_;
    }
    if (cached_has_bits & 0x00000080u) {
      pageserial_ = from.pageserial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNeedsSharedTexturePaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgNeedsSharedTexturePaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNeedsSharedTexturePaint::CopyFrom(const CMsgNeedsSharedTexturePaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgNeedsSharedTexturePaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeedsSharedTexturePaint::IsInitialized() const {
  return true;
}

void CMsgNeedsSharedTexturePaint::Swap(CMsgNeedsSharedTexturePaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNeedsSharedTexturePaint::InternalSwap(CMsgNeedsSharedTexturePaint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(share_handle_, other->share_handle_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(scrollx_, other->scrollx_);
  swap(scrolly_, other->scrolly_);
  swap(pagescale_, other->pagescale_);
  swap(pageserial_, other->pageserial_);
}

::google::protobuf::Metadata CMsgNeedsSharedTexturePaint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameOverlayTexturePaint::InitAsDefaultInstance() {
}
class CMsgGameOverlayTexturePaint::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgGameOverlayTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_width(CMsgGameOverlayTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_height(CMsgGameOverlayTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_scrollx(CMsgGameOverlayTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_scrolly(CMsgGameOverlayTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_pagescale(CMsgGameOverlayTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_pageserial(CMsgGameOverlayTexturePaint* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameOverlayTexturePaint::kBrowserHandleFieldNumber;
const int CMsgGameOverlayTexturePaint::kWidthFieldNumber;
const int CMsgGameOverlayTexturePaint::kHeightFieldNumber;
const int CMsgGameOverlayTexturePaint::kScrollxFieldNumber;
const int CMsgGameOverlayTexturePaint::kScrollyFieldNumber;
const int CMsgGameOverlayTexturePaint::kPagescaleFieldNumber;
const int CMsgGameOverlayTexturePaint::kPageserialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameOverlayTexturePaint::CMsgGameOverlayTexturePaint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGameOverlayTexturePaint)
}
CMsgGameOverlayTexturePaint::CMsgGameOverlayTexturePaint(const CMsgGameOverlayTexturePaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&pageserial_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGameOverlayTexturePaint)
}

void CMsgGameOverlayTexturePaint::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pageserial_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
}

CMsgGameOverlayTexturePaint::~CMsgGameOverlayTexturePaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGameOverlayTexturePaint)
  SharedDtor();
}

void CMsgGameOverlayTexturePaint::SharedDtor() {
}

void CMsgGameOverlayTexturePaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameOverlayTexturePaint& CMsgGameOverlayTexturePaint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameOverlayTexturePaint_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameOverlayTexturePaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGameOverlayTexturePaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pageserial_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(pageserial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameOverlayTexturePaint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameOverlayTexturePaint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 width = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 height = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scrollx = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_scrollx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scrolly = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_scrolly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float pagescale = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_pagescale(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 pageserial = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_pageserial(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameOverlayTexturePaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGameOverlayTexturePaint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scrollx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_scrollx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrollx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scrolly = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_scrolly(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrolly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pagescale = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_pagescale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pagescale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pageserial = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_pageserial(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageserial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGameOverlayTexturePaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGameOverlayTexturePaint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameOverlayTexturePaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGameOverlayTexturePaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional uint32 scrollx = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scrollx(), output);
  }

  // optional uint32 scrolly = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scrolly(), output);
  }

  // optional float pagescale = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pagescale(), output);
  }

  // optional uint32 pageserial = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pageserial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGameOverlayTexturePaint)
}

::google::protobuf::uint8* CMsgGameOverlayTexturePaint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGameOverlayTexturePaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional uint32 scrollx = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scrollx(), target);
  }

  // optional uint32 scrolly = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scrolly(), target);
  }

  // optional float pagescale = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pagescale(), target);
  }

  // optional uint32 pageserial = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pageserial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGameOverlayTexturePaint)
  return target;
}

size_t CMsgGameOverlayTexturePaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGameOverlayTexturePaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 width = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 scrollx = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrollx());
    }

    // optional uint32 scrolly = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scrolly());
    }

    // optional float pagescale = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 pageserial = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageserial());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameOverlayTexturePaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGameOverlayTexturePaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameOverlayTexturePaint* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameOverlayTexturePaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGameOverlayTexturePaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGameOverlayTexturePaint)
    MergeFrom(*source);
  }
}

void CMsgGameOverlayTexturePaint::MergeFrom(const CMsgGameOverlayTexturePaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGameOverlayTexturePaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      scrollx_ = from.scrollx_;
    }
    if (cached_has_bits & 0x00000010u) {
      scrolly_ = from.scrolly_;
    }
    if (cached_has_bits & 0x00000020u) {
      pagescale_ = from.pagescale_;
    }
    if (cached_has_bits & 0x00000040u) {
      pageserial_ = from.pageserial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameOverlayTexturePaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGameOverlayTexturePaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameOverlayTexturePaint::CopyFrom(const CMsgGameOverlayTexturePaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGameOverlayTexturePaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameOverlayTexturePaint::IsInitialized() const {
  return true;
}

void CMsgGameOverlayTexturePaint::Swap(CMsgGameOverlayTexturePaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameOverlayTexturePaint::InternalSwap(CMsgGameOverlayTexturePaint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(scrollx_, other->scrollx_);
  swap(scrolly_, other->scrolly_);
  swap(pagescale_, other->pagescale_);
  swap(pageserial_, other->pageserial_);
}

::google::protobuf::Metadata CMsgGameOverlayTexturePaint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGetZoom::InitAsDefaultInstance() {
}
class CMsgGetZoom::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgGetZoom* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGetZoom::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGetZoom::CMsgGetZoom()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGetZoom)
}
CMsgGetZoom::CMsgGetZoom(const CMsgGetZoom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGetZoom)
}

void CMsgGetZoom::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgGetZoom::~CMsgGetZoom() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGetZoom)
  SharedDtor();
}

void CMsgGetZoom::SharedDtor() {
}

void CMsgGetZoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGetZoom& CMsgGetZoom::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGetZoom_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGetZoom::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGetZoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGetZoom::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGetZoom*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGetZoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGetZoom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGetZoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGetZoom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGetZoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGetZoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGetZoom)
}

::google::protobuf::uint8* CMsgGetZoom::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGetZoom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGetZoom)
  return target;
}

size_t CMsgGetZoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGetZoom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGetZoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGetZoom)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetZoom* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGetZoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGetZoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGetZoom)
    MergeFrom(*source);
  }
}

void CMsgGetZoom::MergeFrom(const CMsgGetZoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGetZoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgGetZoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGetZoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetZoom::CopyFrom(const CMsgGetZoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGetZoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetZoom::IsInitialized() const {
  return true;
}

void CMsgGetZoom::Swap(CMsgGetZoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGetZoom::InternalSwap(CMsgGetZoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgGetZoom::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGetZoomResponse::InitAsDefaultInstance() {
}
class CMsgGetZoomResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgGetZoomResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_zoom(CMsgGetZoomResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGetZoomResponse::kBrowserHandleFieldNumber;
const int CMsgGetZoomResponse::kZoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGetZoomResponse::CMsgGetZoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGetZoomResponse)
}
CMsgGetZoomResponse::CMsgGetZoomResponse(const CMsgGetZoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGetZoomResponse)
}

void CMsgGetZoomResponse::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
}

CMsgGetZoomResponse::~CMsgGetZoomResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGetZoomResponse)
  SharedDtor();
}

void CMsgGetZoomResponse::SharedDtor() {
}

void CMsgGetZoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGetZoomResponse& CMsgGetZoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGetZoomResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGetZoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGetZoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zoom_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGetZoomResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGetZoomResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float zoom = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_zoom(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGetZoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGetZoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float zoom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_zoom(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGetZoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGetZoomResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGetZoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGetZoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->zoom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGetZoomResponse)
}

::google::protobuf::uint8* CMsgGetZoomResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGetZoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->zoom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGetZoomResponse)
  return target;
}

size_t CMsgGetZoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGetZoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float zoom = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGetZoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGetZoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetZoomResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGetZoomResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGetZoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGetZoomResponse)
    MergeFrom(*source);
  }
}

void CMsgGetZoomResponse::MergeFrom(const CMsgGetZoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGetZoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      zoom_ = from.zoom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGetZoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGetZoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetZoomResponse::CopyFrom(const CMsgGetZoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGetZoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetZoomResponse::IsInitialized() const {
  return true;
}

void CMsgGetZoomResponse::Swap(CMsgGetZoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGetZoomResponse::InternalSwap(CMsgGetZoomResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(zoom_, other->zoom_);
}

::google::protobuf::Metadata CMsgGetZoomResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLinkAtPosition::InitAsDefaultInstance() {
}
class CMsgLinkAtPosition::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgLinkAtPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgLinkAtPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(CMsgLinkAtPosition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLinkAtPosition::kBrowserHandleFieldNumber;
const int CMsgLinkAtPosition::kXFieldNumber;
const int CMsgLinkAtPosition::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLinkAtPosition::CMsgLinkAtPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLinkAtPosition)
}
CMsgLinkAtPosition::CMsgLinkAtPosition(const CMsgLinkAtPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLinkAtPosition)
}

void CMsgLinkAtPosition::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgLinkAtPosition::~CMsgLinkAtPosition() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLinkAtPosition)
  SharedDtor();
}

void CMsgLinkAtPosition::SharedDtor() {
}

void CMsgLinkAtPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLinkAtPosition& CMsgLinkAtPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLinkAtPosition_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgLinkAtPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLinkAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLinkAtPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLinkAtPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLinkAtPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLinkAtPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLinkAtPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLinkAtPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLinkAtPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLinkAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLinkAtPosition)
}

::google::protobuf::uint8* CMsgLinkAtPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLinkAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLinkAtPosition)
  return target;
}

size_t CMsgLinkAtPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLinkAtPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLinkAtPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLinkAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLinkAtPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLinkAtPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLinkAtPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLinkAtPosition)
    MergeFrom(*source);
  }
}

void CMsgLinkAtPosition::MergeFrom(const CMsgLinkAtPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLinkAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLinkAtPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLinkAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLinkAtPosition::CopyFrom(const CMsgLinkAtPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLinkAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLinkAtPosition::IsInitialized() const {
  return true;
}

void CMsgLinkAtPosition::Swap(CMsgLinkAtPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLinkAtPosition::InternalSwap(CMsgLinkAtPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata CMsgLinkAtPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLinkAtPositionResponse::InitAsDefaultInstance() {
}
class CMsgLinkAtPositionResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgLinkAtPositionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_x(CMsgLinkAtPositionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_y(CMsgLinkAtPositionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_url(CMsgLinkAtPositionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_blivelink(CMsgLinkAtPositionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_binput(CMsgLinkAtPositionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLinkAtPositionResponse::kBrowserHandleFieldNumber;
const int CMsgLinkAtPositionResponse::kXFieldNumber;
const int CMsgLinkAtPositionResponse::kYFieldNumber;
const int CMsgLinkAtPositionResponse::kUrlFieldNumber;
const int CMsgLinkAtPositionResponse::kBlivelinkFieldNumber;
const int CMsgLinkAtPositionResponse::kBinputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLinkAtPositionResponse::CMsgLinkAtPositionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLinkAtPositionResponse)
}
CMsgLinkAtPositionResponse::CMsgLinkAtPositionResponse(const CMsgLinkAtPositionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&binput_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(binput_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLinkAtPositionResponse)
}

void CMsgLinkAtPositionResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLinkAtPositionResponse_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&binput_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(binput_));
}

CMsgLinkAtPositionResponse::~CMsgLinkAtPositionResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLinkAtPositionResponse)
  SharedDtor();
}

void CMsgLinkAtPositionResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLinkAtPositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLinkAtPositionResponse& CMsgLinkAtPositionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLinkAtPositionResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgLinkAtPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLinkAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&binput_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(binput_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLinkAtPositionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLinkAtPositionResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgLinkAtPositionResponse.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool blivelink = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_blivelink(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool binput = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_binput(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLinkAtPositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLinkAtPositionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLinkAtPositionResponse.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blivelink = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_blivelink(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blivelink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool binput = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_binput(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binput_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLinkAtPositionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLinkAtPositionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLinkAtPositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLinkAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional string url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLinkAtPositionResponse.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // optional bool blivelink = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blivelink(), output);
  }

  // optional bool binput = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->binput(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLinkAtPositionResponse)
}

::google::protobuf::uint8* CMsgLinkAtPositionResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLinkAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional string url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLinkAtPositionResponse.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // optional bool blivelink = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blivelink(), target);
  }

  // optional bool binput = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->binput(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLinkAtPositionResponse)
  return target;
}

size_t CMsgLinkAtPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLinkAtPositionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string url = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional bool blivelink = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool binput = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLinkAtPositionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLinkAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLinkAtPositionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLinkAtPositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLinkAtPositionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLinkAtPositionResponse)
    MergeFrom(*source);
  }
}

void CMsgLinkAtPositionResponse::MergeFrom(const CMsgLinkAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLinkAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      blivelink_ = from.blivelink_;
    }
    if (cached_has_bits & 0x00000020u) {
      binput_ = from.binput_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLinkAtPositionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLinkAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLinkAtPositionResponse::CopyFrom(const CMsgLinkAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLinkAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLinkAtPositionResponse::IsInitialized() const {
  return true;
}

void CMsgLinkAtPositionResponse::Swap(CMsgLinkAtPositionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLinkAtPositionResponse::InternalSwap(CMsgLinkAtPositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(blivelink_, other->blivelink_);
  swap(binput_, other->binput_);
}

::google::protobuf::Metadata CMsgLinkAtPositionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgZoomToElementAtPosition::InitAsDefaultInstance() {
}
class CMsgZoomToElementAtPosition::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgZoomToElementAtPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgZoomToElementAtPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(CMsgZoomToElementAtPosition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgZoomToElementAtPosition::kBrowserHandleFieldNumber;
const int CMsgZoomToElementAtPosition::kXFieldNumber;
const int CMsgZoomToElementAtPosition::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgZoomToElementAtPosition::CMsgZoomToElementAtPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgZoomToElementAtPosition)
}
CMsgZoomToElementAtPosition::CMsgZoomToElementAtPosition(const CMsgZoomToElementAtPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgZoomToElementAtPosition)
}

void CMsgZoomToElementAtPosition::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgZoomToElementAtPosition::~CMsgZoomToElementAtPosition() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgZoomToElementAtPosition)
  SharedDtor();
}

void CMsgZoomToElementAtPosition::SharedDtor() {
}

void CMsgZoomToElementAtPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgZoomToElementAtPosition& CMsgZoomToElementAtPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgZoomToElementAtPosition_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgZoomToElementAtPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgZoomToElementAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgZoomToElementAtPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgZoomToElementAtPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgZoomToElementAtPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgZoomToElementAtPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgZoomToElementAtPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgZoomToElementAtPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgZoomToElementAtPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgZoomToElementAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgZoomToElementAtPosition)
}

::google::protobuf::uint8* CMsgZoomToElementAtPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgZoomToElementAtPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgZoomToElementAtPosition)
  return target;
}

size_t CMsgZoomToElementAtPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgZoomToElementAtPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgZoomToElementAtPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgZoomToElementAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgZoomToElementAtPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgZoomToElementAtPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgZoomToElementAtPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgZoomToElementAtPosition)
    MergeFrom(*source);
  }
}

void CMsgZoomToElementAtPosition::MergeFrom(const CMsgZoomToElementAtPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgZoomToElementAtPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgZoomToElementAtPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgZoomToElementAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToElementAtPosition::CopyFrom(const CMsgZoomToElementAtPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgZoomToElementAtPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToElementAtPosition::IsInitialized() const {
  return true;
}

void CMsgZoomToElementAtPosition::Swap(CMsgZoomToElementAtPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgZoomToElementAtPosition::InternalSwap(CMsgZoomToElementAtPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata CMsgZoomToElementAtPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgZoomToElementAtPositionResponse::InitAsDefaultInstance() {
}
class CMsgZoomToElementAtPositionResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgZoomToElementAtPositionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scale(CMsgZoomToElementAtPositionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_duration(CMsgZoomToElementAtPositionResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgZoomToElementAtPositionResponse::kBrowserHandleFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kScaleFieldNumber;
const int CMsgZoomToElementAtPositionResponse::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgZoomToElementAtPositionResponse::CMsgZoomToElementAtPositionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgZoomToElementAtPositionResponse)
}
CMsgZoomToElementAtPositionResponse::CMsgZoomToElementAtPositionResponse(const CMsgZoomToElementAtPositionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgZoomToElementAtPositionResponse)
}

void CMsgZoomToElementAtPositionResponse::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(duration_));
}

CMsgZoomToElementAtPositionResponse::~CMsgZoomToElementAtPositionResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgZoomToElementAtPositionResponse)
  SharedDtor();
}

void CMsgZoomToElementAtPositionResponse::SharedDtor() {
}

void CMsgZoomToElementAtPositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgZoomToElementAtPositionResponse& CMsgZoomToElementAtPositionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgZoomToElementAtPositionResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgZoomToElementAtPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgZoomToElementAtPositionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgZoomToElementAtPositionResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float scale = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_scale(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float duration = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgZoomToElementAtPositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_scale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgZoomToElementAtPositionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgZoomToElementAtPositionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgZoomToElementAtPositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgZoomToElementAtPositionResponse)
}

::google::protobuf::uint8* CMsgZoomToElementAtPositionResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgZoomToElementAtPositionResponse)
  return target;
}

size_t CMsgZoomToElementAtPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgZoomToElementAtPositionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgZoomToElementAtPositionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgZoomToElementAtPositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgZoomToElementAtPositionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgZoomToElementAtPositionResponse)
    MergeFrom(*source);
  }
}

void CMsgZoomToElementAtPositionResponse::MergeFrom(const CMsgZoomToElementAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgZoomToElementAtPositionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToElementAtPositionResponse::CopyFrom(const CMsgZoomToElementAtPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgZoomToElementAtPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToElementAtPositionResponse::IsInitialized() const {
  return true;
}

void CMsgZoomToElementAtPositionResponse::Swap(CMsgZoomToElementAtPositionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgZoomToElementAtPositionResponse::InternalSwap(CMsgZoomToElementAtPositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(scale_, other->scale_);
  swap(duration_, other->duration_);
}

::google::protobuf::Metadata CMsgZoomToElementAtPositionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgScalePageToValue::InitAsDefaultInstance() {
}
class CMsgScalePageToValue::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgScalePageToValue* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scale(CMsgScalePageToValue* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_x(CMsgScalePageToValue* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_y(CMsgScalePageToValue* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgScalePageToValue::kBrowserHandleFieldNumber;
const int CMsgScalePageToValue::kScaleFieldNumber;
const int CMsgScalePageToValue::kXFieldNumber;
const int CMsgScalePageToValue::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgScalePageToValue::CMsgScalePageToValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgScalePageToValue)
}
CMsgScalePageToValue::CMsgScalePageToValue(const CMsgScalePageToValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgScalePageToValue)
}

void CMsgScalePageToValue::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgScalePageToValue::~CMsgScalePageToValue() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgScalePageToValue)
  SharedDtor();
}

void CMsgScalePageToValue::SharedDtor() {
}

void CMsgScalePageToValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgScalePageToValue& CMsgScalePageToValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgScalePageToValue_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgScalePageToValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgScalePageToValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgScalePageToValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgScalePageToValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float scale = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_scale(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float x = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float y = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgScalePageToValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgScalePageToValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_scale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgScalePageToValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgScalePageToValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgScalePageToValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgScalePageToValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgScalePageToValue)
}

::google::protobuf::uint8* CMsgScalePageToValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgScalePageToValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgScalePageToValue)
  return target;
}

size_t CMsgScalePageToValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgScalePageToValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgScalePageToValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgScalePageToValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScalePageToValue* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgScalePageToValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgScalePageToValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgScalePageToValue)
    MergeFrom(*source);
  }
}

void CMsgScalePageToValue::MergeFrom(const CMsgScalePageToValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgScalePageToValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScalePageToValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgScalePageToValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScalePageToValue::CopyFrom(const CMsgScalePageToValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgScalePageToValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScalePageToValue::IsInitialized() const {
  return true;
}

void CMsgScalePageToValue::Swap(CMsgScalePageToValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgScalePageToValue::InternalSwap(CMsgScalePageToValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(scale_, other->scale_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata CMsgScalePageToValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgScalePageToValueResponse::InitAsDefaultInstance() {
}
class CMsgScalePageToValueResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgScalePageToValueResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_zoom(CMsgScalePageToValueResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgScalePageToValueResponse::kBrowserHandleFieldNumber;
const int CMsgScalePageToValueResponse::kZoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgScalePageToValueResponse::CMsgScalePageToValueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgScalePageToValueResponse)
}
CMsgScalePageToValueResponse::CMsgScalePageToValueResponse(const CMsgScalePageToValueResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoom_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgScalePageToValueResponse)
}

void CMsgScalePageToValueResponse::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
}

CMsgScalePageToValueResponse::~CMsgScalePageToValueResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgScalePageToValueResponse)
  SharedDtor();
}

void CMsgScalePageToValueResponse::SharedDtor() {
}

void CMsgScalePageToValueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgScalePageToValueResponse& CMsgScalePageToValueResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgScalePageToValueResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgScalePageToValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgScalePageToValueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zoom_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(zoom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgScalePageToValueResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgScalePageToValueResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float zoom = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_zoom(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgScalePageToValueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgScalePageToValueResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float zoom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_zoom(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgScalePageToValueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgScalePageToValueResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgScalePageToValueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgScalePageToValueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->zoom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgScalePageToValueResponse)
}

::google::protobuf::uint8* CMsgScalePageToValueResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgScalePageToValueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float zoom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->zoom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgScalePageToValueResponse)
  return target;
}

size_t CMsgScalePageToValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgScalePageToValueResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float zoom = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgScalePageToValueResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgScalePageToValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScalePageToValueResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgScalePageToValueResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgScalePageToValueResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgScalePageToValueResponse)
    MergeFrom(*source);
  }
}

void CMsgScalePageToValueResponse::MergeFrom(const CMsgScalePageToValueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgScalePageToValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      zoom_ = from.zoom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScalePageToValueResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgScalePageToValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScalePageToValueResponse::CopyFrom(const CMsgScalePageToValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgScalePageToValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScalePageToValueResponse::IsInitialized() const {
  return true;
}

void CMsgScalePageToValueResponse::Swap(CMsgScalePageToValueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgScalePageToValueResponse::InternalSwap(CMsgScalePageToValueResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(zoom_, other->zoom_);
}

::google::protobuf::Metadata CMsgScalePageToValueResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSavePageToJPEG::InitAsDefaultInstance() {
}
class CMsgSavePageToJPEG::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSavePageToJPEG* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgSavePageToJPEG* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_filename(CMsgSavePageToJPEG* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_width(CMsgSavePageToJPEG* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_height(CMsgSavePageToJPEG* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSavePageToJPEG::kBrowserHandleFieldNumber;
const int CMsgSavePageToJPEG::kUrlFieldNumber;
const int CMsgSavePageToJPEG::kFilenameFieldNumber;
const int CMsgSavePageToJPEG::kWidthFieldNumber;
const int CMsgSavePageToJPEG::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSavePageToJPEG::CMsgSavePageToJPEG()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSavePageToJPEG)
}
CMsgSavePageToJPEG::CMsgSavePageToJPEG(const CMsgSavePageToJPEG& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSavePageToJPEG)
}

void CMsgSavePageToJPEG::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSavePageToJPEG_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
}

CMsgSavePageToJPEG::~CMsgSavePageToJPEG() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSavePageToJPEG)
  SharedDtor();
}

void CMsgSavePageToJPEG::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSavePageToJPEG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSavePageToJPEG& CMsgSavePageToJPEG::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSavePageToJPEG_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSavePageToJPEG::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSavePageToJPEG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSavePageToJPEG::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSavePageToJPEG*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSavePageToJPEG.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string filename = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSavePageToJPEG.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 width = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 height = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSavePageToJPEG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSavePageToJPEG)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSavePageToJPEG.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSavePageToJPEG.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSavePageToJPEG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSavePageToJPEG)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSavePageToJPEG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSavePageToJPEG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEG.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEG.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSavePageToJPEG)
}

::google::protobuf::uint8* CMsgSavePageToJPEG::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSavePageToJPEG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEG.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEG.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSavePageToJPEG)
  return target;
}

size_t CMsgSavePageToJPEG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSavePageToJPEG)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string filename = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSavePageToJPEG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSavePageToJPEG)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSavePageToJPEG* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSavePageToJPEG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSavePageToJPEG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSavePageToJPEG)
    MergeFrom(*source);
  }
}

void CMsgSavePageToJPEG::MergeFrom(const CMsgSavePageToJPEG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSavePageToJPEG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSavePageToJPEG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSavePageToJPEG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSavePageToJPEG::CopyFrom(const CMsgSavePageToJPEG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSavePageToJPEG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSavePageToJPEG::IsInitialized() const {
  return true;
}

void CMsgSavePageToJPEG::Swap(CMsgSavePageToJPEG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSavePageToJPEG::InternalSwap(CMsgSavePageToJPEG* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::google::protobuf::Metadata CMsgSavePageToJPEG::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSavePageToJPEGResponse::InitAsDefaultInstance() {
}
class CMsgSavePageToJPEGResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSavePageToJPEGResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgSavePageToJPEGResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_filename(CMsgSavePageToJPEGResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSavePageToJPEGResponse::kBrowserHandleFieldNumber;
const int CMsgSavePageToJPEGResponse::kUrlFieldNumber;
const int CMsgSavePageToJPEGResponse::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSavePageToJPEGResponse::CMsgSavePageToJPEGResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSavePageToJPEGResponse)
}
CMsgSavePageToJPEGResponse::CMsgSavePageToJPEGResponse(const CMsgSavePageToJPEGResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSavePageToJPEGResponse)
}

void CMsgSavePageToJPEGResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSavePageToJPEGResponse_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgSavePageToJPEGResponse::~CMsgSavePageToJPEGResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSavePageToJPEGResponse)
  SharedDtor();
}

void CMsgSavePageToJPEGResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSavePageToJPEGResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSavePageToJPEGResponse& CMsgSavePageToJPEGResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSavePageToJPEGResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSavePageToJPEGResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSavePageToJPEGResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSavePageToJPEGResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSavePageToJPEGResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSavePageToJPEGResponse.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string filename = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSavePageToJPEGResponse.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSavePageToJPEGResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSavePageToJPEGResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSavePageToJPEGResponse.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSavePageToJPEGResponse.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSavePageToJPEGResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSavePageToJPEGResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSavePageToJPEGResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSavePageToJPEGResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEGResponse.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEGResponse.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSavePageToJPEGResponse)
}

::google::protobuf::uint8* CMsgSavePageToJPEGResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSavePageToJPEGResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEGResponse.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSavePageToJPEGResponse.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSavePageToJPEGResponse)
  return target;
}

size_t CMsgSavePageToJPEGResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSavePageToJPEGResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string filename = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSavePageToJPEGResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSavePageToJPEGResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSavePageToJPEGResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSavePageToJPEGResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSavePageToJPEGResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSavePageToJPEGResponse)
    MergeFrom(*source);
  }
}

void CMsgSavePageToJPEGResponse::MergeFrom(const CMsgSavePageToJPEGResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSavePageToJPEGResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSavePageToJPEGResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSavePageToJPEGResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSavePageToJPEGResponse::CopyFrom(const CMsgSavePageToJPEGResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSavePageToJPEGResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSavePageToJPEGResponse::IsInitialized() const {
  return true;
}

void CMsgSavePageToJPEGResponse::Swap(CMsgSavePageToJPEGResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSavePageToJPEGResponse::InternalSwap(CMsgSavePageToJPEGResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgSavePageToJPEGResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSAlert::InitAsDefaultInstance() {
}
class CMsgJSAlert::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgJSAlert* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(CMsgJSAlert* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSAlert::kBrowserHandleFieldNumber;
const int CMsgJSAlert::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSAlert::CMsgJSAlert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSAlert)
}
CMsgJSAlert::CMsgJSAlert(const CMsgJSAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSAlert)
}

void CMsgJSAlert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJSAlert_htmlmessages_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgJSAlert::~CMsgJSAlert() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSAlert)
  SharedDtor();
}

void CMsgJSAlert::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSAlert& CMsgJSAlert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSAlert_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSAlert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSAlert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJSAlert.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSAlert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSAlert.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSAlert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSAlert.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSAlert)
}

::google::protobuf::uint8* CMsgJSAlert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSAlert.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSAlert)
  return target;
}

size_t CMsgJSAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSAlert* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSAlert)
    MergeFrom(*source);
  }
}

void CMsgJSAlert::MergeFrom(const CMsgJSAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSAlert::CopyFrom(const CMsgJSAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSAlert::IsInitialized() const {
  return true;
}

void CMsgJSAlert::Swap(CMsgJSAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSAlert::InternalSwap(CMsgJSAlert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgJSAlert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSConfirm::InitAsDefaultInstance() {
}
class CMsgJSConfirm::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgJSConfirm* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(CMsgJSConfirm* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSConfirm::kBrowserHandleFieldNumber;
const int CMsgJSConfirm::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSConfirm::CMsgJSConfirm()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSConfirm)
}
CMsgJSConfirm::CMsgJSConfirm(const CMsgJSConfirm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSConfirm)
}

void CMsgJSConfirm::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJSConfirm_htmlmessages_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgJSConfirm::~CMsgJSConfirm() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSConfirm)
  SharedDtor();
}

void CMsgJSConfirm::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSConfirm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSConfirm& CMsgJSConfirm::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSConfirm_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSConfirm::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSConfirm*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJSConfirm.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSConfirm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSConfirm.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSConfirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSConfirm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSConfirm.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSConfirm)
}

::google::protobuf::uint8* CMsgJSConfirm::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSConfirm.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSConfirm)
  return target;
}

size_t CMsgJSConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSConfirm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSConfirm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSConfirm* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSConfirm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSConfirm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSConfirm)
    MergeFrom(*source);
  }
}

void CMsgJSConfirm::MergeFrom(const CMsgJSConfirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSConfirm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSConfirm::CopyFrom(const CMsgJSConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSConfirm::IsInitialized() const {
  return true;
}

void CMsgJSConfirm::Swap(CMsgJSConfirm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSConfirm::InternalSwap(CMsgJSConfirm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgJSConfirm::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSDialogResponse::InitAsDefaultInstance() {
}
class CMsgJSDialogResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgJSDialogResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_result(CMsgJSDialogResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSDialogResponse::kBrowserHandleFieldNumber;
const int CMsgJSDialogResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSDialogResponse::CMsgJSDialogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSDialogResponse)
}
CMsgJSDialogResponse::CMsgJSDialogResponse(const CMsgJSDialogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSDialogResponse)
}

void CMsgJSDialogResponse::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(result_));
}

CMsgJSDialogResponse::~CMsgJSDialogResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSDialogResponse)
  SharedDtor();
}

void CMsgJSDialogResponse::SharedDtor() {
}

void CMsgJSDialogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSDialogResponse& CMsgJSDialogResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSDialogResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSDialogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSDialogResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSDialogResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool result = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSDialogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSDialogResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSDialogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSDialogResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSDialogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSDialogResponse)
}

::google::protobuf::uint8* CMsgJSDialogResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSDialogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSDialogResponse)
  return target;
}

size_t CMsgJSDialogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSDialogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSDialogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSDialogResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSDialogResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSDialogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSDialogResponse)
    MergeFrom(*source);
  }
}

void CMsgJSDialogResponse::MergeFrom(const CMsgJSDialogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSDialogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSDialogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSDialogResponse::CopyFrom(const CMsgJSDialogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSDialogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSDialogResponse::IsInitialized() const {
  return true;
}

void CMsgJSDialogResponse::Swap(CMsgJSDialogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSDialogResponse::InternalSwap(CMsgJSDialogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgJSDialogResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgCanGoBackAndForward::InitAsDefaultInstance() {
}
class CMsgCanGoBackAndForward::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgCanGoBackAndForward* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_bgoback(CMsgCanGoBackAndForward* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bgoforward(CMsgCanGoBackAndForward* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCanGoBackAndForward::kBrowserHandleFieldNumber;
const int CMsgCanGoBackAndForward::kBgobackFieldNumber;
const int CMsgCanGoBackAndForward::kBgoforwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCanGoBackAndForward::CMsgCanGoBackAndForward()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgCanGoBackAndForward)
}
CMsgCanGoBackAndForward::CMsgCanGoBackAndForward(const CMsgCanGoBackAndForward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bgoforward_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bgoforward_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgCanGoBackAndForward)
}

void CMsgCanGoBackAndForward::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bgoforward_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(bgoforward_));
}

CMsgCanGoBackAndForward::~CMsgCanGoBackAndForward() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgCanGoBackAndForward)
  SharedDtor();
}

void CMsgCanGoBackAndForward::SharedDtor() {
}

void CMsgCanGoBackAndForward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCanGoBackAndForward& CMsgCanGoBackAndForward::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgCanGoBackAndForward_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgCanGoBackAndForward::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgCanGoBackAndForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bgoforward_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bgoforward_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgCanGoBackAndForward::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgCanGoBackAndForward*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bgoback = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bgoback(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bgoforward = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bgoforward(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgCanGoBackAndForward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgCanGoBackAndForward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bgoback = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bgoback(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgoback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bgoforward = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_bgoforward(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgoforward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgCanGoBackAndForward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgCanGoBackAndForward)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgCanGoBackAndForward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgCanGoBackAndForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool bgoback = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bgoback(), output);
  }

  // optional bool bgoforward = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bgoforward(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgCanGoBackAndForward)
}

::google::protobuf::uint8* CMsgCanGoBackAndForward::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgCanGoBackAndForward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool bgoback = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bgoback(), target);
  }

  // optional bool bgoforward = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bgoforward(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgCanGoBackAndForward)
  return target;
}

size_t CMsgCanGoBackAndForward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgCanGoBackAndForward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bgoback = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool bgoforward = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCanGoBackAndForward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgCanGoBackAndForward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCanGoBackAndForward* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgCanGoBackAndForward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgCanGoBackAndForward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgCanGoBackAndForward)
    MergeFrom(*source);
  }
}

void CMsgCanGoBackAndForward::MergeFrom(const CMsgCanGoBackAndForward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgCanGoBackAndForward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      bgoback_ = from.bgoback_;
    }
    if (cached_has_bits & 0x00000004u) {
      bgoforward_ = from.bgoforward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCanGoBackAndForward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgCanGoBackAndForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCanGoBackAndForward::CopyFrom(const CMsgCanGoBackAndForward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgCanGoBackAndForward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCanGoBackAndForward::IsInitialized() const {
  return true;
}

void CMsgCanGoBackAndForward::Swap(CMsgCanGoBackAndForward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCanGoBackAndForward::InternalSwap(CMsgCanGoBackAndForward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(bgoback_, other->bgoback_);
  swap(bgoforward_, other->bgoforward_);
}

::google::protobuf::Metadata CMsgCanGoBackAndForward::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgOpenSteamURL::InitAsDefaultInstance() {
}
class CMsgOpenSteamURL::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgOpenSteamURL* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(CMsgOpenSteamURL* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_referrer(CMsgOpenSteamURL* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgOpenSteamURL::kBrowserHandleFieldNumber;
const int CMsgOpenSteamURL::kUrlFieldNumber;
const int CMsgOpenSteamURL::kReferrerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgOpenSteamURL::CMsgOpenSteamURL()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgOpenSteamURL)
}
CMsgOpenSteamURL::CMsgOpenSteamURL(const CMsgOpenSteamURL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  referrer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_referrer()) {
    referrer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referrer_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgOpenSteamURL)
}

void CMsgOpenSteamURL::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgOpenSteamURL_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referrer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgOpenSteamURL::~CMsgOpenSteamURL() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgOpenSteamURL)
  SharedDtor();
}

void CMsgOpenSteamURL::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referrer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgOpenSteamURL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgOpenSteamURL& CMsgOpenSteamURL::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgOpenSteamURL_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgOpenSteamURL::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgOpenSteamURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      referrer_.ClearNonDefaultToEmptyNoArena();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgOpenSteamURL::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgOpenSteamURL*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgOpenSteamURL.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string referrer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgOpenSteamURL.referrer");
        object = msg->mutable_referrer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgOpenSteamURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgOpenSteamURL)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgOpenSteamURL.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string referrer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referrer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referrer().data(), static_cast<int>(this->referrer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgOpenSteamURL.referrer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgOpenSteamURL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgOpenSteamURL)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgOpenSteamURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgOpenSteamURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenSteamURL.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional string referrer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referrer().data(), static_cast<int>(this->referrer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenSteamURL.referrer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->referrer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgOpenSteamURL)
}

::google::protobuf::uint8* CMsgOpenSteamURL::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgOpenSteamURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenSteamURL.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional string referrer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referrer().data(), static_cast<int>(this->referrer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgOpenSteamURL.referrer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->referrer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgOpenSteamURL)
  return target;
}

size_t CMsgOpenSteamURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgOpenSteamURL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string referrer = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referrer());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgOpenSteamURL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgOpenSteamURL)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgOpenSteamURL* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgOpenSteamURL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgOpenSteamURL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgOpenSteamURL)
    MergeFrom(*source);
  }
}

void CMsgOpenSteamURL::MergeFrom(const CMsgOpenSteamURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgOpenSteamURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      referrer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referrer_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgOpenSteamURL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgOpenSteamURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenSteamURL::CopyFrom(const CMsgOpenSteamURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgOpenSteamURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenSteamURL::IsInitialized() const {
  return true;
}

void CMsgOpenSteamURL::Swap(CMsgOpenSteamURL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgOpenSteamURL::InternalSwap(CMsgOpenSteamURL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  referrer_.Swap(&other->referrer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgOpenSteamURL::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetCookie::InitAsDefaultInstance() {
}
class CMsgSetCookie::HasBitSetters {
 public:
  static void set_has_key(CMsgSetCookie* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgSetCookie* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_path(CMsgSetCookie* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_host(CMsgSetCookie* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_expires(CMsgSetCookie* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_secure(CMsgSetCookie* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_httponly(CMsgSetCookie* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetCookie::kKeyFieldNumber;
const int CMsgSetCookie::kValueFieldNumber;
const int CMsgSetCookie::kPathFieldNumber;
const int CMsgSetCookie::kHostFieldNumber;
const int CMsgSetCookie::kExpiresFieldNumber;
const int CMsgSetCookie::kSecureFieldNumber;
const int CMsgSetCookie::kHttponlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetCookie::CMsgSetCookie()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetCookie)
}
CMsgSetCookie::CMsgSetCookie(const CMsgSetCookie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  ::memcpy(&expires_, &from.expires_,
    static_cast<size_t>(reinterpret_cast<char*>(&httponly_) -
    reinterpret_cast<char*>(&expires_)) + sizeof(httponly_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetCookie)
}

void CMsgSetCookie::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSetCookie_htmlmessages_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expires_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&httponly_) -
      reinterpret_cast<char*>(&expires_)) + sizeof(httponly_));
}

CMsgSetCookie::~CMsgSetCookie() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetCookie)
  SharedDtor();
}

void CMsgSetCookie::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetCookie::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetCookie& CMsgSetCookie::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetCookie_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetCookie::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      host_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&expires_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&httponly_) -
        reinterpret_cast<char*>(&expires_)) + sizeof(httponly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetCookie::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetCookie*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetCookie.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetCookie.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetCookie.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string host = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetCookie.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 expires = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_expires(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool secure = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_secure(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool httponly = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_httponly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetCookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetCookie)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetCookie.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetCookie.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetCookie.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetCookie.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expires = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_expires(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expires_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool secure = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_secure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool httponly = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_httponly(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &httponly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetCookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetCookie)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetCookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host(), output);
  }

  // optional uint32 expires = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->expires(), output);
  }

  // optional bool secure = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->secure(), output);
  }

  // optional bool httponly = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->httponly(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetCookie)
}

::google::protobuf::uint8* CMsgSetCookie::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetCookie.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host(), target);
  }

  // optional uint32 expires = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->expires(), target);
  }

  // optional bool secure = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->secure(), target);
  }

  // optional bool httponly = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->httponly(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetCookie)
  return target;
}

size_t CMsgSetCookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetCookie)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string host = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional uint32 expires = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expires());
    }

    // optional bool secure = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool httponly = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetCookie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetCookie)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetCookie* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetCookie>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetCookie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetCookie)
    MergeFrom(*source);
  }
}

void CMsgSetCookie::MergeFrom(const CMsgSetCookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetCookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000010u) {
      expires_ = from.expires_;
    }
    if (cached_has_bits & 0x00000020u) {
      secure_ = from.secure_;
    }
    if (cached_has_bits & 0x00000040u) {
      httponly_ = from.httponly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetCookie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetCookie::CopyFrom(const CMsgSetCookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetCookie::IsInitialized() const {
  return true;
}

void CMsgSetCookie::Swap(CMsgSetCookie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetCookie::InternalSwap(CMsgSetCookie* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expires_, other->expires_);
  swap(secure_, other->secure_);
  swap(httponly_, other->httponly_);
}

::google::protobuf::Metadata CMsgSetCookie::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetTargetFrameRate::InitAsDefaultInstance() {
}
class CMsgSetTargetFrameRate::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetTargetFrameRate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ntargetframerate(CMsgSetTargetFrameRate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetTargetFrameRate::kBrowserHandleFieldNumber;
const int CMsgSetTargetFrameRate::kNTargetFrameRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetTargetFrameRate::CMsgSetTargetFrameRate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetTargetFrameRate)
}
CMsgSetTargetFrameRate::CMsgSetTargetFrameRate(const CMsgSetTargetFrameRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&ntargetframerate_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(ntargetframerate_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetTargetFrameRate)
}

void CMsgSetTargetFrameRate::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ntargetframerate_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(ntargetframerate_));
}

CMsgSetTargetFrameRate::~CMsgSetTargetFrameRate() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetTargetFrameRate)
  SharedDtor();
}

void CMsgSetTargetFrameRate::SharedDtor() {
}

void CMsgSetTargetFrameRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetTargetFrameRate& CMsgSetTargetFrameRate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetTargetFrameRate_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetTargetFrameRate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetTargetFrameRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ntargetframerate_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(ntargetframerate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetTargetFrameRate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetTargetFrameRate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 nTargetFrameRate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ntargetframerate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetTargetFrameRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetTargetFrameRate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nTargetFrameRate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ntargetframerate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntargetframerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetTargetFrameRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetTargetFrameRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetTargetFrameRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetTargetFrameRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 nTargetFrameRate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ntargetframerate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetTargetFrameRate)
}

::google::protobuf::uint8* CMsgSetTargetFrameRate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetTargetFrameRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 nTargetFrameRate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ntargetframerate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetTargetFrameRate)
  return target;
}

size_t CMsgSetTargetFrameRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetTargetFrameRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 nTargetFrameRate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntargetframerate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetTargetFrameRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetTargetFrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetTargetFrameRate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetTargetFrameRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetTargetFrameRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetTargetFrameRate)
    MergeFrom(*source);
  }
}

void CMsgSetTargetFrameRate::MergeFrom(const CMsgSetTargetFrameRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetTargetFrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ntargetframerate_ = from.ntargetframerate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetTargetFrameRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetTargetFrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetTargetFrameRate::CopyFrom(const CMsgSetTargetFrameRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetTargetFrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetTargetFrameRate::IsInitialized() const {
  return true;
}

void CMsgSetTargetFrameRate::Swap(CMsgSetTargetFrameRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetTargetFrameRate::InternalSwap(CMsgSetTargetFrameRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(ntargetframerate_, other->ntargetframerate_);
}

::google::protobuf::Metadata CMsgSetTargetFrameRate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPauseRepaint::InitAsDefaultInstance() {
}
class CMsgPauseRepaint::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgPauseRepaint* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPauseRepaint::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPauseRepaint::CMsgPauseRepaint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPauseRepaint)
}
CMsgPauseRepaint::CMsgPauseRepaint(const CMsgPauseRepaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPauseRepaint)
}

void CMsgPauseRepaint::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgPauseRepaint::~CMsgPauseRepaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPauseRepaint)
  SharedDtor();
}

void CMsgPauseRepaint::SharedDtor() {
}

void CMsgPauseRepaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPauseRepaint& CMsgPauseRepaint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPauseRepaint_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgPauseRepaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPauseRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPauseRepaint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPauseRepaint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPauseRepaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPauseRepaint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPauseRepaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPauseRepaint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPauseRepaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPauseRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPauseRepaint)
}

::google::protobuf::uint8* CMsgPauseRepaint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPauseRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPauseRepaint)
  return target;
}

size_t CMsgPauseRepaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPauseRepaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPauseRepaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPauseRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPauseRepaint* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPauseRepaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPauseRepaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPauseRepaint)
    MergeFrom(*source);
  }
}

void CMsgPauseRepaint::MergeFrom(const CMsgPauseRepaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPauseRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgPauseRepaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPauseRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPauseRepaint::CopyFrom(const CMsgPauseRepaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPauseRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPauseRepaint::IsInitialized() const {
  return true;
}

void CMsgPauseRepaint::Swap(CMsgPauseRepaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPauseRepaint::InternalSwap(CMsgPauseRepaint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgPauseRepaint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFullRepaint::InitAsDefaultInstance() {
}
class CMsgFullRepaint::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgFullRepaint* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFullRepaint::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFullRepaint::CMsgFullRepaint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFullRepaint)
}
CMsgFullRepaint::CMsgFullRepaint(const CMsgFullRepaint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFullRepaint)
}

void CMsgFullRepaint::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgFullRepaint::~CMsgFullRepaint() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFullRepaint)
  SharedDtor();
}

void CMsgFullRepaint::SharedDtor() {
}

void CMsgFullRepaint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFullRepaint& CMsgFullRepaint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFullRepaint_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgFullRepaint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFullRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFullRepaint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFullRepaint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFullRepaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFullRepaint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFullRepaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFullRepaint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFullRepaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFullRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFullRepaint)
}

::google::protobuf::uint8* CMsgFullRepaint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFullRepaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFullRepaint)
  return target;
}

size_t CMsgFullRepaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFullRepaint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFullRepaint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFullRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFullRepaint* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFullRepaint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFullRepaint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFullRepaint)
    MergeFrom(*source);
  }
}

void CMsgFullRepaint::MergeFrom(const CMsgFullRepaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFullRepaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgFullRepaint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFullRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFullRepaint::CopyFrom(const CMsgFullRepaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFullRepaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFullRepaint::IsInitialized() const {
  return true;
}

void CMsgFullRepaint::Swap(CMsgFullRepaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFullRepaint::InternalSwap(CMsgFullRepaint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgFullRepaint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRequestFullScreen::InitAsDefaultInstance() {
}
class CMsgRequestFullScreen::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgRequestFullScreen* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRequestFullScreen::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRequestFullScreen::CMsgRequestFullScreen()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRequestFullScreen)
}
CMsgRequestFullScreen::CMsgRequestFullScreen(const CMsgRequestFullScreen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRequestFullScreen)
}

void CMsgRequestFullScreen::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgRequestFullScreen::~CMsgRequestFullScreen() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRequestFullScreen)
  SharedDtor();
}

void CMsgRequestFullScreen::SharedDtor() {
}

void CMsgRequestFullScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRequestFullScreen& CMsgRequestFullScreen::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRequestFullScreen_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgRequestFullScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRequestFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRequestFullScreen::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRequestFullScreen*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRequestFullScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRequestFullScreen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRequestFullScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRequestFullScreen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRequestFullScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRequestFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRequestFullScreen)
}

::google::protobuf::uint8* CMsgRequestFullScreen::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRequestFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRequestFullScreen)
  return target;
}

size_t CMsgRequestFullScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRequestFullScreen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestFullScreen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRequestFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestFullScreen* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRequestFullScreen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRequestFullScreen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRequestFullScreen)
    MergeFrom(*source);
  }
}

void CMsgRequestFullScreen::MergeFrom(const CMsgRequestFullScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRequestFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgRequestFullScreen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRequestFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestFullScreen::CopyFrom(const CMsgRequestFullScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRequestFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestFullScreen::IsInitialized() const {
  return true;
}

void CMsgRequestFullScreen::Swap(CMsgRequestFullScreen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestFullScreen::InternalSwap(CMsgRequestFullScreen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgRequestFullScreen::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgExitFullScreen::InitAsDefaultInstance() {
}
class CMsgExitFullScreen::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgExitFullScreen* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExitFullScreen::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExitFullScreen::CMsgExitFullScreen()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgExitFullScreen)
}
CMsgExitFullScreen::CMsgExitFullScreen(const CMsgExitFullScreen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgExitFullScreen)
}

void CMsgExitFullScreen::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgExitFullScreen::~CMsgExitFullScreen() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgExitFullScreen)
  SharedDtor();
}

void CMsgExitFullScreen::SharedDtor() {
}

void CMsgExitFullScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgExitFullScreen& CMsgExitFullScreen::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgExitFullScreen_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgExitFullScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgExitFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgExitFullScreen::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgExitFullScreen*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgExitFullScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgExitFullScreen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgExitFullScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgExitFullScreen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgExitFullScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgExitFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgExitFullScreen)
}

::google::protobuf::uint8* CMsgExitFullScreen::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgExitFullScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgExitFullScreen)
  return target;
}

size_t CMsgExitFullScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgExitFullScreen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExitFullScreen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgExitFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExitFullScreen* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgExitFullScreen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgExitFullScreen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgExitFullScreen)
    MergeFrom(*source);
  }
}

void CMsgExitFullScreen::MergeFrom(const CMsgExitFullScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgExitFullScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgExitFullScreen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgExitFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExitFullScreen::CopyFrom(const CMsgExitFullScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgExitFullScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExitFullScreen::IsInitialized() const {
  return true;
}

void CMsgExitFullScreen::Swap(CMsgExitFullScreen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExitFullScreen::InternalSwap(CMsgExitFullScreen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgExitFullScreen::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgToggleFindInPageDialog::InitAsDefaultInstance() {
}
class CMsgToggleFindInPageDialog::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgToggleFindInPageDialog* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgToggleFindInPageDialog::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgToggleFindInPageDialog::CMsgToggleFindInPageDialog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgToggleFindInPageDialog)
}
CMsgToggleFindInPageDialog::CMsgToggleFindInPageDialog(const CMsgToggleFindInPageDialog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgToggleFindInPageDialog)
}

void CMsgToggleFindInPageDialog::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgToggleFindInPageDialog::~CMsgToggleFindInPageDialog() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgToggleFindInPageDialog)
  SharedDtor();
}

void CMsgToggleFindInPageDialog::SharedDtor() {
}

void CMsgToggleFindInPageDialog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgToggleFindInPageDialog& CMsgToggleFindInPageDialog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgToggleFindInPageDialog_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgToggleFindInPageDialog::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgToggleFindInPageDialog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgToggleFindInPageDialog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgToggleFindInPageDialog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgToggleFindInPageDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgToggleFindInPageDialog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgToggleFindInPageDialog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgToggleFindInPageDialog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgToggleFindInPageDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgToggleFindInPageDialog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgToggleFindInPageDialog)
}

::google::protobuf::uint8* CMsgToggleFindInPageDialog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgToggleFindInPageDialog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgToggleFindInPageDialog)
  return target;
}

size_t CMsgToggleFindInPageDialog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgToggleFindInPageDialog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgToggleFindInPageDialog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgToggleFindInPageDialog)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgToggleFindInPageDialog* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgToggleFindInPageDialog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgToggleFindInPageDialog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgToggleFindInPageDialog)
    MergeFrom(*source);
  }
}

void CMsgToggleFindInPageDialog::MergeFrom(const CMsgToggleFindInPageDialog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgToggleFindInPageDialog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgToggleFindInPageDialog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgToggleFindInPageDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgToggleFindInPageDialog::CopyFrom(const CMsgToggleFindInPageDialog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgToggleFindInPageDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgToggleFindInPageDialog::IsInitialized() const {
  return true;
}

void CMsgToggleFindInPageDialog::Swap(CMsgToggleFindInPageDialog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgToggleFindInPageDialog::InternalSwap(CMsgToggleFindInPageDialog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgToggleFindInPageDialog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetPIDShuttingDown::InitAsDefaultInstance() {
}
class CMsgSetPIDShuttingDown::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetPIDShuttingDown* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetPIDShuttingDown::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetPIDShuttingDown::CMsgSetPIDShuttingDown()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetPIDShuttingDown)
}
CMsgSetPIDShuttingDown::CMsgSetPIDShuttingDown(const CMsgSetPIDShuttingDown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetPIDShuttingDown)
}

void CMsgSetPIDShuttingDown::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgSetPIDShuttingDown::~CMsgSetPIDShuttingDown() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetPIDShuttingDown)
  SharedDtor();
}

void CMsgSetPIDShuttingDown::SharedDtor() {
}

void CMsgSetPIDShuttingDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetPIDShuttingDown& CMsgSetPIDShuttingDown::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetPIDShuttingDown_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetPIDShuttingDown::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetPIDShuttingDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetPIDShuttingDown::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetPIDShuttingDown*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetPIDShuttingDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetPIDShuttingDown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetPIDShuttingDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetPIDShuttingDown)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetPIDShuttingDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetPIDShuttingDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetPIDShuttingDown)
}

::google::protobuf::uint8* CMsgSetPIDShuttingDown::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetPIDShuttingDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetPIDShuttingDown)
  return target;
}

size_t CMsgSetPIDShuttingDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetPIDShuttingDown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetPIDShuttingDown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetPIDShuttingDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetPIDShuttingDown* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetPIDShuttingDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetPIDShuttingDown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetPIDShuttingDown)
    MergeFrom(*source);
  }
}

void CMsgSetPIDShuttingDown::MergeFrom(const CMsgSetPIDShuttingDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetPIDShuttingDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgSetPIDShuttingDown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetPIDShuttingDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetPIDShuttingDown::CopyFrom(const CMsgSetPIDShuttingDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetPIDShuttingDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetPIDShuttingDown::IsInitialized() const {
  return true;
}

void CMsgSetPIDShuttingDown::Swap(CMsgSetPIDShuttingDown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetPIDShuttingDown::InternalSwap(CMsgSetPIDShuttingDown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgSetPIDShuttingDown::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDisableBackgroundThrottling::InitAsDefaultInstance() {
}
class CMsgDisableBackgroundThrottling::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgDisableBackgroundThrottling* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDisableBackgroundThrottling::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDisableBackgroundThrottling::CMsgDisableBackgroundThrottling()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgDisableBackgroundThrottling)
}
CMsgDisableBackgroundThrottling::CMsgDisableBackgroundThrottling(const CMsgDisableBackgroundThrottling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgDisableBackgroundThrottling)
}

void CMsgDisableBackgroundThrottling::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgDisableBackgroundThrottling::~CMsgDisableBackgroundThrottling() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgDisableBackgroundThrottling)
  SharedDtor();
}

void CMsgDisableBackgroundThrottling::SharedDtor() {
}

void CMsgDisableBackgroundThrottling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDisableBackgroundThrottling& CMsgDisableBackgroundThrottling::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDisableBackgroundThrottling_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgDisableBackgroundThrottling::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgDisableBackgroundThrottling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDisableBackgroundThrottling::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDisableBackgroundThrottling*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDisableBackgroundThrottling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgDisableBackgroundThrottling)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgDisableBackgroundThrottling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgDisableBackgroundThrottling)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDisableBackgroundThrottling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgDisableBackgroundThrottling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgDisableBackgroundThrottling)
}

::google::protobuf::uint8* CMsgDisableBackgroundThrottling::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgDisableBackgroundThrottling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgDisableBackgroundThrottling)
  return target;
}

size_t CMsgDisableBackgroundThrottling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgDisableBackgroundThrottling)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDisableBackgroundThrottling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgDisableBackgroundThrottling)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDisableBackgroundThrottling* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDisableBackgroundThrottling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgDisableBackgroundThrottling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgDisableBackgroundThrottling)
    MergeFrom(*source);
  }
}

void CMsgDisableBackgroundThrottling::MergeFrom(const CMsgDisableBackgroundThrottling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgDisableBackgroundThrottling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgDisableBackgroundThrottling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgDisableBackgroundThrottling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDisableBackgroundThrottling::CopyFrom(const CMsgDisableBackgroundThrottling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgDisableBackgroundThrottling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDisableBackgroundThrottling::IsInitialized() const {
  return true;
}

void CMsgDisableBackgroundThrottling::Swap(CMsgDisableBackgroundThrottling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDisableBackgroundThrottling::InternalSwap(CMsgDisableBackgroundThrottling* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgDisableBackgroundThrottling::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAckPIDShuttingDown::InitAsDefaultInstance() {
}
class CMsgAckPIDShuttingDown::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgAckPIDShuttingDown* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAckPIDShuttingDown::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAckPIDShuttingDown::CMsgAckPIDShuttingDown()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgAckPIDShuttingDown)
}
CMsgAckPIDShuttingDown::CMsgAckPIDShuttingDown(const CMsgAckPIDShuttingDown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgAckPIDShuttingDown)
}

void CMsgAckPIDShuttingDown::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgAckPIDShuttingDown::~CMsgAckPIDShuttingDown() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgAckPIDShuttingDown)
  SharedDtor();
}

void CMsgAckPIDShuttingDown::SharedDtor() {
}

void CMsgAckPIDShuttingDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAckPIDShuttingDown& CMsgAckPIDShuttingDown::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAckPIDShuttingDown_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAckPIDShuttingDown::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgAckPIDShuttingDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAckPIDShuttingDown::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAckPIDShuttingDown*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAckPIDShuttingDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgAckPIDShuttingDown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgAckPIDShuttingDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgAckPIDShuttingDown)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAckPIDShuttingDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgAckPIDShuttingDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgAckPIDShuttingDown)
}

::google::protobuf::uint8* CMsgAckPIDShuttingDown::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgAckPIDShuttingDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgAckPIDShuttingDown)
  return target;
}

size_t CMsgAckPIDShuttingDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgAckPIDShuttingDown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAckPIDShuttingDown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgAckPIDShuttingDown)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAckPIDShuttingDown* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAckPIDShuttingDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgAckPIDShuttingDown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgAckPIDShuttingDown)
    MergeFrom(*source);
  }
}

void CMsgAckPIDShuttingDown::MergeFrom(const CMsgAckPIDShuttingDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgAckPIDShuttingDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgAckPIDShuttingDown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgAckPIDShuttingDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAckPIDShuttingDown::CopyFrom(const CMsgAckPIDShuttingDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgAckPIDShuttingDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAckPIDShuttingDown::IsInitialized() const {
  return true;
}

void CMsgAckPIDShuttingDown::Swap(CMsgAckPIDShuttingDown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAckPIDShuttingDown::InternalSwap(CMsgAckPIDShuttingDown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgAckPIDShuttingDown::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGetCookiesForURL::InitAsDefaultInstance() {
}
class CMsgGetCookiesForURL::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgGetCookiesForURL* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_url(CMsgGetCookiesForURL* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGetCookiesForURL::kBrowserHandleFieldNumber;
const int CMsgGetCookiesForURL::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGetCookiesForURL::CMsgGetCookiesForURL()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGetCookiesForURL)
}
CMsgGetCookiesForURL::CMsgGetCookiesForURL(const CMsgGetCookiesForURL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGetCookiesForURL)
}

void CMsgGetCookiesForURL::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGetCookiesForURL_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgGetCookiesForURL::~CMsgGetCookiesForURL() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGetCookiesForURL)
  SharedDtor();
}

void CMsgGetCookiesForURL::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGetCookiesForURL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGetCookiesForURL& CMsgGetCookiesForURL::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGetCookiesForURL_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGetCookiesForURL::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGetCookiesForURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGetCookiesForURL::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGetCookiesForURL*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgGetCookiesForURL.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGetCookiesForURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGetCookiesForURL)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGetCookiesForURL.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGetCookiesForURL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGetCookiesForURL)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGetCookiesForURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGetCookiesForURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGetCookiesForURL.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGetCookiesForURL)
}

::google::protobuf::uint8* CMsgGetCookiesForURL::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGetCookiesForURL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGetCookiesForURL.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGetCookiesForURL)
  return target;
}

size_t CMsgGetCookiesForURL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGetCookiesForURL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGetCookiesForURL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGetCookiesForURL)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetCookiesForURL* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGetCookiesForURL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGetCookiesForURL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGetCookiesForURL)
    MergeFrom(*source);
  }
}

void CMsgGetCookiesForURL::MergeFrom(const CMsgGetCookiesForURL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGetCookiesForURL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGetCookiesForURL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGetCookiesForURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetCookiesForURL::CopyFrom(const CMsgGetCookiesForURL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGetCookiesForURL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetCookiesForURL::IsInitialized() const {
  return true;
}

void CMsgGetCookiesForURL::Swap(CMsgGetCookiesForURL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGetCookiesForURL::InternalSwap(CMsgGetCookiesForURL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgGetCookiesForURL::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CCookie::InitAsDefaultInstance() {
}
class CCookie::HasBitSetters {
 public:
  static void set_has_name(CCookie* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CCookie* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_domain(CCookie* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_path(CCookie* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCookie::kNameFieldNumber;
const int CCookie::kValueFieldNumber;
const int CCookie::kDomainFieldNumber;
const int CCookie::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCookie::CCookie()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCookie)
}
CCookie::CCookie(const CCookie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCookie)
}

void CCookie::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CCookie_htmlmessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCookie::~CCookie() {
  // @@protoc_insertion_point(destructor:proto.steam.CCookie)
  SharedDtor();
}

void CCookie::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCookie::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCookie& CCookie::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CCookie_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CCookie::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      domain_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CCookie::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CCookie*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCookie.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCookie.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string domain = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCookie.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string path = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CCookie.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CCookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCookie)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCookie.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCookie.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCookie.domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCookie.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCookie)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CCookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string domain = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // optional string path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCookie)
}

::google::protobuf::uint8* CCookie::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string domain = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // optional string path = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCookie.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCookie)
  return target;
}

size_t CCookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCookie)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string domain = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string path = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCookie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCookie)
  GOOGLE_DCHECK_NE(&from, this);
  const CCookie* source =
      ::google::protobuf::DynamicCastToGenerated<CCookie>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCookie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCookie)
    MergeFrom(*source);
  }
}

void CCookie::MergeFrom(const CCookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
  }
}

void CCookie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCookie::CopyFrom(const CCookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCookie::IsInitialized() const {
  return true;
}

void CCookie::Swap(CCookie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCookie::InternalSwap(CCookie* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CCookie::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGetCookiesForURLResponse::InitAsDefaultInstance() {
}
class CMsgGetCookiesForURLResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgGetCookiesForURLResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_url(CMsgGetCookiesForURLResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGetCookiesForURLResponse::kBrowserHandleFieldNumber;
const int CMsgGetCookiesForURLResponse::kUrlFieldNumber;
const int CMsgGetCookiesForURLResponse::kCookiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGetCookiesForURLResponse::CMsgGetCookiesForURLResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGetCookiesForURLResponse)
}
CMsgGetCookiesForURLResponse::CMsgGetCookiesForURLResponse(const CMsgGetCookiesForURLResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cookies_(from.cookies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGetCookiesForURLResponse)
}

void CMsgGetCookiesForURLResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGetCookiesForURLResponse_htmlmessages_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgGetCookiesForURLResponse::~CMsgGetCookiesForURLResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGetCookiesForURLResponse)
  SharedDtor();
}

void CMsgGetCookiesForURLResponse::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGetCookiesForURLResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGetCookiesForURLResponse& CMsgGetCookiesForURLResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGetCookiesForURLResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGetCookiesForURLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGetCookiesForURLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cookies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGetCookiesForURLResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGetCookiesForURLResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgGetCookiesForURLResponse.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CCookie cookies = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CCookie::_InternalParse;
          object = msg->add_cookies();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGetCookiesForURLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGetCookiesForURLResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgGetCookiesForURLResponse.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CCookie cookies = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cookies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGetCookiesForURLResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGetCookiesForURLResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGetCookiesForURLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGetCookiesForURLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGetCookiesForURLResponse.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // repeated .proto.steam.CCookie cookies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cookies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->cookies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGetCookiesForURLResponse)
}

::google::protobuf::uint8* CMsgGetCookiesForURLResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGetCookiesForURLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgGetCookiesForURLResponse.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // repeated .proto.steam.CCookie cookies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cookies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cookies(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGetCookiesForURLResponse)
  return target;
}

size_t CMsgGetCookiesForURLResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGetCookiesForURLResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CCookie cookies = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cookies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cookies(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGetCookiesForURLResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGetCookiesForURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGetCookiesForURLResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGetCookiesForURLResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGetCookiesForURLResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGetCookiesForURLResponse)
    MergeFrom(*source);
  }
}

void CMsgGetCookiesForURLResponse::MergeFrom(const CMsgGetCookiesForURLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGetCookiesForURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cookies_.MergeFrom(from.cookies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGetCookiesForURLResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGetCookiesForURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGetCookiesForURLResponse::CopyFrom(const CMsgGetCookiesForURLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGetCookiesForURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGetCookiesForURLResponse::IsInitialized() const {
  return true;
}

void CMsgGetCookiesForURLResponse::Swap(CMsgGetCookiesForURLResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGetCookiesForURLResponse::InternalSwap(CMsgGetCookiesForURLResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cookies_)->InternalSwap(CastToBase(&other->cookies_));
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgGetCookiesForURLResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgNodeHasFocus::InitAsDefaultInstance() {
}
class CMsgNodeHasFocus::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgNodeHasFocus* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_binput(CMsgNodeHasFocus* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_name(CMsgNodeHasFocus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_elementtagname(CMsgNodeHasFocus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_searchbuttontext(CMsgNodeHasFocus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bhasmultipleinputs(CMsgNodeHasFocus* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_input_type(CMsgNodeHasFocus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNodeHasFocus::kBrowserHandleFieldNumber;
const int CMsgNodeHasFocus::kBInputFieldNumber;
const int CMsgNodeHasFocus::kNameFieldNumber;
const int CMsgNodeHasFocus::kElementtagnameFieldNumber;
const int CMsgNodeHasFocus::kSearchbuttontextFieldNumber;
const int CMsgNodeHasFocus::kBHasMultipleInputsFieldNumber;
const int CMsgNodeHasFocus::kInputTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNodeHasFocus::CMsgNodeHasFocus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgNodeHasFocus)
}
CMsgNodeHasFocus::CMsgNodeHasFocus(const CMsgNodeHasFocus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  elementtagname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_elementtagname()) {
    elementtagname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.elementtagname_);
  }
  searchbuttontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_searchbuttontext()) {
    searchbuttontext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchbuttontext_);
  }
  input_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_input_type()) {
    input_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_type_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&bhasmultipleinputs_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(bhasmultipleinputs_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgNodeHasFocus)
}

void CMsgNodeHasFocus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgNodeHasFocus_htmlmessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elementtagname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchbuttontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bhasmultipleinputs_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(bhasmultipleinputs_));
}

CMsgNodeHasFocus::~CMsgNodeHasFocus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgNodeHasFocus)
  SharedDtor();
}

void CMsgNodeHasFocus::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elementtagname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  searchbuttontext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgNodeHasFocus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgNodeHasFocus& CMsgNodeHasFocus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgNodeHasFocus_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgNodeHasFocus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgNodeHasFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      elementtagname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      searchbuttontext_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      input_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bhasmultipleinputs_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(bhasmultipleinputs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgNodeHasFocus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgNodeHasFocus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bInput = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_binput(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgNodeHasFocus.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string elementtagname = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgNodeHasFocus.elementtagname");
        object = msg->mutable_elementtagname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string searchbuttontext = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgNodeHasFocus.searchbuttontext");
        object = msg->mutable_searchbuttontext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool bHasMultipleInputs = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_bhasmultipleinputs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string input_type = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgNodeHasFocus.input_type");
        object = msg->mutable_input_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgNodeHasFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgNodeHasFocus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bInput = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_binput(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binput_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgNodeHasFocus.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string elementtagname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_elementtagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->elementtagname().data(), static_cast<int>(this->elementtagname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgNodeHasFocus.elementtagname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string searchbuttontext = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchbuttontext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchbuttontext().data(), static_cast<int>(this->searchbuttontext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgNodeHasFocus.searchbuttontext");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bHasMultipleInputs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_bhasmultipleinputs(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhasmultipleinputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string input_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_type().data(), static_cast<int>(this->input_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgNodeHasFocus.input_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgNodeHasFocus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgNodeHasFocus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgNodeHasFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgNodeHasFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional bool bInput = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->binput(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string elementtagname = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->elementtagname().data(), static_cast<int>(this->elementtagname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.elementtagname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->elementtagname(), output);
  }

  // optional string searchbuttontext = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchbuttontext().data(), static_cast<int>(this->searchbuttontext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.searchbuttontext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->searchbuttontext(), output);
  }

  // optional bool bHasMultipleInputs = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bhasmultipleinputs(), output);
  }

  // optional string input_type = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_type().data(), static_cast<int>(this->input_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.input_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->input_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgNodeHasFocus)
}

::google::protobuf::uint8* CMsgNodeHasFocus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgNodeHasFocus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional bool bInput = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->binput(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string elementtagname = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->elementtagname().data(), static_cast<int>(this->elementtagname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.elementtagname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->elementtagname(), target);
  }

  // optional string searchbuttontext = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchbuttontext().data(), static_cast<int>(this->searchbuttontext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.searchbuttontext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->searchbuttontext(), target);
  }

  // optional bool bHasMultipleInputs = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bhasmultipleinputs(), target);
  }

  // optional string input_type = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_type().data(), static_cast<int>(this->input_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgNodeHasFocus.input_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->input_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgNodeHasFocus)
  return target;
}

size_t CMsgNodeHasFocus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgNodeHasFocus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string elementtagname = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->elementtagname());
    }

    // optional string searchbuttontext = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchbuttontext());
    }

    // optional string input_type = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_type());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional bool bInput = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool bHasMultipleInputs = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgNodeHasFocus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgNodeHasFocus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNodeHasFocus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgNodeHasFocus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgNodeHasFocus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgNodeHasFocus)
    MergeFrom(*source);
  }
}

void CMsgNodeHasFocus::MergeFrom(const CMsgNodeHasFocus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgNodeHasFocus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      elementtagname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.elementtagname_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      searchbuttontext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchbuttontext_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      input_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      binput_ = from.binput_;
    }
    if (cached_has_bits & 0x00000040u) {
      bhasmultipleinputs_ = from.bhasmultipleinputs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNodeHasFocus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgNodeHasFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNodeHasFocus::CopyFrom(const CMsgNodeHasFocus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgNodeHasFocus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNodeHasFocus::IsInitialized() const {
  return true;
}

void CMsgNodeHasFocus::Swap(CMsgNodeHasFocus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNodeHasFocus::InternalSwap(CMsgNodeHasFocus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  elementtagname_.Swap(&other->elementtagname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  searchbuttontext_.Swap(&other->searchbuttontext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_type_.Swap(&other->input_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(binput_, other->binput_);
  swap(bhasmultipleinputs_, other->bhasmultipleinputs_);
}

::google::protobuf::Metadata CMsgNodeHasFocus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgZoomToFocusedElement::InitAsDefaultInstance() {
}
class CMsgZoomToFocusedElement::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgZoomToFocusedElement* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgZoomToFocusedElement::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgZoomToFocusedElement::CMsgZoomToFocusedElement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgZoomToFocusedElement)
}
CMsgZoomToFocusedElement::CMsgZoomToFocusedElement(const CMsgZoomToFocusedElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgZoomToFocusedElement)
}

void CMsgZoomToFocusedElement::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgZoomToFocusedElement::~CMsgZoomToFocusedElement() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgZoomToFocusedElement)
  SharedDtor();
}

void CMsgZoomToFocusedElement::SharedDtor() {
}

void CMsgZoomToFocusedElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgZoomToFocusedElement& CMsgZoomToFocusedElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgZoomToFocusedElement_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgZoomToFocusedElement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgZoomToFocusedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgZoomToFocusedElement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgZoomToFocusedElement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgZoomToFocusedElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgZoomToFocusedElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgZoomToFocusedElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgZoomToFocusedElement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgZoomToFocusedElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgZoomToFocusedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgZoomToFocusedElement)
}

::google::protobuf::uint8* CMsgZoomToFocusedElement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgZoomToFocusedElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgZoomToFocusedElement)
  return target;
}

size_t CMsgZoomToFocusedElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgZoomToFocusedElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgZoomToFocusedElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgZoomToFocusedElement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgZoomToFocusedElement* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgZoomToFocusedElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgZoomToFocusedElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgZoomToFocusedElement)
    MergeFrom(*source);
  }
}

void CMsgZoomToFocusedElement::MergeFrom(const CMsgZoomToFocusedElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgZoomToFocusedElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgZoomToFocusedElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgZoomToFocusedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgZoomToFocusedElement::CopyFrom(const CMsgZoomToFocusedElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgZoomToFocusedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgZoomToFocusedElement::IsInitialized() const {
  return true;
}

void CMsgZoomToFocusedElement::Swap(CMsgZoomToFocusedElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgZoomToFocusedElement::InternalSwap(CMsgZoomToFocusedElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgZoomToFocusedElement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgCloseFullScreenFlashIfOpen::InitAsDefaultInstance() {
}
class CMsgCloseFullScreenFlashIfOpen::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgCloseFullScreenFlashIfOpen* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCloseFullScreenFlashIfOpen::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCloseFullScreenFlashIfOpen::CMsgCloseFullScreenFlashIfOpen()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgCloseFullScreenFlashIfOpen)
}
CMsgCloseFullScreenFlashIfOpen::CMsgCloseFullScreenFlashIfOpen(const CMsgCloseFullScreenFlashIfOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgCloseFullScreenFlashIfOpen)
}

void CMsgCloseFullScreenFlashIfOpen::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgCloseFullScreenFlashIfOpen::~CMsgCloseFullScreenFlashIfOpen() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  SharedDtor();
}

void CMsgCloseFullScreenFlashIfOpen::SharedDtor() {
}

void CMsgCloseFullScreenFlashIfOpen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCloseFullScreenFlashIfOpen& CMsgCloseFullScreenFlashIfOpen::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgCloseFullScreenFlashIfOpen_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgCloseFullScreenFlashIfOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgCloseFullScreenFlashIfOpen::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgCloseFullScreenFlashIfOpen*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgCloseFullScreenFlashIfOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgCloseFullScreenFlashIfOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgCloseFullScreenFlashIfOpen)
}

::google::protobuf::uint8* CMsgCloseFullScreenFlashIfOpen::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  return target;
}

size_t CMsgCloseFullScreenFlashIfOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCloseFullScreenFlashIfOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCloseFullScreenFlashIfOpen* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgCloseFullScreenFlashIfOpen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgCloseFullScreenFlashIfOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgCloseFullScreenFlashIfOpen)
    MergeFrom(*source);
  }
}

void CMsgCloseFullScreenFlashIfOpen::MergeFrom(const CMsgCloseFullScreenFlashIfOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgCloseFullScreenFlashIfOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCloseFullScreenFlashIfOpen::CopyFrom(const CMsgCloseFullScreenFlashIfOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgCloseFullScreenFlashIfOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCloseFullScreenFlashIfOpen::IsInitialized() const {
  return true;
}

void CMsgCloseFullScreenFlashIfOpen::Swap(CMsgCloseFullScreenFlashIfOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCloseFullScreenFlashIfOpen::InternalSwap(CMsgCloseFullScreenFlashIfOpen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgCloseFullScreenFlashIfOpen::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPauseFullScreenFlashMovieIfOpen::InitAsDefaultInstance() {
}
class CMsgPauseFullScreenFlashMovieIfOpen::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgPauseFullScreenFlashMovieIfOpen* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPauseFullScreenFlashMovieIfOpen::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPauseFullScreenFlashMovieIfOpen::CMsgPauseFullScreenFlashMovieIfOpen()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
}
CMsgPauseFullScreenFlashMovieIfOpen::CMsgPauseFullScreenFlashMovieIfOpen(const CMsgPauseFullScreenFlashMovieIfOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
}

void CMsgPauseFullScreenFlashMovieIfOpen::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgPauseFullScreenFlashMovieIfOpen::~CMsgPauseFullScreenFlashMovieIfOpen() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  SharedDtor();
}

void CMsgPauseFullScreenFlashMovieIfOpen::SharedDtor() {
}

void CMsgPauseFullScreenFlashMovieIfOpen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPauseFullScreenFlashMovieIfOpen& CMsgPauseFullScreenFlashMovieIfOpen::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPauseFullScreenFlashMovieIfOpen_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgPauseFullScreenFlashMovieIfOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPauseFullScreenFlashMovieIfOpen::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPauseFullScreenFlashMovieIfOpen*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPauseFullScreenFlashMovieIfOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPauseFullScreenFlashMovieIfOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
}

::google::protobuf::uint8* CMsgPauseFullScreenFlashMovieIfOpen::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  return target;
}

size_t CMsgPauseFullScreenFlashMovieIfOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPauseFullScreenFlashMovieIfOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPauseFullScreenFlashMovieIfOpen* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPauseFullScreenFlashMovieIfOpen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
    MergeFrom(*source);
  }
}

void CMsgPauseFullScreenFlashMovieIfOpen::MergeFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgPauseFullScreenFlashMovieIfOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPauseFullScreenFlashMovieIfOpen::CopyFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgPauseFullScreenFlashMovieIfOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPauseFullScreenFlashMovieIfOpen::IsInitialized() const {
  return true;
}

void CMsgPauseFullScreenFlashMovieIfOpen::Swap(CMsgPauseFullScreenFlashMovieIfOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPauseFullScreenFlashMovieIfOpen::InternalSwap(CMsgPauseFullScreenFlashMovieIfOpen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgPauseFullScreenFlashMovieIfOpen::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFocusedNodeText::InitAsDefaultInstance() {
}
class CMsgFocusedNodeText::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgFocusedNodeText* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFocusedNodeText::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFocusedNodeText::CMsgFocusedNodeText()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFocusedNodeText)
}
CMsgFocusedNodeText::CMsgFocusedNodeText(const CMsgFocusedNodeText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFocusedNodeText)
}

void CMsgFocusedNodeText::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgFocusedNodeText::~CMsgFocusedNodeText() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFocusedNodeText)
  SharedDtor();
}

void CMsgFocusedNodeText::SharedDtor() {
}

void CMsgFocusedNodeText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFocusedNodeText& CMsgFocusedNodeText::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFocusedNodeText_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgFocusedNodeText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFocusedNodeText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFocusedNodeText::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFocusedNodeText*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFocusedNodeText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFocusedNodeText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFocusedNodeText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFocusedNodeText)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFocusedNodeText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFocusedNodeText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFocusedNodeText)
}

::google::protobuf::uint8* CMsgFocusedNodeText::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFocusedNodeText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFocusedNodeText)
  return target;
}

size_t CMsgFocusedNodeText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFocusedNodeText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFocusedNodeText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFocusedNodeText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFocusedNodeText* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFocusedNodeText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFocusedNodeText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFocusedNodeText)
    MergeFrom(*source);
  }
}

void CMsgFocusedNodeText::MergeFrom(const CMsgFocusedNodeText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFocusedNodeText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgFocusedNodeText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFocusedNodeText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFocusedNodeText::CopyFrom(const CMsgFocusedNodeText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFocusedNodeText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFocusedNodeText::IsInitialized() const {
  return true;
}

void CMsgFocusedNodeText::Swap(CMsgFocusedNodeText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFocusedNodeText::InternalSwap(CMsgFocusedNodeText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgFocusedNodeText::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFocusedNodeTextResponse::InitAsDefaultInstance() {
}
class CMsgFocusedNodeTextResponse::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgFocusedNodeTextResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_value(CMsgFocusedNodeTextResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFocusedNodeTextResponse::kBrowserHandleFieldNumber;
const int CMsgFocusedNodeTextResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFocusedNodeTextResponse::CMsgFocusedNodeTextResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgFocusedNodeTextResponse)
}
CMsgFocusedNodeTextResponse::CMsgFocusedNodeTextResponse(const CMsgFocusedNodeTextResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgFocusedNodeTextResponse)
}

void CMsgFocusedNodeTextResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgFocusedNodeTextResponse_htmlmessages_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgFocusedNodeTextResponse::~CMsgFocusedNodeTextResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgFocusedNodeTextResponse)
  SharedDtor();
}

void CMsgFocusedNodeTextResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgFocusedNodeTextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFocusedNodeTextResponse& CMsgFocusedNodeTextResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFocusedNodeTextResponse_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgFocusedNodeTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgFocusedNodeTextResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFocusedNodeTextResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFocusedNodeTextResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgFocusedNodeTextResponse.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFocusedNodeTextResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgFocusedNodeTextResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgFocusedNodeTextResponse.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgFocusedNodeTextResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgFocusedNodeTextResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFocusedNodeTextResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgFocusedNodeTextResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFocusedNodeTextResponse.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgFocusedNodeTextResponse)
}

::google::protobuf::uint8* CMsgFocusedNodeTextResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgFocusedNodeTextResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgFocusedNodeTextResponse.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgFocusedNodeTextResponse)
  return target;
}

size_t CMsgFocusedNodeTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgFocusedNodeTextResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFocusedNodeTextResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgFocusedNodeTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFocusedNodeTextResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFocusedNodeTextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgFocusedNodeTextResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgFocusedNodeTextResponse)
    MergeFrom(*source);
  }
}

void CMsgFocusedNodeTextResponse::MergeFrom(const CMsgFocusedNodeTextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgFocusedNodeTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFocusedNodeTextResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgFocusedNodeTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFocusedNodeTextResponse::CopyFrom(const CMsgFocusedNodeTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgFocusedNodeTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFocusedNodeTextResponse::IsInitialized() const {
  return true;
}

void CMsgFocusedNodeTextResponse::Swap(CMsgFocusedNodeTextResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFocusedNodeTextResponse::InternalSwap(CMsgFocusedNodeTextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgFocusedNodeTextResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBuildID::InitAsDefaultInstance() {
}
class CMsgBuildID::HasBitSetters {
 public:
  static void set_has_build_id(CMsgBuildID* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBuildID::kBuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBuildID::CMsgBuildID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBuildID)
}
CMsgBuildID::CMsgBuildID(const CMsgBuildID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  build_id_ = from.build_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBuildID)
}

void CMsgBuildID::SharedCtor() {
  build_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgBuildID::~CMsgBuildID() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBuildID)
  SharedDtor();
}

void CMsgBuildID::SharedDtor() {
}

void CMsgBuildID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBuildID& CMsgBuildID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBuildID_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBuildID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBuildID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  build_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBuildID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBuildID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 build_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_build_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBuildID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBuildID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 build_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_build_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &build_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBuildID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBuildID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBuildID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBuildID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 build_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->build_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBuildID)
}

::google::protobuf::uint8* CMsgBuildID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBuildID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 build_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->build_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBuildID)
  return target;
}

size_t CMsgBuildID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBuildID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 build_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->build_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBuildID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBuildID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBuildID* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBuildID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBuildID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBuildID)
    MergeFrom(*source);
  }
}

void CMsgBuildID::MergeFrom(const CMsgBuildID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBuildID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_build_id()) {
    set_build_id(from.build_id());
  }
}

void CMsgBuildID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBuildID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBuildID::CopyFrom(const CMsgBuildID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBuildID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBuildID::IsInitialized() const {
  return true;
}

void CMsgBuildID::Swap(CMsgBuildID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBuildID::InternalSwap(CMsgBuildID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(build_id_, other->build_id_);
}

::google::protobuf::Metadata CMsgBuildID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgOpenDevTools::InitAsDefaultInstance() {
}
class CMsgOpenDevTools::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgOpenDevTools* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgOpenDevTools::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgOpenDevTools::CMsgOpenDevTools()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgOpenDevTools)
}
CMsgOpenDevTools::CMsgOpenDevTools(const CMsgOpenDevTools& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgOpenDevTools)
}

void CMsgOpenDevTools::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgOpenDevTools::~CMsgOpenDevTools() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgOpenDevTools)
  SharedDtor();
}

void CMsgOpenDevTools::SharedDtor() {
}

void CMsgOpenDevTools::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgOpenDevTools& CMsgOpenDevTools::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgOpenDevTools_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgOpenDevTools::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgOpenDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgOpenDevTools::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgOpenDevTools*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgOpenDevTools::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgOpenDevTools)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgOpenDevTools)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgOpenDevTools)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgOpenDevTools::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgOpenDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgOpenDevTools)
}

::google::protobuf::uint8* CMsgOpenDevTools::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgOpenDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgOpenDevTools)
  return target;
}

size_t CMsgOpenDevTools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgOpenDevTools)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgOpenDevTools::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgOpenDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgOpenDevTools* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgOpenDevTools>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgOpenDevTools)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgOpenDevTools)
    MergeFrom(*source);
  }
}

void CMsgOpenDevTools::MergeFrom(const CMsgOpenDevTools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgOpenDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgOpenDevTools::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgOpenDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgOpenDevTools::CopyFrom(const CMsgOpenDevTools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgOpenDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgOpenDevTools::IsInitialized() const {
  return true;
}

void CMsgOpenDevTools::Swap(CMsgOpenDevTools* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgOpenDevTools::InternalSwap(CMsgOpenDevTools* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgOpenDevTools::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgCloseDevTools::InitAsDefaultInstance() {
}
class CMsgCloseDevTools::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgCloseDevTools* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCloseDevTools::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCloseDevTools::CMsgCloseDevTools()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgCloseDevTools)
}
CMsgCloseDevTools::CMsgCloseDevTools(const CMsgCloseDevTools& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgCloseDevTools)
}

void CMsgCloseDevTools::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgCloseDevTools::~CMsgCloseDevTools() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgCloseDevTools)
  SharedDtor();
}

void CMsgCloseDevTools::SharedDtor() {
}

void CMsgCloseDevTools::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCloseDevTools& CMsgCloseDevTools::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgCloseDevTools_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgCloseDevTools::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgCloseDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgCloseDevTools::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgCloseDevTools*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgCloseDevTools::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgCloseDevTools)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgCloseDevTools)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgCloseDevTools)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgCloseDevTools::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgCloseDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgCloseDevTools)
}

::google::protobuf::uint8* CMsgCloseDevTools::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgCloseDevTools)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgCloseDevTools)
  return target;
}

size_t CMsgCloseDevTools::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgCloseDevTools)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCloseDevTools::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgCloseDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCloseDevTools* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgCloseDevTools>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgCloseDevTools)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgCloseDevTools)
    MergeFrom(*source);
  }
}

void CMsgCloseDevTools::MergeFrom(const CMsgCloseDevTools& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgCloseDevTools)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgCloseDevTools::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgCloseDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCloseDevTools::CopyFrom(const CMsgCloseDevTools& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgCloseDevTools)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCloseDevTools::IsInitialized() const {
  return true;
}

void CMsgCloseDevTools::Swap(CMsgCloseDevTools* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCloseDevTools::InternalSwap(CMsgCloseDevTools* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgCloseDevTools::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgUnlockH264::InitAsDefaultInstance() {
}
class CMsgUnlockH264::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgUnlockH264* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_unlock_code(CMsgUnlockH264* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgUnlockH264::kBrowserHandleFieldNumber;
const int CMsgUnlockH264::kUnlockCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgUnlockH264::CMsgUnlockH264()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgUnlockH264)
}
CMsgUnlockH264::CMsgUnlockH264(const CMsgUnlockH264& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unlock_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_code()) {
    unlock_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_code_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgUnlockH264)
}

void CMsgUnlockH264::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgUnlockH264_htmlmessages_2eproto.base);
  unlock_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgUnlockH264::~CMsgUnlockH264() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgUnlockH264)
  SharedDtor();
}

void CMsgUnlockH264::SharedDtor() {
  unlock_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgUnlockH264::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgUnlockH264& CMsgUnlockH264::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgUnlockH264_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgUnlockH264::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgUnlockH264)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unlock_code_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgUnlockH264::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgUnlockH264*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string unlock_code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgUnlockH264.unlock_code");
        object = msg->mutable_unlock_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgUnlockH264::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgUnlockH264)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unlock_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unlock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unlock_code().data(), static_cast<int>(this->unlock_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgUnlockH264.unlock_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgUnlockH264)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgUnlockH264)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgUnlockH264::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgUnlockH264)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string unlock_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unlock_code().data(), static_cast<int>(this->unlock_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgUnlockH264.unlock_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unlock_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgUnlockH264)
}

::google::protobuf::uint8* CMsgUnlockH264::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgUnlockH264)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string unlock_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unlock_code().data(), static_cast<int>(this->unlock_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgUnlockH264.unlock_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unlock_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgUnlockH264)
  return target;
}

size_t CMsgUnlockH264::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgUnlockH264)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string unlock_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unlock_code());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUnlockH264::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgUnlockH264)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUnlockH264* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgUnlockH264>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgUnlockH264)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgUnlockH264)
    MergeFrom(*source);
  }
}

void CMsgUnlockH264::MergeFrom(const CMsgUnlockH264& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgUnlockH264)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      unlock_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUnlockH264::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgUnlockH264)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUnlockH264::CopyFrom(const CMsgUnlockH264& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgUnlockH264)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUnlockH264::IsInitialized() const {
  return true;
}

void CMsgUnlockH264::Swap(CMsgUnlockH264* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgUnlockH264::InternalSwap(CMsgUnlockH264* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unlock_code_.Swap(&other->unlock_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgUnlockH264::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgScreenInformationChanged::InitAsDefaultInstance() {
}
class CMsgScreenInformationChanged::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_override_width(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_override_height(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_monitor_left(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_monitor_top(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_monitor_right(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_monitor_bottom(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_usable_left(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_usable_top(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_usable_right(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_usable_bottom(CMsgScreenInformationChanged* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgScreenInformationChanged::kBrowserHandleFieldNumber;
const int CMsgScreenInformationChanged::kOverrideWidthFieldNumber;
const int CMsgScreenInformationChanged::kOverrideHeightFieldNumber;
const int CMsgScreenInformationChanged::kMonitorLeftFieldNumber;
const int CMsgScreenInformationChanged::kMonitorTopFieldNumber;
const int CMsgScreenInformationChanged::kMonitorRightFieldNumber;
const int CMsgScreenInformationChanged::kMonitorBottomFieldNumber;
const int CMsgScreenInformationChanged::kUsableLeftFieldNumber;
const int CMsgScreenInformationChanged::kUsableTopFieldNumber;
const int CMsgScreenInformationChanged::kUsableRightFieldNumber;
const int CMsgScreenInformationChanged::kUsableBottomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgScreenInformationChanged::CMsgScreenInformationChanged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgScreenInformationChanged)
}
CMsgScreenInformationChanged::CMsgScreenInformationChanged(const CMsgScreenInformationChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&usable_bottom_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(usable_bottom_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgScreenInformationChanged)
}

void CMsgScreenInformationChanged::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usable_bottom_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(usable_bottom_));
}

CMsgScreenInformationChanged::~CMsgScreenInformationChanged() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgScreenInformationChanged)
  SharedDtor();
}

void CMsgScreenInformationChanged::SharedDtor() {
}

void CMsgScreenInformationChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgScreenInformationChanged& CMsgScreenInformationChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgScreenInformationChanged_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgScreenInformationChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgScreenInformationChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usable_left_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(usable_left_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&usable_top_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usable_bottom_) -
        reinterpret_cast<char*>(&usable_top_)) + sizeof(usable_bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgScreenInformationChanged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgScreenInformationChanged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 override_width = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_override_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 override_height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_override_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 monitor_left = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_monitor_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 monitor_top = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_monitor_top(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 monitor_right = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_monitor_right(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 monitor_bottom = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_monitor_bottom(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 usable_left = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_usable_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 usable_top = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_usable_top(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 usable_right = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_usable_right(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 usable_bottom = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_usable_bottom(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgScreenInformationChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgScreenInformationChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 override_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_override_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 override_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_override_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 monitor_left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_monitor_left(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitor_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 monitor_top = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_monitor_top(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitor_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 monitor_right = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_monitor_right(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitor_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 monitor_bottom = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_monitor_bottom(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitor_bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 usable_left = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_usable_left(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usable_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 usable_top = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_usable_top(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usable_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 usable_right = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_usable_right(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usable_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 usable_bottom = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_usable_bottom(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usable_bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgScreenInformationChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgScreenInformationChanged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgScreenInformationChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgScreenInformationChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 override_width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->override_width(), output);
  }

  // optional uint32 override_height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->override_height(), output);
  }

  // optional uint32 monitor_left = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->monitor_left(), output);
  }

  // optional uint32 monitor_top = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->monitor_top(), output);
  }

  // optional uint32 monitor_right = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->monitor_right(), output);
  }

  // optional uint32 monitor_bottom = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->monitor_bottom(), output);
  }

  // optional uint32 usable_left = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->usable_left(), output);
  }

  // optional uint32 usable_top = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->usable_top(), output);
  }

  // optional uint32 usable_right = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->usable_right(), output);
  }

  // optional uint32 usable_bottom = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->usable_bottom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgScreenInformationChanged)
}

::google::protobuf::uint8* CMsgScreenInformationChanged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgScreenInformationChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 override_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->override_width(), target);
  }

  // optional uint32 override_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->override_height(), target);
  }

  // optional uint32 monitor_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->monitor_left(), target);
  }

  // optional uint32 monitor_top = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->monitor_top(), target);
  }

  // optional uint32 monitor_right = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->monitor_right(), target);
  }

  // optional uint32 monitor_bottom = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->monitor_bottom(), target);
  }

  // optional uint32 usable_left = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->usable_left(), target);
  }

  // optional uint32 usable_top = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->usable_top(), target);
  }

  // optional uint32 usable_right = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->usable_right(), target);
  }

  // optional uint32 usable_bottom = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->usable_bottom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgScreenInformationChanged)
  return target;
}

size_t CMsgScreenInformationChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgScreenInformationChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 override_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_width());
    }

    // optional uint32 override_height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_height());
    }

    // optional uint32 monitor_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monitor_left());
    }

    // optional uint32 monitor_top = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monitor_top());
    }

    // optional uint32 monitor_right = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monitor_right());
    }

    // optional uint32 monitor_bottom = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monitor_bottom());
    }

    // optional uint32 usable_left = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usable_left());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 usable_top = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usable_top());
    }

    // optional uint32 usable_right = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usable_right());
    }

    // optional uint32 usable_bottom = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usable_bottom());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgScreenInformationChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgScreenInformationChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScreenInformationChanged* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgScreenInformationChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgScreenInformationChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgScreenInformationChanged)
    MergeFrom(*source);
  }
}

void CMsgScreenInformationChanged::MergeFrom(const CMsgScreenInformationChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgScreenInformationChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      override_width_ = from.override_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_height_ = from.override_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      monitor_left_ = from.monitor_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      monitor_top_ = from.monitor_top_;
    }
    if (cached_has_bits & 0x00000020u) {
      monitor_right_ = from.monitor_right_;
    }
    if (cached_has_bits & 0x00000040u) {
      monitor_bottom_ = from.monitor_bottom_;
    }
    if (cached_has_bits & 0x00000080u) {
      usable_left_ = from.usable_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      usable_top_ = from.usable_top_;
    }
    if (cached_has_bits & 0x00000200u) {
      usable_right_ = from.usable_right_;
    }
    if (cached_has_bits & 0x00000400u) {
      usable_bottom_ = from.usable_bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScreenInformationChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgScreenInformationChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScreenInformationChanged::CopyFrom(const CMsgScreenInformationChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgScreenInformationChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScreenInformationChanged::IsInitialized() const {
  return true;
}

void CMsgScreenInformationChanged::Swap(CMsgScreenInformationChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgScreenInformationChanged::InternalSwap(CMsgScreenInformationChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(override_width_, other->override_width_);
  swap(override_height_, other->override_height_);
  swap(monitor_left_, other->monitor_left_);
  swap(monitor_top_, other->monitor_top_);
  swap(monitor_right_, other->monitor_right_);
  swap(monitor_bottom_, other->monitor_bottom_);
  swap(usable_left_, other->usable_left_);
  swap(usable_top_, other->usable_top_);
  swap(usable_right_, other->usable_right_);
  swap(usable_bottom_, other->usable_bottom_);
}

::google::protobuf::Metadata CMsgScreenInformationChanged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClearAllCookies::InitAsDefaultInstance() {
}
class CMsgClearAllCookies::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgClearAllCookies* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClearAllCookies::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearAllCookies::CMsgClearAllCookies()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClearAllCookies)
}
CMsgClearAllCookies::CMsgClearAllCookies(const CMsgClearAllCookies& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClearAllCookies)
}

void CMsgClearAllCookies::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgClearAllCookies::~CMsgClearAllCookies() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClearAllCookies)
  SharedDtor();
}

void CMsgClearAllCookies::SharedDtor() {
}

void CMsgClearAllCookies::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClearAllCookies& CMsgClearAllCookies::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClearAllCookies_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgClearAllCookies::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClearAllCookies)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClearAllCookies::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClearAllCookies*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClearAllCookies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClearAllCookies)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClearAllCookies)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClearAllCookies)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClearAllCookies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClearAllCookies)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClearAllCookies)
}

::google::protobuf::uint8* CMsgClearAllCookies::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClearAllCookies)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClearAllCookies)
  return target;
}

size_t CMsgClearAllCookies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClearAllCookies)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearAllCookies::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClearAllCookies)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearAllCookies* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClearAllCookies>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClearAllCookies)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClearAllCookies)
    MergeFrom(*source);
  }
}

void CMsgClearAllCookies::MergeFrom(const CMsgClearAllCookies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClearAllCookies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgClearAllCookies::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClearAllCookies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearAllCookies::CopyFrom(const CMsgClearAllCookies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClearAllCookies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearAllCookies::IsInitialized() const {
  return true;
}

void CMsgClearAllCookies::Swap(CMsgClearAllCookies* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearAllCookies::InternalSwap(CMsgClearAllCookies* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgClearAllCookies::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgScreenDPI::InitAsDefaultInstance() {
}
class CMsgScreenDPI::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgScreenDPI* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_dpi_scaling(CMsgScreenDPI* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgScreenDPI::kBrowserHandleFieldNumber;
const int CMsgScreenDPI::kDpiScalingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgScreenDPI::CMsgScreenDPI()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgScreenDPI)
}
CMsgScreenDPI::CMsgScreenDPI(const CMsgScreenDPI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&dpi_scaling_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(dpi_scaling_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgScreenDPI)
}

void CMsgScreenDPI::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dpi_scaling_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(dpi_scaling_));
}

CMsgScreenDPI::~CMsgScreenDPI() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgScreenDPI)
  SharedDtor();
}

void CMsgScreenDPI::SharedDtor() {
}

void CMsgScreenDPI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgScreenDPI& CMsgScreenDPI::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgScreenDPI_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgScreenDPI::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgScreenDPI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dpi_scaling_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(dpi_scaling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgScreenDPI::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgScreenDPI*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float dpi_scaling = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_dpi_scaling(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgScreenDPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgScreenDPI)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dpi_scaling = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_dpi_scaling(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpi_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgScreenDPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgScreenDPI)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgScreenDPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgScreenDPI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional float dpi_scaling = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dpi_scaling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgScreenDPI)
}

::google::protobuf::uint8* CMsgScreenDPI::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgScreenDPI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional float dpi_scaling = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dpi_scaling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgScreenDPI)
  return target;
}

size_t CMsgScreenDPI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgScreenDPI)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional float dpi_scaling = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgScreenDPI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgScreenDPI)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgScreenDPI* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgScreenDPI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgScreenDPI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgScreenDPI)
    MergeFrom(*source);
  }
}

void CMsgScreenDPI::MergeFrom(const CMsgScreenDPI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgScreenDPI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      dpi_scaling_ = from.dpi_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgScreenDPI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgScreenDPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgScreenDPI::CopyFrom(const CMsgScreenDPI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgScreenDPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScreenDPI::IsInitialized() const {
  return true;
}

void CMsgScreenDPI::Swap(CMsgScreenDPI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgScreenDPI::InternalSwap(CMsgScreenDPI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(dpi_scaling_, other->dpi_scaling_);
}

::google::protobuf::Metadata CMsgScreenDPI::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAuthedSteamDomains::InitAsDefaultInstance() {
}
class CMsgAuthedSteamDomains::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAuthedSteamDomains::kDomainsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAuthedSteamDomains::CMsgAuthedSteamDomains()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgAuthedSteamDomains)
}
CMsgAuthedSteamDomains::CMsgAuthedSteamDomains(const CMsgAuthedSteamDomains& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      domains_(from.domains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgAuthedSteamDomains)
}

void CMsgAuthedSteamDomains::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAuthedSteamDomains_htmlmessages_2eproto.base);
}

CMsgAuthedSteamDomains::~CMsgAuthedSteamDomains() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgAuthedSteamDomains)
  SharedDtor();
}

void CMsgAuthedSteamDomains::SharedDtor() {
}

void CMsgAuthedSteamDomains::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAuthedSteamDomains& CMsgAuthedSteamDomains::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAuthedSteamDomains_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAuthedSteamDomains::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgAuthedSteamDomains)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAuthedSteamDomains::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAuthedSteamDomains*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string domains = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.steam.CMsgAuthedSteamDomains.domains");
          object = msg->add_domains();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAuthedSteamDomains::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgAuthedSteamDomains)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string domains = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_domains()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domains(this->domains_size() - 1).data(),
            static_cast<int>(this->domains(this->domains_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgAuthedSteamDomains.domains");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgAuthedSteamDomains)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgAuthedSteamDomains)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAuthedSteamDomains::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgAuthedSteamDomains)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string domains = 1;
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domains(i).data(), static_cast<int>(this->domains(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAuthedSteamDomains.domains");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domains(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgAuthedSteamDomains)
}

::google::protobuf::uint8* CMsgAuthedSteamDomains::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgAuthedSteamDomains)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string domains = 1;
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domains(i).data(), static_cast<int>(this->domains(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgAuthedSteamDomains.domains");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->domains(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgAuthedSteamDomains)
  return target;
}

size_t CMsgAuthedSteamDomains::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgAuthedSteamDomains)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string domains = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->domains_size());
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->domains(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAuthedSteamDomains::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgAuthedSteamDomains)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAuthedSteamDomains* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAuthedSteamDomains>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgAuthedSteamDomains)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgAuthedSteamDomains)
    MergeFrom(*source);
  }
}

void CMsgAuthedSteamDomains::MergeFrom(const CMsgAuthedSteamDomains& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgAuthedSteamDomains)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
}

void CMsgAuthedSteamDomains::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgAuthedSteamDomains)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAuthedSteamDomains::CopyFrom(const CMsgAuthedSteamDomains& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgAuthedSteamDomains)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthedSteamDomains::IsInitialized() const {
  return true;
}

void CMsgAuthedSteamDomains::Swap(CMsgAuthedSteamDomains* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAuthedSteamDomains::InternalSwap(CMsgAuthedSteamDomains* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  domains_.InternalSwap(CastToBase(&other->domains_));
}

::google::protobuf::Metadata CMsgAuthedSteamDomains::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamAuthNeeded::InitAsDefaultInstance() {
}
class CMsgSteamAuthNeeded::HasBitSetters {
 public:
  static void set_has_filler(CMsgSteamAuthNeeded* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamAuthNeeded::kFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamAuthNeeded::CMsgSteamAuthNeeded()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamAuthNeeded)
}
CMsgSteamAuthNeeded::CMsgSteamAuthNeeded(const CMsgSteamAuthNeeded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filler_ = from.filler_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamAuthNeeded)
}

void CMsgSteamAuthNeeded::SharedCtor() {
  filler_ = false;
}

CMsgSteamAuthNeeded::~CMsgSteamAuthNeeded() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamAuthNeeded)
  SharedDtor();
}

void CMsgSteamAuthNeeded::SharedDtor() {
}

void CMsgSteamAuthNeeded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamAuthNeeded& CMsgSteamAuthNeeded::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamAuthNeeded_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamAuthNeeded::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamAuthNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filler_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamAuthNeeded::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamAuthNeeded*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool filler = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_filler(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamAuthNeeded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamAuthNeeded)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool filler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_filler(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamAuthNeeded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamAuthNeeded)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamAuthNeeded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamAuthNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool filler = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->filler(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamAuthNeeded)
}

::google::protobuf::uint8* CMsgSteamAuthNeeded::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamAuthNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool filler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->filler(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamAuthNeeded)
  return target;
}

size_t CMsgSteamAuthNeeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamAuthNeeded)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool filler = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamAuthNeeded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamAuthNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamAuthNeeded* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamAuthNeeded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamAuthNeeded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamAuthNeeded)
    MergeFrom(*source);
  }
}

void CMsgSteamAuthNeeded::MergeFrom(const CMsgSteamAuthNeeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamAuthNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filler()) {
    set_filler(from.filler());
  }
}

void CMsgSteamAuthNeeded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamAuthNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamAuthNeeded::CopyFrom(const CMsgSteamAuthNeeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamAuthNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamAuthNeeded::IsInitialized() const {
  return true;
}

void CMsgSteamAuthNeeded::Swap(CMsgSteamAuthNeeded* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamAuthNeeded::InternalSwap(CMsgSteamAuthNeeded* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filler_, other->filler_);
}

::google::protobuf::Metadata CMsgSteamAuthNeeded::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamAuthCookiesSet::InitAsDefaultInstance() {
}
class CMsgSteamAuthCookiesSet::HasBitSetters {
 public:
  static void set_has_success(CMsgSteamAuthCookiesSet* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamAuthCookiesSet::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamAuthCookiesSet::CMsgSteamAuthCookiesSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSteamAuthCookiesSet)
}
CMsgSteamAuthCookiesSet::CMsgSteamAuthCookiesSet(const CMsgSteamAuthCookiesSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSteamAuthCookiesSet)
}

void CMsgSteamAuthCookiesSet::SharedCtor() {
  success_ = false;
}

CMsgSteamAuthCookiesSet::~CMsgSteamAuthCookiesSet() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSteamAuthCookiesSet)
  SharedDtor();
}

void CMsgSteamAuthCookiesSet::SharedDtor() {
}

void CMsgSteamAuthCookiesSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamAuthCookiesSet& CMsgSteamAuthCookiesSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSteamAuthCookiesSet_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamAuthCookiesSet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSteamAuthCookiesSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamAuthCookiesSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSteamAuthCookiesSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamAuthCookiesSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSteamAuthCookiesSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSteamAuthCookiesSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSteamAuthCookiesSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamAuthCookiesSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSteamAuthCookiesSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSteamAuthCookiesSet)
}

::google::protobuf::uint8* CMsgSteamAuthCookiesSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSteamAuthCookiesSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSteamAuthCookiesSet)
  return target;
}

size_t CMsgSteamAuthCookiesSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSteamAuthCookiesSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamAuthCookiesSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSteamAuthCookiesSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamAuthCookiesSet* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSteamAuthCookiesSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSteamAuthCookiesSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSteamAuthCookiesSet)
    MergeFrom(*source);
  }
}

void CMsgSteamAuthCookiesSet::MergeFrom(const CMsgSteamAuthCookiesSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSteamAuthCookiesSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CMsgSteamAuthCookiesSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSteamAuthCookiesSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamAuthCookiesSet::CopyFrom(const CMsgSteamAuthCookiesSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSteamAuthCookiesSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamAuthCookiesSet::IsInitialized() const {
  return true;
}

void CMsgSteamAuthCookiesSet::Swap(CMsgSteamAuthCookiesSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamAuthCookiesSet::InternalSwap(CMsgSteamAuthCookiesSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::google::protobuf::Metadata CMsgSteamAuthCookiesSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSRegisterMethod::InitAsDefaultInstance() {
}
class CMsgJSRegisterMethod::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgJSRegisterMethod* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgJSRegisterMethod* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_method_type(CMsgJSRegisterMethod* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSRegisterMethod::kBrowserHandleFieldNumber;
const int CMsgJSRegisterMethod::kNameFieldNumber;
const int CMsgJSRegisterMethod::kMethodTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSRegisterMethod::CMsgJSRegisterMethod()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSRegisterMethod)
}
CMsgJSRegisterMethod::CMsgJSRegisterMethod(const CMsgJSRegisterMethod& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_type_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(method_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSRegisterMethod)
}

void CMsgJSRegisterMethod::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJSRegisterMethod_htmlmessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_type_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(method_type_));
}

CMsgJSRegisterMethod::~CMsgJSRegisterMethod() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSRegisterMethod)
  SharedDtor();
}

void CMsgJSRegisterMethod::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSRegisterMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSRegisterMethod& CMsgJSRegisterMethod::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSRegisterMethod_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSRegisterMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSRegisterMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_type_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(method_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSRegisterMethod::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSRegisterMethod*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJSRegisterMethod.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::steam::EJSRegisterMethodType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_method_type(static_cast<::proto::steam::EJSRegisterMethodType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSRegisterMethod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSRegisterMethod)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSRegisterMethod.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EJSRegisterMethodType_IsValid(value)) {
            set_method_type(static_cast< ::proto::steam::EJSRegisterMethodType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSRegisterMethod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSRegisterMethod)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSRegisterMethod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSRegisterMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSRegisterMethod.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->method_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSRegisterMethod)
}

::google::protobuf::uint8* CMsgJSRegisterMethod::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSRegisterMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSRegisterMethod.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->method_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSRegisterMethod)
  return target;
}

size_t CMsgJSRegisterMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSRegisterMethod)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional .proto.steam.EJSRegisterMethodType method_type = 3 [default = k_EJSRegisterMethodType_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSRegisterMethod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSRegisterMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSRegisterMethod* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSRegisterMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSRegisterMethod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSRegisterMethod)
    MergeFrom(*source);
  }
}

void CMsgJSRegisterMethod::MergeFrom(const CMsgJSRegisterMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSRegisterMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_type_ = from.method_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSRegisterMethod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSRegisterMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSRegisterMethod::CopyFrom(const CMsgJSRegisterMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSRegisterMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSRegisterMethod::IsInitialized() const {
  return true;
}

void CMsgJSRegisterMethod::Swap(CMsgJSRegisterMethod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSRegisterMethod::InternalSwap(CMsgJSRegisterMethod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
  swap(method_type_, other->method_type_);
}

::google::protobuf::Metadata CMsgJSRegisterMethod::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CJSMethodArgument::InitAsDefaultInstance() {
}
class CJSMethodArgument::HasBitSetters {
 public:
  static void set_has_json_data(CJSMethodArgument* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_function_handle(CJSMethodArgument* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CJSMethodArgument::kJsonDataFieldNumber;
const int CJSMethodArgument::kFunctionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CJSMethodArgument::CJSMethodArgument()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CJSMethodArgument)
}
CJSMethodArgument::CJSMethodArgument(const CJSMethodArgument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_data()) {
    json_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_data_);
  }
  function_handle_ = from.function_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CJSMethodArgument)
}

void CJSMethodArgument::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CJSMethodArgument_htmlmessages_2eproto.base);
  json_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_handle_ = PROTOBUF_ULONGLONG(0);
}

CJSMethodArgument::~CJSMethodArgument() {
  // @@protoc_insertion_point(destructor:proto.steam.CJSMethodArgument)
  SharedDtor();
}

void CJSMethodArgument::SharedDtor() {
  json_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CJSMethodArgument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CJSMethodArgument& CJSMethodArgument::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CJSMethodArgument_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CJSMethodArgument::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CJSMethodArgument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    json_data_.ClearNonDefaultToEmptyNoArena();
  }
  function_handle_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CJSMethodArgument::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CJSMethodArgument*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string json_data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CJSMethodArgument.json_data");
        object = msg->mutable_json_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 function_handle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_function_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CJSMethodArgument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CJSMethodArgument)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_data().data(), static_cast<int>(this->json_data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CJSMethodArgument.json_data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_function_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CJSMethodArgument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CJSMethodArgument)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CJSMethodArgument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CJSMethodArgument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_data().data(), static_cast<int>(this->json_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CJSMethodArgument.json_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json_data(), output);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->function_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CJSMethodArgument)
}

::google::protobuf::uint8* CJSMethodArgument::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CJSMethodArgument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_data().data(), static_cast<int>(this->json_data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CJSMethodArgument.json_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json_data(), target);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->function_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CJSMethodArgument)
  return target;
}

size_t CJSMethodArgument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CJSMethodArgument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string json_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_data());
    }

    // optional uint64 function_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->function_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CJSMethodArgument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CJSMethodArgument)
  GOOGLE_DCHECK_NE(&from, this);
  const CJSMethodArgument* source =
      ::google::protobuf::DynamicCastToGenerated<CJSMethodArgument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CJSMethodArgument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CJSMethodArgument)
    MergeFrom(*source);
  }
}

void CJSMethodArgument::MergeFrom(const CJSMethodArgument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CJSMethodArgument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      json_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      function_handle_ = from.function_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CJSMethodArgument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CJSMethodArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CJSMethodArgument::CopyFrom(const CJSMethodArgument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CJSMethodArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CJSMethodArgument::IsInitialized() const {
  return true;
}

void CJSMethodArgument::Swap(CJSMethodArgument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CJSMethodArgument::InternalSwap(CJSMethodArgument* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  json_data_.Swap(&other->json_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(function_handle_, other->function_handle_);
}

::google::protobuf::Metadata CJSMethodArgument::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSValue_JSObjectProperty::InitAsDefaultInstance() {
  ::proto::steam::_CMsgJSValue_JSObjectProperty_default_instance_._instance.get_mutable()->value_ = const_cast< ::proto::steam::CMsgJSValue*>(
      ::proto::steam::CMsgJSValue::internal_default_instance());
}
class CMsgJSValue_JSObjectProperty::HasBitSetters {
 public:
  static void set_has_name(CMsgJSValue_JSObjectProperty* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::steam::CMsgJSValue& value(const CMsgJSValue_JSObjectProperty* msg);
  static void set_has_value(CMsgJSValue_JSObjectProperty* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::steam::CMsgJSValue&
CMsgJSValue_JSObjectProperty::HasBitSetters::value(const CMsgJSValue_JSObjectProperty* msg) {
  return *msg->value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSValue_JSObjectProperty::kNameFieldNumber;
const int CMsgJSValue_JSObjectProperty::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSValue_JSObjectProperty::CMsgJSValue_JSObjectProperty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSValue.JSObjectProperty)
}
CMsgJSValue_JSObjectProperty::CMsgJSValue_JSObjectProperty(const CMsgJSValue_JSObjectProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    value_ = new ::proto::steam::CMsgJSValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSValue.JSObjectProperty)
}

void CMsgJSValue_JSObjectProperty::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJSValue_htmlmessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

CMsgJSValue_JSObjectProperty::~CMsgJSValue_JSObjectProperty() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSValue.JSObjectProperty)
  SharedDtor();
}

void CMsgJSValue_JSObjectProperty::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void CMsgJSValue_JSObjectProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSValue_JSObjectProperty& CMsgJSValue_JSObjectProperty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSValue_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSValue_JSObjectProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSValue.JSObjectProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSValue_JSObjectProperty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSValue_JSObjectProperty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJSValue.JSObjectProperty.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.steam.CMsgJSValue value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::steam::CMsgJSValue::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSValue_JSObjectProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSValue.JSObjectProperty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSValue.JSObjectProperty.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgJSValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSValue.JSObjectProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSValue.JSObjectProperty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSValue_JSObjectProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSValue.JSObjectProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSValue.JSObjectProperty.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .proto.steam.CMsgJSValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSValue.JSObjectProperty)
}

::google::protobuf::uint8* CMsgJSValue_JSObjectProperty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSValue.JSObjectProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSValue.JSObjectProperty.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .proto.steam.CMsgJSValue value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSValue.JSObjectProperty)
  return target;
}

size_t CMsgJSValue_JSObjectProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSValue.JSObjectProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .proto.steam.CMsgJSValue value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSValue_JSObjectProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSValue.JSObjectProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSValue_JSObjectProperty* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSValue_JSObjectProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSValue.JSObjectProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSValue.JSObjectProperty)
    MergeFrom(*source);
  }
}

void CMsgJSValue_JSObjectProperty::MergeFrom(const CMsgJSValue_JSObjectProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSValue.JSObjectProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::proto::steam::CMsgJSValue::MergeFrom(from.value());
    }
  }
}

void CMsgJSValue_JSObjectProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSValue.JSObjectProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSValue_JSObjectProperty::CopyFrom(const CMsgJSValue_JSObjectProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSValue.JSObjectProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSValue_JSObjectProperty::IsInitialized() const {
  return true;
}

void CMsgJSValue_JSObjectProperty::Swap(CMsgJSValue_JSObjectProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSValue_JSObjectProperty::InternalSwap(CMsgJSValue_JSObjectProperty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::google::protobuf::Metadata CMsgJSValue_JSObjectProperty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSValue::InitAsDefaultInstance() {
}
class CMsgJSValue::HasBitSetters {
 public:
  static void set_has_bool_value(CMsgJSValue* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_int_value(CMsgJSValue* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_uint_value(CMsgJSValue* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_double_value(CMsgJSValue* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_string_value(CMsgJSValue* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_function_handle(CMsgJSValue* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_is_array(CMsgJSValue* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_is_object(CMsgJSValue* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSValue::kBoolValueFieldNumber;
const int CMsgJSValue::kIntValueFieldNumber;
const int CMsgJSValue::kUintValueFieldNumber;
const int CMsgJSValue::kDoubleValueFieldNumber;
const int CMsgJSValue::kStringValueFieldNumber;
const int CMsgJSValue::kFunctionHandleFieldNumber;
const int CMsgJSValue::kIsArrayFieldNumber;
const int CMsgJSValue::kArrayValuesFieldNumber;
const int CMsgJSValue::kIsObjectFieldNumber;
const int CMsgJSValue::kObjectPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSValue::CMsgJSValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSValue)
}
CMsgJSValue::CMsgJSValue(const CMsgJSValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      array_values_(from.array_values_),
      object_properties_(from.object_properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&int_value_, &from.int_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_object_) -
    reinterpret_cast<char*>(&int_value_)) + sizeof(is_object_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSValue)
}

void CMsgJSValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJSValue_htmlmessages_2eproto.base);
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&int_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_object_) -
      reinterpret_cast<char*>(&int_value_)) + sizeof(is_object_));
}

CMsgJSValue::~CMsgJSValue() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSValue)
  SharedDtor();
}

void CMsgJSValue::SharedDtor() {
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSValue& CMsgJSValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSValue_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_values_.Clear();
  object_properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_value_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&int_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_object_) -
        reinterpret_cast<char*>(&int_value_)) + sizeof(is_object_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool bool_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bool_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 int_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_int_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 uint_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_uint_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double double_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_double_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional string string_value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJSValue.string_value");
        object = msg->mutable_string_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 function_handle = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_function_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_array = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_is_array(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgJSValue array_values = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgJSValue::_InternalParse;
          object = msg->add_array_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // optional bool is_object = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_is_object(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgJSValue_JSObjectProperty::_InternalParse;
          object = msg->add_object_properties();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bool_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bool_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_int_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uint_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_uint_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_double_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSValue.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function_handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_function_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_array = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_is_array(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_array_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJSValue array_values = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_array_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_object = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_is_object(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_object_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bool_value = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bool_value(), output);
  }

  // optional int32 int_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_value(), output);
  }

  // optional uint32 uint_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint_value(), output);
  }

  // optional double double_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->double_value(), output);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSValue.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->string_value(), output);
  }

  // optional uint64 function_handle = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->function_handle(), output);
  }

  // optional bool is_array = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_array(), output);
  }

  // repeated .proto.steam.CMsgJSValue array_values = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->array_values(static_cast<int>(i)),
      output);
  }

  // optional bool is_object = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_object(), output);
  }

  // repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_properties_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->object_properties(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSValue)
}

::google::protobuf::uint8* CMsgJSValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bool_value = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bool_value(), target);
  }

  // optional int32 int_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_value(), target);
  }

  // optional uint32 uint_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint_value(), target);
  }

  // optional double double_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->double_value(), target);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSValue.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_value(), target);
  }

  // optional uint64 function_handle = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->function_handle(), target);
  }

  // optional bool is_array = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_array(), target);
  }

  // repeated .proto.steam.CMsgJSValue array_values = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->array_values(static_cast<int>(i)), target);
  }

  // optional bool is_object = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_object(), target);
  }

  // repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_properties_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->object_properties(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSValue)
  return target;
}

size_t CMsgJSValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgJSValue array_values = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->array_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->array_values(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgJSValue.JSObjectProperty object_properties = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->object_properties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_properties(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string_value = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional int32 int_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional uint32 uint_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint_value());
    }

    // optional double double_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 function_handle = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->function_handle());
    }

    // optional bool bool_value = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_array = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_object = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSValue* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSValue)
    MergeFrom(*source);
  }
}

void CMsgJSValue::MergeFrom(const CMsgJSValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_values_.MergeFrom(from.array_values_);
  object_properties_.MergeFrom(from.object_properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      int_value_ = from.int_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      uint_value_ = from.uint_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      double_value_ = from.double_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      function_handle_ = from.function_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      bool_value_ = from.bool_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_array_ = from.is_array_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_object_ = from.is_object_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSValue::CopyFrom(const CMsgJSValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSValue::IsInitialized() const {
  return true;
}

void CMsgJSValue::Swap(CMsgJSValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSValue::InternalSwap(CMsgJSValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&array_values_)->InternalSwap(CastToBase(&other->array_values_));
  CastToBase(&object_properties_)->InternalSwap(CastToBase(&other->object_properties_));
  string_value_.Swap(&other->string_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(int_value_, other->int_value_);
  swap(uint_value_, other->uint_value_);
  swap(double_value_, other->double_value_);
  swap(function_handle_, other->function_handle_);
  swap(bool_value_, other->bool_value_);
  swap(is_array_, other->is_array_);
  swap(is_object_, other->is_object_);
}

::google::protobuf::Metadata CMsgJSValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSMethodCall::InitAsDefaultInstance() {
}
class CMsgJSMethodCall::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgJSMethodCall* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgJSMethodCall* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSMethodCall::kBrowserHandleFieldNumber;
const int CMsgJSMethodCall::kNameFieldNumber;
const int CMsgJSMethodCall::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSMethodCall::CMsgJSMethodCall()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSMethodCall)
}
CMsgJSMethodCall::CMsgJSMethodCall(const CMsgJSMethodCall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSMethodCall)
}

void CMsgJSMethodCall::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJSMethodCall_htmlmessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgJSMethodCall::~CMsgJSMethodCall() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSMethodCall)
  SharedDtor();
}

void CMsgJSMethodCall::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSMethodCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSMethodCall& CMsgJSMethodCall::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSMethodCall_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSMethodCall::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSMethodCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSMethodCall::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSMethodCall*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJSMethodCall.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CMsgJSValue arguments = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgJSValue::_InternalParse;
          object = msg->add_arguments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSMethodCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSMethodCall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSMethodCall.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJSValue arguments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSMethodCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSMethodCall)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSMethodCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSMethodCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSMethodCall.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arguments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->arguments(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSMethodCall)
}

::google::protobuf::uint8* CMsgJSMethodCall::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSMethodCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSMethodCall.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arguments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->arguments(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSMethodCall)
  return target;
}

size_t CMsgJSMethodCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSMethodCall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->arguments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->arguments(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSMethodCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSMethodCall)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSMethodCall* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSMethodCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSMethodCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSMethodCall)
    MergeFrom(*source);
  }
}

void CMsgJSMethodCall::MergeFrom(const CMsgJSMethodCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSMethodCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSMethodCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSMethodCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSMethodCall::CopyFrom(const CMsgJSMethodCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSMethodCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSMethodCall::IsInitialized() const {
  return true;
}

void CMsgJSMethodCall::Swap(CMsgJSMethodCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSMethodCall::InternalSwap(CMsgJSMethodCall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&arguments_)->InternalSwap(CastToBase(&other->arguments_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgJSMethodCall::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSExecuteCallback::InitAsDefaultInstance() {
}
class CMsgJSExecuteCallback::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgJSExecuteCallback* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_function_handle(CMsgJSExecuteCallback* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSExecuteCallback::kBrowserHandleFieldNumber;
const int CMsgJSExecuteCallback::kFunctionHandleFieldNumber;
const int CMsgJSExecuteCallback::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSExecuteCallback::CMsgJSExecuteCallback()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSExecuteCallback)
}
CMsgJSExecuteCallback::CMsgJSExecuteCallback(const CMsgJSExecuteCallback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&function_handle_, &from.function_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&function_handle_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSExecuteCallback)
}

void CMsgJSExecuteCallback::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJSExecuteCallback_htmlmessages_2eproto.base);
  ::memset(&function_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&browser_handle_) -
      reinterpret_cast<char*>(&function_handle_)) + sizeof(browser_handle_));
}

CMsgJSExecuteCallback::~CMsgJSExecuteCallback() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSExecuteCallback)
  SharedDtor();
}

void CMsgJSExecuteCallback::SharedDtor() {
}

void CMsgJSExecuteCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSExecuteCallback& CMsgJSExecuteCallback::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSExecuteCallback_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSExecuteCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSExecuteCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&function_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&function_handle_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSExecuteCallback::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSExecuteCallback*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 function_handle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_function_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgJSValue arguments = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgJSValue::_InternalParse;
          object = msg->add_arguments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSExecuteCallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSExecuteCallback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_function_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJSValue arguments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSExecuteCallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSExecuteCallback)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSExecuteCallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSExecuteCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->function_handle(), output);
  }

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arguments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->arguments(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSExecuteCallback)
}

::google::protobuf::uint8* CMsgJSExecuteCallback::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSExecuteCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->function_handle(), target);
  }

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arguments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->arguments(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSExecuteCallback)
  return target;
}

size_t CMsgJSExecuteCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSExecuteCallback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgJSValue arguments = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->arguments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->arguments(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 function_handle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->function_handle());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSExecuteCallback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSExecuteCallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSExecuteCallback* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSExecuteCallback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSExecuteCallback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSExecuteCallback)
    MergeFrom(*source);
  }
}

void CMsgJSExecuteCallback::MergeFrom(const CMsgJSExecuteCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSExecuteCallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      function_handle_ = from.function_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSExecuteCallback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSExecuteCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSExecuteCallback::CopyFrom(const CMsgJSExecuteCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSExecuteCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSExecuteCallback::IsInitialized() const {
  return true;
}

void CMsgJSExecuteCallback::Swap(CMsgJSExecuteCallback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSExecuteCallback::InternalSwap(CMsgJSExecuteCallback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&arguments_)->InternalSwap(CastToBase(&other->arguments_));
  swap(function_handle_, other->function_handle_);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgJSExecuteCallback::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSReleaseCallback::InitAsDefaultInstance() {
}
class CMsgJSReleaseCallback::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgJSReleaseCallback* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_function_handle(CMsgJSReleaseCallback* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSReleaseCallback::kBrowserHandleFieldNumber;
const int CMsgJSReleaseCallback::kFunctionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSReleaseCallback::CMsgJSReleaseCallback()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSReleaseCallback)
}
CMsgJSReleaseCallback::CMsgJSReleaseCallback(const CMsgJSReleaseCallback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&function_handle_, &from.function_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_handle_) -
    reinterpret_cast<char*>(&function_handle_)) + sizeof(browser_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSReleaseCallback)
}

void CMsgJSReleaseCallback::SharedCtor() {
  ::memset(&function_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&browser_handle_) -
      reinterpret_cast<char*>(&function_handle_)) + sizeof(browser_handle_));
}

CMsgJSReleaseCallback::~CMsgJSReleaseCallback() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSReleaseCallback)
  SharedDtor();
}

void CMsgJSReleaseCallback::SharedDtor() {
}

void CMsgJSReleaseCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSReleaseCallback& CMsgJSReleaseCallback::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSReleaseCallback_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSReleaseCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSReleaseCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&function_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&browser_handle_) -
        reinterpret_cast<char*>(&function_handle_)) + sizeof(browser_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSReleaseCallback::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSReleaseCallback*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 function_handle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_function_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSReleaseCallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSReleaseCallback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 function_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_function_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &function_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSReleaseCallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSReleaseCallback)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSReleaseCallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSReleaseCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->function_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSReleaseCallback)
}

::google::protobuf::uint8* CMsgJSReleaseCallback::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSReleaseCallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint64 function_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->function_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSReleaseCallback)
  return target;
}

size_t CMsgJSReleaseCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSReleaseCallback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 function_handle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->function_handle());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSReleaseCallback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSReleaseCallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSReleaseCallback* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSReleaseCallback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSReleaseCallback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSReleaseCallback)
    MergeFrom(*source);
  }
}

void CMsgJSReleaseCallback::MergeFrom(const CMsgJSReleaseCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSReleaseCallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      function_handle_ = from.function_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSReleaseCallback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSReleaseCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSReleaseCallback::CopyFrom(const CMsgJSReleaseCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSReleaseCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSReleaseCallback::IsInitialized() const {
  return true;
}

void CMsgJSReleaseCallback::Swap(CMsgJSReleaseCallback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSReleaseCallback::InternalSwap(CMsgJSReleaseCallback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(function_handle_, other->function_handle_);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgJSReleaseCallback::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJSRaiseException::InitAsDefaultInstance() {
}
class CMsgJSRaiseException::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgJSRaiseException* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_exception(CMsgJSRaiseException* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJSRaiseException::kBrowserHandleFieldNumber;
const int CMsgJSRaiseException::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJSRaiseException::CMsgJSRaiseException()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJSRaiseException)
}
CMsgJSRaiseException::CMsgJSRaiseException(const CMsgJSRaiseException& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exception_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exception()) {
    exception_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exception_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJSRaiseException)
}

void CMsgJSRaiseException::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJSRaiseException_htmlmessages_2eproto.base);
  exception_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgJSRaiseException::~CMsgJSRaiseException() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJSRaiseException)
  SharedDtor();
}

void CMsgJSRaiseException::SharedDtor() {
  exception_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJSRaiseException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJSRaiseException& CMsgJSRaiseException::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJSRaiseException_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJSRaiseException::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJSRaiseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    exception_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJSRaiseException::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJSRaiseException*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string exception = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJSRaiseException.exception");
        object = msg->mutable_exception();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJSRaiseException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJSRaiseException)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exception = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exception()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exception().data(), static_cast<int>(this->exception().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJSRaiseException.exception");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJSRaiseException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJSRaiseException)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJSRaiseException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJSRaiseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string exception = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exception().data(), static_cast<int>(this->exception().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSRaiseException.exception");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exception(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJSRaiseException)
}

::google::protobuf::uint8* CMsgJSRaiseException::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJSRaiseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string exception = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exception().data(), static_cast<int>(this->exception().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJSRaiseException.exception");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exception(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJSRaiseException)
  return target;
}

size_t CMsgJSRaiseException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJSRaiseException)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string exception = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exception());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJSRaiseException::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJSRaiseException)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJSRaiseException* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJSRaiseException>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJSRaiseException)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJSRaiseException)
    MergeFrom(*source);
  }
}

void CMsgJSRaiseException::MergeFrom(const CMsgJSRaiseException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJSRaiseException)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      exception_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exception_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJSRaiseException::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJSRaiseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJSRaiseException::CopyFrom(const CMsgJSRaiseException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJSRaiseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJSRaiseException::IsInitialized() const {
  return true;
}

void CMsgJSRaiseException::Swap(CMsgJSRaiseException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJSRaiseException::InternalSwap(CMsgJSRaiseException* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  exception_.Swap(&other->exception_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgJSRaiseException::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLoadLocalization::InitAsDefaultInstance() {
}
class CMsgLoadLocalization::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgLoadLocalization* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_localization_path(CMsgLoadLocalization* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_language(CMsgLoadLocalization* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLoadLocalization::kBrowserHandleFieldNumber;
const int CMsgLoadLocalization::kLocalizationPathFieldNumber;
const int CMsgLoadLocalization::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLoadLocalization::CMsgLoadLocalization()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgLoadLocalization)
}
CMsgLoadLocalization::CMsgLoadLocalization(const CMsgLoadLocalization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  localization_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_localization_path()) {
    localization_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_path_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgLoadLocalization)
}

void CMsgLoadLocalization::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgLoadLocalization_htmlmessages_2eproto.base);
  localization_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgLoadLocalization::~CMsgLoadLocalization() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgLoadLocalization)
  SharedDtor();
}

void CMsgLoadLocalization::SharedDtor() {
  localization_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLoadLocalization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLoadLocalization& CMsgLoadLocalization::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLoadLocalization_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgLoadLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgLoadLocalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      localization_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      language_.ClearNonDefaultToEmptyNoArena();
    }
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLoadLocalization::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLoadLocalization*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string localization_path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgLoadLocalization.localization_path");
        object = msg->mutable_localization_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string language = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgLoadLocalization.language");
        object = msg->mutable_language();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLoadLocalization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgLoadLocalization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string localization_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localization_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localization_path().data(), static_cast<int>(this->localization_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadLocalization.localization_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), static_cast<int>(this->language().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgLoadLocalization.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgLoadLocalization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgLoadLocalization)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLoadLocalization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgLoadLocalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string localization_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_path().data(), static_cast<int>(this->localization_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadLocalization.localization_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->localization_path(), output);
  }

  // optional string language = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadLocalization.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgLoadLocalization)
}

::google::protobuf::uint8* CMsgLoadLocalization::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgLoadLocalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string localization_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_path().data(), static_cast<int>(this->localization_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadLocalization.localization_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localization_path(), target);
  }

  // optional string language = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), static_cast<int>(this->language().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgLoadLocalization.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgLoadLocalization)
  return target;
}

size_t CMsgLoadLocalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgLoadLocalization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string localization_path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localization_path());
    }

    // optional string language = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLoadLocalization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgLoadLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLoadLocalization* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLoadLocalization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgLoadLocalization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgLoadLocalization)
    MergeFrom(*source);
  }
}

void CMsgLoadLocalization::MergeFrom(const CMsgLoadLocalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgLoadLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      localization_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000004u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLoadLocalization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgLoadLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLoadLocalization::CopyFrom(const CMsgLoadLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgLoadLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLoadLocalization::IsInitialized() const {
  return true;
}

void CMsgLoadLocalization::Swap(CMsgLoadLocalization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLoadLocalization::InternalSwap(CMsgLoadLocalization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  localization_path_.Swap(&other->localization_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_.Swap(&other->language_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgLoadLocalization::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgJumpListLink::InitAsDefaultInstance() {
}
class CMsgJumpListLink::HasBitSetters {
 public:
  static void set_has_display_name(CMsgJumpListLink* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_url_link(CMsgJumpListLink* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_icon_path(CMsgJumpListLink* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJumpListLink::kDisplayNameFieldNumber;
const int CMsgJumpListLink::kUrlLinkFieldNumber;
const int CMsgJumpListLink::kIconPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJumpListLink::CMsgJumpListLink()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgJumpListLink)
}
CMsgJumpListLink::CMsgJumpListLink(const CMsgJumpListLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  url_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_link()) {
    url_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_link_);
  }
  icon_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon_path()) {
    icon_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_path_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgJumpListLink)
}

void CMsgJumpListLink::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgJumpListLink_htmlmessages_2eproto.base);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgJumpListLink::~CMsgJumpListLink() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgJumpListLink)
  SharedDtor();
}

void CMsgJumpListLink::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJumpListLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgJumpListLink& CMsgJumpListLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgJumpListLink_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgJumpListLink::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgJumpListLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      display_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_link_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgJumpListLink::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgJumpListLink*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string display_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJumpListLink.display_name");
        object = msg->mutable_display_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url_link = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJumpListLink.url_link");
        object = msg->mutable_url_link();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string icon_path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgJumpListLink.icon_path");
        object = msg->mutable_icon_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgJumpListLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgJumpListLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJumpListLink.display_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_link = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_link().data(), static_cast<int>(this->url_link().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJumpListLink.url_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_path().data(), static_cast<int>(this->icon_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgJumpListLink.icon_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgJumpListLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgJumpListLink)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgJumpListLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgJumpListLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // optional string url_link = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_link().data(), static_cast<int>(this->url_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.url_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url_link(), output);
  }

  // optional string icon_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_path().data(), static_cast<int>(this->icon_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.icon_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->icon_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgJumpListLink)
}

::google::protobuf::uint8* CMsgJumpListLink::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgJumpListLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // optional string url_link = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_link().data(), static_cast<int>(this->url_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.url_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_link(), target);
  }

  // optional string icon_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_path().data(), static_cast<int>(this->icon_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgJumpListLink.icon_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgJumpListLink)
  return target;
}

size_t CMsgJumpListLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgJumpListLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string display_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string url_link = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_link());
    }

    // optional string icon_path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_path());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgJumpListLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgJumpListLink)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJumpListLink* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgJumpListLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgJumpListLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgJumpListLink)
    MergeFrom(*source);
  }
}

void CMsgJumpListLink::MergeFrom(const CMsgJumpListLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgJumpListLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_link_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      icon_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_path_);
    }
  }
}

void CMsgJumpListLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgJumpListLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJumpListLink::CopyFrom(const CMsgJumpListLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgJumpListLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJumpListLink::IsInitialized() const {
  return true;
}

void CMsgJumpListLink::Swap(CMsgJumpListLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJumpListLink::InternalSwap(CMsgJumpListLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_link_.Swap(&other->url_link_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_path_.Swap(&other->icon_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgJumpListLink::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMSgJumpListMRUApp::InitAsDefaultInstance() {
}
class CMSgJumpListMRUApp::HasBitSetters {
 public:
  static void set_has_appid(CMSgJumpListMRUApp* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_display_name(CMSgJumpListMRUApp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_url_link(CMSgJumpListMRUApp* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_icon_path(CMSgJumpListMRUApp* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMSgJumpListMRUApp::kAppidFieldNumber;
const int CMSgJumpListMRUApp::kDisplayNameFieldNumber;
const int CMSgJumpListMRUApp::kUrlLinkFieldNumber;
const int CMSgJumpListMRUApp::kIconPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMSgJumpListMRUApp::CMSgJumpListMRUApp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMSgJumpListMRUApp)
}
CMSgJumpListMRUApp::CMSgJumpListMRUApp(const CMSgJumpListMRUApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  url_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_link()) {
    url_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_link_);
  }
  icon_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon_path()) {
    icon_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_path_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMSgJumpListMRUApp)
}

void CMSgJumpListMRUApp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMSgJumpListMRUApp_htmlmessages_2eproto.base);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CMSgJumpListMRUApp::~CMSgJumpListMRUApp() {
  // @@protoc_insertion_point(destructor:proto.steam.CMSgJumpListMRUApp)
  SharedDtor();
}

void CMSgJumpListMRUApp::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMSgJumpListMRUApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMSgJumpListMRUApp& CMSgJumpListMRUApp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMSgJumpListMRUApp_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMSgJumpListMRUApp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMSgJumpListMRUApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      display_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_link_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMSgJumpListMRUApp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMSgJumpListMRUApp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_appid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string display_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMSgJumpListMRUApp.display_name");
        object = msg->mutable_display_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url_link = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMSgJumpListMRUApp.url_link");
        object = msg->mutable_url_link();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string icon_path = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMSgJumpListMRUApp.icon_path");
        object = msg->mutable_icon_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMSgJumpListMRUApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMSgJumpListMRUApp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_appid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMSgJumpListMRUApp.display_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_link = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_link().data(), static_cast<int>(this->url_link().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMSgJumpListMRUApp.url_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_path().data(), static_cast<int>(this->icon_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMSgJumpListMRUApp.icon_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMSgJumpListMRUApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMSgJumpListMRUApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMSgJumpListMRUApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMSgJumpListMRUApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string display_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // optional string url_link = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_link().data(), static_cast<int>(this->url_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.url_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url_link(), output);
  }

  // optional string icon_path = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_path().data(), static_cast<int>(this->icon_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.icon_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->icon_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMSgJumpListMRUApp)
}

::google::protobuf::uint8* CMSgJumpListMRUApp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMSgJumpListMRUApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string display_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // optional string url_link = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_link().data(), static_cast<int>(this->url_link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.url_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url_link(), target);
  }

  // optional string icon_path = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_path().data(), static_cast<int>(this->icon_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMSgJumpListMRUApp.icon_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMSgJumpListMRUApp)
  return target;
}

size_t CMSgJumpListMRUApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMSgJumpListMRUApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string display_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string url_link = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_link());
    }

    // optional string icon_path = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_path());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMSgJumpListMRUApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMSgJumpListMRUApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMSgJumpListMRUApp* source =
      ::google::protobuf::DynamicCastToGenerated<CMSgJumpListMRUApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMSgJumpListMRUApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMSgJumpListMRUApp)
    MergeFrom(*source);
  }
}

void CMSgJumpListMRUApp::MergeFrom(const CMSgJumpListMRUApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMSgJumpListMRUApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_link_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      icon_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMSgJumpListMRUApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMSgJumpListMRUApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMSgJumpListMRUApp::CopyFrom(const CMSgJumpListMRUApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMSgJumpListMRUApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMSgJumpListMRUApp::IsInitialized() const {
  return true;
}

void CMSgJumpListMRUApp::Swap(CMSgJumpListMRUApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMSgJumpListMRUApp::InternalSwap(CMSgJumpListMRUApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_link_.Swap(&other->url_link_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_path_.Swap(&other->icon_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(appid_, other->appid_);
}

::google::protobuf::Metadata CMSgJumpListMRUApp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetJumpList::InitAsDefaultInstance() {
}
class CMsgSetJumpList::HasBitSetters {
 public:
  static void set_has_steam_path(CMsgSetJumpList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_mru_title(CMsgSetJumpList* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetJumpList::kSteamPathFieldNumber;
const int CMsgSetJumpList::kMruTitleFieldNumber;
const int CMsgSetJumpList::kAppsFieldNumber;
const int CMsgSetJumpList::kLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetJumpList::CMsgSetJumpList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetJumpList)
}
CMsgSetJumpList::CMsgSetJumpList(const CMsgSetJumpList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apps_(from.apps_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steam_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_steam_path()) {
    steam_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam_path_);
  }
  mru_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mru_title()) {
    mru_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mru_title_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetJumpList)
}

void CMsgSetJumpList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSetJumpList_htmlmessages_2eproto.base);
  steam_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mru_title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSetJumpList::~CMsgSetJumpList() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetJumpList)
  SharedDtor();
}

void CMsgSetJumpList::SharedDtor() {
  steam_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mru_title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSetJumpList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetJumpList& CMsgSetJumpList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetJumpList_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetJumpList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetJumpList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  links_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mru_title_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetJumpList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetJumpList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string steam_path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetJumpList.steam_path");
        object = msg->mutable_steam_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string mru_title = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgSetJumpList.mru_title");
        object = msg->mutable_mru_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMSgJumpListMRUApp::_InternalParse;
          object = msg->add_apps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.steam.CMsgJumpListLink links = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgJumpListLink::_InternalParse;
          object = msg->add_links();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetJumpList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetJumpList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string steam_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->steam_path().data(), static_cast<int>(this->steam_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetJumpList.steam_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mru_title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mru_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mru_title().data(), static_cast<int>(this->mru_title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgSetJumpList.mru_title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgJumpListLink links = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetJumpList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetJumpList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetJumpList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetJumpList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string steam_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steam_path().data(), static_cast<int>(this->steam_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetJumpList.steam_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->steam_path(), output);
  }

  // optional string mru_title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mru_title().data(), static_cast<int>(this->mru_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetJumpList.mru_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mru_title(), output);
  }

  // repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->apps(static_cast<int>(i)),
      output);
  }

  // repeated .proto.steam.CMsgJumpListLink links = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->links(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetJumpList)
}

::google::protobuf::uint8* CMsgSetJumpList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetJumpList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string steam_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->steam_path().data(), static_cast<int>(this->steam_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetJumpList.steam_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->steam_path(), target);
  }

  // optional string mru_title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mru_title().data(), static_cast<int>(this->mru_title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgSetJumpList.mru_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mru_title(), target);
  }

  // repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->apps(static_cast<int>(i)), target);
  }

  // repeated .proto.steam.CMsgJumpListLink links = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->links(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetJumpList)
  return target;
}

size_t CMsgSetJumpList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetJumpList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMSgJumpListMRUApp apps = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  // repeated .proto.steam.CMsgJumpListLink links = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string steam_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam_path());
    }

    // optional string mru_title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mru_title());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetJumpList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetJumpList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetJumpList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetJumpList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetJumpList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetJumpList)
    MergeFrom(*source);
  }
}

void CMsgSetJumpList::MergeFrom(const CMsgSetJumpList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetJumpList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  links_.MergeFrom(from.links_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      steam_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mru_title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mru_title_);
    }
  }
}

void CMsgSetJumpList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetJumpList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetJumpList::CopyFrom(const CMsgSetJumpList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetJumpList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetJumpList::IsInitialized() const {
  return true;
}

void CMsgSetJumpList::Swap(CMsgSetJumpList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetJumpList::InternalSwap(CMsgSetJumpList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
  CastToBase(&links_)->InternalSwap(CastToBase(&other->links_));
  steam_path_.Swap(&other->steam_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mru_title_.Swap(&other->mru_title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgSetJumpList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetGameOverlayTargetPIDs::InitAsDefaultInstance() {
}
class CMsgSetGameOverlayTargetPIDs::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetGameOverlayTargetPIDs* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetGameOverlayTargetPIDs::kBrowserHandleFieldNumber;
const int CMsgSetGameOverlayTargetPIDs::kTargetPidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetGameOverlayTargetPIDs::CMsgSetGameOverlayTargetPIDs()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetGameOverlayTargetPIDs)
}
CMsgSetGameOverlayTargetPIDs::CMsgSetGameOverlayTargetPIDs(const CMsgSetGameOverlayTargetPIDs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      target_pid_(from.target_pid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetGameOverlayTargetPIDs)
}

void CMsgSetGameOverlayTargetPIDs::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgSetGameOverlayTargetPIDs::~CMsgSetGameOverlayTargetPIDs() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetGameOverlayTargetPIDs)
  SharedDtor();
}

void CMsgSetGameOverlayTargetPIDs::SharedDtor() {
}

void CMsgSetGameOverlayTargetPIDs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetGameOverlayTargetPIDs& CMsgSetGameOverlayTargetPIDs::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetGameOverlayTargetPIDs_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetGameOverlayTargetPIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetGameOverlayTargetPIDs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pid_.Clear();
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetGameOverlayTargetPIDs::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetGameOverlayTargetPIDs*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 target_pid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_target_pid(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_target_pid();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetGameOverlayTargetPIDs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetGameOverlayTargetPIDs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 target_pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_target_pid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_target_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetGameOverlayTargetPIDs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetGameOverlayTargetPIDs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetGameOverlayTargetPIDs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetGameOverlayTargetPIDs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // repeated uint32 target_pid = 2;
  for (int i = 0, n = this->target_pid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->target_pid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetGameOverlayTargetPIDs)
}

::google::protobuf::uint8* CMsgSetGameOverlayTargetPIDs::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetGameOverlayTargetPIDs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // repeated uint32 target_pid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->target_pid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetGameOverlayTargetPIDs)
  return target;
}

size_t CMsgSetGameOverlayTargetPIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetGameOverlayTargetPIDs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 target_pid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->target_pid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->target_pid_size());
    total_size += data_size;
  }

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetGameOverlayTargetPIDs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetGameOverlayTargetPIDs)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetGameOverlayTargetPIDs* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetGameOverlayTargetPIDs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetGameOverlayTargetPIDs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetGameOverlayTargetPIDs)
    MergeFrom(*source);
  }
}

void CMsgSetGameOverlayTargetPIDs::MergeFrom(const CMsgSetGameOverlayTargetPIDs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetGameOverlayTargetPIDs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pid_.MergeFrom(from.target_pid_);
  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgSetGameOverlayTargetPIDs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetGameOverlayTargetPIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetGameOverlayTargetPIDs::CopyFrom(const CMsgSetGameOverlayTargetPIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetGameOverlayTargetPIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetGameOverlayTargetPIDs::IsInitialized() const {
  return true;
}

void CMsgSetGameOverlayTargetPIDs::Swap(CMsgSetGameOverlayTargetPIDs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetGameOverlayTargetPIDs::InternalSwap(CMsgSetGameOverlayTargetPIDs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_pid_.InternalSwap(&other->target_pid_);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgSetGameOverlayTargetPIDs::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGameOverlayTargetTextureID::InitAsDefaultInstance() {
}
class CMsgGameOverlayTargetTextureID::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgGameOverlayTargetTextureID* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_target_pid(CMsgGameOverlayTargetTextureID* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_texture_handle(CMsgGameOverlayTargetTextureID* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGameOverlayTargetTextureID::kBrowserHandleFieldNumber;
const int CMsgGameOverlayTargetTextureID::kTargetPidFieldNumber;
const int CMsgGameOverlayTargetTextureID::kTextureHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGameOverlayTargetTextureID::CMsgGameOverlayTargetTextureID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgGameOverlayTargetTextureID)
}
CMsgGameOverlayTargetTextureID::CMsgGameOverlayTargetTextureID(const CMsgGameOverlayTargetTextureID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&texture_handle_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(texture_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgGameOverlayTargetTextureID)
}

void CMsgGameOverlayTargetTextureID::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&texture_handle_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(texture_handle_));
}

CMsgGameOverlayTargetTextureID::~CMsgGameOverlayTargetTextureID() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgGameOverlayTargetTextureID)
  SharedDtor();
}

void CMsgGameOverlayTargetTextureID::SharedDtor() {
}

void CMsgGameOverlayTargetTextureID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGameOverlayTargetTextureID& CMsgGameOverlayTargetTextureID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGameOverlayTargetTextureID_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGameOverlayTargetTextureID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgGameOverlayTargetTextureID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&texture_handle_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(texture_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGameOverlayTargetTextureID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGameOverlayTargetTextureID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 target_pid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_target_pid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 texture_handle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_texture_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGameOverlayTargetTextureID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgGameOverlayTargetTextureID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_target_pid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 texture_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_texture_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &texture_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgGameOverlayTargetTextureID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgGameOverlayTargetTextureID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGameOverlayTargetTextureID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgGameOverlayTargetTextureID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 target_pid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_pid(), output);
  }

  // optional uint32 texture_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->texture_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgGameOverlayTargetTextureID)
}

::google::protobuf::uint8* CMsgGameOverlayTargetTextureID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgGameOverlayTargetTextureID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 target_pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_pid(), target);
  }

  // optional uint32 texture_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->texture_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgGameOverlayTargetTextureID)
  return target;
}

size_t CMsgGameOverlayTargetTextureID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgGameOverlayTargetTextureID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 target_pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_pid());
    }

    // optional uint32 texture_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->texture_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameOverlayTargetTextureID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgGameOverlayTargetTextureID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameOverlayTargetTextureID* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGameOverlayTargetTextureID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgGameOverlayTargetTextureID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgGameOverlayTargetTextureID)
    MergeFrom(*source);
  }
}

void CMsgGameOverlayTargetTextureID::MergeFrom(const CMsgGameOverlayTargetTextureID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgGameOverlayTargetTextureID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_pid_ = from.target_pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      texture_handle_ = from.texture_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameOverlayTargetTextureID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgGameOverlayTargetTextureID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameOverlayTargetTextureID::CopyFrom(const CMsgGameOverlayTargetTextureID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgGameOverlayTargetTextureID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameOverlayTargetTextureID::IsInitialized() const {
  return true;
}

void CMsgGameOverlayTargetTextureID::Swap(CMsgGameOverlayTargetTextureID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGameOverlayTargetTextureID::InternalSwap(CMsgGameOverlayTargetTextureID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(target_pid_, other->target_pid_);
  swap(texture_handle_, other->texture_handle_);
}

::google::protobuf::Metadata CMsgGameOverlayTargetTextureID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDraggableRegionsChanged_DraggableRects::InitAsDefaultInstance() {
}
class CMsgDraggableRegionsChanged_DraggableRects::HasBitSetters {
 public:
  static void set_has_x(CMsgDraggableRegionsChanged_DraggableRects* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_y(CMsgDraggableRegionsChanged_DraggableRects* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_width(CMsgDraggableRegionsChanged_DraggableRects* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_height(CMsgDraggableRegionsChanged_DraggableRects* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_draggable(CMsgDraggableRegionsChanged_DraggableRects* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDraggableRegionsChanged_DraggableRects::kXFieldNumber;
const int CMsgDraggableRegionsChanged_DraggableRects::kYFieldNumber;
const int CMsgDraggableRegionsChanged_DraggableRects::kWidthFieldNumber;
const int CMsgDraggableRegionsChanged_DraggableRects::kHeightFieldNumber;
const int CMsgDraggableRegionsChanged_DraggableRects::kDraggableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDraggableRegionsChanged_DraggableRects::CMsgDraggableRegionsChanged_DraggableRects()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
}
CMsgDraggableRegionsChanged_DraggableRects::CMsgDraggableRegionsChanged_DraggableRects(const CMsgDraggableRegionsChanged_DraggableRects& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&draggable_) -
    reinterpret_cast<char*>(&x_)) + sizeof(draggable_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
}

void CMsgDraggableRegionsChanged_DraggableRects::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&draggable_) -
      reinterpret_cast<char*>(&x_)) + sizeof(draggable_));
}

CMsgDraggableRegionsChanged_DraggableRects::~CMsgDraggableRegionsChanged_DraggableRects() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  SharedDtor();
}

void CMsgDraggableRegionsChanged_DraggableRects::SharedDtor() {
}

void CMsgDraggableRegionsChanged_DraggableRects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDraggableRegionsChanged_DraggableRects& CMsgDraggableRegionsChanged_DraggableRects::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDraggableRegionsChanged_DraggableRects_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgDraggableRegionsChanged_DraggableRects::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&draggable_) -
        reinterpret_cast<char*>(&x_)) + sizeof(draggable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDraggableRegionsChanged_DraggableRects::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDraggableRegionsChanged_DraggableRects*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 width = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 height = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool draggable = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_draggable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDraggableRegionsChanged_DraggableRects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool draggable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_draggable(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &draggable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDraggableRegionsChanged_DraggableRects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional bool draggable = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->draggable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
}

::google::protobuf::uint8* CMsgDraggableRegionsChanged_DraggableRects::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional bool draggable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->draggable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  return target;
}

size_t CMsgDraggableRegionsChanged_DraggableRects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional bool draggable = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDraggableRegionsChanged_DraggableRects::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDraggableRegionsChanged_DraggableRects* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDraggableRegionsChanged_DraggableRects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
    MergeFrom(*source);
  }
}

void CMsgDraggableRegionsChanged_DraggableRects::MergeFrom(const CMsgDraggableRegionsChanged_DraggableRects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      draggable_ = from.draggable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDraggableRegionsChanged_DraggableRects::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDraggableRegionsChanged_DraggableRects::CopyFrom(const CMsgDraggableRegionsChanged_DraggableRects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgDraggableRegionsChanged.DraggableRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDraggableRegionsChanged_DraggableRects::IsInitialized() const {
  return true;
}

void CMsgDraggableRegionsChanged_DraggableRects::Swap(CMsgDraggableRegionsChanged_DraggableRects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDraggableRegionsChanged_DraggableRects::InternalSwap(CMsgDraggableRegionsChanged_DraggableRects* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(draggable_, other->draggable_);
}

::google::protobuf::Metadata CMsgDraggableRegionsChanged_DraggableRects::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDraggableRegionsChanged::InitAsDefaultInstance() {
}
class CMsgDraggableRegionsChanged::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgDraggableRegionsChanged* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDraggableRegionsChanged::kBrowserHandleFieldNumber;
const int CMsgDraggableRegionsChanged::kRectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDraggableRegionsChanged::CMsgDraggableRegionsChanged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgDraggableRegionsChanged)
}
CMsgDraggableRegionsChanged::CMsgDraggableRegionsChanged(const CMsgDraggableRegionsChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rects_(from.rects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgDraggableRegionsChanged)
}

void CMsgDraggableRegionsChanged::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDraggableRegionsChanged_htmlmessages_2eproto.base);
  browser_handle_ = 0u;
}

CMsgDraggableRegionsChanged::~CMsgDraggableRegionsChanged() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgDraggableRegionsChanged)
  SharedDtor();
}

void CMsgDraggableRegionsChanged::SharedDtor() {
}

void CMsgDraggableRegionsChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDraggableRegionsChanged& CMsgDraggableRegionsChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDraggableRegionsChanged_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgDraggableRegionsChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgDraggableRegionsChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rects_.Clear();
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDraggableRegionsChanged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDraggableRegionsChanged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.steam.CMsgDraggableRegionsChanged.DraggableRects rects = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::steam::CMsgDraggableRegionsChanged_DraggableRects::_InternalParse;
          object = msg->add_rects();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDraggableRegionsChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgDraggableRegionsChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgDraggableRegionsChanged.DraggableRects rects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgDraggableRegionsChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgDraggableRegionsChanged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDraggableRegionsChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgDraggableRegionsChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // repeated .proto.steam.CMsgDraggableRegionsChanged.DraggableRects rects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->rects(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgDraggableRegionsChanged)
}

::google::protobuf::uint8* CMsgDraggableRegionsChanged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgDraggableRegionsChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // repeated .proto.steam.CMsgDraggableRegionsChanged.DraggableRects rects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->rects(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgDraggableRegionsChanged)
  return target;
}

size_t CMsgDraggableRegionsChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgDraggableRegionsChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgDraggableRegionsChanged.DraggableRects rects = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rects(static_cast<int>(i)));
    }
  }

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDraggableRegionsChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgDraggableRegionsChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDraggableRegionsChanged* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDraggableRegionsChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgDraggableRegionsChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgDraggableRegionsChanged)
    MergeFrom(*source);
  }
}

void CMsgDraggableRegionsChanged::MergeFrom(const CMsgDraggableRegionsChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgDraggableRegionsChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rects_.MergeFrom(from.rects_);
  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgDraggableRegionsChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgDraggableRegionsChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDraggableRegionsChanged::CopyFrom(const CMsgDraggableRegionsChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgDraggableRegionsChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDraggableRegionsChanged::IsInitialized() const {
  return true;
}

void CMsgDraggableRegionsChanged::Swap(CMsgDraggableRegionsChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDraggableRegionsChanged::InternalSwap(CMsgDraggableRegionsChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&rects_)->InternalSwap(CastToBase(&other->rects_));
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgDraggableRegionsChanged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgResizeGripChanged::InitAsDefaultInstance() {
}
class CMsgResizeGripChanged::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgResizeGripChanged* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_width(CMsgResizeGripChanged* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_height(CMsgResizeGripChanged* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgResizeGripChanged::kBrowserHandleFieldNumber;
const int CMsgResizeGripChanged::kWidthFieldNumber;
const int CMsgResizeGripChanged::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgResizeGripChanged::CMsgResizeGripChanged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgResizeGripChanged)
}
CMsgResizeGripChanged::CMsgResizeGripChanged(const CMsgResizeGripChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgResizeGripChanged)
}

void CMsgResizeGripChanged::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
}

CMsgResizeGripChanged::~CMsgResizeGripChanged() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgResizeGripChanged)
  SharedDtor();
}

void CMsgResizeGripChanged::SharedDtor() {
}

void CMsgResizeGripChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgResizeGripChanged& CMsgResizeGripChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgResizeGripChanged_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgResizeGripChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgResizeGripChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgResizeGripChanged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgResizeGripChanged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 width = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgResizeGripChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgResizeGripChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgResizeGripChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgResizeGripChanged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgResizeGripChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgResizeGripChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgResizeGripChanged)
}

::google::protobuf::uint8* CMsgResizeGripChanged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgResizeGripChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgResizeGripChanged)
  return target;
}

size_t CMsgResizeGripChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgResizeGripChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgResizeGripChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgResizeGripChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResizeGripChanged* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgResizeGripChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgResizeGripChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgResizeGripChanged)
    MergeFrom(*source);
  }
}

void CMsgResizeGripChanged::MergeFrom(const CMsgResizeGripChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgResizeGripChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgResizeGripChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgResizeGripChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResizeGripChanged::CopyFrom(const CMsgResizeGripChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgResizeGripChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResizeGripChanged::IsInitialized() const {
  return true;
}

void CMsgResizeGripChanged::Swap(CMsgResizeGripChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgResizeGripChanged::InternalSwap(CMsgResizeGripChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::google::protobuf::Metadata CMsgResizeGripChanged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetWindowPosition::InitAsDefaultInstance() {
}
class CMsgSetWindowPosition::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetWindowPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgSetWindowPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(CMsgSetWindowPosition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_width(CMsgSetWindowPosition* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_height(CMsgSetWindowPosition* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetWindowPosition::kBrowserHandleFieldNumber;
const int CMsgSetWindowPosition::kXFieldNumber;
const int CMsgSetWindowPosition::kYFieldNumber;
const int CMsgSetWindowPosition::kWidthFieldNumber;
const int CMsgSetWindowPosition::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetWindowPosition::CMsgSetWindowPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetWindowPosition)
}
CMsgSetWindowPosition::CMsgSetWindowPosition(const CMsgSetWindowPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetWindowPosition)
}

void CMsgSetWindowPosition::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
}

CMsgSetWindowPosition::~CMsgSetWindowPosition() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetWindowPosition)
  SharedDtor();
}

void CMsgSetWindowPosition::SharedDtor() {
}

void CMsgSetWindowPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetWindowPosition& CMsgSetWindowPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetWindowPosition_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetWindowPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetWindowPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetWindowPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetWindowPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 width = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 height = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetWindowPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetWindowPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetWindowPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetWindowPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetWindowPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetWindowPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetWindowPosition)
}

::google::protobuf::uint8* CMsgSetWindowPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetWindowPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetWindowPosition)
  return target;
}

size_t CMsgSetWindowPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetWindowPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetWindowPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetWindowPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetWindowPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetWindowPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetWindowPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetWindowPosition)
    MergeFrom(*source);
  }
}

void CMsgSetWindowPosition::MergeFrom(const CMsgSetWindowPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetWindowPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetWindowPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetWindowPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetWindowPosition::CopyFrom(const CMsgSetWindowPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetWindowPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetWindowPosition::IsInitialized() const {
  return true;
}

void CMsgSetWindowPosition::Swap(CMsgSetWindowPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetWindowPosition::InternalSwap(CMsgSetWindowPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::google::protobuf::Metadata CMsgSetWindowPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgShowWindow::InitAsDefaultInstance() {
}
class CMsgShowWindow::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgShowWindow* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgShowWindow::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgShowWindow::CMsgShowWindow()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgShowWindow)
}
CMsgShowWindow::CMsgShowWindow(const CMsgShowWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgShowWindow)
}

void CMsgShowWindow::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgShowWindow::~CMsgShowWindow() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgShowWindow)
  SharedDtor();
}

void CMsgShowWindow::SharedDtor() {
}

void CMsgShowWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgShowWindow& CMsgShowWindow::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgShowWindow_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgShowWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgShowWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgShowWindow::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgShowWindow*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgShowWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgShowWindow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgShowWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgShowWindow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgShowWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgShowWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgShowWindow)
}

::google::protobuf::uint8* CMsgShowWindow::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgShowWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgShowWindow)
  return target;
}

size_t CMsgShowWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgShowWindow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgShowWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgShowWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowWindow* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgShowWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgShowWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgShowWindow)
    MergeFrom(*source);
  }
}

void CMsgShowWindow::MergeFrom(const CMsgShowWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgShowWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgShowWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgShowWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowWindow::CopyFrom(const CMsgShowWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgShowWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowWindow::IsInitialized() const {
  return true;
}

void CMsgShowWindow::Swap(CMsgShowWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgShowWindow::InternalSwap(CMsgShowWindow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgShowWindow::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgHideWindow::InitAsDefaultInstance() {
}
class CMsgHideWindow::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgHideWindow* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHideWindow::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHideWindow::CMsgHideWindow()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgHideWindow)
}
CMsgHideWindow::CMsgHideWindow(const CMsgHideWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgHideWindow)
}

void CMsgHideWindow::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgHideWindow::~CMsgHideWindow() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgHideWindow)
  SharedDtor();
}

void CMsgHideWindow::SharedDtor() {
}

void CMsgHideWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgHideWindow& CMsgHideWindow::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgHideWindow_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgHideWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgHideWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgHideWindow::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgHideWindow*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgHideWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgHideWindow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgHideWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgHideWindow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgHideWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgHideWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgHideWindow)
}

::google::protobuf::uint8* CMsgHideWindow::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgHideWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgHideWindow)
  return target;
}

size_t CMsgHideWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgHideWindow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHideWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgHideWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHideWindow* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgHideWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgHideWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgHideWindow)
    MergeFrom(*source);
  }
}

void CMsgHideWindow::MergeFrom(const CMsgHideWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgHideWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgHideWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgHideWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHideWindow::CopyFrom(const CMsgHideWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgHideWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHideWindow::IsInitialized() const {
  return true;
}

void CMsgHideWindow::Swap(CMsgHideWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHideWindow::InternalSwap(CMsgHideWindow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgHideWindow::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgBringWindowToFront::InitAsDefaultInstance() {
}
class CMsgBringWindowToFront::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgBringWindowToFront* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBringWindowToFront::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBringWindowToFront::CMsgBringWindowToFront()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgBringWindowToFront)
}
CMsgBringWindowToFront::CMsgBringWindowToFront(const CMsgBringWindowToFront& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgBringWindowToFront)
}

void CMsgBringWindowToFront::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgBringWindowToFront::~CMsgBringWindowToFront() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgBringWindowToFront)
  SharedDtor();
}

void CMsgBringWindowToFront::SharedDtor() {
}

void CMsgBringWindowToFront::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgBringWindowToFront& CMsgBringWindowToFront::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgBringWindowToFront_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgBringWindowToFront::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgBringWindowToFront)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgBringWindowToFront::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgBringWindowToFront*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgBringWindowToFront::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgBringWindowToFront)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgBringWindowToFront)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgBringWindowToFront)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgBringWindowToFront::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgBringWindowToFront)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgBringWindowToFront)
}

::google::protobuf::uint8* CMsgBringWindowToFront::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgBringWindowToFront)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgBringWindowToFront)
  return target;
}

size_t CMsgBringWindowToFront::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgBringWindowToFront)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBringWindowToFront::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgBringWindowToFront)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBringWindowToFront* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgBringWindowToFront>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgBringWindowToFront)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgBringWindowToFront)
    MergeFrom(*source);
  }
}

void CMsgBringWindowToFront::MergeFrom(const CMsgBringWindowToFront& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgBringWindowToFront)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgBringWindowToFront::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgBringWindowToFront)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBringWindowToFront::CopyFrom(const CMsgBringWindowToFront& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgBringWindowToFront)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBringWindowToFront::IsInitialized() const {
  return true;
}

void CMsgBringWindowToFront::Swap(CMsgBringWindowToFront* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBringWindowToFront::InternalSwap(CMsgBringWindowToFront* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgBringWindowToFront::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetForegroundWindow::InitAsDefaultInstance() {
}
class CMsgSetForegroundWindow::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgSetForegroundWindow* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetForegroundWindow::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetForegroundWindow::CMsgSetForegroundWindow()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgSetForegroundWindow)
}
CMsgSetForegroundWindow::CMsgSetForegroundWindow(const CMsgSetForegroundWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgSetForegroundWindow)
}

void CMsgSetForegroundWindow::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgSetForegroundWindow::~CMsgSetForegroundWindow() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgSetForegroundWindow)
  SharedDtor();
}

void CMsgSetForegroundWindow::SharedDtor() {
}

void CMsgSetForegroundWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetForegroundWindow& CMsgSetForegroundWindow::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetForegroundWindow_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetForegroundWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgSetForegroundWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetForegroundWindow::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetForegroundWindow*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetForegroundWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgSetForegroundWindow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgSetForegroundWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgSetForegroundWindow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetForegroundWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgSetForegroundWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgSetForegroundWindow)
}

::google::protobuf::uint8* CMsgSetForegroundWindow::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgSetForegroundWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgSetForegroundWindow)
  return target;
}

size_t CMsgSetForegroundWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgSetForegroundWindow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetForegroundWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgSetForegroundWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetForegroundWindow* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetForegroundWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgSetForegroundWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgSetForegroundWindow)
    MergeFrom(*source);
  }
}

void CMsgSetForegroundWindow::MergeFrom(const CMsgSetForegroundWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgSetForegroundWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgSetForegroundWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgSetForegroundWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetForegroundWindow::CopyFrom(const CMsgSetForegroundWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgSetForegroundWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetForegroundWindow::IsInitialized() const {
  return true;
}

void CMsgSetForegroundWindow::Swap(CMsgSetForegroundWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetForegroundWindow::InternalSwap(CMsgSetForegroundWindow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgSetForegroundWindow::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMaximizeRestoreWindow::InitAsDefaultInstance() {
}
class CMsgMaximizeRestoreWindow::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgMaximizeRestoreWindow* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMaximizeRestoreWindow::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMaximizeRestoreWindow::CMsgMaximizeRestoreWindow()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMaximizeRestoreWindow)
}
CMsgMaximizeRestoreWindow::CMsgMaximizeRestoreWindow(const CMsgMaximizeRestoreWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMaximizeRestoreWindow)
}

void CMsgMaximizeRestoreWindow::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgMaximizeRestoreWindow::~CMsgMaximizeRestoreWindow() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMaximizeRestoreWindow)
  SharedDtor();
}

void CMsgMaximizeRestoreWindow::SharedDtor() {
}

void CMsgMaximizeRestoreWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMaximizeRestoreWindow& CMsgMaximizeRestoreWindow::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMaximizeRestoreWindow_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgMaximizeRestoreWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMaximizeRestoreWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMaximizeRestoreWindow::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMaximizeRestoreWindow*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMaximizeRestoreWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMaximizeRestoreWindow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMaximizeRestoreWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMaximizeRestoreWindow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMaximizeRestoreWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMaximizeRestoreWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMaximizeRestoreWindow)
}

::google::protobuf::uint8* CMsgMaximizeRestoreWindow::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMaximizeRestoreWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMaximizeRestoreWindow)
  return target;
}

size_t CMsgMaximizeRestoreWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMaximizeRestoreWindow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMaximizeRestoreWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMaximizeRestoreWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMaximizeRestoreWindow* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMaximizeRestoreWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMaximizeRestoreWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMaximizeRestoreWindow)
    MergeFrom(*source);
  }
}

void CMsgMaximizeRestoreWindow::MergeFrom(const CMsgMaximizeRestoreWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMaximizeRestoreWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgMaximizeRestoreWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMaximizeRestoreWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMaximizeRestoreWindow::CopyFrom(const CMsgMaximizeRestoreWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMaximizeRestoreWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMaximizeRestoreWindow::IsInitialized() const {
  return true;
}

void CMsgMaximizeRestoreWindow::Swap(CMsgMaximizeRestoreWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMaximizeRestoreWindow::InternalSwap(CMsgMaximizeRestoreWindow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgMaximizeRestoreWindow::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgMinimizeWindow::InitAsDefaultInstance() {
}
class CMsgMinimizeWindow::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgMinimizeWindow* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMinimizeWindow::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMinimizeWindow::CMsgMinimizeWindow()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMinimizeWindow)
}
CMsgMinimizeWindow::CMsgMinimizeWindow(const CMsgMinimizeWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMinimizeWindow)
}

void CMsgMinimizeWindow::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgMinimizeWindow::~CMsgMinimizeWindow() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMinimizeWindow)
  SharedDtor();
}

void CMsgMinimizeWindow::SharedDtor() {
}

void CMsgMinimizeWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgMinimizeWindow& CMsgMinimizeWindow::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgMinimizeWindow_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgMinimizeWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMinimizeWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgMinimizeWindow::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgMinimizeWindow*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgMinimizeWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMinimizeWindow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMinimizeWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMinimizeWindow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgMinimizeWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMinimizeWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMinimizeWindow)
}

::google::protobuf::uint8* CMsgMinimizeWindow::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMinimizeWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMinimizeWindow)
  return target;
}

size_t CMsgMinimizeWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMinimizeWindow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMinimizeWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMinimizeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMinimizeWindow* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgMinimizeWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMinimizeWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMinimizeWindow)
    MergeFrom(*source);
  }
}

void CMsgMinimizeWindow::MergeFrom(const CMsgMinimizeWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMinimizeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgMinimizeWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMinimizeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMinimizeWindow::CopyFrom(const CMsgMinimizeWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMinimizeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMinimizeWindow::IsInitialized() const {
  return true;
}

void CMsgMinimizeWindow::Swap(CMsgMinimizeWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMinimizeWindow::InternalSwap(CMsgMinimizeWindow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgMinimizeWindow::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgShowBrowserContextMenu::InitAsDefaultInstance() {
}
class CMsgShowBrowserContextMenu::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgShowBrowserContextMenu* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgShowBrowserContextMenu::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgShowBrowserContextMenu::CMsgShowBrowserContextMenu()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgShowBrowserContextMenu)
}
CMsgShowBrowserContextMenu::CMsgShowBrowserContextMenu(const CMsgShowBrowserContextMenu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgShowBrowserContextMenu)
}

void CMsgShowBrowserContextMenu::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgShowBrowserContextMenu::~CMsgShowBrowserContextMenu() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgShowBrowserContextMenu)
  SharedDtor();
}

void CMsgShowBrowserContextMenu::SharedDtor() {
}

void CMsgShowBrowserContextMenu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgShowBrowserContextMenu& CMsgShowBrowserContextMenu::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgShowBrowserContextMenu_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgShowBrowserContextMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgShowBrowserContextMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgShowBrowserContextMenu::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgShowBrowserContextMenu*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgShowBrowserContextMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgShowBrowserContextMenu)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgShowBrowserContextMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgShowBrowserContextMenu)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgShowBrowserContextMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgShowBrowserContextMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgShowBrowserContextMenu)
}

::google::protobuf::uint8* CMsgShowBrowserContextMenu::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgShowBrowserContextMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgShowBrowserContextMenu)
  return target;
}

size_t CMsgShowBrowserContextMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgShowBrowserContextMenu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgShowBrowserContextMenu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgShowBrowserContextMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgShowBrowserContextMenu* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgShowBrowserContextMenu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgShowBrowserContextMenu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgShowBrowserContextMenu)
    MergeFrom(*source);
  }
}

void CMsgShowBrowserContextMenu::MergeFrom(const CMsgShowBrowserContextMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgShowBrowserContextMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgShowBrowserContextMenu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgShowBrowserContextMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgShowBrowserContextMenu::CopyFrom(const CMsgShowBrowserContextMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgShowBrowserContextMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgShowBrowserContextMenu::IsInitialized() const {
  return true;
}

void CMsgShowBrowserContextMenu::Swap(CMsgShowBrowserContextMenu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgShowBrowserContextMenu::InternalSwap(CMsgShowBrowserContextMenu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgShowBrowserContextMenu::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgImeSetComposition::InitAsDefaultInstance() {
}
class CMsgImeSetComposition::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgImeSetComposition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_text(CMsgImeSetComposition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgImeSetComposition::kBrowserHandleFieldNumber;
const int CMsgImeSetComposition::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgImeSetComposition::CMsgImeSetComposition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgImeSetComposition)
}
CMsgImeSetComposition::CMsgImeSetComposition(const CMsgImeSetComposition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgImeSetComposition)
}

void CMsgImeSetComposition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgImeSetComposition_htmlmessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgImeSetComposition::~CMsgImeSetComposition() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgImeSetComposition)
  SharedDtor();
}

void CMsgImeSetComposition::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgImeSetComposition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgImeSetComposition& CMsgImeSetComposition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgImeSetComposition_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgImeSetComposition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgImeSetComposition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgImeSetComposition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgImeSetComposition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgImeSetComposition.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgImeSetComposition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgImeSetComposition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgImeSetComposition.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgImeSetComposition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgImeSetComposition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgImeSetComposition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgImeSetComposition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgImeSetComposition.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgImeSetComposition)
}

::google::protobuf::uint8* CMsgImeSetComposition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgImeSetComposition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgImeSetComposition.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgImeSetComposition)
  return target;
}

size_t CMsgImeSetComposition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgImeSetComposition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgImeSetComposition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgImeSetComposition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgImeSetComposition* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgImeSetComposition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgImeSetComposition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgImeSetComposition)
    MergeFrom(*source);
  }
}

void CMsgImeSetComposition::MergeFrom(const CMsgImeSetComposition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgImeSetComposition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgImeSetComposition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgImeSetComposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgImeSetComposition::CopyFrom(const CMsgImeSetComposition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgImeSetComposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgImeSetComposition::IsInitialized() const {
  return true;
}

void CMsgImeSetComposition::Swap(CMsgImeSetComposition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgImeSetComposition::InternalSwap(CMsgImeSetComposition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgImeSetComposition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgImeCommitText::InitAsDefaultInstance() {
}
class CMsgImeCommitText::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgImeCommitText* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_text(CMsgImeCommitText* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgImeCommitText::kBrowserHandleFieldNumber;
const int CMsgImeCommitText::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgImeCommitText::CMsgImeCommitText()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgImeCommitText)
}
CMsgImeCommitText::CMsgImeCommitText(const CMsgImeCommitText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgImeCommitText)
}

void CMsgImeCommitText::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgImeCommitText_htmlmessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  browser_handle_ = 0u;
}

CMsgImeCommitText::~CMsgImeCommitText() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgImeCommitText)
  SharedDtor();
}

void CMsgImeCommitText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgImeCommitText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgImeCommitText& CMsgImeCommitText::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgImeCommitText_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgImeCommitText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgImeCommitText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgImeCommitText::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgImeCommitText*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.steam.CMsgImeCommitText.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgImeCommitText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgImeCommitText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgImeCommitText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgImeCommitText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgImeCommitText)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgImeCommitText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgImeCommitText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgImeCommitText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgImeCommitText)
}

::google::protobuf::uint8* CMsgImeCommitText::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgImeCommitText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgImeCommitText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgImeCommitText)
  return target;
}

size_t CMsgImeCommitText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgImeCommitText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgImeCommitText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgImeCommitText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgImeCommitText* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgImeCommitText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgImeCommitText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgImeCommitText)
    MergeFrom(*source);
  }
}

void CMsgImeCommitText::MergeFrom(const CMsgImeCommitText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgImeCommitText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      browser_handle_ = from.browser_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgImeCommitText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgImeCommitText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgImeCommitText::CopyFrom(const CMsgImeCommitText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgImeCommitText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgImeCommitText::IsInitialized() const {
  return true;
}

void CMsgImeCommitText::Swap(CMsgImeCommitText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgImeCommitText::InternalSwap(CMsgImeCommitText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgImeCommitText::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgImeCancelComposition::InitAsDefaultInstance() {
}
class CMsgImeCancelComposition::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgImeCancelComposition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgImeCancelComposition::kBrowserHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgImeCancelComposition::CMsgImeCancelComposition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgImeCancelComposition)
}
CMsgImeCancelComposition::CMsgImeCancelComposition(const CMsgImeCancelComposition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  browser_handle_ = from.browser_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgImeCancelComposition)
}

void CMsgImeCancelComposition::SharedCtor() {
  browser_handle_ = 0u;
}

CMsgImeCancelComposition::~CMsgImeCancelComposition() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgImeCancelComposition)
  SharedDtor();
}

void CMsgImeCancelComposition::SharedDtor() {
}

void CMsgImeCancelComposition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgImeCancelComposition& CMsgImeCancelComposition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgImeCancelComposition_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgImeCancelComposition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgImeCancelComposition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  browser_handle_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgImeCancelComposition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgImeCancelComposition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgImeCancelComposition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgImeCancelComposition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgImeCancelComposition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgImeCancelComposition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgImeCancelComposition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgImeCancelComposition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgImeCancelComposition)
}

::google::protobuf::uint8* CMsgImeCancelComposition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgImeCancelComposition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgImeCancelComposition)
  return target;
}

size_t CMsgImeCancelComposition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgImeCancelComposition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 browser_handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->browser_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgImeCancelComposition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgImeCancelComposition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgImeCancelComposition* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgImeCancelComposition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgImeCancelComposition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgImeCancelComposition)
    MergeFrom(*source);
  }
}

void CMsgImeCancelComposition::MergeFrom(const CMsgImeCancelComposition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgImeCancelComposition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_browser_handle()) {
    set_browser_handle(from.browser_handle());
  }
}

void CMsgImeCancelComposition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgImeCancelComposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgImeCancelComposition::CopyFrom(const CMsgImeCancelComposition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgImeCancelComposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgImeCancelComposition::IsInitialized() const {
  return true;
}

void CMsgImeCancelComposition::Swap(CMsgImeCancelComposition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgImeCancelComposition::InternalSwap(CMsgImeCancelComposition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
}

::google::protobuf::Metadata CMsgImeCancelComposition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgImeCompositionRangeChanged::InitAsDefaultInstance() {
}
class CMsgImeCompositionRangeChanged::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgImeCompositionRangeChanged* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgImeCompositionRangeChanged* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(CMsgImeCompositionRangeChanged* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgImeCompositionRangeChanged::kBrowserHandleFieldNumber;
const int CMsgImeCompositionRangeChanged::kXFieldNumber;
const int CMsgImeCompositionRangeChanged::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgImeCompositionRangeChanged::CMsgImeCompositionRangeChanged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgImeCompositionRangeChanged)
}
CMsgImeCompositionRangeChanged::CMsgImeCompositionRangeChanged(const CMsgImeCompositionRangeChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgImeCompositionRangeChanged)
}

void CMsgImeCompositionRangeChanged::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgImeCompositionRangeChanged::~CMsgImeCompositionRangeChanged() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgImeCompositionRangeChanged)
  SharedDtor();
}

void CMsgImeCompositionRangeChanged::SharedDtor() {
}

void CMsgImeCompositionRangeChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgImeCompositionRangeChanged& CMsgImeCompositionRangeChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgImeCompositionRangeChanged_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgImeCompositionRangeChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgImeCompositionRangeChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgImeCompositionRangeChanged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgImeCompositionRangeChanged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgImeCompositionRangeChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgImeCompositionRangeChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgImeCompositionRangeChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgImeCompositionRangeChanged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgImeCompositionRangeChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgImeCompositionRangeChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgImeCompositionRangeChanged)
}

::google::protobuf::uint8* CMsgImeCompositionRangeChanged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgImeCompositionRangeChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgImeCompositionRangeChanged)
  return target;
}

size_t CMsgImeCompositionRangeChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgImeCompositionRangeChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgImeCompositionRangeChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgImeCompositionRangeChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgImeCompositionRangeChanged* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgImeCompositionRangeChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgImeCompositionRangeChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgImeCompositionRangeChanged)
    MergeFrom(*source);
  }
}

void CMsgImeCompositionRangeChanged::MergeFrom(const CMsgImeCompositionRangeChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgImeCompositionRangeChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgImeCompositionRangeChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgImeCompositionRangeChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgImeCompositionRangeChanged::CopyFrom(const CMsgImeCompositionRangeChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgImeCompositionRangeChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgImeCompositionRangeChanged::IsInitialized() const {
  return true;
}

void CMsgImeCompositionRangeChanged::Swap(CMsgImeCompositionRangeChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgImeCompositionRangeChanged::InternalSwap(CMsgImeCompositionRangeChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata CMsgImeCompositionRangeChanged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgInspectElement::InitAsDefaultInstance() {
}
class CMsgInspectElement::HasBitSetters {
 public:
  static void set_has_browser_handle(CMsgInspectElement* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(CMsgInspectElement* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(CMsgInspectElement* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgInspectElement::kBrowserHandleFieldNumber;
const int CMsgInspectElement::kXFieldNumber;
const int CMsgInspectElement::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgInspectElement::CMsgInspectElement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgInspectElement)
}
CMsgInspectElement::CMsgInspectElement(const CMsgInspectElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&browser_handle_, &from.browser_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgInspectElement)
}

void CMsgInspectElement::SharedCtor() {
  ::memset(&browser_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
}

CMsgInspectElement::~CMsgInspectElement() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgInspectElement)
  SharedDtor();
}

void CMsgInspectElement::SharedDtor() {
}

void CMsgInspectElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgInspectElement& CMsgInspectElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgInspectElement_htmlmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgInspectElement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgInspectElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&browser_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&browser_handle_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgInspectElement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgInspectElement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_browser_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgInspectElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgInspectElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 browser_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_browser_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgInspectElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgInspectElement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgInspectElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgInspectElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->browser_handle(), output);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgInspectElement)
}

::google::protobuf::uint8* CMsgInspectElement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgInspectElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 browser_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->browser_handle(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgInspectElement)
  return target;
}

size_t CMsgInspectElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgInspectElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 browser_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_handle());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInspectElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgInspectElement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInspectElement* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgInspectElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgInspectElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgInspectElement)
    MergeFrom(*source);
  }
}

void CMsgInspectElement::MergeFrom(const CMsgInspectElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgInspectElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      browser_handle_ = from.browser_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInspectElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgInspectElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInspectElement::CopyFrom(const CMsgInspectElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgInspectElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInspectElement::IsInitialized() const {
  return true;
}

void CMsgInspectElement::Swap(CMsgInspectElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgInspectElement::InternalSwap(CMsgInspectElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(browser_handle_, other->browser_handle_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata CMsgInspectElement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_htmlmessages_2eproto);
  return ::file_level_metadata_htmlmessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgKeyUp* Arena::CreateMaybeMessage< ::proto::steam::CMsgKeyUp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgKeyUp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgKeyDown* Arena::CreateMaybeMessage< ::proto::steam::CMsgKeyDown >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgKeyDown >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgKeyChar* Arena::CreateMaybeMessage< ::proto::steam::CMsgKeyChar >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgKeyChar >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgMouseDown* Arena::CreateMaybeMessage< ::proto::steam::CMsgMouseDown >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgMouseDown >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgMouseUp* Arena::CreateMaybeMessage< ::proto::steam::CMsgMouseUp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgMouseUp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgMouseDblClick* Arena::CreateMaybeMessage< ::proto::steam::CMsgMouseDblClick >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgMouseDblClick >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgMouseWheel* Arena::CreateMaybeMessage< ::proto::steam::CMsgMouseWheel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgMouseWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgMouseMove* Arena::CreateMaybeMessage< ::proto::steam::CMsgMouseMove >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgMouseMove >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgMouseLeave* Arena::CreateMaybeMessage< ::proto::steam::CMsgMouseLeave >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgMouseLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBrowserCreate* Arena::CreateMaybeMessage< ::proto::steam::CMsgBrowserCreate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBrowserCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBrowserCreateResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgBrowserCreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBrowserCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBrowserRemove* Arena::CreateMaybeMessage< ::proto::steam::CMsgBrowserRemove >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBrowserRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetLocalFileRequestMapping_AdditionalRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetLocalFileRequestMapping* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetLocalFileRequestMapping >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetLocalFileRequestMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBrowserErrorStrings* Arena::CreateMaybeMessage< ::proto::steam::CMsgBrowserErrorStrings >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBrowserErrorStrings >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBrowserSize* Arena::CreateMaybeMessage< ::proto::steam::CMsgBrowserSize >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBrowserSize >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBrowserSetMinSize* Arena::CreateMaybeMessage< ::proto::steam::CMsgBrowserSetMinSize >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBrowserSetMinSize >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBrowserPosition* Arena::CreateMaybeMessage< ::proto::steam::CMsgBrowserPosition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBrowserPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBrowserResized* Arena::CreateMaybeMessage< ::proto::steam::CMsgBrowserResized >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBrowserResized >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgPostURL* Arena::CreateMaybeMessage< ::proto::steam::CMsgPostURL >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgPostURL >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgAddHeader* Arena::CreateMaybeMessage< ::proto::steam::CMsgAddHeader >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgAddHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgStopLoad* Arena::CreateMaybeMessage< ::proto::steam::CMsgStopLoad >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgStopLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgReload* Arena::CreateMaybeMessage< ::proto::steam::CMsgReload >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgReload >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGoForward* Arena::CreateMaybeMessage< ::proto::steam::CMsgGoForward >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGoForward >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGoBack* Arena::CreateMaybeMessage< ::proto::steam::CMsgGoBack >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGoBack >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgWasHidden* Arena::CreateMaybeMessage< ::proto::steam::CMsgWasHidden >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgWasHidden >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClearHistory* Arena::CreateMaybeMessage< ::proto::steam::CMsgClearHistory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClearHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClearAllBrowsingData* Arena::CreateMaybeMessage< ::proto::steam::CMsgClearAllBrowsingData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClearAllBrowsingData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgCopy* Arena::CreateMaybeMessage< ::proto::steam::CMsgCopy >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgCopy >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgPaste* Arena::CreateMaybeMessage< ::proto::steam::CMsgPaste >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgPaste >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgExecuteJavaScript* Arena::CreateMaybeMessage< ::proto::steam::CMsgExecuteJavaScript >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgExecuteJavaScript >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetFocus* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetFocus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetFocus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgHorizontalScrollBarSize* Arena::CreateMaybeMessage< ::proto::steam::CMsgHorizontalScrollBarSize >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgHorizontalScrollBarSize >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgHorizontalScrollBarSizeResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgHorizontalScrollBarSizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgHorizontalScrollBarSizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgVerticalScrollBarSize* Arena::CreateMaybeMessage< ::proto::steam::CMsgVerticalScrollBarSize >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgVerticalScrollBarSize >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgVerticalScrollBarSizeResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgVerticalScrollBarSizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgVerticalScrollBarSizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgFind* Arena::CreateMaybeMessage< ::proto::steam::CMsgFind >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgFind >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgStopFind* Arena::CreateMaybeMessage< ::proto::steam::CMsgStopFind >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgStopFind >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetHorizontalScroll* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetHorizontalScroll >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetHorizontalScroll >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetVerticalScroll* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetVerticalScroll >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetVerticalScroll >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetZoomLevel* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetZoomLevel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetZoomLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgViewSource* Arena::CreateMaybeMessage< ::proto::steam::CMsgViewSource >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgViewSource >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBrowserReady* Arena::CreateMaybeMessage< ::proto::steam::CMsgBrowserReady >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBrowserReady >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgURLChanged* Arena::CreateMaybeMessage< ::proto::steam::CMsgURLChanged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgURLChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CHTMLHeader* Arena::CreateMaybeMessage< ::proto::steam::CHTMLHeader >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CHTMLHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CHTMLPageSecurityInfo* Arena::CreateMaybeMessage< ::proto::steam::CHTMLPageSecurityInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CHTMLPageSecurityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgFinishedRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgFinishedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgFinishedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgLoadedRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgLoadedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgLoadedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgPageSecurity* Arena::CreateMaybeMessage< ::proto::steam::CMsgPageSecurity >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgPageSecurity >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgStartRequest* Arena::CreateMaybeMessage< ::proto::steam::CMsgStartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgStartRequestResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgStartRequestResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgStartRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgShowPopup* Arena::CreateMaybeMessage< ::proto::steam::CMsgShowPopup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgShowPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgHidePopup* Arena::CreateMaybeMessage< ::proto::steam::CMsgHidePopup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgHidePopup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSizePopup* Arena::CreateMaybeMessage< ::proto::steam::CMsgSizePopup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSizePopup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgOpenNewTab* Arena::CreateMaybeMessage< ::proto::steam::CMsgOpenNewTab >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgOpenNewTab >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgPopupHTMLWindow* Arena::CreateMaybeMessage< ::proto::steam::CMsgPopupHTMLWindow >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgPopupHTMLWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgPopupHTMLWindowResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgPopupHTMLWindowResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgPopupHTMLWindowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetHTMLTitle* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetHTMLTitle >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetHTMLTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgLoadingResource* Arena::CreateMaybeMessage< ::proto::steam::CMsgLoadingResource >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgLoadingResource >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgStatusText* Arena::CreateMaybeMessage< ::proto::steam::CMsgStatusText >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgStatusText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetCursor* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetCursor >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetCursor >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgFileLoadDialog* Arena::CreateMaybeMessage< ::proto::steam::CMsgFileLoadDialog >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgFileLoadDialog >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgFileLoadDialogResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgFileLoadDialogResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgFileLoadDialogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgShowToolTip* Arena::CreateMaybeMessage< ::proto::steam::CMsgShowToolTip >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgShowToolTip >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgUpdateToolTip* Arena::CreateMaybeMessage< ::proto::steam::CMsgUpdateToolTip >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgUpdateToolTip >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgHideToolTip* Arena::CreateMaybeMessage< ::proto::steam::CMsgHideToolTip >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgHideToolTip >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSearchResults* Arena::CreateMaybeMessage< ::proto::steam::CMsgSearchResults >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClose* Arena::CreateMaybeMessage< ::proto::steam::CMsgClose >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClose >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetSharedPaintBuffers* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetSharedPaintBuffers >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetSharedPaintBuffers >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgAckSharedPaintBuffers* Arena::CreateMaybeMessage< ::proto::steam::CMsgAckSharedPaintBuffers >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgAckSharedPaintBuffers >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgNeedsPaint* Arena::CreateMaybeMessage< ::proto::steam::CMsgNeedsPaint >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgNeedsPaint >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgComboNeedsPaint* Arena::CreateMaybeMessage< ::proto::steam::CMsgComboNeedsPaint >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgComboNeedsPaint >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgNeedsSharedTexturePaint* Arena::CreateMaybeMessage< ::proto::steam::CMsgNeedsSharedTexturePaint >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgNeedsSharedTexturePaint >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGameOverlayTexturePaint* Arena::CreateMaybeMessage< ::proto::steam::CMsgGameOverlayTexturePaint >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGameOverlayTexturePaint >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGetZoom* Arena::CreateMaybeMessage< ::proto::steam::CMsgGetZoom >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGetZoom >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGetZoomResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgGetZoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGetZoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgLinkAtPosition* Arena::CreateMaybeMessage< ::proto::steam::CMsgLinkAtPosition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgLinkAtPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgLinkAtPositionResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgLinkAtPositionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgLinkAtPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgZoomToElementAtPosition* Arena::CreateMaybeMessage< ::proto::steam::CMsgZoomToElementAtPosition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgZoomToElementAtPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgZoomToElementAtPositionResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgZoomToElementAtPositionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgZoomToElementAtPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgScalePageToValue* Arena::CreateMaybeMessage< ::proto::steam::CMsgScalePageToValue >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgScalePageToValue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgScalePageToValueResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgScalePageToValueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgScalePageToValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSavePageToJPEG* Arena::CreateMaybeMessage< ::proto::steam::CMsgSavePageToJPEG >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSavePageToJPEG >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSavePageToJPEGResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgSavePageToJPEGResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSavePageToJPEGResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSAlert* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSAlert >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSConfirm* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSConfirm >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSDialogResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSDialogResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSDialogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgCanGoBackAndForward* Arena::CreateMaybeMessage< ::proto::steam::CMsgCanGoBackAndForward >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgCanGoBackAndForward >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgOpenSteamURL* Arena::CreateMaybeMessage< ::proto::steam::CMsgOpenSteamURL >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgOpenSteamURL >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetCookie* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetCookie >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetCookie >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetTargetFrameRate* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetTargetFrameRate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetTargetFrameRate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgPauseRepaint* Arena::CreateMaybeMessage< ::proto::steam::CMsgPauseRepaint >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgPauseRepaint >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgFullRepaint* Arena::CreateMaybeMessage< ::proto::steam::CMsgFullRepaint >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgFullRepaint >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgRequestFullScreen* Arena::CreateMaybeMessage< ::proto::steam::CMsgRequestFullScreen >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgRequestFullScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgExitFullScreen* Arena::CreateMaybeMessage< ::proto::steam::CMsgExitFullScreen >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgExitFullScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgToggleFindInPageDialog* Arena::CreateMaybeMessage< ::proto::steam::CMsgToggleFindInPageDialog >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgToggleFindInPageDialog >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetPIDShuttingDown* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetPIDShuttingDown >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetPIDShuttingDown >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgDisableBackgroundThrottling* Arena::CreateMaybeMessage< ::proto::steam::CMsgDisableBackgroundThrottling >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgDisableBackgroundThrottling >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgAckPIDShuttingDown* Arena::CreateMaybeMessage< ::proto::steam::CMsgAckPIDShuttingDown >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgAckPIDShuttingDown >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGetCookiesForURL* Arena::CreateMaybeMessage< ::proto::steam::CMsgGetCookiesForURL >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGetCookiesForURL >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CCookie* Arena::CreateMaybeMessage< ::proto::steam::CCookie >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CCookie >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGetCookiesForURLResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgGetCookiesForURLResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGetCookiesForURLResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgNodeHasFocus* Arena::CreateMaybeMessage< ::proto::steam::CMsgNodeHasFocus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgNodeHasFocus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgZoomToFocusedElement* Arena::CreateMaybeMessage< ::proto::steam::CMsgZoomToFocusedElement >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgZoomToFocusedElement >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgCloseFullScreenFlashIfOpen* Arena::CreateMaybeMessage< ::proto::steam::CMsgCloseFullScreenFlashIfOpen >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgCloseFullScreenFlashIfOpen >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgPauseFullScreenFlashMovieIfOpen* Arena::CreateMaybeMessage< ::proto::steam::CMsgPauseFullScreenFlashMovieIfOpen >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgPauseFullScreenFlashMovieIfOpen >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgFocusedNodeText* Arena::CreateMaybeMessage< ::proto::steam::CMsgFocusedNodeText >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgFocusedNodeText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgFocusedNodeTextResponse* Arena::CreateMaybeMessage< ::proto::steam::CMsgFocusedNodeTextResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgFocusedNodeTextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBuildID* Arena::CreateMaybeMessage< ::proto::steam::CMsgBuildID >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBuildID >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgOpenDevTools* Arena::CreateMaybeMessage< ::proto::steam::CMsgOpenDevTools >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgOpenDevTools >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgCloseDevTools* Arena::CreateMaybeMessage< ::proto::steam::CMsgCloseDevTools >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgCloseDevTools >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgUnlockH264* Arena::CreateMaybeMessage< ::proto::steam::CMsgUnlockH264 >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgUnlockH264 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgScreenInformationChanged* Arena::CreateMaybeMessage< ::proto::steam::CMsgScreenInformationChanged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgScreenInformationChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgClearAllCookies* Arena::CreateMaybeMessage< ::proto::steam::CMsgClearAllCookies >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgClearAllCookies >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgScreenDPI* Arena::CreateMaybeMessage< ::proto::steam::CMsgScreenDPI >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgScreenDPI >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgAuthedSteamDomains* Arena::CreateMaybeMessage< ::proto::steam::CMsgAuthedSteamDomains >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgAuthedSteamDomains >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamAuthNeeded* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamAuthNeeded >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamAuthNeeded >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSteamAuthCookiesSet* Arena::CreateMaybeMessage< ::proto::steam::CMsgSteamAuthCookiesSet >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSteamAuthCookiesSet >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSRegisterMethod* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSRegisterMethod >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSRegisterMethod >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CJSMethodArgument* Arena::CreateMaybeMessage< ::proto::steam::CJSMethodArgument >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CJSMethodArgument >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSValue_JSObjectProperty* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSValue_JSObjectProperty >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSValue_JSObjectProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSValue* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSValue >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSValue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSMethodCall* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSMethodCall >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSMethodCall >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSExecuteCallback* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSExecuteCallback >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSExecuteCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSReleaseCallback* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSReleaseCallback >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSReleaseCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJSRaiseException* Arena::CreateMaybeMessage< ::proto::steam::CMsgJSRaiseException >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJSRaiseException >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgLoadLocalization* Arena::CreateMaybeMessage< ::proto::steam::CMsgLoadLocalization >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgLoadLocalization >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgJumpListLink* Arena::CreateMaybeMessage< ::proto::steam::CMsgJumpListLink >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgJumpListLink >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMSgJumpListMRUApp* Arena::CreateMaybeMessage< ::proto::steam::CMSgJumpListMRUApp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMSgJumpListMRUApp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetJumpList* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetJumpList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetJumpList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetGameOverlayTargetPIDs* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetGameOverlayTargetPIDs >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetGameOverlayTargetPIDs >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgGameOverlayTargetTextureID* Arena::CreateMaybeMessage< ::proto::steam::CMsgGameOverlayTargetTextureID >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgGameOverlayTargetTextureID >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgDraggableRegionsChanged_DraggableRects* Arena::CreateMaybeMessage< ::proto::steam::CMsgDraggableRegionsChanged_DraggableRects >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgDraggableRegionsChanged_DraggableRects >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgDraggableRegionsChanged* Arena::CreateMaybeMessage< ::proto::steam::CMsgDraggableRegionsChanged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgDraggableRegionsChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgResizeGripChanged* Arena::CreateMaybeMessage< ::proto::steam::CMsgResizeGripChanged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgResizeGripChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetWindowPosition* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetWindowPosition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetWindowPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgShowWindow* Arena::CreateMaybeMessage< ::proto::steam::CMsgShowWindow >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgShowWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgHideWindow* Arena::CreateMaybeMessage< ::proto::steam::CMsgHideWindow >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgHideWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgBringWindowToFront* Arena::CreateMaybeMessage< ::proto::steam::CMsgBringWindowToFront >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgBringWindowToFront >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgSetForegroundWindow* Arena::CreateMaybeMessage< ::proto::steam::CMsgSetForegroundWindow >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgSetForegroundWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgMaximizeRestoreWindow* Arena::CreateMaybeMessage< ::proto::steam::CMsgMaximizeRestoreWindow >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgMaximizeRestoreWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgMinimizeWindow* Arena::CreateMaybeMessage< ::proto::steam::CMsgMinimizeWindow >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgMinimizeWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgShowBrowserContextMenu* Arena::CreateMaybeMessage< ::proto::steam::CMsgShowBrowserContextMenu >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgShowBrowserContextMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgImeSetComposition* Arena::CreateMaybeMessage< ::proto::steam::CMsgImeSetComposition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgImeSetComposition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgImeCommitText* Arena::CreateMaybeMessage< ::proto::steam::CMsgImeCommitText >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgImeCommitText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgImeCancelComposition* Arena::CreateMaybeMessage< ::proto::steam::CMsgImeCancelComposition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgImeCancelComposition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgImeCompositionRangeChanged* Arena::CreateMaybeMessage< ::proto::steam::CMsgImeCompositionRangeChanged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgImeCompositionRangeChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CMsgInspectElement* Arena::CreateMaybeMessage< ::proto::steam::CMsgInspectElement >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CMsgInspectElement >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
