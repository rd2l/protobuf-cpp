// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient_service.steamclient.proto

#include "steammessages_remoteclient_service.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace proto {
namespace steam {
class CRemoteClient_GetPairingInfo_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CRemoteClient_GetPairingInfo_Request> _instance;
} _CRemoteClient_GetPairingInfo_Request_default_instance_;
class CRemoteClient_GetPairingInfo_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CRemoteClient_GetPairingInfo_Response> _instance;
} _CRemoteClient_GetPairingInfo_Response_default_instance_;
class CRemoteClient_ReplyPacket_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CRemoteClient_ReplyPacket_Notification> _instance;
} _CRemoteClient_ReplyPacket_Notification_default_instance_;
class CRemoteClient_RemotePacket_NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CRemoteClient_RemotePacket_Notification> _instance;
} _CRemoteClient_RemotePacket_Notification_default_instance_;
}  // namespace steam
}  // namespace proto
static void InitDefaultsCRemoteClient_GetPairingInfo_Request_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CRemoteClient_GetPairingInfo_Request_default_instance_;
    new (ptr) ::proto::steam::CRemoteClient_GetPairingInfo_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CRemoteClient_GetPairingInfo_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CRemoteClient_GetPairingInfo_Request_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCRemoteClient_GetPairingInfo_Request_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto}, {}};

static void InitDefaultsCRemoteClient_GetPairingInfo_Response_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CRemoteClient_GetPairingInfo_Response_default_instance_;
    new (ptr) ::proto::steam::CRemoteClient_GetPairingInfo_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CRemoteClient_GetPairingInfo_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CRemoteClient_GetPairingInfo_Response_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCRemoteClient_GetPairingInfo_Response_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto}, {}};

static void InitDefaultsCRemoteClient_ReplyPacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CRemoteClient_ReplyPacket_Notification_default_instance_;
    new (ptr) ::proto::steam::CRemoteClient_ReplyPacket_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CRemoteClient_ReplyPacket_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CRemoteClient_ReplyPacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCRemoteClient_ReplyPacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto}, {}};

static void InitDefaultsCRemoteClient_RemotePacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::steam::_CRemoteClient_RemotePacket_Notification_default_instance_;
    new (ptr) ::proto::steam::CRemoteClient_RemotePacket_Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::steam::CRemoteClient_RemotePacket_Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CRemoteClient_RemotePacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCRemoteClient_RemotePacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto}, {}};

void InitDefaults_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CRemoteClient_GetPairingInfo_Request_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CRemoteClient_GetPairingInfo_Response_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CRemoteClient_ReplyPacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CRemoteClient_RemotePacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[2];

const ::google::protobuf::uint32 TableStruct_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_GetPairingInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_GetPairingInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_GetPairingInfo_Request, pin_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_GetPairingInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_GetPairingInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_GetPairingInfo_Response, session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_GetPairingInfo_Response, device_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_GetPairingInfo_Response, request_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_ReplyPacket_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_ReplyPacket_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_ReplyPacket_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_ReplyPacket_Notification, payload_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_RemotePacket_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_RemotePacket_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_RemotePacket_Notification, session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_RemotePacket_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::steam::CRemoteClient_RemotePacket_Notification, payload_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::steam::CRemoteClient_GetPairingInfo_Request)},
  { 7, 15, sizeof(::proto::steam::CRemoteClient_GetPairingInfo_Response)},
  { 18, 25, sizeof(::proto::steam::CRemoteClient_ReplyPacket_Notification)},
  { 27, 35, sizeof(::proto::steam::CRemoteClient_RemotePacket_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CRemoteClient_GetPairingInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CRemoteClient_GetPairingInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CRemoteClient_ReplyPacket_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::steam::_CRemoteClient_RemotePacket_Notification_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto = {
  {}, AddDescriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto, "steammessages_remoteclient_service.steamclient.proto", schemas,
  file_default_instances, TableStruct_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto, 4, file_level_enum_descriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto,
};

const char descriptor_table_protodef_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[] =
  "\n4steammessages_remoteclient_service.ste"
  "amclient.proto\022\013proto.steam\032,steammessag"
  "es_unified_base.steamclient.proto\"3\n$CRe"
  "moteClient_GetPairingInfo_Request\022\013\n\003pin"
  "\030\001 \001(\r\"_\n%CRemoteClient_GetPairingInfo_R"
  "esponse\022\022\n\nsession_id\030\001 \001(\006\022\021\n\tdevice_id"
  "\030\002 \001(\006\022\017\n\007request\030\003 \001(\014\"M\n&CRemoteClient"
  "_ReplyPacket_Notification\022\022\n\nsession_id\030"
  "\001 \001(\006\022\017\n\007payload\030\002 \001(\014\"_\n\'CRemoteClient_"
  "RemotePacket_Notification\022\022\n\nsession_id\030"
  "\001 \001(\006\022\017\n\007steamid\030\002 \001(\006\022\017\n\007payload\030\004 \001(\0142"
  "\352\002\n\014RemoteClient\022\240\001\n\016GetPairingInfo\0221.pr"
  "oto.steam.CRemoteClient_GetPairingInfo_R"
  "equest\0322.proto.steam.CRemoteClient_GetPa"
  "iringInfo_Response\"\'\202\265\030#Get pairing info"
  " for an entered PIN\022\206\001\n\021NotifyReplyPacke"
  "t\0223.proto.steam.CRemoteClient_ReplyPacke"
  "t_Notification\032\027.proto.steam.NoResponse\""
  "#\202\265\030\037Send a reply to a remote client\032.\202\265"
  "\030*Methods for Steam remote client operat"
  "ions2\330\001\n\027RemoteClientSteamClient\022\210\001\n\022Not"
  "ifyRemotePacket\0224.proto.steam.CRemoteCli"
  "ent_RemotePacket_Notification\032\027.proto.st"
  "eam.NoResponse\"#\202\265\030\037Send a packet to a S"
  "team client\0322\202\265\030*Methods for Steam remot"
  "e client operations\300\265\030\002B\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto = {
  false, InitDefaults_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto, 
  descriptor_table_protodef_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto,
  "steammessages_remoteclient_service.steamclient.proto", &assign_descriptors_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto, 1028,
};

void AddDescriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_5funified_5fbase_2esteamclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto = []() { AddDescriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto(); return true; }();
namespace proto {
namespace steam {

// ===================================================================

void CRemoteClient_GetPairingInfo_Request::InitAsDefaultInstance() {
}
class CRemoteClient_GetPairingInfo_Request::HasBitSetters {
 public:
  static void set_has_pin(CRemoteClient_GetPairingInfo_Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CRemoteClient_GetPairingInfo_Request::kPinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CRemoteClient_GetPairingInfo_Request::CRemoteClient_GetPairingInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CRemoteClient_GetPairingInfo_Request)
}
CRemoteClient_GetPairingInfo_Request::CRemoteClient_GetPairingInfo_Request(const CRemoteClient_GetPairingInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pin_ = from.pin_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CRemoteClient_GetPairingInfo_Request)
}

void CRemoteClient_GetPairingInfo_Request::SharedCtor() {
  pin_ = 0u;
}

CRemoteClient_GetPairingInfo_Request::~CRemoteClient_GetPairingInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CRemoteClient_GetPairingInfo_Request)
  SharedDtor();
}

void CRemoteClient_GetPairingInfo_Request::SharedDtor() {
}

void CRemoteClient_GetPairingInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRemoteClient_GetPairingInfo_Request& CRemoteClient_GetPairingInfo_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CRemoteClient_GetPairingInfo_Request_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CRemoteClient_GetPairingInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CRemoteClient_GetPairingInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pin_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CRemoteClient_GetPairingInfo_Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CRemoteClient_GetPairingInfo_Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 pin = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_pin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CRemoteClient_GetPairingInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CRemoteClient_GetPairingInfo_Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_pin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CRemoteClient_GetPairingInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CRemoteClient_GetPairingInfo_Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CRemoteClient_GetPairingInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CRemoteClient_GetPairingInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CRemoteClient_GetPairingInfo_Request)
}

::google::protobuf::uint8* CRemoteClient_GetPairingInfo_Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CRemoteClient_GetPairingInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CRemoteClient_GetPairingInfo_Request)
  return target;
}

size_t CRemoteClient_GetPairingInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CRemoteClient_GetPairingInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 pin = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_GetPairingInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CRemoteClient_GetPairingInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_GetPairingInfo_Request* source =
      ::google::protobuf::DynamicCastToGenerated<CRemoteClient_GetPairingInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CRemoteClient_GetPairingInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CRemoteClient_GetPairingInfo_Request)
    MergeFrom(*source);
  }
}

void CRemoteClient_GetPairingInfo_Request::MergeFrom(const CRemoteClient_GetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CRemoteClient_GetPairingInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pin()) {
    set_pin(from.pin());
  }
}

void CRemoteClient_GetPairingInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CRemoteClient_GetPairingInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_GetPairingInfo_Request::CopyFrom(const CRemoteClient_GetPairingInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CRemoteClient_GetPairingInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetPairingInfo_Request::IsInitialized() const {
  return true;
}

void CRemoteClient_GetPairingInfo_Request::Swap(CRemoteClient_GetPairingInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CRemoteClient_GetPairingInfo_Request::InternalSwap(CRemoteClient_GetPairingInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pin_, other->pin_);
}

::google::protobuf::Metadata CRemoteClient_GetPairingInfo_Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CRemoteClient_GetPairingInfo_Response::InitAsDefaultInstance() {
}
class CRemoteClient_GetPairingInfo_Response::HasBitSetters {
 public:
  static void set_has_session_id(CRemoteClient_GetPairingInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_device_id(CRemoteClient_GetPairingInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_request(CRemoteClient_GetPairingInfo_Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CRemoteClient_GetPairingInfo_Response::kSessionIdFieldNumber;
const int CRemoteClient_GetPairingInfo_Response::kDeviceIdFieldNumber;
const int CRemoteClient_GetPairingInfo_Response::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CRemoteClient_GetPairingInfo_Response::CRemoteClient_GetPairingInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CRemoteClient_GetPairingInfo_Response)
}
CRemoteClient_GetPairingInfo_Response::CRemoteClient_GetPairingInfo_Response(const CRemoteClient_GetPairingInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request()) {
    request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CRemoteClient_GetPairingInfo_Response)
}

void CRemoteClient_GetPairingInfo_Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CRemoteClient_GetPairingInfo_Response_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_id_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
}

CRemoteClient_GetPairingInfo_Response::~CRemoteClient_GetPairingInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CRemoteClient_GetPairingInfo_Response)
  SharedDtor();
}

void CRemoteClient_GetPairingInfo_Response::SharedDtor() {
  request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_GetPairingInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRemoteClient_GetPairingInfo_Response& CRemoteClient_GetPairingInfo_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CRemoteClient_GetPairingInfo_Response_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CRemoteClient_GetPairingInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CRemoteClient_GetPairingInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(device_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CRemoteClient_GetPairingInfo_Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CRemoteClient_GetPairingInfo_Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 device_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_device_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes request = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_request();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CRemoteClient_GetPairingInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CRemoteClient_GetPairingInfo_Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_device_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CRemoteClient_GetPairingInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CRemoteClient_GetPairingInfo_Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CRemoteClient_GetPairingInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CRemoteClient_GetPairingInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }

  // optional fixed64 device_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }

  // optional bytes request = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CRemoteClient_GetPairingInfo_Response)
}

::google::protobuf::uint8* CRemoteClient_GetPairingInfo_Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CRemoteClient_GetPairingInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }

  // optional fixed64 device_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }

  // optional bytes request = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->request(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CRemoteClient_GetPairingInfo_Response)
  return target;
}

size_t CRemoteClient_GetPairingInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CRemoteClient_GetPairingInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes request = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 device_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_GetPairingInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CRemoteClient_GetPairingInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_GetPairingInfo_Response* source =
      ::google::protobuf::DynamicCastToGenerated<CRemoteClient_GetPairingInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CRemoteClient_GetPairingInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CRemoteClient_GetPairingInfo_Response)
    MergeFrom(*source);
  }
}

void CRemoteClient_GetPairingInfo_Response::MergeFrom(const CRemoteClient_GetPairingInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CRemoteClient_GetPairingInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_);
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_ = from.device_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_GetPairingInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CRemoteClient_GetPairingInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_GetPairingInfo_Response::CopyFrom(const CRemoteClient_GetPairingInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CRemoteClient_GetPairingInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_GetPairingInfo_Response::IsInitialized() const {
  return true;
}

void CRemoteClient_GetPairingInfo_Response::Swap(CRemoteClient_GetPairingInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CRemoteClient_GetPairingInfo_Response::InternalSwap(CRemoteClient_GetPairingInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_.Swap(&other->request_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_id_, other->session_id_);
  swap(device_id_, other->device_id_);
}

::google::protobuf::Metadata CRemoteClient_GetPairingInfo_Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CRemoteClient_ReplyPacket_Notification::InitAsDefaultInstance() {
}
class CRemoteClient_ReplyPacket_Notification::HasBitSetters {
 public:
  static void set_has_session_id(CRemoteClient_ReplyPacket_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_payload(CRemoteClient_ReplyPacket_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CRemoteClient_ReplyPacket_Notification::kSessionIdFieldNumber;
const int CRemoteClient_ReplyPacket_Notification::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CRemoteClient_ReplyPacket_Notification::CRemoteClient_ReplyPacket_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CRemoteClient_ReplyPacket_Notification)
}
CRemoteClient_ReplyPacket_Notification::CRemoteClient_ReplyPacket_Notification(const CRemoteClient_ReplyPacket_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CRemoteClient_ReplyPacket_Notification)
}

void CRemoteClient_ReplyPacket_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CRemoteClient_ReplyPacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_ = PROTOBUF_ULONGLONG(0);
}

CRemoteClient_ReplyPacket_Notification::~CRemoteClient_ReplyPacket_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CRemoteClient_ReplyPacket_Notification)
  SharedDtor();
}

void CRemoteClient_ReplyPacket_Notification::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_ReplyPacket_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRemoteClient_ReplyPacket_Notification& CRemoteClient_ReplyPacket_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CRemoteClient_ReplyPacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CRemoteClient_ReplyPacket_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CRemoteClient_ReplyPacket_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CRemoteClient_ReplyPacket_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CRemoteClient_ReplyPacket_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes payload = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CRemoteClient_ReplyPacket_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CRemoteClient_ReplyPacket_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CRemoteClient_ReplyPacket_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CRemoteClient_ReplyPacket_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CRemoteClient_ReplyPacket_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CRemoteClient_ReplyPacket_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CRemoteClient_ReplyPacket_Notification)
}

::google::protobuf::uint8* CRemoteClient_ReplyPacket_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CRemoteClient_ReplyPacket_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CRemoteClient_ReplyPacket_Notification)
  return target;
}

size_t CRemoteClient_ReplyPacket_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CRemoteClient_ReplyPacket_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_ReplyPacket_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CRemoteClient_ReplyPacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_ReplyPacket_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CRemoteClient_ReplyPacket_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CRemoteClient_ReplyPacket_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CRemoteClient_ReplyPacket_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_ReplyPacket_Notification::MergeFrom(const CRemoteClient_ReplyPacket_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CRemoteClient_ReplyPacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_ReplyPacket_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CRemoteClient_ReplyPacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_ReplyPacket_Notification::CopyFrom(const CRemoteClient_ReplyPacket_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CRemoteClient_ReplyPacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_ReplyPacket_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_ReplyPacket_Notification::Swap(CRemoteClient_ReplyPacket_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CRemoteClient_ReplyPacket_Notification::InternalSwap(CRemoteClient_ReplyPacket_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_id_, other->session_id_);
}

::google::protobuf::Metadata CRemoteClient_ReplyPacket_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CRemoteClient_RemotePacket_Notification::InitAsDefaultInstance() {
}
class CRemoteClient_RemotePacket_Notification::HasBitSetters {
 public:
  static void set_has_session_id(CRemoteClient_RemotePacket_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_steamid(CRemoteClient_RemotePacket_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payload(CRemoteClient_RemotePacket_Notification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CRemoteClient_RemotePacket_Notification::kSessionIdFieldNumber;
const int CRemoteClient_RemotePacket_Notification::kSteamidFieldNumber;
const int CRemoteClient_RemotePacket_Notification::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CRemoteClient_RemotePacket_Notification::CRemoteClient_RemotePacket_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CRemoteClient_RemotePacket_Notification)
}
CRemoteClient_RemotePacket_Notification::CRemoteClient_RemotePacket_Notification(const CRemoteClient_RemotePacket_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CRemoteClient_RemotePacket_Notification)
}

void CRemoteClient_RemotePacket_Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CRemoteClient_RemotePacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steamid_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
}

CRemoteClient_RemotePacket_Notification::~CRemoteClient_RemotePacket_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CRemoteClient_RemotePacket_Notification)
  SharedDtor();
}

void CRemoteClient_RemotePacket_Notification::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CRemoteClient_RemotePacket_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRemoteClient_RemotePacket_Notification& CRemoteClient_RemotePacket_Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CRemoteClient_RemotePacket_Notification_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto.base);
  return *internal_default_instance();
}


void CRemoteClient_RemotePacket_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CRemoteClient_RemotePacket_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CRemoteClient_RemotePacket_Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CRemoteClient_RemotePacket_Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_session_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bytes payload = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CRemoteClient_RemotePacket_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CRemoteClient_RemotePacket_Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_session_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CRemoteClient_RemotePacket_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CRemoteClient_RemotePacket_Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CRemoteClient_RemotePacket_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CRemoteClient_RemotePacket_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_id(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // optional bytes payload = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CRemoteClient_RemotePacket_Notification)
}

::google::protobuf::uint8* CRemoteClient_RemotePacket_Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CRemoteClient_RemotePacket_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // optional bytes payload = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CRemoteClient_RemotePacket_Notification)
  return target;
}

size_t CRemoteClient_RemotePacket_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CRemoteClient_RemotePacket_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes payload = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional fixed64 session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRemoteClient_RemotePacket_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CRemoteClient_RemotePacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CRemoteClient_RemotePacket_Notification* source =
      ::google::protobuf::DynamicCastToGenerated<CRemoteClient_RemotePacket_Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CRemoteClient_RemotePacket_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CRemoteClient_RemotePacket_Notification)
    MergeFrom(*source);
  }
}

void CRemoteClient_RemotePacket_Notification::MergeFrom(const CRemoteClient_RemotePacket_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CRemoteClient_RemotePacket_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CRemoteClient_RemotePacket_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CRemoteClient_RemotePacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRemoteClient_RemotePacket_Notification::CopyFrom(const CRemoteClient_RemotePacket_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CRemoteClient_RemotePacket_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRemoteClient_RemotePacket_Notification::IsInitialized() const {
  return true;
}

void CRemoteClient_RemotePacket_Notification::Swap(CRemoteClient_RemotePacket_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CRemoteClient_RemotePacket_Notification::InternalSwap(CRemoteClient_RemotePacket_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_id_, other->session_id_);
  swap(steamid_, other->steamid_);
}

::google::protobuf::Metadata CRemoteClient_RemotePacket_Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto);
  return ::file_level_metadata_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[kIndexInFileMessages];
}


// ===================================================================

RemoteClient::~RemoteClient() {}

const ::google::protobuf::ServiceDescriptor* RemoteClient::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* RemoteClient::GetDescriptor() {
  return descriptor();
}

void RemoteClient::GetPairingInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CRemoteClient_GetPairingInfo_Request*,
                         ::proto::steam::CRemoteClient_GetPairingInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPairingInfo() not implemented.");
  done->Run();
}

void RemoteClient::NotifyReplyPacket(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CRemoteClient_ReplyPacket_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyReplyPacket() not implemented.");
  done->Run();
}

void RemoteClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetPairingInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CRemoteClient_GetPairingInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CRemoteClient_GetPairingInfo_Response*>(response),
             done);
      break;
    case 1:
      NotifyReplyPacket(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CRemoteClient_ReplyPacket_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RemoteClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CRemoteClient_GetPairingInfo_Request::default_instance();
    case 1:
      return ::proto::steam::CRemoteClient_ReplyPacket_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& RemoteClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CRemoteClient_GetPairingInfo_Response::default_instance();
    case 1:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RemoteClient_Stub::RemoteClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RemoteClient_Stub::RemoteClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RemoteClient_Stub::~RemoteClient_Stub() {
  if (owns_channel_) delete channel_;
}

void RemoteClient_Stub::GetPairingInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CRemoteClient_GetPairingInfo_Request* request,
                              ::proto::steam::CRemoteClient_GetPairingInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RemoteClient_Stub::NotifyReplyPacket(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CRemoteClient_ReplyPacket_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

RemoteClientSteamClient::~RemoteClientSteamClient() {}

const ::google::protobuf::ServiceDescriptor* RemoteClientSteamClient::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[1];
}

const ::google::protobuf::ServiceDescriptor* RemoteClientSteamClient::GetDescriptor() {
  return descriptor();
}

void RemoteClientSteamClient::NotifyRemotePacket(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CRemoteClient_RemotePacket_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyRemotePacket() not implemented.");
  done->Run();
}

void RemoteClientSteamClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fremoteclient_5fservice_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyRemotePacket(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CRemoteClient_RemotePacket_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RemoteClientSteamClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CRemoteClient_RemotePacket_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& RemoteClientSteamClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RemoteClientSteamClient_Stub::RemoteClientSteamClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RemoteClientSteamClient_Stub::RemoteClientSteamClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RemoteClientSteamClient_Stub::~RemoteClientSteamClient_Stub() {
  if (owns_channel_) delete channel_;
}

void RemoteClientSteamClient_Stub::NotifyRemotePacket(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CRemoteClient_RemotePacket_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace steam
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::steam::CRemoteClient_GetPairingInfo_Request* Arena::CreateMaybeMessage< ::proto::steam::CRemoteClient_GetPairingInfo_Request >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CRemoteClient_GetPairingInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CRemoteClient_GetPairingInfo_Response* Arena::CreateMaybeMessage< ::proto::steam::CRemoteClient_GetPairingInfo_Response >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CRemoteClient_GetPairingInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CRemoteClient_ReplyPacket_Notification* Arena::CreateMaybeMessage< ::proto::steam::CRemoteClient_ReplyPacket_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CRemoteClient_ReplyPacket_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::steam::CRemoteClient_RemotePacket_Notification* Arena::CreateMaybeMessage< ::proto::steam::CRemoteClient_RemotePacket_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::steam::CRemoteClient_RemotePacket_Notification >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
