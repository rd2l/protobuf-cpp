// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_match_management.proto

#ifndef PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto
#define PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto();
namespace proto {
namespace dota {
class CDOTALobbyMember;
class CDOTALobbyMemberDefaultTypeInternal;
extern CDOTALobbyMemberDefaultTypeInternal _CDOTALobbyMember_default_instance_;
class CDOTALobbyMember_CDOTALobbyMemberXPBonus;
class CDOTALobbyMember_CDOTALobbyMemberXPBonusDefaultTypeInternal;
extern CDOTALobbyMember_CDOTALobbyMemberXPBonusDefaultTypeInternal _CDOTALobbyMember_CDOTALobbyMemberXPBonus_default_instance_;
class CLobbyBroadcastChannelInfo;
class CLobbyBroadcastChannelInfoDefaultTypeInternal;
extern CLobbyBroadcastChannelInfoDefaultTypeInternal _CLobbyBroadcastChannelInfo_default_instance_;
class CLobbyTeamDetails;
class CLobbyTeamDetailsDefaultTypeInternal;
extern CLobbyTeamDetailsDefaultTypeInternal _CLobbyTeamDetails_default_instance_;
class CLobbyTimedRewardDetails;
class CLobbyTimedRewardDetailsDefaultTypeInternal;
extern CLobbyTimedRewardDetailsDefaultTypeInternal _CLobbyTimedRewardDetails_default_instance_;
class CMsgLeaverState;
class CMsgLeaverStateDefaultTypeInternal;
extern CMsgLeaverStateDefaultTypeInternal _CMsgLeaverState_default_instance_;
class CMsgLobbyEventGameDetails;
class CMsgLobbyEventGameDetailsDefaultTypeInternal;
extern CMsgLobbyEventGameDetailsDefaultTypeInternal _CMsgLobbyEventGameDetails_default_instance_;
class CMsgLobbyPlaytestDetails;
class CMsgLobbyPlaytestDetailsDefaultTypeInternal;
extern CMsgLobbyPlaytestDetailsDefaultTypeInternal _CMsgLobbyPlaytestDetails_default_instance_;
class CMsgPartyReadyCheckAcknowledge;
class CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal;
extern CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal _CMsgPartyReadyCheckAcknowledge_default_instance_;
class CMsgPartyReadyCheckRequest;
class CMsgPartyReadyCheckRequestDefaultTypeInternal;
extern CMsgPartyReadyCheckRequestDefaultTypeInternal _CMsgPartyReadyCheckRequest_default_instance_;
class CMsgPartyReadyCheckResponse;
class CMsgPartyReadyCheckResponseDefaultTypeInternal;
extern CMsgPartyReadyCheckResponseDefaultTypeInternal _CMsgPartyReadyCheckResponse_default_instance_;
class CMsgReadyCheckStatus;
class CMsgReadyCheckStatusDefaultTypeInternal;
extern CMsgReadyCheckStatusDefaultTypeInternal _CMsgReadyCheckStatus_default_instance_;
class CMsgReadyCheckStatus_ReadyMember;
class CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal;
extern CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal _CMsgReadyCheckStatus_ReadyMember_default_instance_;
class CSODOTALobby;
class CSODOTALobbyDefaultTypeInternal;
extern CSODOTALobbyDefaultTypeInternal _CSODOTALobby_default_instance_;
class CSODOTALobbyInvite;
class CSODOTALobbyInviteDefaultTypeInternal;
extern CSODOTALobbyInviteDefaultTypeInternal _CSODOTALobbyInvite_default_instance_;
class CSODOTALobbyInvite_LobbyMember;
class CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal;
extern CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal _CSODOTALobbyInvite_LobbyMember_default_instance_;
class CSODOTALobby_CExtraMsg;
class CSODOTALobby_CExtraMsgDefaultTypeInternal;
extern CSODOTALobby_CExtraMsgDefaultTypeInternal _CSODOTALobby_CExtraMsg_default_instance_;
class CSODOTAParty;
class CSODOTAPartyDefaultTypeInternal;
extern CSODOTAPartyDefaultTypeInternal _CSODOTAParty_default_instance_;
class CSODOTAPartyInvite;
class CSODOTAPartyInviteDefaultTypeInternal;
extern CSODOTAPartyInviteDefaultTypeInternal _CSODOTAPartyInvite_default_instance_;
class CSODOTAPartyInvite_PartyMember;
class CSODOTAPartyInvite_PartyMemberDefaultTypeInternal;
extern CSODOTAPartyInvite_PartyMemberDefaultTypeInternal _CSODOTAPartyInvite_PartyMember_default_instance_;
class CSODOTAPartyMember;
class CSODOTAPartyMemberDefaultTypeInternal;
extern CSODOTAPartyMemberDefaultTypeInternal _CSODOTAPartyMember_default_instance_;
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::dota::CDOTALobbyMember* Arena::CreateMaybeMessage<::proto::dota::CDOTALobbyMember>(Arena*);
template<> ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus* Arena::CreateMaybeMessage<::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus>(Arena*);
template<> ::proto::dota::CLobbyBroadcastChannelInfo* Arena::CreateMaybeMessage<::proto::dota::CLobbyBroadcastChannelInfo>(Arena*);
template<> ::proto::dota::CLobbyTeamDetails* Arena::CreateMaybeMessage<::proto::dota::CLobbyTeamDetails>(Arena*);
template<> ::proto::dota::CLobbyTimedRewardDetails* Arena::CreateMaybeMessage<::proto::dota::CLobbyTimedRewardDetails>(Arena*);
template<> ::proto::dota::CMsgLeaverState* Arena::CreateMaybeMessage<::proto::dota::CMsgLeaverState>(Arena*);
template<> ::proto::dota::CMsgLobbyEventGameDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgLobbyEventGameDetails>(Arena*);
template<> ::proto::dota::CMsgLobbyPlaytestDetails* Arena::CreateMaybeMessage<::proto::dota::CMsgLobbyPlaytestDetails>(Arena*);
template<> ::proto::dota::CMsgPartyReadyCheckAcknowledge* Arena::CreateMaybeMessage<::proto::dota::CMsgPartyReadyCheckAcknowledge>(Arena*);
template<> ::proto::dota::CMsgPartyReadyCheckRequest* Arena::CreateMaybeMessage<::proto::dota::CMsgPartyReadyCheckRequest>(Arena*);
template<> ::proto::dota::CMsgPartyReadyCheckResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgPartyReadyCheckResponse>(Arena*);
template<> ::proto::dota::CMsgReadyCheckStatus* Arena::CreateMaybeMessage<::proto::dota::CMsgReadyCheckStatus>(Arena*);
template<> ::proto::dota::CMsgReadyCheckStatus_ReadyMember* Arena::CreateMaybeMessage<::proto::dota::CMsgReadyCheckStatus_ReadyMember>(Arena*);
template<> ::proto::dota::CSODOTALobby* Arena::CreateMaybeMessage<::proto::dota::CSODOTALobby>(Arena*);
template<> ::proto::dota::CSODOTALobbyInvite* Arena::CreateMaybeMessage<::proto::dota::CSODOTALobbyInvite>(Arena*);
template<> ::proto::dota::CSODOTALobbyInvite_LobbyMember* Arena::CreateMaybeMessage<::proto::dota::CSODOTALobbyInvite_LobbyMember>(Arena*);
template<> ::proto::dota::CSODOTALobby_CExtraMsg* Arena::CreateMaybeMessage<::proto::dota::CSODOTALobby_CExtraMsg>(Arena*);
template<> ::proto::dota::CSODOTAParty* Arena::CreateMaybeMessage<::proto::dota::CSODOTAParty>(Arena*);
template<> ::proto::dota::CSODOTAPartyInvite* Arena::CreateMaybeMessage<::proto::dota::CSODOTAPartyInvite>(Arena*);
template<> ::proto::dota::CSODOTAPartyInvite_PartyMember* Arena::CreateMaybeMessage<::proto::dota::CSODOTAPartyInvite_PartyMember>(Arena*);
template<> ::proto::dota::CSODOTAPartyMember* Arena::CreateMaybeMessage<::proto::dota::CSODOTAPartyMember>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace dota {

enum CSODOTAParty_State {
  CSODOTAParty_State_UI = 0,
  CSODOTAParty_State_FINDING_MATCH = 1,
  CSODOTAParty_State_IN_MATCH = 2
};
bool CSODOTAParty_State_IsValid(int value);
const CSODOTAParty_State CSODOTAParty_State_State_MIN = CSODOTAParty_State_UI;
const CSODOTAParty_State CSODOTAParty_State_State_MAX = CSODOTAParty_State_IN_MATCH;
const int CSODOTAParty_State_State_ARRAYSIZE = CSODOTAParty_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor();
inline const ::std::string& CSODOTAParty_State_Name(CSODOTAParty_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTAParty_State_descriptor(), value);
}
inline bool CSODOTAParty_State_Parse(
    const ::std::string& name, CSODOTAParty_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTAParty_State>(
    CSODOTAParty_State_descriptor(), name, value);
}
enum CSODOTALobby_State {
  CSODOTALobby_State_UI = 0,
  CSODOTALobby_State_READYUP = 4,
  CSODOTALobby_State_SERVERSETUP = 1,
  CSODOTALobby_State_RUN = 2,
  CSODOTALobby_State_POSTGAME = 3,
  CSODOTALobby_State_NOTREADY = 5,
  CSODOTALobby_State_SERVERASSIGN = 6
};
bool CSODOTALobby_State_IsValid(int value);
const CSODOTALobby_State CSODOTALobby_State_State_MIN = CSODOTALobby_State_UI;
const CSODOTALobby_State CSODOTALobby_State_State_MAX = CSODOTALobby_State_SERVERASSIGN;
const int CSODOTALobby_State_State_ARRAYSIZE = CSODOTALobby_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor();
inline const ::std::string& CSODOTALobby_State_Name(CSODOTALobby_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_State_descriptor(), value);
}
inline bool CSODOTALobby_State_Parse(
    const ::std::string& name, CSODOTALobby_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_State>(
    CSODOTALobby_State_descriptor(), name, value);
}
enum CSODOTALobby_LobbyType {
  CSODOTALobby_LobbyType_INVALID = -1,
  CSODOTALobby_LobbyType_CASUAL_MATCH = 0,
  CSODOTALobby_LobbyType_PRACTICE = 1,
  CSODOTALobby_LobbyType_COOP_BOT_MATCH = 4,
  CSODOTALobby_LobbyType_LEGACY_TEAM_MATCH = 5,
  CSODOTALobby_LobbyType_LEGACY_SOLO_QUEUE_MATCH = 6,
  CSODOTALobby_LobbyType_COMPETITIVE_MATCH = 7,
  CSODOTALobby_LobbyType_CASUAL_1V1_MATCH = 8,
  CSODOTALobby_LobbyType_WEEKEND_TOURNEY = 9,
  CSODOTALobby_LobbyType_LOCAL_BOT_MATCH = 10,
  CSODOTALobby_LobbyType_SPECTATOR = 11
};
bool CSODOTALobby_LobbyType_IsValid(int value);
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MIN = CSODOTALobby_LobbyType_INVALID;
const CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MAX = CSODOTALobby_LobbyType_SPECTATOR;
const int CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE = CSODOTALobby_LobbyType_LobbyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor();
inline const ::std::string& CSODOTALobby_LobbyType_Name(CSODOTALobby_LobbyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSODOTALobby_LobbyType_descriptor(), value);
}
inline bool CSODOTALobby_LobbyType_Parse(
    const ::std::string& name, CSODOTALobby_LobbyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSODOTALobby_LobbyType>(
    CSODOTALobby_LobbyType_descriptor(), name, value);
}
enum ELaneSelectionFlags {
  k_ELaneSelectionFlags_LANE_SELECTION_SAFELANE = 1,
  k_ELaneSelectionFlags_LANE_SELECTION_OFFLANE = 2,
  k_ELaneSelectionFlags_LANE_SELECTION_MIDLANE = 4,
  k_ELaneSelectionFlags_LANE_SELECTION_OTHER = 8
};
bool ELaneSelectionFlags_IsValid(int value);
const ELaneSelectionFlags ELaneSelectionFlags_MIN = k_ELaneSelectionFlags_LANE_SELECTION_SAFELANE;
const ELaneSelectionFlags ELaneSelectionFlags_MAX = k_ELaneSelectionFlags_LANE_SELECTION_OTHER;
const int ELaneSelectionFlags_ARRAYSIZE = ELaneSelectionFlags_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELaneSelectionFlags_descriptor();
inline const ::std::string& ELaneSelectionFlags_Name(ELaneSelectionFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELaneSelectionFlags_descriptor(), value);
}
inline bool ELaneSelectionFlags_Parse(
    const ::std::string& name, ELaneSelectionFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELaneSelectionFlags>(
    ELaneSelectionFlags_descriptor(), name, value);
}
enum LobbyDotaTVDelay {
  LobbyDotaTV_10 = 0,
  LobbyDotaTV_120 = 1,
  LobbyDotaTV_300 = 2
};
bool LobbyDotaTVDelay_IsValid(int value);
const LobbyDotaTVDelay LobbyDotaTVDelay_MIN = LobbyDotaTV_10;
const LobbyDotaTVDelay LobbyDotaTVDelay_MAX = LobbyDotaTV_300;
const int LobbyDotaTVDelay_ARRAYSIZE = LobbyDotaTVDelay_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor();
inline const ::std::string& LobbyDotaTVDelay_Name(LobbyDotaTVDelay value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyDotaTVDelay_descriptor(), value);
}
inline bool LobbyDotaTVDelay_Parse(
    const ::std::string& name, LobbyDotaTVDelay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyDotaTVDelay>(
    LobbyDotaTVDelay_descriptor(), name, value);
}
enum LobbyDotaPauseSetting {
  LobbyDotaPauseSetting_Unlimited = 0,
  LobbyDotaPauseSetting_Limited = 1,
  LobbyDotaPauseSetting_Disabled = 2
};
bool LobbyDotaPauseSetting_IsValid(int value);
const LobbyDotaPauseSetting LobbyDotaPauseSetting_MIN = LobbyDotaPauseSetting_Unlimited;
const LobbyDotaPauseSetting LobbyDotaPauseSetting_MAX = LobbyDotaPauseSetting_Disabled;
const int LobbyDotaPauseSetting_ARRAYSIZE = LobbyDotaPauseSetting_MAX + 1;

const ::google::protobuf::EnumDescriptor* LobbyDotaPauseSetting_descriptor();
inline const ::std::string& LobbyDotaPauseSetting_Name(LobbyDotaPauseSetting value) {
  return ::google::protobuf::internal::NameOfEnum(
    LobbyDotaPauseSetting_descriptor(), value);
}
inline bool LobbyDotaPauseSetting_Parse(
    const ::std::string& name, LobbyDotaPauseSetting* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LobbyDotaPauseSetting>(
    LobbyDotaPauseSetting_descriptor(), name, value);
}
enum EReadyCheckStatus {
  k_EReadyCheckStatus_Unknown = 0,
  k_EReadyCheckStatus_NotReady = 1,
  k_EReadyCheckStatus_Ready = 2
};
bool EReadyCheckStatus_IsValid(int value);
const EReadyCheckStatus EReadyCheckStatus_MIN = k_EReadyCheckStatus_Unknown;
const EReadyCheckStatus EReadyCheckStatus_MAX = k_EReadyCheckStatus_Ready;
const int EReadyCheckStatus_ARRAYSIZE = EReadyCheckStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EReadyCheckStatus_descriptor();
inline const ::std::string& EReadyCheckStatus_Name(EReadyCheckStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EReadyCheckStatus_descriptor(), value);
}
inline bool EReadyCheckStatus_Parse(
    const ::std::string& name, EReadyCheckStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EReadyCheckStatus>(
    EReadyCheckStatus_descriptor(), name, value);
}
enum EReadyCheckRequestResult {
  k_EReadyCheckRequestResult_Success = 0,
  k_EReadyCheckRequestResult_AlreadyInProgress = 1,
  k_EReadyCheckRequestResult_NotInParty = 2,
  k_EReadyCheckRequestResult_SendError = 3,
  k_EReadyCheckRequestResult_UnknownError = 4
};
bool EReadyCheckRequestResult_IsValid(int value);
const EReadyCheckRequestResult EReadyCheckRequestResult_MIN = k_EReadyCheckRequestResult_Success;
const EReadyCheckRequestResult EReadyCheckRequestResult_MAX = k_EReadyCheckRequestResult_UnknownError;
const int EReadyCheckRequestResult_ARRAYSIZE = EReadyCheckRequestResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EReadyCheckRequestResult_descriptor();
inline const ::std::string& EReadyCheckRequestResult_Name(EReadyCheckRequestResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EReadyCheckRequestResult_descriptor(), value);
}
inline bool EReadyCheckRequestResult_Parse(
    const ::std::string& name, EReadyCheckRequestResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EReadyCheckRequestResult>(
    EReadyCheckRequestResult_descriptor(), name, value);
}
// ===================================================================

class CSODOTAPartyMember final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTAPartyMember) */ {
 public:
  CSODOTAPartyMember();
  virtual ~CSODOTAPartyMember();

  CSODOTAPartyMember(const CSODOTAPartyMember& from);

  inline CSODOTAPartyMember& operator=(const CSODOTAPartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAPartyMember(CSODOTAPartyMember&& from) noexcept
    : CSODOTAPartyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyMember& operator=(CSODOTAPartyMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTAPartyMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAPartyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyMember*>(
               &_CSODOTAPartyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CSODOTAPartyMember* other);
  friend void swap(CSODOTAPartyMember& a, CSODOTAPartyMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyMember* New() const final {
    return CreateMaybeMessage<CSODOTAPartyMember>(nullptr);
  }

  CSODOTAPartyMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAPartyMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTAPartyMember& from);
  void MergeFrom(const CSODOTAPartyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPartyMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 region_ping_codes = 4 [packed = true];
  int region_ping_codes_size() const;
  void clear_region_ping_codes();
  static const int kRegionPingCodesFieldNumber = 4;
  ::google::protobuf::uint32 region_ping_codes(int index) const;
  void set_region_ping_codes(int index, ::google::protobuf::uint32 value);
  void add_region_ping_codes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      region_ping_codes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_region_ping_codes();

  // repeated uint32 region_ping_times = 5 [packed = true];
  int region_ping_times_size() const;
  void clear_region_ping_times();
  static const int kRegionPingTimesFieldNumber = 5;
  ::google::protobuf::uint32 region_ping_times(int index) const;
  void set_region_ping_times(int index, ::google::protobuf::uint32 value);
  void add_region_ping_times(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      region_ping_times() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_region_ping_times();

  // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  bool has_partner_type() const;
  void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 1;
  ::proto::dota::PartnerAccountType partner_type() const;
  void set_partner_type(::proto::dota::PartnerAccountType value);

  // optional uint32 region_ping_failed_bitmask = 6;
  bool has_region_ping_failed_bitmask() const;
  void clear_region_ping_failed_bitmask();
  static const int kRegionPingFailedBitmaskFieldNumber = 6;
  ::google::protobuf::uint32 region_ping_failed_bitmask() const;
  void set_region_ping_failed_bitmask(::google::protobuf::uint32 value);

  // optional bool is_coach = 2;
  bool has_is_coach() const;
  void clear_is_coach();
  static const int kIsCoachFieldNumber = 2;
  bool is_coach() const;
  void set_is_coach(bool value);

  // optional bool is_plus_subscriber = 10;
  bool has_is_plus_subscriber() const;
  void clear_is_plus_subscriber();
  static const int kIsPlusSubscriberFieldNumber = 10;
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);

  // optional uint32 tourney_skill_level = 7;
  bool has_tourney_skill_level() const;
  void clear_tourney_skill_level();
  static const int kTourneySkillLevelFieldNumber = 7;
  ::google::protobuf::uint32 tourney_skill_level() const;
  void set_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 tourney_buyin = 8;
  bool has_tourney_buyin() const;
  void clear_tourney_buyin();
  static const int kTourneyBuyinFieldNumber = 8;
  ::google::protobuf::uint32 tourney_buyin() const;
  void set_tourney_buyin(::google::protobuf::uint32 value);

  // optional uint32 tourney_prevent_until = 9;
  bool has_tourney_prevent_until() const;
  void clear_tourney_prevent_until();
  static const int kTourneyPreventUntilFieldNumber = 9;
  ::google::protobuf::uint32 tourney_prevent_until() const;
  void set_tourney_prevent_until(::google::protobuf::uint32 value);

  // optional uint32 lane_selection_flags = 11;
  bool has_lane_selection_flags() const;
  void clear_lane_selection_flags();
  static const int kLaneSelectionFlagsFieldNumber = 11;
  ::google::protobuf::uint32 lane_selection_flags() const;
  void set_lane_selection_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTAPartyMember)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > region_ping_codes_;
  mutable std::atomic<int> _region_ping_codes_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > region_ping_times_;
  mutable std::atomic<int> _region_ping_times_cached_byte_size_;
  int partner_type_;
  ::google::protobuf::uint32 region_ping_failed_bitmask_;
  bool is_coach_;
  bool is_plus_subscriber_;
  ::google::protobuf::uint32 tourney_skill_level_;
  ::google::protobuf::uint32 tourney_buyin_;
  ::google::protobuf::uint32 tourney_prevent_until_;
  ::google::protobuf::uint32 lane_selection_flags_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAParty final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTAParty) */ {
 public:
  CSODOTAParty();
  virtual ~CSODOTAParty();

  CSODOTAParty(const CSODOTAParty& from);

  inline CSODOTAParty& operator=(const CSODOTAParty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAParty(CSODOTAParty&& from) noexcept
    : CSODOTAParty() {
    *this = ::std::move(from);
  }

  inline CSODOTAParty& operator=(CSODOTAParty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTAParty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAParty* internal_default_instance() {
    return reinterpret_cast<const CSODOTAParty*>(
               &_CSODOTAParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CSODOTAParty* other);
  friend void swap(CSODOTAParty& a, CSODOTAParty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAParty* New() const final {
    return CreateMaybeMessage<CSODOTAParty>(nullptr);
  }

  CSODOTAParty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAParty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTAParty& from);
  void MergeFrom(const CSODOTAParty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAParty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSODOTAParty_State State;
  static const State UI =
    CSODOTAParty_State_UI;
  static const State FINDING_MATCH =
    CSODOTAParty_State_FINDING_MATCH;
  static const State IN_MATCH =
    CSODOTAParty_State_IN_MATCH;
  static inline bool State_IsValid(int value) {
    return CSODOTAParty_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTAParty_State_State_MIN;
  static const State State_MAX =
    CSODOTAParty_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTAParty_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTAParty_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTAParty_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTAParty_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated fixed64 member_ids = 3;
  int member_ids_size() const;
  void clear_member_ids();
  static const int kMemberIdsFieldNumber = 3;
  ::google::protobuf::uint64 member_ids(int index) const;
  void set_member_ids(int index, ::google::protobuf::uint64 value);
  void add_member_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      member_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_member_ids();

  // repeated .proto.dota.CSODOTAPartyMember members = 29;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 29;
  ::proto::dota::CSODOTAPartyMember* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyMember >*
      mutable_members();
  const ::proto::dota::CSODOTAPartyMember& members(int index) const;
  ::proto::dota::CSODOTAPartyMember* add_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyMember >&
      members() const;

  // repeated uint32 common_guilds = 31;
  int common_guilds_size() const;
  void clear_common_guilds();
  static const int kCommonGuildsFieldNumber = 31;
  ::google::protobuf::uint32 common_guilds(int index) const;
  void set_common_guilds(int index, ::google::protobuf::uint32 value);
  void add_common_guilds(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      common_guilds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_common_guilds();

  // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
  int sent_invites_size() const;
  void clear_sent_invites();
  static const int kSentInvitesFieldNumber = 41;
  ::proto::dota::CSODOTAPartyInvite* mutable_sent_invites(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >*
      mutable_sent_invites();
  const ::proto::dota::CSODOTAPartyInvite& sent_invites(int index) const;
  ::proto::dota::CSODOTAPartyInvite* add_sent_invites();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >&
      sent_invites() const;

  // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
  int recv_invites_size() const;
  void clear_recv_invites();
  static const int kRecvInvitesFieldNumber = 42;
  ::proto::dota::CSODOTAPartyInvite* mutable_recv_invites(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >*
      mutable_recv_invites();
  const ::proto::dota::CSODOTAPartyInvite& recv_invites(int index) const;
  ::proto::dota::CSODOTAPartyInvite* add_recv_invites();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >&
      recv_invites() const;

  // optional string team_name = 51;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 51;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional .proto.dota.CMsgReadyCheckStatus ready_check = 62;
  bool has_ready_check() const;
  void clear_ready_check();
  static const int kReadyCheckFieldNumber = 62;
  const ::proto::dota::CMsgReadyCheckStatus& ready_check() const;
  ::proto::dota::CMsgReadyCheckStatus* release_ready_check();
  ::proto::dota::CMsgReadyCheckStatus* mutable_ready_check();
  void set_allocated_ready_check(::proto::dota::CMsgReadyCheckStatus* ready_check);

  // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 1;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional fixed64 leader_id = 2;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  ::google::protobuf::uint64 leader_id() const;
  void set_leader_id(::google::protobuf::uint64 value);

  // optional uint32 game_modes = 4;
  bool has_game_modes() const;
  void clear_game_modes();
  static const int kGameModesFieldNumber = 4;
  ::google::protobuf::uint32 game_modes() const;
  void set_game_modes(::google::protobuf::uint32 value);

  // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::proto::dota::CSODOTAParty_State state() const;
  void set_state(::proto::dota::CSODOTAParty_State value);

  // optional uint32 effective_started_matchmaking_time = 7;
  bool has_effective_started_matchmaking_time() const;
  void clear_effective_started_matchmaking_time();
  static const int kEffectiveStartedMatchmakingTimeFieldNumber = 7;
  ::google::protobuf::uint32 effective_started_matchmaking_time() const;
  void set_effective_started_matchmaking_time(::google::protobuf::uint32 value);

  // optional uint32 matchgroups = 11;
  bool has_matchgroups() const;
  void clear_matchgroups();
  static const int kMatchgroupsFieldNumber = 11;
  ::google::protobuf::uint32 matchgroups() const;
  void set_matchgroups(::google::protobuf::uint32 value);

  // optional uint32 low_priority_account_id = 19;
  bool has_low_priority_account_id() const;
  void clear_low_priority_account_id();
  static const int kLowPriorityAccountIdFieldNumber = 19;
  ::google::protobuf::uint32 low_priority_account_id() const;
  void set_low_priority_account_id(::google::protobuf::uint32 value);

  // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 21;
  ::proto::dota::MatchType match_type() const;
  void set_match_type(::proto::dota::MatchType value);

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty() const;
  void clear_bot_difficulty();
  static const int kBotDifficultyFieldNumber = 22;
  ::proto::dota::DOTABotDifficulty bot_difficulty() const;
  void set_bot_difficulty(::proto::dota::DOTABotDifficulty value);

  // optional uint32 team_id = 23;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 23;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_until_date = 24;
  bool has_match_disabled_until_date() const;
  void clear_match_disabled_until_date();
  static const int kMatchDisabledUntilDateFieldNumber = 24;
  ::google::protobuf::uint32 match_disabled_until_date() const;
  void set_match_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 match_disabled_account_id = 25;
  bool has_match_disabled_account_id() const;
  void clear_match_disabled_account_id();
  static const int kMatchDisabledAccountIdFieldNumber = 25;
  ::google::protobuf::uint32 match_disabled_account_id() const;
  void set_match_disabled_account_id(::google::protobuf::uint32 value);

  // optional uint32 matchmaking_max_range_minutes = 26;
  bool has_matchmaking_max_range_minutes() const;
  void clear_matchmaking_max_range_minutes();
  static const int kMatchmakingMaxRangeMinutesFieldNumber = 26;
  ::google::protobuf::uint32 matchmaking_max_range_minutes() const;
  void set_matchmaking_max_range_minutes(::google::protobuf::uint32 value);

  // optional uint32 matchlanguages = 27;
  bool has_matchlanguages() const;
  void clear_matchlanguages();
  static const int kMatchlanguagesFieldNumber = 27;
  ::google::protobuf::uint32 matchlanguages() const;
  void set_matchlanguages(::google::protobuf::uint32 value);

  // optional uint32 open_guild_id = 30;
  bool has_open_guild_id() const;
  void clear_open_guild_id();
  static const int kOpenGuildIdFieldNumber = 30;
  ::google::protobuf::uint32 open_guild_id() const;
  void set_open_guild_id(::google::protobuf::uint32 value);

  // optional uint32 raw_started_matchmaking_time = 32;
  bool has_raw_started_matchmaking_time() const;
  void clear_raw_started_matchmaking_time();
  static const int kRawStartedMatchmakingTimeFieldNumber = 32;
  ::google::protobuf::uint32 raw_started_matchmaking_time() const;
  void set_raw_started_matchmaking_time(::google::protobuf::uint32 value);

  // optional uint32 attempt_start_time = 33;
  bool has_attempt_start_time() const;
  void clear_attempt_start_time();
  static const int kAttemptStartTimeFieldNumber = 33;
  ::google::protobuf::uint32 attempt_start_time() const;
  void set_attempt_start_time(::google::protobuf::uint32 value);

  // optional uint32 attempt_num = 34;
  bool has_attempt_num() const;
  void clear_attempt_num();
  static const int kAttemptNumFieldNumber = 34;
  ::google::protobuf::uint32 attempt_num() const;
  void set_attempt_num(::google::protobuf::uint32 value);

  // optional uint32 low_priority_games_remaining = 35;
  bool has_low_priority_games_remaining() const;
  void clear_low_priority_games_remaining();
  static const int kLowPriorityGamesRemainingFieldNumber = 35;
  ::google::protobuf::uint32 low_priority_games_remaining() const;
  void set_low_priority_games_remaining(::google::protobuf::uint32 value);

  // optional uint32 account_flags = 43;
  bool has_account_flags() const;
  void clear_account_flags();
  static const int kAccountFlagsFieldNumber = 43;
  ::google::protobuf::uint32 account_flags() const;
  void set_account_flags(::google::protobuf::uint32 value);

  // optional uint32 region_select_flags = 44;
  bool has_region_select_flags() const;
  void clear_region_select_flags();
  static const int kRegionSelectFlagsFieldNumber = 44;
  ::google::protobuf::uint32 region_select_flags() const;
  void set_region_select_flags(::google::protobuf::uint32 value);

  // optional uint32 exclusive_tournament_id = 45;
  bool has_exclusive_tournament_id() const;
  void clear_exclusive_tournament_id();
  static const int kExclusiveTournamentIdFieldNumber = 45;
  ::google::protobuf::uint32 exclusive_tournament_id() const;
  void set_exclusive_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tourney_division_id = 47;
  bool has_tourney_division_id() const;
  void clear_tourney_division_id();
  static const int kTourneyDivisionIdFieldNumber = 47;
  ::google::protobuf::uint32 tourney_division_id() const;
  void set_tourney_division_id(::google::protobuf::uint32 value);

  // optional uint32 tourney_schedule_time = 48;
  bool has_tourney_schedule_time() const;
  void clear_tourney_schedule_time();
  static const int kTourneyScheduleTimeFieldNumber = 48;
  ::google::protobuf::uint32 tourney_schedule_time() const;
  void set_tourney_schedule_time(::google::protobuf::uint32 value);

  // optional uint32 tourney_skill_level = 49;
  bool has_tourney_skill_level() const;
  void clear_tourney_skill_level();
  static const int kTourneySkillLevelFieldNumber = 49;
  ::google::protobuf::uint32 tourney_skill_level() const;
  void set_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 tourney_bracket_round = 50;
  bool has_tourney_bracket_round() const;
  void clear_tourney_bracket_round();
  static const int kTourneyBracketRoundFieldNumber = 50;
  ::google::protobuf::uint32 tourney_bracket_round() const;
  void set_tourney_bracket_round(::google::protobuf::uint32 value);

  // optional uint64 team_ui_logo = 52;
  bool has_team_ui_logo() const;
  void clear_team_ui_logo();
  static const int kTeamUiLogoFieldNumber = 52;
  ::google::protobuf::uint64 team_ui_logo() const;
  void set_team_ui_logo(::google::protobuf::uint64 value);

  // optional uint64 team_base_logo = 53;
  bool has_team_base_logo() const;
  void clear_team_base_logo();
  static const int kTeamBaseLogoFieldNumber = 53;
  ::google::protobuf::uint64 team_base_logo() const;
  void set_team_base_logo(::google::protobuf::uint64 value);

  // optional uint32 tourney_queue_deadline_time = 54;
  bool has_tourney_queue_deadline_time() const;
  void clear_tourney_queue_deadline_time();
  static const int kTourneyQueueDeadlineTimeFieldNumber = 54;
  ::google::protobuf::uint32 tourney_queue_deadline_time() const;
  void set_tourney_queue_deadline_time(::google::protobuf::uint32 value);

  // optional bool open_for_join_requests = 40;
  bool has_open_for_join_requests() const;
  void clear_open_for_join_requests();
  static const int kOpenForJoinRequestsFieldNumber = 40;
  bool open_for_join_requests() const;
  void set_open_for_join_requests(bool value);

  // optional bool solo_queue = 59;
  bool has_solo_queue() const;
  void clear_solo_queue();
  static const int kSoloQueueFieldNumber = 59;
  bool solo_queue() const;
  void set_solo_queue(bool value);

  // optional bool is_challenge_match = 65;
  bool has_is_challenge_match() const;
  void clear_is_challenge_match();
  static const int kIsChallengeMatchFieldNumber = 65;
  bool is_challenge_match() const;
  void set_is_challenge_match(bool value);

  // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  bool has_tourney_queue_deadline_state() const;
  void clear_tourney_queue_deadline_state();
  static const int kTourneyQueueDeadlineStateFieldNumber = 55;
  ::proto::dota::ETourneyQueueDeadlineState tourney_queue_deadline_state() const;
  void set_tourney_queue_deadline_state(::proto::dota::ETourneyQueueDeadlineState value);

  // optional uint32 party_builder_slots_to_fill = 56;
  bool has_party_builder_slots_to_fill() const;
  void clear_party_builder_slots_to_fill();
  static const int kPartyBuilderSlotsToFillFieldNumber = 56;
  ::google::protobuf::uint32 party_builder_slots_to_fill() const;
  void set_party_builder_slots_to_fill(::google::protobuf::uint32 value);

  // optional uint32 party_builder_match_groups = 57;
  bool has_party_builder_match_groups() const;
  void clear_party_builder_match_groups();
  static const int kPartyBuilderMatchGroupsFieldNumber = 57;
  ::google::protobuf::uint32 party_builder_match_groups() const;
  void set_party_builder_match_groups(::google::protobuf::uint32 value);

  // optional uint32 party_builder_start_time = 58;
  bool has_party_builder_start_time() const;
  void clear_party_builder_start_time();
  static const int kPartyBuilderStartTimeFieldNumber = 58;
  ::google::protobuf::uint32 party_builder_start_time() const;
  void set_party_builder_start_time(::google::protobuf::uint32 value);

  // optional uint32 bot_script_index = 60;
  bool has_bot_script_index() const;
  void clear_bot_script_index();
  static const int kBotScriptIndexFieldNumber = 60;
  ::google::protobuf::uint32 bot_script_index() const;
  void set_bot_script_index(::google::protobuf::uint32 value);

  // optional uint32 steam_clan_account_id = 61;
  bool has_steam_clan_account_id() const;
  void clear_steam_clan_account_id();
  static const int kSteamClanAccountIdFieldNumber = 61;
  ::google::protobuf::uint32 steam_clan_account_id() const;
  void set_steam_clan_account_id(::google::protobuf::uint32 value);

  // optional uint32 custom_game_disabled_until_date = 63;
  bool has_custom_game_disabled_until_date() const;
  void clear_custom_game_disabled_until_date();
  static const int kCustomGameDisabledUntilDateFieldNumber = 63;
  ::google::protobuf::uint32 custom_game_disabled_until_date() const;
  void set_custom_game_disabled_until_date(::google::protobuf::uint32 value);

  // optional uint32 custom_game_disabled_account_id = 64;
  bool has_custom_game_disabled_account_id() const;
  void clear_custom_game_disabled_account_id();
  static const int kCustomGameDisabledAccountIdFieldNumber = 64;
  ::google::protobuf::uint32 custom_game_disabled_account_id() const;
  void set_custom_game_disabled_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTAParty)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > member_ids_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyMember > members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > common_guilds_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite > sent_invites_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite > recv_invites_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::proto::dota::CMsgReadyCheckStatus* ready_check_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::uint32 game_modes_;
  int state_;
  ::google::protobuf::uint32 effective_started_matchmaking_time_;
  ::google::protobuf::uint32 matchgroups_;
  ::google::protobuf::uint32 low_priority_account_id_;
  int match_type_;
  int bot_difficulty_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 match_disabled_until_date_;
  ::google::protobuf::uint32 match_disabled_account_id_;
  ::google::protobuf::uint32 matchmaking_max_range_minutes_;
  ::google::protobuf::uint32 matchlanguages_;
  ::google::protobuf::uint32 open_guild_id_;
  ::google::protobuf::uint32 raw_started_matchmaking_time_;
  ::google::protobuf::uint32 attempt_start_time_;
  ::google::protobuf::uint32 attempt_num_;
  ::google::protobuf::uint32 low_priority_games_remaining_;
  ::google::protobuf::uint32 account_flags_;
  ::google::protobuf::uint32 region_select_flags_;
  ::google::protobuf::uint32 exclusive_tournament_id_;
  ::google::protobuf::uint32 tourney_division_id_;
  ::google::protobuf::uint32 tourney_schedule_time_;
  ::google::protobuf::uint32 tourney_skill_level_;
  ::google::protobuf::uint32 tourney_bracket_round_;
  ::google::protobuf::uint64 team_ui_logo_;
  ::google::protobuf::uint64 team_base_logo_;
  ::google::protobuf::uint32 tourney_queue_deadline_time_;
  bool open_for_join_requests_;
  bool solo_queue_;
  bool is_challenge_match_;
  int tourney_queue_deadline_state_;
  ::google::protobuf::uint32 party_builder_slots_to_fill_;
  ::google::protobuf::uint32 party_builder_match_groups_;
  ::google::protobuf::uint32 party_builder_start_time_;
  ::google::protobuf::uint32 bot_script_index_;
  ::google::protobuf::uint32 steam_clan_account_id_;
  ::google::protobuf::uint32 custom_game_disabled_until_date_;
  ::google::protobuf::uint32 custom_game_disabled_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite_PartyMember final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTAPartyInvite.PartyMember) */ {
 public:
  CSODOTAPartyInvite_PartyMember();
  virtual ~CSODOTAPartyInvite_PartyMember();

  CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from);

  inline CSODOTAPartyInvite_PartyMember& operator=(const CSODOTAPartyInvite_PartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAPartyInvite_PartyMember(CSODOTAPartyInvite_PartyMember&& from) noexcept
    : CSODOTAPartyInvite_PartyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyInvite_PartyMember& operator=(CSODOTAPartyInvite_PartyMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTAPartyInvite_PartyMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAPartyInvite_PartyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyInvite_PartyMember*>(
               &_CSODOTAPartyInvite_PartyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CSODOTAPartyInvite_PartyMember* other);
  friend void swap(CSODOTAPartyInvite_PartyMember& a, CSODOTAPartyInvite_PartyMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyInvite_PartyMember* New() const final {
    return CreateMaybeMessage<CSODOTAPartyInvite_PartyMember>(nullptr);
  }

  CSODOTAPartyInvite_PartyMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAPartyInvite_PartyMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTAPartyInvite_PartyMember& from);
  void MergeFrom(const CSODOTAPartyInvite_PartyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPartyInvite_PartyMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional bool is_coach = 4;
  bool has_is_coach() const;
  void clear_is_coach();
  static const int kIsCoachFieldNumber = 4;
  bool is_coach() const;
  void set_is_coach(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTAPartyInvite.PartyMember)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 steam_id_;
  bool is_coach_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTAPartyInvite) */ {
 public:
  CSODOTAPartyInvite();
  virtual ~CSODOTAPartyInvite();

  CSODOTAPartyInvite(const CSODOTAPartyInvite& from);

  inline CSODOTAPartyInvite& operator=(const CSODOTAPartyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTAPartyInvite(CSODOTAPartyInvite&& from) noexcept
    : CSODOTAPartyInvite() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyInvite& operator=(CSODOTAPartyInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTAPartyInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTAPartyInvite* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyInvite*>(
               &_CSODOTAPartyInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CSODOTAPartyInvite* other);
  friend void swap(CSODOTAPartyInvite& a, CSODOTAPartyInvite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyInvite* New() const final {
    return CreateMaybeMessage<CSODOTAPartyInvite>(nullptr);
  }

  CSODOTAPartyInvite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAPartyInvite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTAPartyInvite& from);
  void MergeFrom(const CSODOTAPartyInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPartyInvite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSODOTAPartyInvite_PartyMember PartyMember;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 4;
  ::proto::dota::CSODOTAPartyInvite_PartyMember* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite_PartyMember >*
      mutable_members();
  const ::proto::dota::CSODOTAPartyInvite_PartyMember& members(int index) const;
  ::proto::dota::CSODOTAPartyInvite_PartyMember* add_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite_PartyMember >&
      members() const;

  // optional string sender_name = 3;
  bool has_sender_name() const;
  void clear_sender_name();
  static const int kSenderNameFieldNumber = 3;
  const ::std::string& sender_name() const;
  void set_sender_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_name(::std::string&& value);
  #endif
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  ::std::string* mutable_sender_name();
  ::std::string* release_sender_name();
  void set_allocated_sender_name(::std::string* sender_name);

  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 group_id() const;
  void set_group_id(::google::protobuf::uint64 value);

  // optional fixed64 sender_id = 2;
  bool has_sender_id() const;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  ::google::protobuf::uint64 sender_id() const;
  void set_sender_id(::google::protobuf::uint64 value);

  // optional uint32 team_id = 5;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional bool low_priority_status = 6;
  bool has_low_priority_status() const;
  void clear_low_priority_status();
  static const int kLowPriorityStatusFieldNumber = 6;
  bool low_priority_status() const;
  void set_low_priority_status(bool value);

  // optional bool as_coach = 7;
  bool has_as_coach() const;
  void clear_as_coach();
  static const int kAsCoachFieldNumber = 7;
  bool as_coach() const;
  void set_as_coach(bool value);

  // optional fixed64 invite_gid = 8;
  bool has_invite_gid() const;
  void clear_invite_gid();
  static const int kInviteGidFieldNumber = 8;
  ::google::protobuf::uint64 invite_gid() const;
  void set_invite_gid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTAPartyInvite)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite_PartyMember > members_;
  ::google::protobuf::internal::ArenaStringPtr sender_name_;
  ::google::protobuf::uint64 group_id_;
  ::google::protobuf::uint64 sender_id_;
  ::google::protobuf::uint32 team_id_;
  bool low_priority_status_;
  bool as_coach_;
  ::google::protobuf::uint64 invite_gid_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite_LobbyMember final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTALobbyInvite.LobbyMember) */ {
 public:
  CSODOTALobbyInvite_LobbyMember();
  virtual ~CSODOTALobbyInvite_LobbyMember();

  CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from);

  inline CSODOTALobbyInvite_LobbyMember& operator=(const CSODOTALobbyInvite_LobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTALobbyInvite_LobbyMember(CSODOTALobbyInvite_LobbyMember&& from) noexcept
    : CSODOTALobbyInvite_LobbyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyInvite_LobbyMember& operator=(CSODOTALobbyInvite_LobbyMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTALobbyInvite_LobbyMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTALobbyInvite_LobbyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyInvite_LobbyMember*>(
               &_CSODOTALobbyInvite_LobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CSODOTALobbyInvite_LobbyMember* other);
  friend void swap(CSODOTALobbyInvite_LobbyMember& a, CSODOTALobbyInvite_LobbyMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobbyInvite_LobbyMember* New() const final {
    return CreateMaybeMessage<CSODOTALobbyInvite_LobbyMember>(nullptr);
  }

  CSODOTALobbyInvite_LobbyMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTALobbyInvite_LobbyMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTALobbyInvite_LobbyMember& from);
  void MergeFrom(const CSODOTALobbyInvite_LobbyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobbyInvite_LobbyMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTALobbyInvite.LobbyMember)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 steam_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTALobbyInvite) */ {
 public:
  CSODOTALobbyInvite();
  virtual ~CSODOTALobbyInvite();

  CSODOTALobbyInvite(const CSODOTALobbyInvite& from);

  inline CSODOTALobbyInvite& operator=(const CSODOTALobbyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTALobbyInvite(CSODOTALobbyInvite&& from) noexcept
    : CSODOTALobbyInvite() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyInvite& operator=(CSODOTALobbyInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTALobbyInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTALobbyInvite* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyInvite*>(
               &_CSODOTALobbyInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CSODOTALobbyInvite* other);
  friend void swap(CSODOTALobbyInvite& a, CSODOTALobbyInvite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobbyInvite* New() const final {
    return CreateMaybeMessage<CSODOTALobbyInvite>(nullptr);
  }

  CSODOTALobbyInvite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTALobbyInvite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTALobbyInvite& from);
  void MergeFrom(const CSODOTALobbyInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobbyInvite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSODOTALobbyInvite_LobbyMember LobbyMember;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 4;
  ::proto::dota::CSODOTALobbyInvite_LobbyMember* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobbyInvite_LobbyMember >*
      mutable_members();
  const ::proto::dota::CSODOTALobbyInvite_LobbyMember& members(int index) const;
  ::proto::dota::CSODOTALobbyInvite_LobbyMember* add_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobbyInvite_LobbyMember >&
      members() const;

  // optional string sender_name = 3;
  bool has_sender_name() const;
  void clear_sender_name();
  static const int kSenderNameFieldNumber = 3;
  const ::std::string& sender_name() const;
  void set_sender_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_name(::std::string&& value);
  #endif
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  ::std::string* mutable_sender_name();
  ::std::string* release_sender_name();
  void set_allocated_sender_name(::std::string* sender_name);

  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 group_id() const;
  void set_group_id(::google::protobuf::uint64 value);

  // optional fixed64 sender_id = 2;
  bool has_sender_id() const;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  ::google::protobuf::uint64 sender_id() const;
  void set_sender_id(::google::protobuf::uint64 value);

  // optional uint64 custom_game_id = 5;
  bool has_custom_game_id() const;
  void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 5;
  ::google::protobuf::uint64 custom_game_id() const;
  void set_custom_game_id(::google::protobuf::uint64 value);

  // optional fixed64 invite_gid = 6;
  bool has_invite_gid() const;
  void clear_invite_gid();
  static const int kInviteGidFieldNumber = 6;
  ::google::protobuf::uint64 invite_gid() const;
  void set_invite_gid(::google::protobuf::uint64 value);

  // optional fixed64 custom_game_crc = 7;
  bool has_custom_game_crc() const;
  void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 7;
  ::google::protobuf::uint64 custom_game_crc() const;
  void set_custom_game_crc(::google::protobuf::uint64 value);

  // optional fixed32 custom_game_timestamp = 8;
  bool has_custom_game_timestamp() const;
  void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 8;
  ::google::protobuf::uint32 custom_game_timestamp() const;
  void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTALobbyInvite)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobbyInvite_LobbyMember > members_;
  ::google::protobuf::internal::ArenaStringPtr sender_name_;
  ::google::protobuf::uint64 group_id_;
  ::google::protobuf::uint64 sender_id_;
  ::google::protobuf::uint64 custom_game_id_;
  ::google::protobuf::uint64 invite_gid_;
  ::google::protobuf::uint64 custom_game_crc_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeaverState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLeaverState) */ {
 public:
  CMsgLeaverState();
  virtual ~CMsgLeaverState();

  CMsgLeaverState(const CMsgLeaverState& from);

  inline CMsgLeaverState& operator=(const CMsgLeaverState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLeaverState(CMsgLeaverState&& from) noexcept
    : CMsgLeaverState() {
    *this = ::std::move(from);
  }

  inline CMsgLeaverState& operator=(CMsgLeaverState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLeaverState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLeaverState* internal_default_instance() {
    return reinterpret_cast<const CMsgLeaverState*>(
               &_CMsgLeaverState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMsgLeaverState* other);
  friend void swap(CMsgLeaverState& a, CMsgLeaverState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLeaverState* New() const final {
    return CreateMaybeMessage<CMsgLeaverState>(nullptr);
  }

  CMsgLeaverState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLeaverState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLeaverState& from);
  void MergeFrom(const CMsgLeaverState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeaverState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lobby_state = 1;
  bool has_lobby_state() const;
  void clear_lobby_state();
  static const int kLobbyStateFieldNumber = 1;
  ::google::protobuf::uint32 lobby_state() const;
  void set_lobby_state(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 2;
  ::proto::dota::DOTA_GameState game_state() const;
  void set_game_state(::proto::dota::DOTA_GameState value);

  // optional bool leaver_detected = 3;
  bool has_leaver_detected() const;
  void clear_leaver_detected();
  static const int kLeaverDetectedFieldNumber = 3;
  bool leaver_detected() const;
  void set_leaver_detected(bool value);

  // optional bool first_blood_happened = 4;
  bool has_first_blood_happened() const;
  void clear_first_blood_happened();
  static const int kFirstBloodHappenedFieldNumber = 4;
  bool first_blood_happened() const;
  void set_first_blood_happened(bool value);

  // optional bool discard_match_results = 5;
  bool has_discard_match_results() const;
  void clear_discard_match_results();
  static const int kDiscardMatchResultsFieldNumber = 5;
  bool discard_match_results() const;
  void set_discard_match_results(bool value);

  // optional bool mass_disconnect = 6;
  bool has_mass_disconnect() const;
  void clear_mass_disconnect();
  static const int kMassDisconnectFieldNumber = 6;
  bool mass_disconnect() const;
  void set_mass_disconnect(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLeaverState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 lobby_state_;
  int game_state_;
  bool leaver_detected_;
  bool first_blood_happened_;
  bool discard_match_results_;
  bool mass_disconnect_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CDOTALobbyMember_CDOTALobbyMemberXPBonus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus) */ {
 public:
  CDOTALobbyMember_CDOTALobbyMemberXPBonus();
  virtual ~CDOTALobbyMember_CDOTALobbyMemberXPBonus();

  CDOTALobbyMember_CDOTALobbyMemberXPBonus(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);

  inline CDOTALobbyMember_CDOTALobbyMemberXPBonus& operator=(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTALobbyMember_CDOTALobbyMemberXPBonus(CDOTALobbyMember_CDOTALobbyMemberXPBonus&& from) noexcept
    : CDOTALobbyMember_CDOTALobbyMemberXPBonus() {
    *this = ::std::move(from);
  }

  inline CDOTALobbyMember_CDOTALobbyMemberXPBonus& operator=(CDOTALobbyMember_CDOTALobbyMemberXPBonus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTALobbyMember_CDOTALobbyMemberXPBonus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTALobbyMember_CDOTALobbyMemberXPBonus* internal_default_instance() {
    return reinterpret_cast<const CDOTALobbyMember_CDOTALobbyMemberXPBonus*>(
               &_CDOTALobbyMember_CDOTALobbyMemberXPBonus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other);
  friend void swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus& a, CDOTALobbyMember_CDOTALobbyMemberXPBonus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTALobbyMember_CDOTALobbyMemberXPBonus* New() const final {
    return CreateMaybeMessage<CDOTALobbyMember_CDOTALobbyMemberXPBonus>(nullptr);
  }

  CDOTALobbyMember_CDOTALobbyMemberXPBonus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTALobbyMember_CDOTALobbyMemberXPBonus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);
  void MergeFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional float xp_bonus = 2;
  bool has_xp_bonus() const;
  void clear_xp_bonus();
  static const int kXpBonusFieldNumber = 2;
  float xp_bonus() const;
  void set_xp_bonus(float value);

  // optional uint64 source_key = 3;
  bool has_source_key() const;
  void clear_source_key();
  static const int kSourceKeyFieldNumber = 3;
  ::google::protobuf::uint64 source_key() const;
  void set_source_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 type_;
  float xp_bonus_;
  ::google::protobuf::uint64 source_key_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CDOTALobbyMember final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTALobbyMember) */ {
 public:
  CDOTALobbyMember();
  virtual ~CDOTALobbyMember();

  CDOTALobbyMember(const CDOTALobbyMember& from);

  inline CDOTALobbyMember& operator=(const CDOTALobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTALobbyMember(CDOTALobbyMember&& from) noexcept
    : CDOTALobbyMember() {
    *this = ::std::move(from);
  }

  inline CDOTALobbyMember& operator=(CDOTALobbyMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTALobbyMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTALobbyMember* internal_default_instance() {
    return reinterpret_cast<const CDOTALobbyMember*>(
               &_CDOTALobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CDOTALobbyMember* other);
  friend void swap(CDOTALobbyMember& a, CDOTALobbyMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTALobbyMember* New() const final {
    return CreateMaybeMessage<CDOTALobbyMember>(nullptr);
  }

  CDOTALobbyMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTALobbyMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTALobbyMember& from);
  void MergeFrom(const CDOTALobbyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTALobbyMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTALobbyMember_CDOTALobbyMemberXPBonus CDOTALobbyMemberXPBonus;

  // accessors -------------------------------------------------------

  // repeated uint32 disabled_hero_id = 20;
  int disabled_hero_id_size() const;
  void clear_disabled_hero_id();
  static const int kDisabledHeroIdFieldNumber = 20;
  ::google::protobuf::uint32 disabled_hero_id(int index) const;
  void set_disabled_hero_id(int index, ::google::protobuf::uint32 value);
  void add_disabled_hero_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      disabled_hero_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_disabled_hero_id();

  // repeated uint32 enabled_hero_id = 22;
  int enabled_hero_id_size() const;
  void clear_enabled_hero_id();
  static const int kEnabledHeroIdFieldNumber = 22;
  ::google::protobuf::uint32 enabled_hero_id(int index) const;
  void set_enabled_hero_id(int index, ::google::protobuf::uint32 value);
  void add_enabled_hero_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      enabled_hero_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_enabled_hero_id();

  // repeated uint32 disabled_random_hero_id = 26;
  int disabled_random_hero_id_size() const;
  void clear_disabled_random_hero_id();
  static const int kDisabledRandomHeroIdFieldNumber = 26;
  ::google::protobuf::uint32 disabled_random_hero_id(int index) const;
  void set_disabled_random_hero_id(int index, ::google::protobuf::uint32 value);
  void add_disabled_random_hero_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      disabled_random_hero_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_disabled_random_hero_id();

  // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  int xp_bonuses_size() const;
  void clear_xp_bonuses();
  static const int kXpBonusesFieldNumber = 27;
  ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus* mutable_xp_bonuses(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
      mutable_xp_bonuses();
  const ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus& xp_bonuses(int index) const;
  ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus* add_xp_bonuses();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
      xp_bonuses() const;

  // repeated uint32 custom_game_product_ids = 31;
  int custom_game_product_ids_size() const;
  void clear_custom_game_product_ids();
  static const int kCustomGameProductIdsFieldNumber = 31;
  ::google::protobuf::uint32 custom_game_product_ids(int index) const;
  void set_custom_game_product_ids(int index, ::google::protobuf::uint32 value);
  void add_custom_game_product_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      custom_game_product_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_custom_game_product_ids();

  // optional string name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string pwrd_cyber_cafe_name = 25;
  bool has_pwrd_cyber_cafe_name() const;
  void clear_pwrd_cyber_cafe_name();
  static const int kPwrdCyberCafeNameFieldNumber = 25;
  const ::std::string& pwrd_cyber_cafe_name() const;
  void set_pwrd_cyber_cafe_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pwrd_cyber_cafe_name(::std::string&& value);
  #endif
  void set_pwrd_cyber_cafe_name(const char* value);
  void set_pwrd_cyber_cafe_name(const char* value, size_t size);
  ::std::string* mutable_pwrd_cyber_cafe_name();
  ::std::string* release_pwrd_cyber_cafe_name();
  void set_allocated_pwrd_cyber_cafe_name(::std::string* pwrd_cyber_cafe_name);

  // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 3;
  ::proto::dota::DOTA_GC_TEAM team() const;
  void set_team(::proto::dota::DOTA_GC_TEAM value);

  // optional uint32 slot = 7;
  bool has_slot() const;
  void clear_slot();
  static const int kSlotFieldNumber = 7;
  ::google::protobuf::uint32 slot() const;
  void set_slot(::google::protobuf::uint32 value);

  // optional uint32 meta_level = 13;
  bool has_meta_level() const;
  void clear_meta_level();
  static const int kMetaLevelFieldNumber = 13;
  ::google::protobuf::uint32 meta_level() const;
  void set_meta_level(::google::protobuf::uint32 value);

  // optional uint64 party_id = 12;
  bool has_party_id() const;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 12;
  ::google::protobuf::uint64 party_id() const;
  void set_party_id(::google::protobuf::uint64 value);

  // optional uint32 meta_xp = 14;
  bool has_meta_xp() const;
  void clear_meta_xp();
  static const int kMetaXpFieldNumber = 14;
  ::google::protobuf::uint32 meta_xp() const;
  void set_meta_xp(::google::protobuf::uint32 value);

  // optional uint32 meta_xp_awarded = 15;
  bool has_meta_xp_awarded() const;
  void clear_meta_xp_awarded();
  static const int kMetaXpAwardedFieldNumber = 15;
  ::google::protobuf::uint32 meta_xp_awarded() const;
  void set_meta_xp_awarded(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  bool has_leaver_status() const;
  void clear_leaver_status();
  static const int kLeaverStatusFieldNumber = 16;
  ::proto::dota::DOTALeaverStatus_t leaver_status() const;
  void set_leaver_status(::proto::dota::DOTALeaverStatus_t value);

  // optional uint32 channel = 17;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 17;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // optional uint32 prize_def_index = 18;
  bool has_prize_def_index() const;
  void clear_prize_def_index();
  static const int kPrizeDefIndexFieldNumber = 18;
  ::google::protobuf::uint32 prize_def_index() const;
  void set_prize_def_index(::google::protobuf::uint32 value);

  // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  bool has_partner_account_type() const;
  void clear_partner_account_type();
  static const int kPartnerAccountTypeFieldNumber = 21;
  ::proto::dota::PartnerAccountType partner_account_type() const;
  void set_partner_account_type(::proto::dota::PartnerAccountType value);

  // optional uint32 pwrd_cyber_cafe_id = 24;
  bool has_pwrd_cyber_cafe_id() const;
  void clear_pwrd_cyber_cafe_id();
  static const int kPwrdCyberCafeIdFieldNumber = 24;
  ::google::protobuf::uint32 pwrd_cyber_cafe_id() const;
  void set_pwrd_cyber_cafe_id(::google::protobuf::uint32 value);

  // optional uint32 leaver_actions = 28;
  bool has_leaver_actions() const;
  void clear_leaver_actions();
  static const int kLeaverActionsFieldNumber = 28;
  ::google::protobuf::uint32 leaver_actions() const;
  void set_leaver_actions(::google::protobuf::uint32 value);

  // optional sint32 rank_change = 29;
  bool has_rank_change() const;
  void clear_rank_change();
  static const int kRankChangeFieldNumber = 29;
  ::google::protobuf::int32 rank_change() const;
  void set_rank_change(::google::protobuf::int32 value);

  // optional uint32 lobby_mvp_vote_account_id = 32;
  bool has_lobby_mvp_vote_account_id() const;
  void clear_lobby_mvp_vote_account_id();
  static const int kLobbyMvpVoteAccountIdFieldNumber = 32;
  ::google::protobuf::uint32 lobby_mvp_vote_account_id() const;
  void set_lobby_mvp_vote_account_id(::google::protobuf::uint32 value);

  // optional uint32 lane_selection_flags = 38;
  bool has_lane_selection_flags() const;
  void clear_lane_selection_flags();
  static const int kLaneSelectionFlagsFieldNumber = 38;
  ::google::protobuf::uint32 lane_selection_flags() const;
  void set_lane_selection_flags(::google::protobuf::uint32 value);

  // optional uint64 favorite_team_packed = 35;
  bool has_favorite_team_packed() const;
  void clear_favorite_team_packed();
  static const int kFavoriteTeamPackedFieldNumber = 35;
  ::google::protobuf::uint64 favorite_team_packed() const;
  void set_favorite_team_packed(::google::protobuf::uint64 value);

  // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  bool has_search_match_type() const;
  void clear_search_match_type();
  static const int kSearchMatchTypeFieldNumber = 33;
  ::proto::dota::MatchType search_match_type() const;
  void set_search_match_type(::proto::dota::MatchType value);

  // optional bool cameraman = 30;
  bool has_cameraman() const;
  void clear_cameraman();
  static const int kCameramanFieldNumber = 30;
  bool cameraman() const;
  void set_cameraman(bool value);

  // optional bool is_plus_subscriber = 36;
  bool has_is_plus_subscriber() const;
  void clear_is_plus_subscriber();
  static const int kIsPlusSubscriberFieldNumber = 36;
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);

  // optional bool rank_tier_updated = 37;
  bool has_rank_tier_updated() const;
  void clear_rank_tier_updated();
  static const int kRankTierUpdatedFieldNumber = 37;
  bool rank_tier_updated() const;
  void set_rank_tier_updated(bool value);

  // optional bool can_earn_rewards = 39;
  bool has_can_earn_rewards() const;
  void clear_can_earn_rewards();
  static const int kCanEarnRewardsFieldNumber = 39;
  bool can_earn_rewards() const;
  void set_can_earn_rewards(bool value);

  // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  bool has_coach_team() const;
  void clear_coach_team();
  static const int kCoachTeamFieldNumber = 23;
  ::proto::dota::DOTA_GC_TEAM coach_team() const;
  void set_coach_team(::proto::dota::DOTA_GC_TEAM value);

  // optional .proto.dota.DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
  bool has_live_spectator_team() const;
  void clear_live_spectator_team();
  static const int kLiveSpectatorTeamFieldNumber = 40;
  ::proto::dota::DOTA_GC_TEAM live_spectator_team() const;
  void set_live_spectator_team(::proto::dota::DOTA_GC_TEAM value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTALobbyMember)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > disabled_hero_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > enabled_hero_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > disabled_random_hero_id_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus > xp_bonuses_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > custom_game_product_ids_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pwrd_cyber_cafe_name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 hero_id_;
  int team_;
  ::google::protobuf::uint32 slot_;
  ::google::protobuf::uint32 meta_level_;
  ::google::protobuf::uint64 party_id_;
  ::google::protobuf::uint32 meta_xp_;
  ::google::protobuf::uint32 meta_xp_awarded_;
  int leaver_status_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 prize_def_index_;
  int partner_account_type_;
  ::google::protobuf::uint32 pwrd_cyber_cafe_id_;
  ::google::protobuf::uint32 leaver_actions_;
  ::google::protobuf::int32 rank_change_;
  ::google::protobuf::uint32 lobby_mvp_vote_account_id_;
  ::google::protobuf::uint32 lane_selection_flags_;
  ::google::protobuf::uint64 favorite_team_packed_;
  int search_match_type_;
  bool cameraman_;
  bool is_plus_subscriber_;
  bool rank_tier_updated_;
  bool can_earn_rewards_;
  int coach_team_;
  int live_spectator_team_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CLobbyTeamDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CLobbyTeamDetails) */ {
 public:
  CLobbyTeamDetails();
  virtual ~CLobbyTeamDetails();

  CLobbyTeamDetails(const CLobbyTeamDetails& from);

  inline CLobbyTeamDetails& operator=(const CLobbyTeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLobbyTeamDetails(CLobbyTeamDetails&& from) noexcept
    : CLobbyTeamDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyTeamDetails& operator=(CLobbyTeamDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CLobbyTeamDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLobbyTeamDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyTeamDetails*>(
               &_CLobbyTeamDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CLobbyTeamDetails* other);
  friend void swap(CLobbyTeamDetails& a, CLobbyTeamDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLobbyTeamDetails* New() const final {
    return CreateMaybeMessage<CLobbyTeamDetails>(nullptr);
  }

  CLobbyTeamDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLobbyTeamDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLobbyTeamDetails& from);
  void MergeFrom(const CLobbyTeamDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyTeamDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name = 1;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 1;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional string team_tag = 3;
  bool has_team_tag() const;
  void clear_team_tag();
  static const int kTeamTagFieldNumber = 3;
  const ::std::string& team_tag() const;
  void set_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_team_tag(::std::string&& value);
  #endif
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  ::std::string* mutable_team_tag();
  ::std::string* release_team_tag();
  void set_allocated_team_tag(::std::string* team_tag);

  // optional string guild_name = 9;
  bool has_guild_name() const;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 9;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_name(::std::string&& value);
  #endif
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // optional string guild_tag = 10;
  bool has_guild_tag() const;
  void clear_guild_tag();
  static const int kGuildTagFieldNumber = 10;
  const ::std::string& guild_tag() const;
  void set_guild_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_guild_tag(::std::string&& value);
  #endif
  void set_guild_tag(const char* value);
  void set_guild_tag(const char* value, size_t size);
  ::std::string* mutable_guild_tag();
  ::std::string* release_guild_tag();
  void set_allocated_guild_tag(::std::string* guild_tag);

  // optional string team_logo_url = 20;
  bool has_team_logo_url() const;
  void clear_team_logo_url();
  static const int kTeamLogoUrlFieldNumber = 20;
  const ::std::string& team_logo_url() const;
  void set_team_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_team_logo_url(::std::string&& value);
  #endif
  void set_team_logo_url(const char* value);
  void set_team_logo_url(const char* value, size_t size);
  ::std::string* mutable_team_logo_url();
  ::std::string* release_team_logo_url();
  void set_allocated_team_logo_url(::std::string* team_logo_url);

  // optional uint64 team_logo = 5;
  bool has_team_logo() const;
  void clear_team_logo();
  static const int kTeamLogoFieldNumber = 5;
  ::google::protobuf::uint64 team_logo() const;
  void set_team_logo(::google::protobuf::uint64 value);

  // optional uint64 team_base_logo = 6;
  bool has_team_base_logo() const;
  void clear_team_base_logo();
  static const int kTeamBaseLogoFieldNumber = 6;
  ::google::protobuf::uint64 team_base_logo() const;
  void set_team_base_logo(::google::protobuf::uint64 value);

  // optional uint64 team_banner_logo = 7;
  bool has_team_banner_logo() const;
  void clear_team_banner_logo();
  static const int kTeamBannerLogoFieldNumber = 7;
  ::google::protobuf::uint64 team_banner_logo() const;
  void set_team_banner_logo(::google::protobuf::uint64 value);

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 guild_id = 11;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 11;
  ::google::protobuf::uint32 guild_id() const;
  void set_guild_id(::google::protobuf::uint32 value);

  // optional uint64 guild_logo = 12;
  bool has_guild_logo() const;
  void clear_guild_logo();
  static const int kGuildLogoFieldNumber = 12;
  ::google::protobuf::uint64 guild_logo() const;
  void set_guild_logo(::google::protobuf::uint64 value);

  // optional uint64 guild_base_logo = 13;
  bool has_guild_base_logo() const;
  void clear_guild_base_logo();
  static const int kGuildBaseLogoFieldNumber = 13;
  ::google::protobuf::uint64 guild_base_logo() const;
  void set_guild_base_logo(::google::protobuf::uint64 value);

  // optional uint64 guild_banner_logo = 14;
  bool has_guild_banner_logo() const;
  void clear_guild_banner_logo();
  static const int kGuildBannerLogoFieldNumber = 14;
  ::google::protobuf::uint64 guild_banner_logo() const;
  void set_guild_banner_logo(::google::protobuf::uint64 value);

  // optional bool team_complete = 8;
  bool has_team_complete() const;
  void clear_team_complete();
  static const int kTeamCompleteFieldNumber = 8;
  bool team_complete() const;
  void set_team_complete(bool value);

  // optional bool is_home_team = 17;
  bool has_is_home_team() const;
  void clear_is_home_team();
  static const int kIsHomeTeamFieldNumber = 17;
  bool is_home_team() const;
  void set_is_home_team(bool value);

  // optional bool is_challenge_match = 18;
  bool has_is_challenge_match() const;
  void clear_is_challenge_match();
  static const int kIsChallengeMatchFieldNumber = 18;
  bool is_challenge_match() const;
  void set_is_challenge_match(bool value);

  // optional uint32 rank = 15;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 15;
  ::google::protobuf::uint32 rank() const;
  void set_rank(::google::protobuf::uint32 value);

  // optional uint64 challenge_match_token_account = 19;
  bool has_challenge_match_token_account() const;
  void clear_challenge_match_token_account();
  static const int kChallengeMatchTokenAccountFieldNumber = 19;
  ::google::protobuf::uint64 challenge_match_token_account() const;
  void set_challenge_match_token_account(::google::protobuf::uint64 value);

  // optional sint32 rank_change = 16;
  bool has_rank_change() const;
  void clear_rank_change();
  static const int kRankChangeFieldNumber = 16;
  ::google::protobuf::int32 rank_change() const;
  void set_rank_change(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CLobbyTeamDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr team_tag_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  ::google::protobuf::internal::ArenaStringPtr guild_tag_;
  ::google::protobuf::internal::ArenaStringPtr team_logo_url_;
  ::google::protobuf::uint64 team_logo_;
  ::google::protobuf::uint64 team_base_logo_;
  ::google::protobuf::uint64 team_banner_logo_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint64 guild_logo_;
  ::google::protobuf::uint64 guild_base_logo_;
  ::google::protobuf::uint64 guild_banner_logo_;
  bool team_complete_;
  bool is_home_team_;
  bool is_challenge_match_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 challenge_match_token_account_;
  ::google::protobuf::int32 rank_change_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CLobbyTimedRewardDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CLobbyTimedRewardDetails) */ {
 public:
  CLobbyTimedRewardDetails();
  virtual ~CLobbyTimedRewardDetails();

  CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from);

  inline CLobbyTimedRewardDetails& operator=(const CLobbyTimedRewardDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLobbyTimedRewardDetails(CLobbyTimedRewardDetails&& from) noexcept
    : CLobbyTimedRewardDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyTimedRewardDetails& operator=(CLobbyTimedRewardDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CLobbyTimedRewardDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLobbyTimedRewardDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyTimedRewardDetails*>(
               &_CLobbyTimedRewardDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CLobbyTimedRewardDetails* other);
  friend void swap(CLobbyTimedRewardDetails& a, CLobbyTimedRewardDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLobbyTimedRewardDetails* New() const final {
    return CreateMaybeMessage<CLobbyTimedRewardDetails>(nullptr);
  }

  CLobbyTimedRewardDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLobbyTimedRewardDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLobbyTimedRewardDetails& from);
  void MergeFrom(const CLobbyTimedRewardDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyTimedRewardDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_def_index = 2;
  bool has_item_def_index() const;
  void clear_item_def_index();
  static const int kItemDefIndexFieldNumber = 2;
  ::google::protobuf::uint32 item_def_index() const;
  void set_item_def_index(::google::protobuf::uint32 value);

  // optional bool is_supply_crate = 3;
  bool has_is_supply_crate() const;
  void clear_is_supply_crate();
  static const int kIsSupplyCrateFieldNumber = 3;
  bool is_supply_crate() const;
  void set_is_supply_crate(bool value);

  // optional bool is_timed_drop = 4;
  bool has_is_timed_drop() const;
  void clear_is_timed_drop();
  static const int kIsTimedDropFieldNumber = 4;
  bool is_timed_drop() const;
  void set_is_timed_drop(bool value);

  // optional uint32 account_id = 5;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 5;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 origin = 6;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 6;
  ::google::protobuf::uint32 origin() const;
  void set_origin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CLobbyTimedRewardDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 item_def_index_;
  bool is_supply_crate_;
  bool is_timed_drop_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 origin_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CLobbyBroadcastChannelInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CLobbyBroadcastChannelInfo) */ {
 public:
  CLobbyBroadcastChannelInfo();
  virtual ~CLobbyBroadcastChannelInfo();

  CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from);

  inline CLobbyBroadcastChannelInfo& operator=(const CLobbyBroadcastChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLobbyBroadcastChannelInfo(CLobbyBroadcastChannelInfo&& from) noexcept
    : CLobbyBroadcastChannelInfo() {
    *this = ::std::move(from);
  }

  inline CLobbyBroadcastChannelInfo& operator=(CLobbyBroadcastChannelInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CLobbyBroadcastChannelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLobbyBroadcastChannelInfo* internal_default_instance() {
    return reinterpret_cast<const CLobbyBroadcastChannelInfo*>(
               &_CLobbyBroadcastChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CLobbyBroadcastChannelInfo* other);
  friend void swap(CLobbyBroadcastChannelInfo& a, CLobbyBroadcastChannelInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLobbyBroadcastChannelInfo* New() const final {
    return CreateMaybeMessage<CLobbyBroadcastChannelInfo>(nullptr);
  }

  CLobbyBroadcastChannelInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLobbyBroadcastChannelInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLobbyBroadcastChannelInfo& from);
  void MergeFrom(const CLobbyBroadcastChannelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyBroadcastChannelInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string country_code = 2;
  bool has_country_code() const;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 2;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string language_code = 4;
  bool has_language_code() const;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 4;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // optional uint32 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CLobbyBroadcastChannelInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  ::google::protobuf::uint32 channel_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobby_CExtraMsg final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTALobby.CExtraMsg) */ {
 public:
  CSODOTALobby_CExtraMsg();
  virtual ~CSODOTALobby_CExtraMsg();

  CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from);

  inline CSODOTALobby_CExtraMsg& operator=(const CSODOTALobby_CExtraMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTALobby_CExtraMsg(CSODOTALobby_CExtraMsg&& from) noexcept
    : CSODOTALobby_CExtraMsg() {
    *this = ::std::move(from);
  }

  inline CSODOTALobby_CExtraMsg& operator=(CSODOTALobby_CExtraMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTALobby_CExtraMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTALobby_CExtraMsg* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobby_CExtraMsg*>(
               &_CSODOTALobby_CExtraMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CSODOTALobby_CExtraMsg* other);
  friend void swap(CSODOTALobby_CExtraMsg& a, CSODOTALobby_CExtraMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobby_CExtraMsg* New() const final {
    return CreateMaybeMessage<CSODOTALobby_CExtraMsg>(nullptr);
  }

  CSODOTALobby_CExtraMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTALobby_CExtraMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTALobby_CExtraMsg& from);
  void MergeFrom(const CSODOTALobby_CExtraMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobby_CExtraMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes contents = 2;
  bool has_contents() const;
  void clear_contents();
  static const int kContentsFieldNumber = 2;
  const ::std::string& contents() const;
  void set_contents(const ::std::string& value);
  #if LANG_CXX11
  void set_contents(::std::string&& value);
  #endif
  void set_contents(const char* value);
  void set_contents(const void* value, size_t size);
  ::std::string* mutable_contents();
  ::std::string* release_contents();
  void set_allocated_contents(::std::string* contents);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTALobby.CExtraMsg)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr contents_;
  ::google::protobuf::uint32 id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobby final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSODOTALobby) */ {
 public:
  CSODOTALobby();
  virtual ~CSODOTALobby();

  CSODOTALobby(const CSODOTALobby& from);

  inline CSODOTALobby& operator=(const CSODOTALobby& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSODOTALobby(CSODOTALobby&& from) noexcept
    : CSODOTALobby() {
    *this = ::std::move(from);
  }

  inline CSODOTALobby& operator=(CSODOTALobby&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSODOTALobby& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSODOTALobby* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobby*>(
               &_CSODOTALobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CSODOTALobby* other);
  friend void swap(CSODOTALobby& a, CSODOTALobby& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobby* New() const final {
    return CreateMaybeMessage<CSODOTALobby>(nullptr);
  }

  CSODOTALobby* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTALobby>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSODOTALobby& from);
  void MergeFrom(const CSODOTALobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobby* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSODOTALobby_CExtraMsg CExtraMsg;

  typedef CSODOTALobby_State State;
  static const State UI =
    CSODOTALobby_State_UI;
  static const State READYUP =
    CSODOTALobby_State_READYUP;
  static const State SERVERSETUP =
    CSODOTALobby_State_SERVERSETUP;
  static const State RUN =
    CSODOTALobby_State_RUN;
  static const State POSTGAME =
    CSODOTALobby_State_POSTGAME;
  static const State NOTREADY =
    CSODOTALobby_State_NOTREADY;
  static const State SERVERASSIGN =
    CSODOTALobby_State_SERVERASSIGN;
  static inline bool State_IsValid(int value) {
    return CSODOTALobby_State_IsValid(value);
  }
  static const State State_MIN =
    CSODOTALobby_State_State_MIN;
  static const State State_MAX =
    CSODOTALobby_State_State_MAX;
  static const int State_ARRAYSIZE =
    CSODOTALobby_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return CSODOTALobby_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return CSODOTALobby_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return CSODOTALobby_State_Parse(name, value);
  }

  typedef CSODOTALobby_LobbyType LobbyType;
  static const LobbyType INVALID =
    CSODOTALobby_LobbyType_INVALID;
  static const LobbyType CASUAL_MATCH =
    CSODOTALobby_LobbyType_CASUAL_MATCH;
  static const LobbyType PRACTICE =
    CSODOTALobby_LobbyType_PRACTICE;
  static const LobbyType COOP_BOT_MATCH =
    CSODOTALobby_LobbyType_COOP_BOT_MATCH;
  static const LobbyType LEGACY_TEAM_MATCH =
    CSODOTALobby_LobbyType_LEGACY_TEAM_MATCH;
  static const LobbyType LEGACY_SOLO_QUEUE_MATCH =
    CSODOTALobby_LobbyType_LEGACY_SOLO_QUEUE_MATCH;
  static const LobbyType COMPETITIVE_MATCH =
    CSODOTALobby_LobbyType_COMPETITIVE_MATCH;
  static const LobbyType CASUAL_1V1_MATCH =
    CSODOTALobby_LobbyType_CASUAL_1V1_MATCH;
  static const LobbyType WEEKEND_TOURNEY =
    CSODOTALobby_LobbyType_WEEKEND_TOURNEY;
  static const LobbyType LOCAL_BOT_MATCH =
    CSODOTALobby_LobbyType_LOCAL_BOT_MATCH;
  static const LobbyType SPECTATOR =
    CSODOTALobby_LobbyType_SPECTATOR;
  static inline bool LobbyType_IsValid(int value) {
    return CSODOTALobby_LobbyType_IsValid(value);
  }
  static const LobbyType LobbyType_MIN =
    CSODOTALobby_LobbyType_LobbyType_MIN;
  static const LobbyType LobbyType_MAX =
    CSODOTALobby_LobbyType_LobbyType_MAX;
  static const int LobbyType_ARRAYSIZE =
    CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LobbyType_descriptor() {
    return CSODOTALobby_LobbyType_descriptor();
  }
  static inline const ::std::string& LobbyType_Name(LobbyType value) {
    return CSODOTALobby_LobbyType_Name(value);
  }
  static inline bool LobbyType_Parse(const ::std::string& name,
      LobbyType* value) {
    return CSODOTALobby_LobbyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTALobbyMember members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  ::proto::dota::CDOTALobbyMember* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >*
      mutable_members();
  const ::proto::dota::CDOTALobbyMember& members(int index) const;
  ::proto::dota::CDOTALobbyMember* add_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >&
      members() const;

  // repeated .proto.dota.CDOTALobbyMember left_members = 7;
  int left_members_size() const;
  void clear_left_members();
  static const int kLeftMembersFieldNumber = 7;
  ::proto::dota::CDOTALobbyMember* mutable_left_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >*
      mutable_left_members();
  const ::proto::dota::CDOTALobbyMember& left_members(int index) const;
  ::proto::dota::CDOTALobbyMember* add_left_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >&
      left_members() const;

  // repeated fixed64 pending_invites = 10;
  int pending_invites_size() const;
  void clear_pending_invites();
  static const int kPendingInvitesFieldNumber = 10;
  ::google::protobuf::uint64 pending_invites(int index) const;
  void set_pending_invites(int index, ::google::protobuf::uint64 value);
  void add_pending_invites(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pending_invites() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pending_invites();

  // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
  int team_details_size() const;
  void clear_team_details();
  static const int kTeamDetailsFieldNumber = 17;
  ::proto::dota::CLobbyTeamDetails* mutable_team_details(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTeamDetails >*
      mutable_team_details();
  const ::proto::dota::CLobbyTeamDetails& team_details(int index) const;
  ::proto::dota::CLobbyTeamDetails* add_team_details();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTeamDetails >&
      team_details() const;

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
  int timed_reward_details_size() const;
  void clear_timed_reward_details();
  static const int kTimedRewardDetailsFieldNumber = 38;
  ::proto::dota::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();
  const ::proto::dota::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  ::proto::dota::CLobbyTimedRewardDetails* add_timed_reward_details();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >&
      timed_reward_details() const;

  // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  int broadcast_channel_info_size() const;
  void clear_broadcast_channel_info();
  static const int kBroadcastChannelInfoFieldNumber = 58;
  ::proto::dota::CLobbyBroadcastChannelInfo* mutable_broadcast_channel_info(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyBroadcastChannelInfo >*
      mutable_broadcast_channel_info();
  const ::proto::dota::CLobbyBroadcastChannelInfo& broadcast_channel_info(int index) const;
  ::proto::dota::CLobbyBroadcastChannelInfo* add_broadcast_channel_info();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyBroadcastChannelInfo >&
      broadcast_channel_info() const;

  // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
  int extra_messages_size() const;
  void clear_extra_messages();
  static const int kExtraMessagesFieldNumber = 62;
  ::proto::dota::CSODOTALobby_CExtraMsg* mutable_extra_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobby_CExtraMsg >*
      mutable_extra_messages();
  const ::proto::dota::CSODOTALobby_CExtraMsg& extra_messages(int index) const;
  ::proto::dota::CSODOTALobby_CExtraMsg* add_extra_messages();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobby_CExtraMsg >&
      extra_messages() const;

  // repeated uint64 previous_series_matches = 81;
  int previous_series_matches_size() const;
  void clear_previous_series_matches();
  static const int kPreviousSeriesMatchesFieldNumber = 81;
  ::google::protobuf::uint64 previous_series_matches(int index) const;
  void set_previous_series_matches(int index, ::google::protobuf::uint64 value);
  void add_previous_series_matches(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      previous_series_matches() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_previous_series_matches();

  // repeated .proto.dota.EEvent event_progression_enabled = 96;
  int event_progression_enabled_size() const;
  void clear_event_progression_enabled();
  static const int kEventProgressionEnabledFieldNumber = 96;
  ::proto::dota::EEvent event_progression_enabled(int index) const;
  void set_event_progression_enabled(int index, ::proto::dota::EEvent value);
  void add_event_progression_enabled(::proto::dota::EEvent value);
  const ::google::protobuf::RepeatedField<int>& event_progression_enabled() const;
  ::google::protobuf::RepeatedField<int>* mutable_event_progression_enabled();

  // repeated uint32 emergency_disabled_hero_ids = 105;
  int emergency_disabled_hero_ids_size() const;
  void clear_emergency_disabled_hero_ids();
  static const int kEmergencyDisabledHeroIdsFieldNumber = 105;
  ::google::protobuf::uint32 emergency_disabled_hero_ids(int index) const;
  void set_emergency_disabled_hero_ids(int index, ::google::protobuf::uint32 value);
  void add_emergency_disabled_hero_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      emergency_disabled_hero_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_emergency_disabled_hero_ids();

  // repeated uint32 mutations = 108;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 108;
  ::google::protobuf::uint32 mutations(int index) const;
  void set_mutations(int index, ::google::protobuf::uint32 value);
  void add_mutations(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mutations() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mutations();

  // optional string connect = 5;
  bool has_connect() const;
  void clear_connect();
  static const int kConnectFieldNumber = 5;
  const ::std::string& connect() const;
  void set_connect(const ::std::string& value);
  #if LANG_CXX11
  void set_connect(::std::string&& value);
  #endif
  void set_connect(const char* value);
  void set_connect(const char* value, size_t size);
  ::std::string* mutable_connect();
  ::std::string* release_connect();
  void set_allocated_connect(::std::string* connect);

  // optional string game_name = 16;
  bool has_game_name() const;
  void clear_game_name();
  static const int kGameNameFieldNumber = 16;
  const ::std::string& game_name() const;
  void set_game_name(const ::std::string& value);
  #if LANG_CXX11
  void set_game_name(::std::string&& value);
  #endif
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  ::std::string* mutable_game_name();
  ::std::string* release_game_name();
  void set_allocated_game_name(::std::string* game_name);

  // optional string pass_key = 39;
  bool has_pass_key() const;
  void clear_pass_key();
  static const int kPassKeyFieldNumber = 39;
  const ::std::string& pass_key() const;
  void set_pass_key(const ::std::string& value);
  #if LANG_CXX11
  void set_pass_key(::std::string&& value);
  #endif
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  ::std::string* mutable_pass_key();
  ::std::string* release_pass_key();
  void set_allocated_pass_key(::std::string* pass_key);

  // optional string custom_game_mode = 54;
  bool has_custom_game_mode() const;
  void clear_custom_game_mode();
  static const int kCustomGameModeFieldNumber = 54;
  const ::std::string& custom_game_mode() const;
  void set_custom_game_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_game_mode(::std::string&& value);
  #endif
  void set_custom_game_mode(const char* value);
  void set_custom_game_mode(const char* value, size_t size);
  ::std::string* mutable_custom_game_mode();
  ::std::string* release_custom_game_mode();
  void set_allocated_custom_game_mode(::std::string* custom_game_mode);

  // optional string custom_map_name = 55;
  bool has_custom_map_name() const;
  void clear_custom_map_name();
  static const int kCustomMapNameFieldNumber = 55;
  const ::std::string& custom_map_name() const;
  void set_custom_map_name(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_map_name(::std::string&& value);
  #endif
  void set_custom_map_name(const char* value);
  void set_custom_map_name(const char* value, size_t size);
  ::std::string* mutable_custom_map_name();
  ::std::string* release_custom_map_name();
  void set_allocated_custom_map_name(::std::string* custom_map_name);

  // optional string lan_host_ping_location = 109;
  bool has_lan_host_ping_location() const;
  void clear_lan_host_ping_location();
  static const int kLanHostPingLocationFieldNumber = 109;
  const ::std::string& lan_host_ping_location() const;
  void set_lan_host_ping_location(const ::std::string& value);
  #if LANG_CXX11
  void set_lan_host_ping_location(::std::string&& value);
  #endif
  void set_lan_host_ping_location(const char* value);
  void set_lan_host_ping_location(const char* value, size_t size);
  ::std::string* mutable_lan_host_ping_location();
  ::std::string* release_lan_host_ping_location();
  void set_allocated_lan_host_ping_location(::std::string* lan_host_ping_location);

  // optional .proto.dota.CDOTASaveGame save_game = 63;
  bool has_save_game() const;
  void clear_save_game();
  static const int kSaveGameFieldNumber = 63;
  const ::proto::dota::CDOTASaveGame& save_game() const;
  ::proto::dota::CDOTASaveGame* release_save_game();
  ::proto::dota::CDOTASaveGame* mutable_save_game();
  void set_allocated_save_game(::proto::dota::CDOTASaveGame* save_game);

  // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 1;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 game_mode = 3;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 3;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::proto::dota::CSODOTALobby_State state() const;
  void set_state(::proto::dota::CSODOTALobby_State value);

  // optional fixed64 server_id = 6 [default = 0];
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 6;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // optional fixed64 leader_id = 11;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 11;
  ::google::protobuf::uint64 leader_id() const;
  void set_leader_id(::google::protobuf::uint64 value);

  // optional uint32 tutorial_lesson = 18;
  bool has_tutorial_lesson() const;
  void clear_tutorial_lesson();
  static const int kTutorialLessonFieldNumber = 18;
  ::google::protobuf::uint32 tutorial_lesson() const;
  void set_tutorial_lesson(::google::protobuf::uint32 value);

  // optional uint32 tournament_id = 19;
  bool has_tournament_id() const;
  void clear_tournament_id();
  static const int kTournamentIdFieldNumber = 19;
  ::google::protobuf::uint32 tournament_id() const;
  void set_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 tournament_game_id = 20;
  bool has_tournament_game_id() const;
  void clear_tournament_game_id();
  static const int kTournamentGameIdFieldNumber = 20;
  ::google::protobuf::uint32 tournament_game_id() const;
  void set_tournament_game_id(::google::protobuf::uint32 value);

  // optional uint32 server_region = 21 [default = 0];
  bool has_server_region() const;
  void clear_server_region();
  static const int kServerRegionFieldNumber = 21;
  ::google::protobuf::uint32 server_region() const;
  void set_server_region(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 22;
  ::proto::dota::DOTA_GameState game_state() const;
  void set_game_state(::proto::dota::DOTA_GameState value);

  // optional uint32 num_spectators = 23;
  bool has_num_spectators() const;
  void clear_num_spectators();
  static const int kNumSpectatorsFieldNumber = 23;
  ::google::protobuf::uint32 num_spectators() const;
  void set_num_spectators(::google::protobuf::uint32 value);

  // optional bool allow_cheats = 13;
  bool has_allow_cheats() const;
  void clear_allow_cheats();
  static const int kAllowCheatsFieldNumber = 13;
  bool allow_cheats() const;
  void set_allow_cheats(bool value);

  // optional bool fill_with_bots = 14;
  bool has_fill_with_bots() const;
  void clear_fill_with_bots();
  static const int kFillWithBotsFieldNumber = 14;
  bool fill_with_bots() const;
  void set_fill_with_bots(bool value);

  // optional bool intro_mode = 15;
  bool has_intro_mode() const;
  void clear_intro_mode();
  static const int kIntroModeFieldNumber = 15;
  bool intro_mode() const;
  void set_intro_mode(bool value);

  // optional bool allchat = 51 [default = false];
  bool has_allchat() const;
  void clear_allchat();
  static const int kAllchatFieldNumber = 51;
  bool allchat() const;
  void set_allchat(bool value);

  // optional uint32 matchgroup = 25;
  bool has_matchgroup() const;
  void clear_matchgroup();
  static const int kMatchgroupFieldNumber = 25;
  ::google::protobuf::uint32 matchgroup() const;
  void set_matchgroup(::google::protobuf::uint32 value);

  // optional uint64 match_id = 30;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 30;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  bool has_cm_pick() const;
  void clear_cm_pick();
  static const int kCmPickFieldNumber = 28;
  ::proto::dota::DOTA_CM_PICK cm_pick() const;
  void set_cm_pick(::proto::dota::DOTA_CM_PICK value);

  // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  bool has_game_version() const;
  void clear_game_version();
  static const int kGameVersionFieldNumber = 37;
  ::proto::dota::DOTAGameVersion game_version() const;
  void set_game_version(::proto::dota::DOTAGameVersion value);

  // optional uint32 leagueid = 42;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 42;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  bool has_penalty_level_radiant() const;
  void clear_penalty_level_radiant();
  static const int kPenaltyLevelRadiantFieldNumber = 43;
  ::google::protobuf::uint32 penalty_level_radiant() const;
  void set_penalty_level_radiant(::google::protobuf::uint32 value);

  // optional uint32 penalty_level_dire = 44 [default = 0];
  bool has_penalty_level_dire() const;
  void clear_penalty_level_dire();
  static const int kPenaltyLevelDireFieldNumber = 44;
  ::google::protobuf::uint32 penalty_level_dire() const;
  void set_penalty_level_dire(::google::protobuf::uint32 value);

  // optional uint32 load_game_id = 45;
  bool has_load_game_id() const;
  void clear_load_game_id();
  static const int kLoadGameIdFieldNumber = 45;
  ::google::protobuf::uint32 load_game_id() const;
  void set_load_game_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 46;
  bool has_series_type() const;
  void clear_series_type();
  static const int kSeriesTypeFieldNumber = 46;
  ::google::protobuf::uint32 series_type() const;
  void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 radiant_series_wins = 47;
  bool has_radiant_series_wins() const;
  void clear_radiant_series_wins();
  static const int kRadiantSeriesWinsFieldNumber = 47;
  ::google::protobuf::uint32 radiant_series_wins() const;
  void set_radiant_series_wins(::google::protobuf::uint32 value);

  // optional uint32 dire_series_wins = 48;
  bool has_dire_series_wins() const;
  void clear_dire_series_wins();
  static const int kDireSeriesWinsFieldNumber = 48;
  ::google::protobuf::uint32 dire_series_wins() const;
  void set_dire_series_wins(::google::protobuf::uint32 value);

  // optional uint32 loot_generated = 49;
  bool has_loot_generated() const;
  void clear_loot_generated();
  static const int kLootGeneratedFieldNumber = 49;
  ::google::protobuf::uint32 loot_generated() const;
  void set_loot_generated(::google::protobuf::uint32 value);

  // optional uint32 loot_awarded = 50;
  bool has_loot_awarded() const;
  void clear_loot_awarded();
  static const int kLootAwardedFieldNumber = 50;
  ::google::protobuf::uint32 loot_awarded() const;
  void set_loot_awarded(::google::protobuf::uint32 value);

  // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  bool has_dota_tv_delay() const;
  void clear_dota_tv_delay();
  static const int kDotaTvDelayFieldNumber = 53;
  ::proto::dota::LobbyDotaTVDelay dota_tv_delay() const;
  void set_dota_tv_delay(::proto::dota::LobbyDotaTVDelay value);

  // optional uint32 custom_difficulty = 56;
  bool has_custom_difficulty() const;
  void clear_custom_difficulty();
  static const int kCustomDifficultyFieldNumber = 56;
  ::google::protobuf::uint32 custom_difficulty() const;
  void set_custom_difficulty(::google::protobuf::uint32 value);

  // optional uint32 first_leaver_accountid = 59;
  bool has_first_leaver_accountid() const;
  void clear_first_leaver_accountid();
  static const int kFirstLeaverAccountidFieldNumber = 59;
  ::google::protobuf::uint32 first_leaver_accountid() const;
  void set_first_leaver_accountid(::google::protobuf::uint32 value);

  // optional uint32 series_id = 60;
  bool has_series_id() const;
  void clear_series_id();
  static const int kSeriesIdFieldNumber = 60;
  ::google::protobuf::uint32 series_id() const;
  void set_series_id(::google::protobuf::uint32 value);

  // optional bool lan = 57;
  bool has_lan() const;
  void clear_lan();
  static const int kLanFieldNumber = 57;
  bool lan() const;
  void set_lan(bool value);

  // optional bool low_priority = 61;
  bool has_low_priority() const;
  void clear_low_priority();
  static const int kLowPriorityFieldNumber = 61;
  bool low_priority() const;
  void set_low_priority(bool value);

  // optional bool first_blood_happened = 65;
  bool has_first_blood_happened() const;
  void clear_first_blood_happened();
  static const int kFirstBloodHappenedFieldNumber = 65;
  bool first_blood_happened() const;
  void set_first_blood_happened(bool value);

  // optional bool mass_disconnect = 67;
  bool has_mass_disconnect() const;
  void clear_mass_disconnect();
  static const int kMassDisconnectFieldNumber = 67;
  bool mass_disconnect() const;
  void set_mass_disconnect(bool value);

  // optional uint64 custom_game_id = 68;
  bool has_custom_game_id() const;
  void clear_custom_game_id();
  static const int kCustomGameIdFieldNumber = 68;
  ::google::protobuf::uint64 custom_game_id() const;
  void set_custom_game_id(::google::protobuf::uint64 value);

  // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  void clear_match_outcome();
  static const int kMatchOutcomeFieldNumber = 70;
  ::proto::dota::EMatchOutcome match_outcome() const;
  void set_match_outcome(::proto::dota::EMatchOutcome value);

  // optional uint32 custom_min_players = 71;
  bool has_custom_min_players() const;
  void clear_custom_min_players();
  static const int kCustomMinPlayersFieldNumber = 71;
  ::google::protobuf::uint32 custom_min_players() const;
  void set_custom_min_players(::google::protobuf::uint32 value);

  // optional uint32 custom_max_players = 72;
  bool has_custom_max_players() const;
  void clear_custom_max_players();
  static const int kCustomMaxPlayersFieldNumber = 72;
  ::google::protobuf::uint32 custom_max_players() const;
  void set_custom_max_players(::google::protobuf::uint32 value);

  // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  bool has_partner_type() const;
  void clear_partner_type();
  static const int kPartnerTypeFieldNumber = 73;
  ::proto::dota::PartnerAccountType partner_type() const;
  void set_partner_type(::proto::dota::PartnerAccountType value);

  // optional fixed64 custom_game_crc = 76;
  bool has_custom_game_crc() const;
  void clear_custom_game_crc();
  static const int kCustomGameCrcFieldNumber = 76;
  ::google::protobuf::uint64 custom_game_crc() const;
  void set_custom_game_crc(::google::protobuf::uint64 value);

  // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  bool has_visibility() const;
  void clear_visibility();
  static const int kVisibilityFieldNumber = 75;
  ::proto::dota::DOTALobbyVisibility visibility() const;
  void set_visibility(::proto::dota::DOTALobbyVisibility value);

  // optional fixed32 custom_game_timestamp = 80;
  bool has_custom_game_timestamp() const;
  void clear_custom_game_timestamp();
  static const int kCustomGameTimestampFieldNumber = 80;
  ::google::protobuf::uint32 custom_game_timestamp() const;
  void set_custom_game_timestamp(::google::protobuf::uint32 value);

  // optional uint64 previous_match_override = 82;
  bool has_previous_match_override() const;
  void clear_previous_match_override();
  static const int kPreviousMatchOverrideFieldNumber = 82;
  ::google::protobuf::uint64 previous_match_override() const;
  void set_previous_match_override(::google::protobuf::uint64 value);

  // optional uint32 game_start_time = 87;
  bool has_game_start_time() const;
  void clear_game_start_time();
  static const int kGameStartTimeFieldNumber = 87;
  ::google::protobuf::uint32 game_start_time() const;
  void set_game_start_time(::google::protobuf::uint32 value);

  // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  bool has_pause_setting() const;
  void clear_pause_setting();
  static const int kPauseSettingFieldNumber = 88;
  ::proto::dota::LobbyDotaPauseSetting pause_setting() const;
  void set_pause_setting(::proto::dota::LobbyDotaPauseSetting value);

  // optional uint32 lobby_mvp_account_id = 89;
  bool has_lobby_mvp_account_id() const;
  void clear_lobby_mvp_account_id();
  static const int kLobbyMvpAccountIdFieldNumber = 89;
  ::google::protobuf::uint32 lobby_mvp_account_id() const;
  void set_lobby_mvp_account_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_division_id = 90;
  bool has_weekend_tourney_division_id() const;
  void clear_weekend_tourney_division_id();
  static const int kWeekendTourneyDivisionIdFieldNumber = 90;
  ::google::protobuf::uint32 weekend_tourney_division_id() const;
  void set_weekend_tourney_division_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_skill_level = 91;
  bool has_weekend_tourney_skill_level() const;
  void clear_weekend_tourney_skill_level();
  static const int kWeekendTourneySkillLevelFieldNumber = 91;
  ::google::protobuf::uint32 weekend_tourney_skill_level() const;
  void set_weekend_tourney_skill_level(::google::protobuf::uint32 value);

  // optional bool custom_game_auto_created_lobby = 77;
  bool has_custom_game_auto_created_lobby() const;
  void clear_custom_game_auto_created_lobby();
  static const int kCustomGameAutoCreatedLobbyFieldNumber = 77;
  bool custom_game_auto_created_lobby() const;
  void set_custom_game_auto_created_lobby(bool value);

  // optional bool custom_game_uses_account_records = 83;
  bool has_custom_game_uses_account_records() const;
  void clear_custom_game_uses_account_records();
  static const int kCustomGameUsesAccountRecordsFieldNumber = 83;
  bool custom_game_uses_account_records() const;
  void set_custom_game_uses_account_records(bool value);

  // optional bool series_current_selection_priority_used_coin_toss = 102;
  bool has_series_current_selection_priority_used_coin_toss() const;
  void clear_series_current_selection_priority_used_coin_toss();
  static const int kSeriesCurrentSelectionPriorityUsedCoinTossFieldNumber = 102;
  bool series_current_selection_priority_used_coin_toss() const;
  void set_series_current_selection_priority_used_coin_toss(bool value);

  // optional bool lowpri_deprecated = 104;
  bool has_lowpri_deprecated() const;
  void clear_lowpri_deprecated();
  static const int kLowpriDeprecatedFieldNumber = 104;
  bool lowpri_deprecated() const;
  void set_lowpri_deprecated(bool value);

  // optional uint64 bot_radiant = 94;
  bool has_bot_radiant() const;
  void clear_bot_radiant();
  static const int kBotRadiantFieldNumber = 94;
  ::google::protobuf::uint64 bot_radiant() const;
  void set_bot_radiant(::google::protobuf::uint64 value);

  // optional uint32 weekend_tourney_bracket_round = 92;
  bool has_weekend_tourney_bracket_round() const;
  void clear_weekend_tourney_bracket_round();
  static const int kWeekendTourneyBracketRoundFieldNumber = 92;
  ::google::protobuf::uint32 weekend_tourney_bracket_round() const;
  void set_weekend_tourney_bracket_round(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
  bool has_selection_priority_rules() const;
  void clear_selection_priority_rules();
  static const int kSelectionPriorityRulesFieldNumber = 97;
  ::proto::dota::DOTASelectionPriorityRules selection_priority_rules() const;
  void set_selection_priority_rules(::proto::dota::DOTASelectionPriorityRules value);

  // optional uint64 bot_dire = 95;
  bool has_bot_dire() const;
  void clear_bot_dire();
  static const int kBotDireFieldNumber = 95;
  ::google::protobuf::uint64 bot_dire() const;
  void set_bot_dire(::google::protobuf::uint64 value);

  // optional uint32 series_previous_selection_priority_team_id = 98;
  bool has_series_previous_selection_priority_team_id() const;
  void clear_series_previous_selection_priority_team_id();
  static const int kSeriesPreviousSelectionPriorityTeamIdFieldNumber = 98;
  ::google::protobuf::uint32 series_previous_selection_priority_team_id() const;
  void set_series_previous_selection_priority_team_id(::google::protobuf::uint32 value);

  // optional uint32 series_current_selection_priority_team_id = 99;
  bool has_series_current_selection_priority_team_id() const;
  void clear_series_current_selection_priority_team_id();
  static const int kSeriesCurrentSelectionPriorityTeamIdFieldNumber = 99;
  ::google::protobuf::uint32 series_current_selection_priority_team_id() const;
  void set_series_current_selection_priority_team_id(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
  bool has_series_current_priority_team_choice() const;
  void clear_series_current_priority_team_choice();
  static const int kSeriesCurrentPriorityTeamChoiceFieldNumber = 100;
  ::proto::dota::DOTASelectionPriorityChoice series_current_priority_team_choice() const;
  void set_series_current_priority_team_choice(::proto::dota::DOTASelectionPriorityChoice value);

  // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
  bool has_series_current_non_priority_team_choice() const;
  void clear_series_current_non_priority_team_choice();
  static const int kSeriesCurrentNonPriorityTeamChoiceFieldNumber = 101;
  ::proto::dota::DOTASelectionPriorityChoice series_current_non_priority_team_choice() const;
  void set_series_current_non_priority_team_choice(::proto::dota::DOTASelectionPriorityChoice value);

  // optional .proto.dota.EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
  bool has_current_primary_event() const;
  void clear_current_primary_event();
  static const int kCurrentPrimaryEventFieldNumber = 103;
  ::proto::dota::EEvent current_primary_event() const;
  void set_current_primary_event(::proto::dota::EEvent value);

  // optional bool custom_game_penalties = 107;
  bool has_custom_game_penalties() const;
  void clear_custom_game_penalties();
  static const int kCustomGamePenaltiesFieldNumber = 107;
  bool custom_game_penalties() const;
  void set_custom_game_penalties(bool value);

  // optional fixed64 custom_game_private_key = 106;
  bool has_custom_game_private_key() const;
  void clear_custom_game_private_key();
  static const int kCustomGamePrivateKeyFieldNumber = 106;
  ::google::protobuf::uint64 custom_game_private_key() const;
  void set_custom_game_private_key(::google::protobuf::uint64 value);

  // optional uint32 league_node_id = 110;
  bool has_league_node_id() const;
  void clear_league_node_id();
  static const int kLeagueNodeIdFieldNumber = 110;
  ::google::protobuf::uint32 league_node_id() const;
  void set_league_node_id(::google::protobuf::uint32 value);

  // optional uint32 match_duration = 111;
  bool has_match_duration() const;
  void clear_match_duration();
  static const int kMatchDurationFieldNumber = 111;
  ::google::protobuf::uint32 match_duration() const;
  void set_match_duration(::google::protobuf::uint32 value);

  // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  bool has_lobby_type() const;
  void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 12;
  ::proto::dota::CSODOTALobby_LobbyType lobby_type() const;
  void set_lobby_type(::proto::dota::CSODOTALobby_LobbyType value);

  // optional bool allow_spectating = 31 [default = true];
  bool has_allow_spectating() const;
  void clear_allow_spectating();
  static const int kAllowSpectatingFieldNumber = 31;
  bool allow_spectating() const;
  void set_allow_spectating(bool value);

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  bool has_bot_difficulty_radiant() const;
  void clear_bot_difficulty_radiant();
  static const int kBotDifficultyRadiantFieldNumber = 36;
  ::proto::dota::DOTABotDifficulty bot_difficulty_radiant() const;
  void set_bot_difficulty_radiant(::proto::dota::DOTABotDifficulty value);

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  bool has_bot_difficulty_dire() const;
  void clear_bot_difficulty_dire();
  static const int kBotDifficultyDireFieldNumber = 93;
  ::proto::dota::DOTABotDifficulty bot_difficulty_dire() const;
  void set_bot_difficulty_dire(::proto::dota::DOTABotDifficulty value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSODOTALobby)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember > members_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember > left_members_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pending_invites_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTeamDetails > team_details_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails > timed_reward_details_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyBroadcastChannelInfo > broadcast_channel_info_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobby_CExtraMsg > extra_messages_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > previous_series_matches_;
  ::google::protobuf::RepeatedField<int> event_progression_enabled_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > emergency_disabled_hero_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mutations_;
  ::google::protobuf::internal::ArenaStringPtr connect_;
  ::google::protobuf::internal::ArenaStringPtr game_name_;
  ::google::protobuf::internal::ArenaStringPtr pass_key_;
  ::google::protobuf::internal::ArenaStringPtr custom_game_mode_;
  ::google::protobuf::internal::ArenaStringPtr custom_map_name_;
  ::google::protobuf::internal::ArenaStringPtr lan_host_ping_location_;
  ::proto::dota::CDOTASaveGame* save_game_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 game_mode_;
  int state_;
  ::google::protobuf::uint64 server_id_;
  ::google::protobuf::uint64 leader_id_;
  ::google::protobuf::uint32 tutorial_lesson_;
  ::google::protobuf::uint32 tournament_id_;
  ::google::protobuf::uint32 tournament_game_id_;
  ::google::protobuf::uint32 server_region_;
  int game_state_;
  ::google::protobuf::uint32 num_spectators_;
  bool allow_cheats_;
  bool fill_with_bots_;
  bool intro_mode_;
  bool allchat_;
  ::google::protobuf::uint32 matchgroup_;
  ::google::protobuf::uint64 match_id_;
  int cm_pick_;
  int game_version_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint32 penalty_level_radiant_;
  ::google::protobuf::uint32 penalty_level_dire_;
  ::google::protobuf::uint32 load_game_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 radiant_series_wins_;
  ::google::protobuf::uint32 dire_series_wins_;
  ::google::protobuf::uint32 loot_generated_;
  ::google::protobuf::uint32 loot_awarded_;
  int dota_tv_delay_;
  ::google::protobuf::uint32 custom_difficulty_;
  ::google::protobuf::uint32 first_leaver_accountid_;
  ::google::protobuf::uint32 series_id_;
  bool lan_;
  bool low_priority_;
  bool first_blood_happened_;
  bool mass_disconnect_;
  ::google::protobuf::uint64 custom_game_id_;
  int match_outcome_;
  ::google::protobuf::uint32 custom_min_players_;
  ::google::protobuf::uint32 custom_max_players_;
  int partner_type_;
  ::google::protobuf::uint64 custom_game_crc_;
  int visibility_;
  ::google::protobuf::uint32 custom_game_timestamp_;
  ::google::protobuf::uint64 previous_match_override_;
  ::google::protobuf::uint32 game_start_time_;
  int pause_setting_;
  ::google::protobuf::uint32 lobby_mvp_account_id_;
  ::google::protobuf::uint32 weekend_tourney_division_id_;
  ::google::protobuf::uint32 weekend_tourney_skill_level_;
  bool custom_game_auto_created_lobby_;
  bool custom_game_uses_account_records_;
  bool series_current_selection_priority_used_coin_toss_;
  bool lowpri_deprecated_;
  ::google::protobuf::uint64 bot_radiant_;
  ::google::protobuf::uint32 weekend_tourney_bracket_round_;
  int selection_priority_rules_;
  ::google::protobuf::uint64 bot_dire_;
  ::google::protobuf::uint32 series_previous_selection_priority_team_id_;
  ::google::protobuf::uint32 series_current_selection_priority_team_id_;
  int series_current_priority_team_choice_;
  int series_current_non_priority_team_choice_;
  int current_primary_event_;
  bool custom_game_penalties_;
  ::google::protobuf::uint64 custom_game_private_key_;
  ::google::protobuf::uint32 league_node_id_;
  ::google::protobuf::uint32 match_duration_;
  int lobby_type_;
  bool allow_spectating_;
  int bot_difficulty_radiant_;
  int bot_difficulty_dire_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyPlaytestDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLobbyPlaytestDetails) */ {
 public:
  CMsgLobbyPlaytestDetails();
  virtual ~CMsgLobbyPlaytestDetails();

  CMsgLobbyPlaytestDetails(const CMsgLobbyPlaytestDetails& from);

  inline CMsgLobbyPlaytestDetails& operator=(const CMsgLobbyPlaytestDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLobbyPlaytestDetails(CMsgLobbyPlaytestDetails&& from) noexcept
    : CMsgLobbyPlaytestDetails() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyPlaytestDetails& operator=(CMsgLobbyPlaytestDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLobbyPlaytestDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLobbyPlaytestDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyPlaytestDetails*>(
               &_CMsgLobbyPlaytestDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CMsgLobbyPlaytestDetails* other);
  friend void swap(CMsgLobbyPlaytestDetails& a, CMsgLobbyPlaytestDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyPlaytestDetails* New() const final {
    return CreateMaybeMessage<CMsgLobbyPlaytestDetails>(nullptr);
  }

  CMsgLobbyPlaytestDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyPlaytestDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLobbyPlaytestDetails& from);
  void MergeFrom(const CMsgLobbyPlaytestDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyPlaytestDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string json = 1;
  bool has_json() const;
  void clear_json();
  static const int kJsonFieldNumber = 1;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLobbyPlaytestDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr json_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgReadyCheckStatus_ReadyMember final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgReadyCheckStatus.ReadyMember) */ {
 public:
  CMsgReadyCheckStatus_ReadyMember();
  virtual ~CMsgReadyCheckStatus_ReadyMember();

  CMsgReadyCheckStatus_ReadyMember(const CMsgReadyCheckStatus_ReadyMember& from);

  inline CMsgReadyCheckStatus_ReadyMember& operator=(const CMsgReadyCheckStatus_ReadyMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgReadyCheckStatus_ReadyMember(CMsgReadyCheckStatus_ReadyMember&& from) noexcept
    : CMsgReadyCheckStatus_ReadyMember() {
    *this = ::std::move(from);
  }

  inline CMsgReadyCheckStatus_ReadyMember& operator=(CMsgReadyCheckStatus_ReadyMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgReadyCheckStatus_ReadyMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgReadyCheckStatus_ReadyMember* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyCheckStatus_ReadyMember*>(
               &_CMsgReadyCheckStatus_ReadyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CMsgReadyCheckStatus_ReadyMember* other);
  friend void swap(CMsgReadyCheckStatus_ReadyMember& a, CMsgReadyCheckStatus_ReadyMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgReadyCheckStatus_ReadyMember* New() const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus_ReadyMember>(nullptr);
  }

  CMsgReadyCheckStatus_ReadyMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus_ReadyMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgReadyCheckStatus_ReadyMember& from);
  void MergeFrom(const CMsgReadyCheckStatus_ReadyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReadyCheckStatus_ReadyMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional .proto.dota.EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
  bool has_ready_status() const;
  void clear_ready_status();
  static const int kReadyStatusFieldNumber = 2;
  ::proto::dota::EReadyCheckStatus ready_status() const;
  void set_ready_status(::proto::dota::EReadyCheckStatus value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgReadyCheckStatus.ReadyMember)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 account_id_;
  int ready_status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgReadyCheckStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgReadyCheckStatus) */ {
 public:
  CMsgReadyCheckStatus();
  virtual ~CMsgReadyCheckStatus();

  CMsgReadyCheckStatus(const CMsgReadyCheckStatus& from);

  inline CMsgReadyCheckStatus& operator=(const CMsgReadyCheckStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgReadyCheckStatus(CMsgReadyCheckStatus&& from) noexcept
    : CMsgReadyCheckStatus() {
    *this = ::std::move(from);
  }

  inline CMsgReadyCheckStatus& operator=(CMsgReadyCheckStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgReadyCheckStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgReadyCheckStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyCheckStatus*>(
               &_CMsgReadyCheckStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CMsgReadyCheckStatus* other);
  friend void swap(CMsgReadyCheckStatus& a, CMsgReadyCheckStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgReadyCheckStatus* New() const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus>(nullptr);
  }

  CMsgReadyCheckStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgReadyCheckStatus& from);
  void MergeFrom(const CMsgReadyCheckStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReadyCheckStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgReadyCheckStatus_ReadyMember ReadyMember;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  int ready_members_size() const;
  void clear_ready_members();
  static const int kReadyMembersFieldNumber = 4;
  ::proto::dota::CMsgReadyCheckStatus_ReadyMember* mutable_ready_members(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgReadyCheckStatus_ReadyMember >*
      mutable_ready_members();
  const ::proto::dota::CMsgReadyCheckStatus_ReadyMember& ready_members(int index) const;
  ::proto::dota::CMsgReadyCheckStatus_ReadyMember* add_ready_members();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgReadyCheckStatus_ReadyMember >&
      ready_members() const;

  // optional uint32 start_timestamp = 1;
  bool has_start_timestamp() const;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 1;
  ::google::protobuf::uint32 start_timestamp() const;
  void set_start_timestamp(::google::protobuf::uint32 value);

  // optional uint32 finish_timestamp = 2;
  bool has_finish_timestamp() const;
  void clear_finish_timestamp();
  static const int kFinishTimestampFieldNumber = 2;
  ::google::protobuf::uint32 finish_timestamp() const;
  void set_finish_timestamp(::google::protobuf::uint32 value);

  // optional uint32 initiator_account_id = 3;
  bool has_initiator_account_id() const;
  void clear_initiator_account_id();
  static const int kInitiatorAccountIdFieldNumber = 3;
  ::google::protobuf::uint32 initiator_account_id() const;
  void set_initiator_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgReadyCheckStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgReadyCheckStatus_ReadyMember > ready_members_;
  ::google::protobuf::uint32 start_timestamp_;
  ::google::protobuf::uint32 finish_timestamp_;
  ::google::protobuf::uint32 initiator_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyReadyCheckRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgPartyReadyCheckRequest) */ {
 public:
  CMsgPartyReadyCheckRequest();
  virtual ~CMsgPartyReadyCheckRequest();

  CMsgPartyReadyCheckRequest(const CMsgPartyReadyCheckRequest& from);

  inline CMsgPartyReadyCheckRequest& operator=(const CMsgPartyReadyCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPartyReadyCheckRequest(CMsgPartyReadyCheckRequest&& from) noexcept
    : CMsgPartyReadyCheckRequest() {
    *this = ::std::move(from);
  }

  inline CMsgPartyReadyCheckRequest& operator=(CMsgPartyReadyCheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgPartyReadyCheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPartyReadyCheckRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyReadyCheckRequest*>(
               &_CMsgPartyReadyCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CMsgPartyReadyCheckRequest* other);
  friend void swap(CMsgPartyReadyCheckRequest& a, CMsgPartyReadyCheckRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyReadyCheckRequest* New() const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckRequest>(nullptr);
  }

  CMsgPartyReadyCheckRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgPartyReadyCheckRequest& from);
  void MergeFrom(const CMsgPartyReadyCheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyReadyCheckRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgPartyReadyCheckRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyReadyCheckResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgPartyReadyCheckResponse) */ {
 public:
  CMsgPartyReadyCheckResponse();
  virtual ~CMsgPartyReadyCheckResponse();

  CMsgPartyReadyCheckResponse(const CMsgPartyReadyCheckResponse& from);

  inline CMsgPartyReadyCheckResponse& operator=(const CMsgPartyReadyCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPartyReadyCheckResponse(CMsgPartyReadyCheckResponse&& from) noexcept
    : CMsgPartyReadyCheckResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartyReadyCheckResponse& operator=(CMsgPartyReadyCheckResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgPartyReadyCheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPartyReadyCheckResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyReadyCheckResponse*>(
               &_CMsgPartyReadyCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CMsgPartyReadyCheckResponse* other);
  friend void swap(CMsgPartyReadyCheckResponse& a, CMsgPartyReadyCheckResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyReadyCheckResponse* New() const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckResponse>(nullptr);
  }

  CMsgPartyReadyCheckResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgPartyReadyCheckResponse& from);
  void MergeFrom(const CMsgPartyReadyCheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyReadyCheckResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::proto::dota::EReadyCheckRequestResult result() const;
  void set_result(::proto::dota::EReadyCheckRequestResult value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgPartyReadyCheckResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyReadyCheckAcknowledge final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgPartyReadyCheckAcknowledge) */ {
 public:
  CMsgPartyReadyCheckAcknowledge();
  virtual ~CMsgPartyReadyCheckAcknowledge();

  CMsgPartyReadyCheckAcknowledge(const CMsgPartyReadyCheckAcknowledge& from);

  inline CMsgPartyReadyCheckAcknowledge& operator=(const CMsgPartyReadyCheckAcknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPartyReadyCheckAcknowledge(CMsgPartyReadyCheckAcknowledge&& from) noexcept
    : CMsgPartyReadyCheckAcknowledge() {
    *this = ::std::move(from);
  }

  inline CMsgPartyReadyCheckAcknowledge& operator=(CMsgPartyReadyCheckAcknowledge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgPartyReadyCheckAcknowledge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPartyReadyCheckAcknowledge* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyReadyCheckAcknowledge*>(
               &_CMsgPartyReadyCheckAcknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CMsgPartyReadyCheckAcknowledge* other);
  friend void swap(CMsgPartyReadyCheckAcknowledge& a, CMsgPartyReadyCheckAcknowledge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyReadyCheckAcknowledge* New() const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckAcknowledge>(nullptr);
  }

  CMsgPartyReadyCheckAcknowledge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckAcknowledge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgPartyReadyCheckAcknowledge& from);
  void MergeFrom(const CMsgPartyReadyCheckAcknowledge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyReadyCheckAcknowledge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  bool has_ready_status() const;
  void clear_ready_status();
  static const int kReadyStatusFieldNumber = 1;
  ::proto::dota::EReadyCheckStatus ready_status() const;
  void set_ready_status(::proto::dota::EReadyCheckStatus value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgPartyReadyCheckAcknowledge)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int ready_status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventGameDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgLobbyEventGameDetails) */ {
 public:
  CMsgLobbyEventGameDetails();
  virtual ~CMsgLobbyEventGameDetails();

  CMsgLobbyEventGameDetails(const CMsgLobbyEventGameDetails& from);

  inline CMsgLobbyEventGameDetails& operator=(const CMsgLobbyEventGameDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgLobbyEventGameDetails(CMsgLobbyEventGameDetails&& from) noexcept
    : CMsgLobbyEventGameDetails() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventGameDetails& operator=(CMsgLobbyEventGameDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgLobbyEventGameDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgLobbyEventGameDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventGameDetails*>(
               &_CMsgLobbyEventGameDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CMsgLobbyEventGameDetails* other);
  friend void swap(CMsgLobbyEventGameDetails& a, CMsgLobbyEventGameDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyEventGameDetails* New() const final {
    return CreateMaybeMessage<CMsgLobbyEventGameDetails>(nullptr);
  }

  CMsgLobbyEventGameDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyEventGameDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgLobbyEventGameDetails& from);
  void MergeFrom(const CMsgLobbyEventGameDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventGameDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes kv_data = 1;
  bool has_kv_data() const;
  void clear_kv_data();
  static const int kKvDataFieldNumber = 1;
  const ::std::string& kv_data() const;
  void set_kv_data(const ::std::string& value);
  #if LANG_CXX11
  void set_kv_data(::std::string&& value);
  #endif
  void set_kv_data(const char* value);
  void set_kv_data(const void* value, size_t size);
  ::std::string* mutable_kv_data();
  ::std::string* release_kv_data();
  void set_allocated_kv_data(::std::string* kv_data);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgLobbyEventGameDetails)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr kv_data_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSODOTAPartyMember

// optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
inline bool CSODOTAPartyMember::has_partner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyMember::clear_partner_type() {
  partner_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::proto::dota::PartnerAccountType CSODOTAPartyMember::partner_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.partner_type)
  return static_cast< ::proto::dota::PartnerAccountType >(partner_type_);
}
inline void CSODOTAPartyMember::set_partner_type(::proto::dota::PartnerAccountType value) {
  assert(::proto::dota::PartnerAccountType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.partner_type)
}

// optional bool is_coach = 2;
inline bool CSODOTAPartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPartyMember::clear_is_coach() {
  is_coach_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSODOTAPartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.is_coach)
  return is_coach_;
}
inline void CSODOTAPartyMember::set_is_coach(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.is_coach)
}

// repeated uint32 region_ping_codes = 4 [packed = true];
inline int CSODOTAPartyMember::region_ping_codes_size() const {
  return region_ping_codes_.size();
}
inline void CSODOTAPartyMember::clear_region_ping_codes() {
  region_ping_codes_.Clear();
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::region_ping_codes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.region_ping_codes)
  return region_ping_codes_.Get(index);
}
inline void CSODOTAPartyMember::set_region_ping_codes(int index, ::google::protobuf::uint32 value) {
  region_ping_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.region_ping_codes)
}
inline void CSODOTAPartyMember::add_region_ping_codes(::google::protobuf::uint32 value) {
  region_ping_codes_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAPartyMember.region_ping_codes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAPartyMember::region_ping_codes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAPartyMember.region_ping_codes)
  return region_ping_codes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAPartyMember::mutable_region_ping_codes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAPartyMember.region_ping_codes)
  return &region_ping_codes_;
}

// repeated uint32 region_ping_times = 5 [packed = true];
inline int CSODOTAPartyMember::region_ping_times_size() const {
  return region_ping_times_.size();
}
inline void CSODOTAPartyMember::clear_region_ping_times() {
  region_ping_times_.Clear();
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::region_ping_times(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.region_ping_times)
  return region_ping_times_.Get(index);
}
inline void CSODOTAPartyMember::set_region_ping_times(int index, ::google::protobuf::uint32 value) {
  region_ping_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.region_ping_times)
}
inline void CSODOTAPartyMember::add_region_ping_times(::google::protobuf::uint32 value) {
  region_ping_times_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAPartyMember.region_ping_times)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAPartyMember::region_ping_times() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAPartyMember.region_ping_times)
  return region_ping_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAPartyMember::mutable_region_ping_times() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAPartyMember.region_ping_times)
  return &region_ping_times_;
}

// optional uint32 region_ping_failed_bitmask = 6;
inline bool CSODOTAPartyMember::has_region_ping_failed_bitmask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyMember::clear_region_ping_failed_bitmask() {
  region_ping_failed_bitmask_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::region_ping_failed_bitmask() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.region_ping_failed_bitmask)
  return region_ping_failed_bitmask_;
}
inline void CSODOTAPartyMember::set_region_ping_failed_bitmask(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  region_ping_failed_bitmask_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.region_ping_failed_bitmask)
}

// optional bool is_plus_subscriber = 10;
inline bool CSODOTAPartyMember::has_is_plus_subscriber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAPartyMember::clear_is_plus_subscriber() {
  is_plus_subscriber_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CSODOTAPartyMember::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.is_plus_subscriber)
  return is_plus_subscriber_;
}
inline void CSODOTAPartyMember::set_is_plus_subscriber(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_plus_subscriber_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.is_plus_subscriber)
}

// optional uint32 tourney_skill_level = 7;
inline bool CSODOTAPartyMember::has_tourney_skill_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAPartyMember::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.tourney_skill_level)
  return tourney_skill_level_;
}
inline void CSODOTAPartyMember::set_tourney_skill_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.tourney_skill_level)
}

// optional uint32 tourney_buyin = 8;
inline bool CSODOTAPartyMember::has_tourney_buyin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAPartyMember::clear_tourney_buyin() {
  tourney_buyin_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::tourney_buyin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.tourney_buyin)
  return tourney_buyin_;
}
inline void CSODOTAPartyMember::set_tourney_buyin(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tourney_buyin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.tourney_buyin)
}

// optional uint32 tourney_prevent_until = 9;
inline bool CSODOTAPartyMember::has_tourney_prevent_until() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAPartyMember::clear_tourney_prevent_until() {
  tourney_prevent_until_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::tourney_prevent_until() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.tourney_prevent_until)
  return tourney_prevent_until_;
}
inline void CSODOTAPartyMember::set_tourney_prevent_until(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  tourney_prevent_until_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.tourney_prevent_until)
}

// optional uint32 lane_selection_flags = 11;
inline bool CSODOTAPartyMember::has_lane_selection_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAPartyMember::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CSODOTAPartyMember::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.lane_selection_flags)
  return lane_selection_flags_;
}
inline void CSODOTAPartyMember::set_lane_selection_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  lane_selection_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.lane_selection_flags)
}

// -------------------------------------------------------------------

// CSODOTAParty

// optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
inline bool CSODOTAParty::has_party_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAParty::clear_party_id() {
  party_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CSODOTAParty::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.party_id)
  return party_id_;
}
inline void CSODOTAParty::set_party_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.party_id)
}

// optional fixed64 leader_id = 2;
inline bool CSODOTAParty::has_leader_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAParty::clear_leader_id() {
  leader_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CSODOTAParty::leader_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.leader_id)
  return leader_id_;
}
inline void CSODOTAParty::set_leader_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.leader_id)
}

// repeated fixed64 member_ids = 3;
inline int CSODOTAParty::member_ids_size() const {
  return member_ids_.size();
}
inline void CSODOTAParty::clear_member_ids() {
  member_ids_.Clear();
}
inline ::google::protobuf::uint64 CSODOTAParty::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.member_ids)
  return member_ids_.Get(index);
}
inline void CSODOTAParty::set_member_ids(int index, ::google::protobuf::uint64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.member_ids)
}
inline void CSODOTAParty::add_member_ids(::google::protobuf::uint64 value) {
  member_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.member_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTAParty::member_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.member_ids)
  return member_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTAParty::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.member_ids)
  return &member_ids_;
}

// optional uint32 game_modes = 4;
inline bool CSODOTAParty::has_game_modes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAParty::clear_game_modes() {
  game_modes_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CSODOTAParty::game_modes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.game_modes)
  return game_modes_;
}
inline void CSODOTAParty::set_game_modes(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  game_modes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.game_modes)
}

// optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
inline bool CSODOTAParty::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAParty::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::proto::dota::CSODOTAParty_State CSODOTAParty::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.state)
  return static_cast< ::proto::dota::CSODOTAParty_State >(state_);
}
inline void CSODOTAParty::set_state(::proto::dota::CSODOTAParty_State value) {
  assert(::proto::dota::CSODOTAParty_State_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.state)
}

// optional uint32 effective_started_matchmaking_time = 7;
inline bool CSODOTAParty::has_effective_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAParty::clear_effective_started_matchmaking_time() {
  effective_started_matchmaking_time_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSODOTAParty::effective_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.effective_started_matchmaking_time)
  return effective_started_matchmaking_time_;
}
inline void CSODOTAParty::set_effective_started_matchmaking_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  effective_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.effective_started_matchmaking_time)
}

// optional uint32 raw_started_matchmaking_time = 32;
inline bool CSODOTAParty::has_raw_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTAParty::clear_raw_started_matchmaking_time() {
  raw_started_matchmaking_time_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::raw_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.raw_started_matchmaking_time)
  return raw_started_matchmaking_time_;
}
inline void CSODOTAParty::set_raw_started_matchmaking_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  raw_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.raw_started_matchmaking_time)
}

// optional uint32 attempt_start_time = 33;
inline bool CSODOTAParty::has_attempt_start_time() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTAParty::clear_attempt_start_time() {
  attempt_start_time_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::attempt_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.attempt_start_time)
  return attempt_start_time_;
}
inline void CSODOTAParty::set_attempt_start_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  attempt_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.attempt_start_time)
}

// optional uint32 attempt_num = 34;
inline bool CSODOTAParty::has_attempt_num() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTAParty::clear_attempt_num() {
  attempt_num_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::attempt_num() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.attempt_num)
  return attempt_num_;
}
inline void CSODOTAParty::set_attempt_num(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  attempt_num_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.attempt_num)
}

// optional uint32 matchgroups = 11;
inline bool CSODOTAParty::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTAParty::clear_matchgroups() {
  matchgroups_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CSODOTAParty::matchgroups() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.matchgroups)
  return matchgroups_;
}
inline void CSODOTAParty::set_matchgroups(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.matchgroups)
}

// optional uint32 low_priority_account_id = 19;
inline bool CSODOTAParty::has_low_priority_account_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTAParty::clear_low_priority_account_id() {
  low_priority_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CSODOTAParty::low_priority_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.low_priority_account_id)
  return low_priority_account_id_;
}
inline void CSODOTAParty::set_low_priority_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  low_priority_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.low_priority_account_id)
}

// optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
inline bool CSODOTAParty::has_match_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTAParty::clear_match_type() {
  match_type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::proto::dota::MatchType CSODOTAParty::match_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.match_type)
  return static_cast< ::proto::dota::MatchType >(match_type_);
}
inline void CSODOTAParty::set_match_type(::proto::dota::MatchType value) {
  assert(::proto::dota::MatchType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  match_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.match_type)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CSODOTAParty::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTAParty::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::proto::dota::DOTABotDifficulty CSODOTAParty::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.bot_difficulty)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_);
}
inline void CSODOTAParty::set_bot_difficulty(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.bot_difficulty)
}

// optional uint32 team_id = 23;
inline bool CSODOTAParty::has_team_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTAParty::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CSODOTAParty::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.team_id)
  return team_id_;
}
inline void CSODOTAParty::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.team_id)
}

// optional string team_name = 51;
inline bool CSODOTAParty::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAParty::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CSODOTAParty::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.team_name)
  return team_name_.GetNoArena();
}
inline void CSODOTAParty::set_team_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.team_name)
}
#if LANG_CXX11
inline void CSODOTAParty::set_team_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTAParty.team_name)
}
#endif
inline void CSODOTAParty::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTAParty.team_name)
}
inline void CSODOTAParty::set_team_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTAParty.team_name)
}
inline ::std::string* CSODOTAParty::mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAParty.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTAParty::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTAParty.team_name)
  if (!has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTAParty::set_allocated_team_name(::std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTAParty.team_name)
}

// optional uint64 team_ui_logo = 52;
inline bool CSODOTAParty::has_team_ui_logo() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSODOTAParty::clear_team_ui_logo() {
  team_ui_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x10000000u;
}
inline ::google::protobuf::uint64 CSODOTAParty::team_ui_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.team_ui_logo)
  return team_ui_logo_;
}
inline void CSODOTAParty::set_team_ui_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x10000000u;
  team_ui_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.team_ui_logo)
}

// optional uint64 team_base_logo = 53;
inline bool CSODOTAParty::has_team_base_logo() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTAParty::clear_team_base_logo() {
  team_base_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x20000000u;
}
inline ::google::protobuf::uint64 CSODOTAParty::team_base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.team_base_logo)
  return team_base_logo_;
}
inline void CSODOTAParty::set_team_base_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x20000000u;
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.team_base_logo)
}

// optional uint32 match_disabled_until_date = 24;
inline bool CSODOTAParty::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTAParty::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.match_disabled_until_date)
  return match_disabled_until_date_;
}
inline void CSODOTAParty::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.match_disabled_until_date)
}

// optional uint32 match_disabled_account_id = 25;
inline bool CSODOTAParty::has_match_disabled_account_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTAParty::clear_match_disabled_account_id() {
  match_disabled_account_id_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::match_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.match_disabled_account_id)
  return match_disabled_account_id_;
}
inline void CSODOTAParty::set_match_disabled_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  match_disabled_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.match_disabled_account_id)
}

// optional uint32 matchmaking_max_range_minutes = 26;
inline bool CSODOTAParty::has_matchmaking_max_range_minutes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTAParty::clear_matchmaking_max_range_minutes() {
  matchmaking_max_range_minutes_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::matchmaking_max_range_minutes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.matchmaking_max_range_minutes)
  return matchmaking_max_range_minutes_;
}
inline void CSODOTAParty::set_matchmaking_max_range_minutes(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  matchmaking_max_range_minutes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.matchmaking_max_range_minutes)
}

// optional uint32 matchlanguages = 27;
inline bool CSODOTAParty::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTAParty::clear_matchlanguages() {
  matchlanguages_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::matchlanguages() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.matchlanguages)
  return matchlanguages_;
}
inline void CSODOTAParty::set_matchlanguages(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  matchlanguages_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.matchlanguages)
}

// repeated .proto.dota.CSODOTAPartyMember members = 29;
inline int CSODOTAParty::members_size() const {
  return members_.size();
}
inline void CSODOTAParty::clear_members() {
  members_.Clear();
}
inline ::proto::dota::CSODOTAPartyMember* CSODOTAParty::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAParty.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyMember >*
CSODOTAParty::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.members)
  return &members_;
}
inline const ::proto::dota::CSODOTAPartyMember& CSODOTAParty::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.members)
  return members_.Get(index);
}
inline ::proto::dota::CSODOTAPartyMember* CSODOTAParty::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyMember >&
CSODOTAParty::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.members)
  return members_;
}

// optional uint32 open_guild_id = 30;
inline bool CSODOTAParty::has_open_guild_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTAParty::clear_open_guild_id() {
  open_guild_id_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::open_guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.open_guild_id)
  return open_guild_id_;
}
inline void CSODOTAParty::set_open_guild_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  open_guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.open_guild_id)
}

// repeated uint32 common_guilds = 31;
inline int CSODOTAParty::common_guilds_size() const {
  return common_guilds_.size();
}
inline void CSODOTAParty::clear_common_guilds() {
  common_guilds_.Clear();
}
inline ::google::protobuf::uint32 CSODOTAParty::common_guilds(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.common_guilds)
  return common_guilds_.Get(index);
}
inline void CSODOTAParty::set_common_guilds(int index, ::google::protobuf::uint32 value) {
  common_guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.common_guilds)
}
inline void CSODOTAParty::add_common_guilds(::google::protobuf::uint32 value) {
  common_guilds_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.common_guilds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAParty::common_guilds() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.common_guilds)
  return common_guilds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAParty::mutable_common_guilds() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.common_guilds)
  return &common_guilds_;
}

// optional uint32 low_priority_games_remaining = 35;
inline bool CSODOTAParty::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTAParty::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
inline void CSODOTAParty::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.low_priority_games_remaining)
}

// optional bool open_for_join_requests = 40;
inline bool CSODOTAParty::has_open_for_join_requests() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTAParty::clear_open_for_join_requests() {
  open_for_join_requests_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool CSODOTAParty::open_for_join_requests() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.open_for_join_requests)
  return open_for_join_requests_;
}
inline void CSODOTAParty::set_open_for_join_requests(bool value) {
  _has_bits_[0] |= 0x80000000u;
  open_for_join_requests_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.open_for_join_requests)
}

// repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
inline int CSODOTAParty::sent_invites_size() const {
  return sent_invites_.size();
}
inline void CSODOTAParty::clear_sent_invites() {
  sent_invites_.Clear();
}
inline ::proto::dota::CSODOTAPartyInvite* CSODOTAParty::mutable_sent_invites(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAParty.sent_invites)
  return sent_invites_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >*
CSODOTAParty::mutable_sent_invites() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.sent_invites)
  return &sent_invites_;
}
inline const ::proto::dota::CSODOTAPartyInvite& CSODOTAParty::sent_invites(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.sent_invites)
  return sent_invites_.Get(index);
}
inline ::proto::dota::CSODOTAPartyInvite* CSODOTAParty::add_sent_invites() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.sent_invites)
  return sent_invites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >&
CSODOTAParty::sent_invites() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.sent_invites)
  return sent_invites_;
}

// repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
inline int CSODOTAParty::recv_invites_size() const {
  return recv_invites_.size();
}
inline void CSODOTAParty::clear_recv_invites() {
  recv_invites_.Clear();
}
inline ::proto::dota::CSODOTAPartyInvite* CSODOTAParty::mutable_recv_invites(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAParty.recv_invites)
  return recv_invites_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >*
CSODOTAParty::mutable_recv_invites() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.recv_invites)
  return &recv_invites_;
}
inline const ::proto::dota::CSODOTAPartyInvite& CSODOTAParty::recv_invites(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.recv_invites)
  return recv_invites_.Get(index);
}
inline ::proto::dota::CSODOTAPartyInvite* CSODOTAParty::add_recv_invites() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.recv_invites)
  return recv_invites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >&
CSODOTAParty::recv_invites() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.recv_invites)
  return recv_invites_;
}

// optional uint32 account_flags = 43;
inline bool CSODOTAParty::has_account_flags() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTAParty::clear_account_flags() {
  account_flags_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::account_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.account_flags)
  return account_flags_;
}
inline void CSODOTAParty::set_account_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.account_flags)
}

// optional uint32 region_select_flags = 44;
inline bool CSODOTAParty::has_region_select_flags() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTAParty::clear_region_select_flags() {
  region_select_flags_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::region_select_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.region_select_flags)
  return region_select_flags_;
}
inline void CSODOTAParty::set_region_select_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  region_select_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.region_select_flags)
}

// optional uint32 exclusive_tournament_id = 45;
inline bool CSODOTAParty::has_exclusive_tournament_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTAParty::clear_exclusive_tournament_id() {
  exclusive_tournament_id_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::exclusive_tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.exclusive_tournament_id)
  return exclusive_tournament_id_;
}
inline void CSODOTAParty::set_exclusive_tournament_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  exclusive_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.exclusive_tournament_id)
}

// optional uint32 tourney_division_id = 47;
inline bool CSODOTAParty::has_tourney_division_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTAParty::clear_tourney_division_id() {
  tourney_division_id_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_division_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_division_id)
  return tourney_division_id_;
}
inline void CSODOTAParty::set_tourney_division_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  tourney_division_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_division_id)
}

// optional uint32 tourney_schedule_time = 48;
inline bool CSODOTAParty::has_tourney_schedule_time() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTAParty::clear_tourney_schedule_time() {
  tourney_schedule_time_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_schedule_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_schedule_time)
  return tourney_schedule_time_;
}
inline void CSODOTAParty::set_tourney_schedule_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  tourney_schedule_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_schedule_time)
}

// optional uint32 tourney_skill_level = 49;
inline bool CSODOTAParty::has_tourney_skill_level() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTAParty::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_skill_level)
  return tourney_skill_level_;
}
inline void CSODOTAParty::set_tourney_skill_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_skill_level)
}

// optional uint32 tourney_bracket_round = 50;
inline bool CSODOTAParty::has_tourney_bracket_round() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTAParty::clear_tourney_bracket_round() {
  tourney_bracket_round_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_bracket_round)
  return tourney_bracket_round_;
}
inline void CSODOTAParty::set_tourney_bracket_round(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_bracket_round)
}

// optional uint32 tourney_queue_deadline_time = 54;
inline bool CSODOTAParty::has_tourney_queue_deadline_time() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTAParty::clear_tourney_queue_deadline_time() {
  tourney_queue_deadline_time_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CSODOTAParty::tourney_queue_deadline_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_queue_deadline_time)
  return tourney_queue_deadline_time_;
}
inline void CSODOTAParty::set_tourney_queue_deadline_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  tourney_queue_deadline_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_queue_deadline_time)
}

// optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
inline bool CSODOTAParty::has_tourney_queue_deadline_state() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTAParty::clear_tourney_queue_deadline_state() {
  tourney_queue_deadline_state_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::proto::dota::ETourneyQueueDeadlineState CSODOTAParty::tourney_queue_deadline_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_queue_deadline_state)
  return static_cast< ::proto::dota::ETourneyQueueDeadlineState >(tourney_queue_deadline_state_);
}
inline void CSODOTAParty::set_tourney_queue_deadline_state(::proto::dota::ETourneyQueueDeadlineState value) {
  assert(::proto::dota::ETourneyQueueDeadlineState_IsValid(value));
  _has_bits_[1] |= 0x00000004u;
  tourney_queue_deadline_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_queue_deadline_state)
}

// optional uint32 party_builder_slots_to_fill = 56;
inline bool CSODOTAParty::has_party_builder_slots_to_fill() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTAParty::clear_party_builder_slots_to_fill() {
  party_builder_slots_to_fill_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CSODOTAParty::party_builder_slots_to_fill() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.party_builder_slots_to_fill)
  return party_builder_slots_to_fill_;
}
inline void CSODOTAParty::set_party_builder_slots_to_fill(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  party_builder_slots_to_fill_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.party_builder_slots_to_fill)
}

// optional uint32 party_builder_match_groups = 57;
inline bool CSODOTAParty::has_party_builder_match_groups() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTAParty::clear_party_builder_match_groups() {
  party_builder_match_groups_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CSODOTAParty::party_builder_match_groups() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.party_builder_match_groups)
  return party_builder_match_groups_;
}
inline void CSODOTAParty::set_party_builder_match_groups(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  party_builder_match_groups_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.party_builder_match_groups)
}

// optional uint32 party_builder_start_time = 58;
inline bool CSODOTAParty::has_party_builder_start_time() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTAParty::clear_party_builder_start_time() {
  party_builder_start_time_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CSODOTAParty::party_builder_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.party_builder_start_time)
  return party_builder_start_time_;
}
inline void CSODOTAParty::set_party_builder_start_time(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  party_builder_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.party_builder_start_time)
}

// optional bool solo_queue = 59;
inline bool CSODOTAParty::has_solo_queue() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTAParty::clear_solo_queue() {
  solo_queue_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool CSODOTAParty::solo_queue() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.solo_queue)
  return solo_queue_;
}
inline void CSODOTAParty::set_solo_queue(bool value) {
  _has_bits_[1] |= 0x00000001u;
  solo_queue_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.solo_queue)
}

// optional uint32 bot_script_index = 60;
inline bool CSODOTAParty::has_bot_script_index() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTAParty::clear_bot_script_index() {
  bot_script_index_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSODOTAParty::bot_script_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.bot_script_index)
  return bot_script_index_;
}
inline void CSODOTAParty::set_bot_script_index(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  bot_script_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.bot_script_index)
}

// optional uint32 steam_clan_account_id = 61;
inline bool CSODOTAParty::has_steam_clan_account_id() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSODOTAParty::clear_steam_clan_account_id() {
  steam_clan_account_id_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CSODOTAParty::steam_clan_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.steam_clan_account_id)
  return steam_clan_account_id_;
}
inline void CSODOTAParty::set_steam_clan_account_id(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  steam_clan_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.steam_clan_account_id)
}

// optional .proto.dota.CMsgReadyCheckStatus ready_check = 62;
inline bool CSODOTAParty::has_ready_check() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAParty::clear_ready_check() {
  if (ready_check_ != nullptr) ready_check_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CMsgReadyCheckStatus& CSODOTAParty::ready_check() const {
  const ::proto::dota::CMsgReadyCheckStatus* p = ready_check_;
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.ready_check)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgReadyCheckStatus*>(
      &::proto::dota::_CMsgReadyCheckStatus_default_instance_);
}
inline ::proto::dota::CMsgReadyCheckStatus* CSODOTAParty::release_ready_check() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTAParty.ready_check)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CMsgReadyCheckStatus* temp = ready_check_;
  ready_check_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgReadyCheckStatus* CSODOTAParty::mutable_ready_check() {
  _has_bits_[0] |= 0x00000002u;
  if (ready_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgReadyCheckStatus>(GetArenaNoVirtual());
    ready_check_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAParty.ready_check)
  return ready_check_;
}
inline void CSODOTAParty::set_allocated_ready_check(::proto::dota::CMsgReadyCheckStatus* ready_check) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ready_check_;
  }
  if (ready_check) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ready_check = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ready_check, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ready_check_ = ready_check;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTAParty.ready_check)
}

// optional uint32 custom_game_disabled_until_date = 63;
inline bool CSODOTAParty::has_custom_game_disabled_until_date() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSODOTAParty::clear_custom_game_disabled_until_date() {
  custom_game_disabled_until_date_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CSODOTAParty::custom_game_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.custom_game_disabled_until_date)
  return custom_game_disabled_until_date_;
}
inline void CSODOTAParty::set_custom_game_disabled_until_date(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  custom_game_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.custom_game_disabled_until_date)
}

// optional uint32 custom_game_disabled_account_id = 64;
inline bool CSODOTAParty::has_custom_game_disabled_account_id() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSODOTAParty::clear_custom_game_disabled_account_id() {
  custom_game_disabled_account_id_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CSODOTAParty::custom_game_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.custom_game_disabled_account_id)
  return custom_game_disabled_account_id_;
}
inline void CSODOTAParty::set_custom_game_disabled_account_id(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000200u;
  custom_game_disabled_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.custom_game_disabled_account_id)
}

// optional bool is_challenge_match = 65;
inline bool CSODOTAParty::has_is_challenge_match() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTAParty::clear_is_challenge_match() {
  is_challenge_match_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool CSODOTAParty::is_challenge_match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.is_challenge_match)
  return is_challenge_match_;
}
inline void CSODOTAParty::set_is_challenge_match(bool value) {
  _has_bits_[1] |= 0x00000002u;
  is_challenge_match_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.is_challenge_match)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite_PartyMember

// optional string name = 1;
inline bool CSODOTAPartyInvite_PartyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CSODOTAPartyInvite_PartyMember::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.PartyMember.name)
  return name_.GetNoArena();
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}
#if LANG_CXX11
inline void CSODOTAPartyInvite_PartyMember::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}
#endif
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAPartyInvite.PartyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTAPartyInvite_PartyMember::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTAPartyInvite.PartyMember.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTAPartyInvite_PartyMember::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTAPartyInvite_PartyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite_PartyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.PartyMember.steam_id)
  return steam_id_;
}
inline void CSODOTAPartyInvite_PartyMember::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.PartyMember.steam_id)
}

// optional bool is_coach = 4;
inline bool CSODOTAPartyInvite_PartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPartyInvite_PartyMember::clear_is_coach() {
  is_coach_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSODOTAPartyInvite_PartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.PartyMember.is_coach)
  return is_coach_;
}
inline void CSODOTAPartyInvite_PartyMember::set_is_coach(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.PartyMember.is_coach)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite

// optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
inline bool CSODOTAPartyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTAPartyInvite::clear_group_id() {
  group_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.group_id)
  return group_id_;
}
inline void CSODOTAPartyInvite::set_group_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTAPartyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTAPartyInvite::clear_sender_id() {
  sender_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.sender_id)
  return sender_id_;
}
inline void CSODOTAPartyInvite::set_sender_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTAPartyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTAPartyInvite::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CSODOTAPartyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.sender_name)
  return sender_name_.GetNoArena();
}
inline void CSODOTAPartyInvite::set_sender_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.sender_name)
}
#if LANG_CXX11
inline void CSODOTAPartyInvite::set_sender_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTAPartyInvite.sender_name)
}
#endif
inline void CSODOTAPartyInvite::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTAPartyInvite.sender_name)
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTAPartyInvite.sender_name)
}
inline ::std::string* CSODOTAPartyInvite::mutable_sender_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAPartyInvite.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTAPartyInvite::release_sender_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTAPartyInvite.sender_name)
  if (!has_sender_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTAPartyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTAPartyInvite.sender_name)
}

// repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
inline int CSODOTAPartyInvite::members_size() const {
  return members_.size();
}
inline void CSODOTAPartyInvite::clear_members() {
  members_.Clear();
}
inline ::proto::dota::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAPartyInvite.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite_PartyMember >*
CSODOTAPartyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAPartyInvite.members)
  return &members_;
}
inline const ::proto::dota::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.members)
  return members_.Get(index);
}
inline ::proto::dota::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAPartyInvite.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite_PartyMember >&
CSODOTAPartyInvite::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAPartyInvite.members)
  return members_;
}

// optional uint32 team_id = 5;
inline bool CSODOTAPartyInvite::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTAPartyInvite::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CSODOTAPartyInvite::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.team_id)
  return team_id_;
}
inline void CSODOTAPartyInvite::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.team_id)
}

// optional bool low_priority_status = 6;
inline bool CSODOTAPartyInvite::has_low_priority_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTAPartyInvite::clear_low_priority_status() {
  low_priority_status_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSODOTAPartyInvite::low_priority_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.low_priority_status)
  return low_priority_status_;
}
inline void CSODOTAPartyInvite::set_low_priority_status(bool value) {
  _has_bits_[0] |= 0x00000010u;
  low_priority_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.low_priority_status)
}

// optional bool as_coach = 7;
inline bool CSODOTAPartyInvite::has_as_coach() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTAPartyInvite::clear_as_coach() {
  as_coach_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CSODOTAPartyInvite::as_coach() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.as_coach)
  return as_coach_;
}
inline void CSODOTAPartyInvite::set_as_coach(bool value) {
  _has_bits_[0] |= 0x00000020u;
  as_coach_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.as_coach)
}

// optional fixed64 invite_gid = 8;
inline bool CSODOTAPartyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTAPartyInvite::clear_invite_gid() {
  invite_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CSODOTAPartyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.invite_gid)
  return invite_gid_;
}
inline void CSODOTAPartyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.invite_gid)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite_LobbyMember

// optional string name = 1;
inline bool CSODOTALobbyInvite_LobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CSODOTALobbyInvite_LobbyMember::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
  return name_.GetNoArena();
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}
#if LANG_CXX11
inline void CSODOTALobbyInvite_LobbyMember::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}
#endif
inline void CSODOTALobbyInvite_LobbyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}
inline ::std::string* CSODOTALobbyInvite_LobbyMember::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobbyInvite_LobbyMember::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobbyInvite_LobbyMember::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTALobbyInvite_LobbyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobbyInvite_LobbyMember::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite_LobbyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.LobbyMember.steam_id)
  return steam_id_;
}
inline void CSODOTALobbyInvite_LobbyMember::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.LobbyMember.steam_id)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite

// optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
inline bool CSODOTALobbyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobbyInvite::clear_group_id() {
  group_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.group_id)
  return group_id_;
}
inline void CSODOTALobbyInvite::set_group_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTALobbyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTALobbyInvite::clear_sender_id() {
  sender_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.sender_id)
  return sender_id_;
}
inline void CSODOTALobbyInvite::set_sender_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTALobbyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobbyInvite::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CSODOTALobbyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.sender_name)
  return sender_name_.GetNoArena();
}
inline void CSODOTALobbyInvite::set_sender_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.sender_name)
}
#if LANG_CXX11
inline void CSODOTALobbyInvite::set_sender_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobbyInvite.sender_name)
}
#endif
inline void CSODOTALobbyInvite::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobbyInvite.sender_name)
}
inline void CSODOTALobbyInvite::set_sender_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobbyInvite.sender_name)
}
inline ::std::string* CSODOTALobbyInvite::mutable_sender_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobbyInvite.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobbyInvite::release_sender_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobbyInvite.sender_name)
  if (!has_sender_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobbyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobbyInvite.sender_name)
}

// repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
inline int CSODOTALobbyInvite::members_size() const {
  return members_.size();
}
inline void CSODOTALobbyInvite::clear_members() {
  members_.Clear();
}
inline ::proto::dota::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobbyInvite.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobbyInvite_LobbyMember >*
CSODOTALobbyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobbyInvite.members)
  return &members_;
}
inline const ::proto::dota::CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.members)
  return members_.Get(index);
}
inline ::proto::dota::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobbyInvite.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobbyInvite_LobbyMember >&
CSODOTALobbyInvite::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobbyInvite.members)
  return members_;
}

// optional uint64 custom_game_id = 5;
inline bool CSODOTALobbyInvite::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTALobbyInvite::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.custom_game_id)
  return custom_game_id_;
}
inline void CSODOTALobbyInvite::set_custom_game_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.custom_game_id)
}

// optional fixed64 invite_gid = 6;
inline bool CSODOTALobbyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobbyInvite::clear_invite_gid() {
  invite_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.invite_gid)
  return invite_gid_;
}
inline void CSODOTALobbyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.invite_gid)
}

// optional fixed64 custom_game_crc = 7;
inline bool CSODOTALobbyInvite::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobbyInvite::clear_custom_game_crc() {
  custom_game_crc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.custom_game_crc)
  return custom_game_crc_;
}
inline void CSODOTALobbyInvite::set_custom_game_crc(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 8;
inline bool CSODOTALobbyInvite::has_custom_game_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSODOTALobbyInvite::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSODOTALobbyInvite::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CSODOTALobbyInvite::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.custom_game_timestamp)
}

// -------------------------------------------------------------------

// CMsgLeaverState

// optional uint32 lobby_state = 1;
inline bool CMsgLeaverState::has_lobby_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLeaverState::clear_lobby_state() {
  lobby_state_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgLeaverState::lobby_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.lobby_state)
  return lobby_state_;
}
inline void CMsgLeaverState::set_lobby_state(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.lobby_state)
}

// optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgLeaverState::has_game_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgLeaverState::clear_game_state() {
  game_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::dota::DOTA_GameState CMsgLeaverState::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.game_state)
  return static_cast< ::proto::dota::DOTA_GameState >(game_state_);
}
inline void CMsgLeaverState::set_game_state(::proto::dota::DOTA_GameState value) {
  assert(::proto::dota::DOTA_GameState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.game_state)
}

// optional bool leaver_detected = 3;
inline bool CMsgLeaverState::has_leaver_detected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgLeaverState::clear_leaver_detected() {
  leaver_detected_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgLeaverState::leaver_detected() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.leaver_detected)
  return leaver_detected_;
}
inline void CMsgLeaverState::set_leaver_detected(bool value) {
  _has_bits_[0] |= 0x00000004u;
  leaver_detected_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.leaver_detected)
}

// optional bool first_blood_happened = 4;
inline bool CMsgLeaverState::has_first_blood_happened() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgLeaverState::clear_first_blood_happened() {
  first_blood_happened_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgLeaverState::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.first_blood_happened)
  return first_blood_happened_;
}
inline void CMsgLeaverState::set_first_blood_happened(bool value) {
  _has_bits_[0] |= 0x00000008u;
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.first_blood_happened)
}

// optional bool discard_match_results = 5;
inline bool CMsgLeaverState::has_discard_match_results() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgLeaverState::clear_discard_match_results() {
  discard_match_results_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgLeaverState::discard_match_results() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.discard_match_results)
  return discard_match_results_;
}
inline void CMsgLeaverState::set_discard_match_results(bool value) {
  _has_bits_[0] |= 0x00000010u;
  discard_match_results_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.discard_match_results)
}

// optional bool mass_disconnect = 6;
inline bool CMsgLeaverState::has_mass_disconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgLeaverState::clear_mass_disconnect() {
  mass_disconnect_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgLeaverState::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.mass_disconnect)
  return mass_disconnect_;
}
inline void CMsgLeaverState::set_mass_disconnect(bool value) {
  _has_bits_[0] |= 0x00000020u;
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.mass_disconnect)
}

// -------------------------------------------------------------------

// CDOTALobbyMember_CDOTALobbyMemberXPBonus

// optional uint32 type = 1;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember_CDOTALobbyMemberXPBonus::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
  return type_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
}

// optional float xp_bonus = 2;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_xp_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_xp_bonus() {
  xp_bonus_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CDOTALobbyMember_CDOTALobbyMemberXPBonus::xp_bonus() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
  return xp_bonus_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_xp_bonus(float value) {
  _has_bits_[0] |= 0x00000002u;
  xp_bonus_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
}

// optional uint64 source_key = 3;
inline bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_source_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_source_key() {
  source_key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CDOTALobbyMember_CDOTALobbyMemberXPBonus::source_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
  return source_key_;
}
inline void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_source_key(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  source_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
}

// -------------------------------------------------------------------

// CDOTALobbyMember

// optional fixed64 id = 1 [(.proto.dota.key_field) = true];
inline bool CDOTALobbyMember::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTALobbyMember::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CDOTALobbyMember::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.id)
  return id_;
}
inline void CDOTALobbyMember::set_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.id)
}

// optional uint32 hero_id = 2;
inline bool CDOTALobbyMember::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTALobbyMember::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.hero_id)
  return hero_id_;
}
inline void CDOTALobbyMember::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.hero_id)
}

// optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTALobbyMember::has_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTALobbyMember::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::proto::dota::DOTA_GC_TEAM CDOTALobbyMember::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(team_);
}
inline void CDOTALobbyMember::set_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.team)
}

// optional string name = 6;
inline bool CDOTALobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTALobbyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTALobbyMember::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.name)
  return name_.GetNoArena();
}
inline void CDOTALobbyMember::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.name)
}
#if LANG_CXX11
inline void CDOTALobbyMember::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTALobbyMember.name)
}
#endif
inline void CDOTALobbyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTALobbyMember.name)
}
inline void CDOTALobbyMember::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTALobbyMember.name)
}
inline ::std::string* CDOTALobbyMember::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTALobbyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTALobbyMember::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTALobbyMember.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTALobbyMember::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTALobbyMember.name)
}

// optional uint32 slot = 7;
inline bool CDOTALobbyMember::has_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTALobbyMember::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.slot)
  return slot_;
}
inline void CDOTALobbyMember::set_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.slot)
}

// optional uint64 party_id = 12;
inline bool CDOTALobbyMember::has_party_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTALobbyMember::clear_party_id() {
  party_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 CDOTALobbyMember::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.party_id)
  return party_id_;
}
inline void CDOTALobbyMember::set_party_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.party_id)
}

// optional uint32 meta_level = 13;
inline bool CDOTALobbyMember::has_meta_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTALobbyMember::clear_meta_level() {
  meta_level_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.meta_level)
  return meta_level_;
}
inline void CDOTALobbyMember::set_meta_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  meta_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.meta_level)
}

// optional uint32 meta_xp = 14;
inline bool CDOTALobbyMember::has_meta_xp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTALobbyMember::clear_meta_xp() {
  meta_xp_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.meta_xp)
  return meta_xp_;
}
inline void CDOTALobbyMember::set_meta_xp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  meta_xp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.meta_xp)
}

// optional uint32 meta_xp_awarded = 15;
inline bool CDOTALobbyMember::has_meta_xp_awarded() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTALobbyMember::clear_meta_xp_awarded() {
  meta_xp_awarded_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::meta_xp_awarded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.meta_xp_awarded)
  return meta_xp_awarded_;
}
inline void CDOTALobbyMember::set_meta_xp_awarded(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  meta_xp_awarded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.meta_xp_awarded)
}

// optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
inline bool CDOTALobbyMember::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CDOTALobbyMember::clear_leaver_status() {
  leaver_status_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::proto::dota::DOTALeaverStatus_t CDOTALobbyMember::leaver_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.leaver_status)
  return static_cast< ::proto::dota::DOTALeaverStatus_t >(leaver_status_);
}
inline void CDOTALobbyMember::set_leaver_status(::proto::dota::DOTALeaverStatus_t value) {
  assert(::proto::dota::DOTALeaverStatus_t_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.leaver_status)
}

// optional uint32 leaver_actions = 28;
inline bool CDOTALobbyMember::has_leaver_actions() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CDOTALobbyMember::clear_leaver_actions() {
  leaver_actions_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::leaver_actions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.leaver_actions)
  return leaver_actions_;
}
inline void CDOTALobbyMember::set_leaver_actions(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  leaver_actions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.leaver_actions)
}

// optional uint32 channel = 17;
inline bool CDOTALobbyMember::has_channel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CDOTALobbyMember::clear_channel() {
  channel_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::channel() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.channel)
  return channel_;
}
inline void CDOTALobbyMember::set_channel(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  channel_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.channel)
}

// optional uint32 prize_def_index = 18;
inline bool CDOTALobbyMember::has_prize_def_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CDOTALobbyMember::clear_prize_def_index() {
  prize_def_index_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::prize_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.prize_def_index)
  return prize_def_index_;
}
inline void CDOTALobbyMember::set_prize_def_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  prize_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.prize_def_index)
}

// repeated uint32 disabled_hero_id = 20;
inline int CDOTALobbyMember::disabled_hero_id_size() const {
  return disabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_disabled_hero_id() {
  disabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::disabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_disabled_hero_id(int index, ::google::protobuf::uint32 value) {
  disabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.disabled_hero_id)
}
inline void CDOTALobbyMember::add_disabled_hero_id(::google::protobuf::uint32 value) {
  disabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTALobbyMember.disabled_hero_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::disabled_hero_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_disabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTALobbyMember.disabled_hero_id)
  return &disabled_hero_id_;
}

// optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
inline bool CDOTALobbyMember::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CDOTALobbyMember::clear_partner_account_type() {
  partner_account_type_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::proto::dota::PartnerAccountType CDOTALobbyMember::partner_account_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.partner_account_type)
  return static_cast< ::proto::dota::PartnerAccountType >(partner_account_type_);
}
inline void CDOTALobbyMember::set_partner_account_type(::proto::dota::PartnerAccountType value) {
  assert(::proto::dota::PartnerAccountType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.partner_account_type)
}

// repeated uint32 enabled_hero_id = 22;
inline int CDOTALobbyMember::enabled_hero_id_size() const {
  return enabled_hero_id_.size();
}
inline void CDOTALobbyMember::clear_enabled_hero_id() {
  enabled_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::enabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_enabled_hero_id(int index, ::google::protobuf::uint32 value) {
  enabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.enabled_hero_id)
}
inline void CDOTALobbyMember::add_enabled_hero_id(::google::protobuf::uint32 value) {
  enabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTALobbyMember.enabled_hero_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::enabled_hero_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_enabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTALobbyMember.enabled_hero_id)
  return &enabled_hero_id_;
}

// optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
inline bool CDOTALobbyMember::has_coach_team() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CDOTALobbyMember::clear_coach_team() {
  coach_team_ = 5;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::proto::dota::DOTA_GC_TEAM CDOTALobbyMember::coach_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.coach_team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(coach_team_);
}
inline void CDOTALobbyMember::set_coach_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  coach_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.coach_team)
}

// optional uint32 pwrd_cyber_cafe_id = 24;
inline bool CDOTALobbyMember::has_pwrd_cyber_cafe_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CDOTALobbyMember::clear_pwrd_cyber_cafe_id() {
  pwrd_cyber_cafe_id_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::pwrd_cyber_cafe_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_id)
  return pwrd_cyber_cafe_id_;
}
inline void CDOTALobbyMember::set_pwrd_cyber_cafe_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  pwrd_cyber_cafe_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_id)
}

// optional string pwrd_cyber_cafe_name = 25;
inline bool CDOTALobbyMember::has_pwrd_cyber_cafe_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTALobbyMember::clear_pwrd_cyber_cafe_name() {
  pwrd_cyber_cafe_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CDOTALobbyMember::pwrd_cyber_cafe_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name)
  return pwrd_cyber_cafe_name_.GetNoArena();
}
inline void CDOTALobbyMember::set_pwrd_cyber_cafe_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pwrd_cyber_cafe_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name)
}
#if LANG_CXX11
inline void CDOTALobbyMember::set_pwrd_cyber_cafe_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pwrd_cyber_cafe_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name)
}
#endif
inline void CDOTALobbyMember::set_pwrd_cyber_cafe_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pwrd_cyber_cafe_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name)
}
inline void CDOTALobbyMember::set_pwrd_cyber_cafe_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pwrd_cyber_cafe_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name)
}
inline ::std::string* CDOTALobbyMember::mutable_pwrd_cyber_cafe_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name)
  return pwrd_cyber_cafe_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTALobbyMember::release_pwrd_cyber_cafe_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name)
  if (!has_pwrd_cyber_cafe_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pwrd_cyber_cafe_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTALobbyMember::set_allocated_pwrd_cyber_cafe_name(::std::string* pwrd_cyber_cafe_name) {
  if (pwrd_cyber_cafe_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pwrd_cyber_cafe_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwrd_cyber_cafe_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTALobbyMember.pwrd_cyber_cafe_name)
}

// repeated uint32 disabled_random_hero_id = 26;
inline int CDOTALobbyMember::disabled_random_hero_id_size() const {
  return disabled_random_hero_id_.size();
}
inline void CDOTALobbyMember::clear_disabled_random_hero_id() {
  disabled_random_hero_id_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::disabled_random_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.disabled_random_hero_id)
  return disabled_random_hero_id_.Get(index);
}
inline void CDOTALobbyMember::set_disabled_random_hero_id(int index, ::google::protobuf::uint32 value) {
  disabled_random_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.disabled_random_hero_id)
}
inline void CDOTALobbyMember::add_disabled_random_hero_id(::google::protobuf::uint32 value) {
  disabled_random_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTALobbyMember.disabled_random_hero_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::disabled_random_hero_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTALobbyMember.disabled_random_hero_id)
  return disabled_random_hero_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_disabled_random_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTALobbyMember.disabled_random_hero_id)
  return &disabled_random_hero_id_;
}

// repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
inline int CDOTALobbyMember::xp_bonuses_size() const {
  return xp_bonuses_.size();
}
inline void CDOTALobbyMember::clear_xp_bonuses() {
  xp_bonuses_.Clear();
}
inline ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::mutable_xp_bonuses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
CDOTALobbyMember::mutable_xp_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTALobbyMember.xp_bonuses)
  return &xp_bonuses_;
}
inline const ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember::xp_bonuses(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Get(index);
}
inline ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::add_xp_bonuses() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
CDOTALobbyMember::xp_bonuses() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_;
}

// optional sint32 rank_change = 29;
inline bool CDOTALobbyMember::has_rank_change() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CDOTALobbyMember::clear_rank_change() {
  rank_change_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::int32 CDOTALobbyMember::rank_change() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.rank_change)
  return rank_change_;
}
inline void CDOTALobbyMember::set_rank_change(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.rank_change)
}

// optional bool cameraman = 30;
inline bool CDOTALobbyMember::has_cameraman() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CDOTALobbyMember::clear_cameraman() {
  cameraman_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool CDOTALobbyMember::cameraman() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.cameraman)
  return cameraman_;
}
inline void CDOTALobbyMember::set_cameraman(bool value) {
  _has_bits_[0] |= 0x00200000u;
  cameraman_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.cameraman)
}

// repeated uint32 custom_game_product_ids = 31;
inline int CDOTALobbyMember::custom_game_product_ids_size() const {
  return custom_game_product_ids_.size();
}
inline void CDOTALobbyMember::clear_custom_game_product_ids() {
  custom_game_product_ids_.Clear();
}
inline ::google::protobuf::uint32 CDOTALobbyMember::custom_game_product_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_.Get(index);
}
inline void CDOTALobbyMember::set_custom_game_product_ids(int index, ::google::protobuf::uint32 value) {
  custom_game_product_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.custom_game_product_ids)
}
inline void CDOTALobbyMember::add_custom_game_product_ids(::google::protobuf::uint32 value) {
  custom_game_product_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTALobbyMember.custom_game_product_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::custom_game_product_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_custom_game_product_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTALobbyMember.custom_game_product_ids)
  return &custom_game_product_ids_;
}

// optional uint32 lobby_mvp_vote_account_id = 32;
inline bool CDOTALobbyMember::has_lobby_mvp_vote_account_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CDOTALobbyMember::clear_lobby_mvp_vote_account_id() {
  lobby_mvp_vote_account_id_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::lobby_mvp_vote_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.lobby_mvp_vote_account_id)
  return lobby_mvp_vote_account_id_;
}
inline void CDOTALobbyMember::set_lobby_mvp_vote_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  lobby_mvp_vote_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.lobby_mvp_vote_account_id)
}

// optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
inline bool CDOTALobbyMember::has_search_match_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CDOTALobbyMember::clear_search_match_type() {
  search_match_type_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::proto::dota::MatchType CDOTALobbyMember::search_match_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.search_match_type)
  return static_cast< ::proto::dota::MatchType >(search_match_type_);
}
inline void CDOTALobbyMember::set_search_match_type(::proto::dota::MatchType value) {
  assert(::proto::dota::MatchType_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  search_match_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.search_match_type)
}

// optional uint64 favorite_team_packed = 35;
inline bool CDOTALobbyMember::has_favorite_team_packed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CDOTALobbyMember::clear_favorite_team_packed() {
  favorite_team_packed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::uint64 CDOTALobbyMember::favorite_team_packed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.favorite_team_packed)
  return favorite_team_packed_;
}
inline void CDOTALobbyMember::set_favorite_team_packed(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00080000u;
  favorite_team_packed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.favorite_team_packed)
}

// optional bool is_plus_subscriber = 36;
inline bool CDOTALobbyMember::has_is_plus_subscriber() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CDOTALobbyMember::clear_is_plus_subscriber() {
  is_plus_subscriber_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool CDOTALobbyMember::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.is_plus_subscriber)
  return is_plus_subscriber_;
}
inline void CDOTALobbyMember::set_is_plus_subscriber(bool value) {
  _has_bits_[0] |= 0x00400000u;
  is_plus_subscriber_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.is_plus_subscriber)
}

// optional bool rank_tier_updated = 37;
inline bool CDOTALobbyMember::has_rank_tier_updated() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CDOTALobbyMember::clear_rank_tier_updated() {
  rank_tier_updated_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool CDOTALobbyMember::rank_tier_updated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.rank_tier_updated)
  return rank_tier_updated_;
}
inline void CDOTALobbyMember::set_rank_tier_updated(bool value) {
  _has_bits_[0] |= 0x00800000u;
  rank_tier_updated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.rank_tier_updated)
}

// optional uint32 lane_selection_flags = 38;
inline bool CDOTALobbyMember::has_lane_selection_flags() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CDOTALobbyMember::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CDOTALobbyMember::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.lane_selection_flags)
  return lane_selection_flags_;
}
inline void CDOTALobbyMember::set_lane_selection_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  lane_selection_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.lane_selection_flags)
}

// optional bool can_earn_rewards = 39;
inline bool CDOTALobbyMember::has_can_earn_rewards() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CDOTALobbyMember::clear_can_earn_rewards() {
  can_earn_rewards_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool CDOTALobbyMember::can_earn_rewards() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.can_earn_rewards)
  return can_earn_rewards_;
}
inline void CDOTALobbyMember::set_can_earn_rewards(bool value) {
  _has_bits_[0] |= 0x01000000u;
  can_earn_rewards_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.can_earn_rewards)
}

// optional .proto.dota.DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
inline bool CDOTALobbyMember::has_live_spectator_team() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CDOTALobbyMember::clear_live_spectator_team() {
  live_spectator_team_ = 5;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::proto::dota::DOTA_GC_TEAM CDOTALobbyMember::live_spectator_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.live_spectator_team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(live_spectator_team_);
}
inline void CDOTALobbyMember::set_live_spectator_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x04000000u;
  live_spectator_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.live_spectator_team)
}

// -------------------------------------------------------------------

// CLobbyTeamDetails

// optional string team_name = 1;
inline bool CLobbyTeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CLobbyTeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_name)
  return team_name_.GetNoArena();
}
inline void CLobbyTeamDetails::set_team_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_name)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_team_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyTeamDetails.team_name)
}
#endif
inline void CLobbyTeamDetails::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyTeamDetails.team_name)
}
inline void CLobbyTeamDetails::set_team_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyTeamDetails.team_name)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyTeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyTeamDetails.team_name)
  if (!has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyTeamDetails.team_name)
}

// optional string team_tag = 3;
inline bool CLobbyTeamDetails::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTeamDetails::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CLobbyTeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_tag)
  return team_tag_.GetNoArena();
}
inline void CLobbyTeamDetails::set_team_tag(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_tag)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_team_tag(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyTeamDetails.team_tag)
}
#endif
inline void CLobbyTeamDetails::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyTeamDetails.team_tag)
}
inline void CLobbyTeamDetails::set_team_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyTeamDetails.team_tag)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_tag() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyTeamDetails.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyTeamDetails.team_tag)
  if (!has_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyTeamDetails.team_tag)
}

// optional uint32 team_id = 4;
inline bool CLobbyTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CLobbyTeamDetails::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_id)
  return team_id_;
}
inline void CLobbyTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_id)
}

// optional uint64 team_logo = 5;
inline bool CLobbyTeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CLobbyTeamDetails::clear_team_logo() {
  team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_logo)
  return team_logo_;
}
inline void CLobbyTeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_logo)
}

// optional uint64 team_base_logo = 6;
inline bool CLobbyTeamDetails::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CLobbyTeamDetails::clear_team_base_logo() {
  team_base_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_base_logo)
  return team_base_logo_;
}
inline void CLobbyTeamDetails::set_team_base_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_base_logo)
}

// optional uint64 team_banner_logo = 7;
inline bool CLobbyTeamDetails::has_team_banner_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CLobbyTeamDetails::clear_team_banner_logo() {
  team_banner_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::team_banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_banner_logo)
  return team_banner_logo_;
}
inline void CLobbyTeamDetails::set_team_banner_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  team_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_banner_logo)
}

// optional bool team_complete = 8;
inline bool CLobbyTeamDetails::has_team_complete() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CLobbyTeamDetails::clear_team_complete() {
  team_complete_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CLobbyTeamDetails::team_complete() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_complete)
  return team_complete_;
}
inline void CLobbyTeamDetails::set_team_complete(bool value) {
  _has_bits_[0] |= 0x00002000u;
  team_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_complete)
}

// optional string team_logo_url = 20;
inline bool CLobbyTeamDetails::has_team_logo_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTeamDetails::clear_team_logo_url() {
  team_logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CLobbyTeamDetails::team_logo_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_logo_url)
  return team_logo_url_.GetNoArena();
}
inline void CLobbyTeamDetails::set_team_logo_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_logo_url)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_team_logo_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  team_logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyTeamDetails.team_logo_url)
}
#endif
inline void CLobbyTeamDetails::set_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyTeamDetails.team_logo_url)
}
inline void CLobbyTeamDetails::set_team_logo_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyTeamDetails.team_logo_url)
}
inline ::std::string* CLobbyTeamDetails::mutable_team_logo_url() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyTeamDetails.team_logo_url)
  return team_logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyTeamDetails.team_logo_url)
  if (!has_team_logo_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return team_logo_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_team_logo_url(::std::string* team_logo_url) {
  if (team_logo_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  team_logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_logo_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyTeamDetails.team_logo_url)
}

// optional string guild_name = 9;
inline bool CLobbyTeamDetails::has_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTeamDetails::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CLobbyTeamDetails::guild_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_name)
  return guild_name_.GetNoArena();
}
inline void CLobbyTeamDetails::set_guild_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_name)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_guild_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyTeamDetails.guild_name)
}
#endif
inline void CLobbyTeamDetails::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyTeamDetails.guild_name)
}
inline void CLobbyTeamDetails::set_guild_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyTeamDetails.guild_name)
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyTeamDetails.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_guild_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyTeamDetails.guild_name)
  if (!has_guild_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return guild_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyTeamDetails.guild_name)
}

// optional string guild_tag = 10;
inline bool CLobbyTeamDetails::has_guild_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTeamDetails::clear_guild_tag() {
  guild_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CLobbyTeamDetails::guild_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_tag)
  return guild_tag_.GetNoArena();
}
inline void CLobbyTeamDetails::set_guild_tag(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_tag)
}
#if LANG_CXX11
inline void CLobbyTeamDetails::set_guild_tag(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  guild_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyTeamDetails.guild_tag)
}
#endif
inline void CLobbyTeamDetails::set_guild_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyTeamDetails.guild_tag)
}
inline void CLobbyTeamDetails::set_guild_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyTeamDetails.guild_tag)
}
inline ::std::string* CLobbyTeamDetails::mutable_guild_tag() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyTeamDetails.guild_tag)
  return guild_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyTeamDetails::release_guild_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyTeamDetails.guild_tag)
  if (!has_guild_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return guild_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyTeamDetails::set_allocated_guild_tag(::std::string* guild_tag) {
  if (guild_tag != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  guild_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyTeamDetails.guild_tag)
}

// optional uint32 guild_id = 11;
inline bool CLobbyTeamDetails::has_guild_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CLobbyTeamDetails::clear_guild_id() {
  guild_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_id)
  return guild_id_;
}
inline void CLobbyTeamDetails::set_guild_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_id)
}

// optional uint64 guild_logo = 12;
inline bool CLobbyTeamDetails::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CLobbyTeamDetails::clear_guild_logo() {
  guild_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_logo)
  return guild_logo_;
}
inline void CLobbyTeamDetails::set_guild_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  guild_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_logo)
}

// optional uint64 guild_base_logo = 13;
inline bool CLobbyTeamDetails::has_guild_base_logo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CLobbyTeamDetails::clear_guild_base_logo() {
  guild_base_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_base_logo)
  return guild_base_logo_;
}
inline void CLobbyTeamDetails::set_guild_base_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  guild_base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_base_logo)
}

// optional uint64 guild_banner_logo = 14;
inline bool CLobbyTeamDetails::has_guild_banner_logo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CLobbyTeamDetails::clear_guild_banner_logo() {
  guild_banner_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::guild_banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_banner_logo)
  return guild_banner_logo_;
}
inline void CLobbyTeamDetails::set_guild_banner_logo(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  guild_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_banner_logo)
}

// optional uint32 rank = 15;
inline bool CLobbyTeamDetails::has_rank() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CLobbyTeamDetails::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::uint32 CLobbyTeamDetails::rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.rank)
  return rank_;
}
inline void CLobbyTeamDetails::set_rank(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.rank)
}

// optional sint32 rank_change = 16;
inline bool CLobbyTeamDetails::has_rank_change() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CLobbyTeamDetails::clear_rank_change() {
  rank_change_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::int32 CLobbyTeamDetails::rank_change() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.rank_change)
  return rank_change_;
}
inline void CLobbyTeamDetails::set_rank_change(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.rank_change)
}

// optional bool is_home_team = 17;
inline bool CLobbyTeamDetails::has_is_home_team() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CLobbyTeamDetails::clear_is_home_team() {
  is_home_team_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CLobbyTeamDetails::is_home_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.is_home_team)
  return is_home_team_;
}
inline void CLobbyTeamDetails::set_is_home_team(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_home_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.is_home_team)
}

// optional bool is_challenge_match = 18;
inline bool CLobbyTeamDetails::has_is_challenge_match() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CLobbyTeamDetails::clear_is_challenge_match() {
  is_challenge_match_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CLobbyTeamDetails::is_challenge_match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.is_challenge_match)
  return is_challenge_match_;
}
inline void CLobbyTeamDetails::set_is_challenge_match(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_challenge_match_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.is_challenge_match)
}

// optional uint64 challenge_match_token_account = 19;
inline bool CLobbyTeamDetails::has_challenge_match_token_account() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CLobbyTeamDetails::clear_challenge_match_token_account() {
  challenge_match_token_account_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::uint64 CLobbyTeamDetails::challenge_match_token_account() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.challenge_match_token_account)
  return challenge_match_token_account_;
}
inline void CLobbyTeamDetails::set_challenge_match_token_account(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  challenge_match_token_account_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.challenge_match_token_account)
}

// -------------------------------------------------------------------

// CLobbyTimedRewardDetails

// optional uint32 item_def_index = 2;
inline bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyTimedRewardDetails::clear_item_def_index() {
  item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::item_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.item_def_index)
  return item_def_index_;
}
inline void CLobbyTimedRewardDetails::set_item_def_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.item_def_index)
}

// optional bool is_supply_crate = 3;
inline bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  is_supply_crate_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CLobbyTimedRewardDetails::is_supply_crate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.is_supply_crate)
  return is_supply_crate_;
}
inline void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_supply_crate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.is_supply_crate)
}

// optional bool is_timed_drop = 4;
inline bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  is_timed_drop_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CLobbyTimedRewardDetails::is_timed_drop() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.is_timed_drop)
  return is_timed_drop_;
}
inline void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_timed_drop_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.is_timed_drop)
}

// optional uint32 account_id = 5;
inline bool CLobbyTimedRewardDetails::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyTimedRewardDetails::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.account_id)
  return account_id_;
}
inline void CLobbyTimedRewardDetails::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.account_id)
}

// optional uint32 origin = 6;
inline bool CLobbyTimedRewardDetails::has_origin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLobbyTimedRewardDetails::clear_origin() {
  origin_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CLobbyTimedRewardDetails::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.origin)
  return origin_;
}
inline void CLobbyTimedRewardDetails::set_origin(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  origin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.origin)
}

// -------------------------------------------------------------------

// CLobbyBroadcastChannelInfo

// optional uint32 channel_id = 1;
inline bool CLobbyBroadcastChannelInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLobbyBroadcastChannelInfo::clear_channel_id() {
  channel_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CLobbyBroadcastChannelInfo::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyBroadcastChannelInfo.channel_id)
  return channel_id_;
}
inline void CLobbyBroadcastChannelInfo::set_channel_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyBroadcastChannelInfo.channel_id)
}

// optional string country_code = 2;
inline bool CLobbyBroadcastChannelInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLobbyBroadcastChannelInfo::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CLobbyBroadcastChannelInfo::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyBroadcastChannelInfo.country_code)
  return country_code_.GetNoArena();
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}
#if LANG_CXX11
inline void CLobbyBroadcastChannelInfo::set_country_code(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}
#endif
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyBroadcastChannelInfo.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyBroadcastChannelInfo.country_code)
  if (!has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return country_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyBroadcastChannelInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}

// optional string description = 3;
inline bool CLobbyBroadcastChannelInfo::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLobbyBroadcastChannelInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CLobbyBroadcastChannelInfo::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyBroadcastChannelInfo.description)
  return description_.GetNoArena();
}
inline void CLobbyBroadcastChannelInfo::set_description(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyBroadcastChannelInfo.description)
}
#if LANG_CXX11
inline void CLobbyBroadcastChannelInfo::set_description(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyBroadcastChannelInfo.description)
}
#endif
inline void CLobbyBroadcastChannelInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyBroadcastChannelInfo.description)
}
inline void CLobbyBroadcastChannelInfo::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyBroadcastChannelInfo.description)
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyBroadcastChannelInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyBroadcastChannelInfo.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyBroadcastChannelInfo::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyBroadcastChannelInfo.description)
}

// optional string language_code = 4;
inline bool CLobbyBroadcastChannelInfo::has_language_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLobbyBroadcastChannelInfo::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CLobbyBroadcastChannelInfo::language_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyBroadcastChannelInfo.language_code)
  return language_code_.GetNoArena();
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}
#if LANG_CXX11
inline void CLobbyBroadcastChannelInfo::set_language_code(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}
#endif
inline void CLobbyBroadcastChannelInfo::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}
inline ::std::string* CLobbyBroadcastChannelInfo::mutable_language_code() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyBroadcastChannelInfo.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLobbyBroadcastChannelInfo::release_language_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyBroadcastChannelInfo.language_code)
  if (!has_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return language_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLobbyBroadcastChannelInfo::set_allocated_language_code(::std::string* language_code) {
  if (language_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}

// -------------------------------------------------------------------

// CSODOTALobby_CExtraMsg

// optional uint32 id = 1;
inline bool CSODOTALobby_CExtraMsg::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobby_CExtraMsg::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CSODOTALobby_CExtraMsg::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.CExtraMsg.id)
  return id_;
}
inline void CSODOTALobby_CExtraMsg::set_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.CExtraMsg.id)
}

// optional bytes contents = 2;
inline bool CSODOTALobby_CExtraMsg::has_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobby_CExtraMsg::clear_contents() {
  contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CSODOTALobby_CExtraMsg::contents() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.CExtraMsg.contents)
  return contents_.GetNoArena();
}
inline void CSODOTALobby_CExtraMsg::set_contents(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.CExtraMsg.contents)
}
#if LANG_CXX11
inline void CSODOTALobby_CExtraMsg::set_contents(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  contents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.CExtraMsg.contents)
}
#endif
inline void CSODOTALobby_CExtraMsg::set_contents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.CExtraMsg.contents)
}
inline void CSODOTALobby_CExtraMsg::set_contents(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.CExtraMsg.contents)
}
inline ::std::string* CSODOTALobby_CExtraMsg::mutable_contents() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.CExtraMsg.contents)
  return contents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby_CExtraMsg::release_contents() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.CExtraMsg.contents)
  if (!has_contents()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return contents_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby_CExtraMsg::set_allocated_contents(::std::string* contents) {
  if (contents != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  contents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contents);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.CExtraMsg.contents)
}

// -------------------------------------------------------------------

// CSODOTALobby

// optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
inline bool CSODOTALobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSODOTALobby::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 CSODOTALobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lobby_id)
  return lobby_id_;
}
inline void CSODOTALobby::set_lobby_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lobby_id)
}

// repeated .proto.dota.CDOTALobbyMember members = 2;
inline int CSODOTALobby::members_size() const {
  return members_.size();
}
inline void CSODOTALobby::clear_members() {
  members_.Clear();
}
inline ::proto::dota::CDOTALobbyMember* CSODOTALobby::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >*
CSODOTALobby::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.members)
  return &members_;
}
inline const ::proto::dota::CDOTALobbyMember& CSODOTALobby::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.members)
  return members_.Get(index);
}
inline ::proto::dota::CDOTALobbyMember* CSODOTALobby::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >&
CSODOTALobby::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.members)
  return members_;
}

// repeated .proto.dota.CDOTALobbyMember left_members = 7;
inline int CSODOTALobby::left_members_size() const {
  return left_members_.size();
}
inline void CSODOTALobby::clear_left_members() {
  left_members_.Clear();
}
inline ::proto::dota::CDOTALobbyMember* CSODOTALobby::mutable_left_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.left_members)
  return left_members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >*
CSODOTALobby::mutable_left_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.left_members)
  return &left_members_;
}
inline const ::proto::dota::CDOTALobbyMember& CSODOTALobby::left_members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.left_members)
  return left_members_.Get(index);
}
inline ::proto::dota::CDOTALobbyMember* CSODOTALobby::add_left_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.left_members)
  return left_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >&
CSODOTALobby::left_members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.left_members)
  return left_members_;
}

// optional fixed64 leader_id = 11;
inline bool CSODOTALobby::has_leader_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSODOTALobby::clear_leader_id() {
  leader_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint64 CSODOTALobby::leader_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.leader_id)
  return leader_id_;
}
inline void CSODOTALobby::set_leader_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.leader_id)
}

// optional fixed64 server_id = 6 [default = 0];
inline bool CSODOTALobby::has_server_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSODOTALobby::clear_server_id() {
  server_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint64 CSODOTALobby::server_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.server_id)
  return server_id_;
}
inline void CSODOTALobby::set_server_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  server_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.server_id)
}

// optional uint32 game_mode = 3;
inline bool CSODOTALobby::has_game_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSODOTALobby::clear_game_mode() {
  game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CSODOTALobby::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_mode)
  return game_mode_;
}
inline void CSODOTALobby::set_game_mode(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_mode)
}

// repeated fixed64 pending_invites = 10;
inline int CSODOTALobby::pending_invites_size() const {
  return pending_invites_.size();
}
inline void CSODOTALobby::clear_pending_invites() {
  pending_invites_.Clear();
}
inline ::google::protobuf::uint64 CSODOTALobby::pending_invites(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.pending_invites)
  return pending_invites_.Get(index);
}
inline void CSODOTALobby::set_pending_invites(int index, ::google::protobuf::uint64 value) {
  pending_invites_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.pending_invites)
}
inline void CSODOTALobby::add_pending_invites(::google::protobuf::uint64 value) {
  pending_invites_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.pending_invites)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::pending_invites() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.pending_invites)
  return pending_invites_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_pending_invites() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.pending_invites)
  return &pending_invites_;
}

// optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
inline bool CSODOTALobby::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSODOTALobby::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::proto::dota::CSODOTALobby_State CSODOTALobby::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.state)
  return static_cast< ::proto::dota::CSODOTALobby_State >(state_);
}
inline void CSODOTALobby::set_state(::proto::dota::CSODOTALobby_State value) {
  assert(::proto::dota::CSODOTALobby_State_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.state)
}

// optional string connect = 5;
inline bool CSODOTALobby::has_connect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSODOTALobby::clear_connect() {
  connect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CSODOTALobby::connect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.connect)
  return connect_.GetNoArena();
}
inline void CSODOTALobby::set_connect(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.connect)
}
#if LANG_CXX11
inline void CSODOTALobby::set_connect(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  connect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.connect)
}
#endif
inline void CSODOTALobby::set_connect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.connect)
}
inline void CSODOTALobby::set_connect(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.connect)
}
inline ::std::string* CSODOTALobby::mutable_connect() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.connect)
  return connect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby::release_connect() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.connect)
  if (!has_connect()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return connect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby::set_allocated_connect(::std::string* connect) {
  if (connect != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.connect)
}

// optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
inline bool CSODOTALobby::has_lobby_type() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void CSODOTALobby::clear_lobby_type() {
  lobby_type_ = -1;
  _has_bits_[2] &= ~0x00000400u;
}
inline ::proto::dota::CSODOTALobby_LobbyType CSODOTALobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lobby_type)
  return static_cast< ::proto::dota::CSODOTALobby_LobbyType >(lobby_type_);
}
inline void CSODOTALobby::set_lobby_type(::proto::dota::CSODOTALobby_LobbyType value) {
  assert(::proto::dota::CSODOTALobby_LobbyType_IsValid(value));
  _has_bits_[2] |= 0x00000400u;
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lobby_type)
}

// optional bool allow_cheats = 13;
inline bool CSODOTALobby::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSODOTALobby::clear_allow_cheats() {
  allow_cheats_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CSODOTALobby::allow_cheats() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.allow_cheats)
  return allow_cheats_;
}
inline void CSODOTALobby::set_allow_cheats(bool value) {
  _has_bits_[0] |= 0x00040000u;
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.allow_cheats)
}

// optional bool fill_with_bots = 14;
inline bool CSODOTALobby::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSODOTALobby::clear_fill_with_bots() {
  fill_with_bots_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CSODOTALobby::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.fill_with_bots)
  return fill_with_bots_;
}
inline void CSODOTALobby::set_fill_with_bots(bool value) {
  _has_bits_[0] |= 0x00080000u;
  fill_with_bots_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.fill_with_bots)
}

// optional bool intro_mode = 15;
inline bool CSODOTALobby::has_intro_mode() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSODOTALobby::clear_intro_mode() {
  intro_mode_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool CSODOTALobby::intro_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.intro_mode)
  return intro_mode_;
}
inline void CSODOTALobby::set_intro_mode(bool value) {
  _has_bits_[0] |= 0x00100000u;
  intro_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.intro_mode)
}

// optional string game_name = 16;
inline bool CSODOTALobby::has_game_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSODOTALobby::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CSODOTALobby::game_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_name)
  return game_name_.GetNoArena();
}
inline void CSODOTALobby::set_game_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_name)
}
#if LANG_CXX11
inline void CSODOTALobby::set_game_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.game_name)
}
#endif
inline void CSODOTALobby::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.game_name)
}
inline void CSODOTALobby::set_game_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.game_name)
}
inline ::std::string* CSODOTALobby::mutable_game_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby::release_game_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.game_name)
  if (!has_game_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return game_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby::set_allocated_game_name(::std::string* game_name) {
  if (game_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.game_name)
}

// repeated .proto.dota.CLobbyTeamDetails team_details = 17;
inline int CSODOTALobby::team_details_size() const {
  return team_details_.size();
}
inline void CSODOTALobby::clear_team_details() {
  team_details_.Clear();
}
inline ::proto::dota::CLobbyTeamDetails* CSODOTALobby::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.team_details)
  return team_details_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTeamDetails >*
CSODOTALobby::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.team_details)
  return &team_details_;
}
inline const ::proto::dota::CLobbyTeamDetails& CSODOTALobby::team_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.team_details)
  return team_details_.Get(index);
}
inline ::proto::dota::CLobbyTeamDetails* CSODOTALobby::add_team_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.team_details)
  return team_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTeamDetails >&
CSODOTALobby::team_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.team_details)
  return team_details_;
}

// optional uint32 tutorial_lesson = 18;
inline bool CSODOTALobby::has_tutorial_lesson() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSODOTALobby::clear_tutorial_lesson() {
  tutorial_lesson_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::tutorial_lesson() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.tutorial_lesson)
  return tutorial_lesson_;
}
inline void CSODOTALobby::set_tutorial_lesson(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  tutorial_lesson_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.tutorial_lesson)
}

// optional uint32 tournament_id = 19;
inline bool CSODOTALobby::has_tournament_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSODOTALobby::clear_tournament_id() {
  tournament_id_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.tournament_id)
  return tournament_id_;
}
inline void CSODOTALobby::set_tournament_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.tournament_id)
}

// optional uint32 tournament_game_id = 20;
inline bool CSODOTALobby::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSODOTALobby::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.tournament_game_id)
  return tournament_game_id_;
}
inline void CSODOTALobby::set_tournament_game_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.tournament_game_id)
}

// optional uint32 server_region = 21 [default = 0];
inline bool CSODOTALobby::has_server_region() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSODOTALobby::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.server_region)
  return server_region_;
}
inline void CSODOTALobby::set_server_region(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.server_region)
}

// optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CSODOTALobby::has_game_state() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSODOTALobby::clear_game_state() {
  game_state_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::proto::dota::DOTA_GameState CSODOTALobby::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_state)
  return static_cast< ::proto::dota::DOTA_GameState >(game_state_);
}
inline void CSODOTALobby::set_game_state(::proto::dota::DOTA_GameState value) {
  assert(::proto::dota::DOTA_GameState_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_state)
}

// optional uint32 num_spectators = 23;
inline bool CSODOTALobby::has_num_spectators() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSODOTALobby::clear_num_spectators() {
  num_spectators_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::num_spectators() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.num_spectators)
  return num_spectators_;
}
inline void CSODOTALobby::set_num_spectators(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  num_spectators_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.num_spectators)
}

// optional uint32 matchgroup = 25;
inline bool CSODOTALobby::has_matchgroup() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSODOTALobby::clear_matchgroup() {
  matchgroup_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::matchgroup() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.matchgroup)
  return matchgroup_;
}
inline void CSODOTALobby::set_matchgroup(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  matchgroup_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.matchgroup)
}

// optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
inline bool CSODOTALobby::has_cm_pick() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSODOTALobby::clear_cm_pick() {
  cm_pick_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::proto::dota::DOTA_CM_PICK CSODOTALobby::cm_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.cm_pick)
  return static_cast< ::proto::dota::DOTA_CM_PICK >(cm_pick_);
}
inline void CSODOTALobby::set_cm_pick(::proto::dota::DOTA_CM_PICK value) {
  assert(::proto::dota::DOTA_CM_PICK_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  cm_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.cm_pick)
}

// optional uint64 match_id = 30;
inline bool CSODOTALobby::has_match_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSODOTALobby::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::uint64 CSODOTALobby::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.match_id)
  return match_id_;
}
inline void CSODOTALobby::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00800000u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.match_id)
}

// optional bool allow_spectating = 31 [default = true];
inline bool CSODOTALobby::has_allow_spectating() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void CSODOTALobby::clear_allow_spectating() {
  allow_spectating_ = true;
  _has_bits_[2] &= ~0x00000800u;
}
inline bool CSODOTALobby::allow_spectating() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.allow_spectating)
  return allow_spectating_;
}
inline void CSODOTALobby::set_allow_spectating(bool value) {
  _has_bits_[2] |= 0x00000800u;
  allow_spectating_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.allow_spectating)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::has_bot_difficulty_radiant() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void CSODOTALobby::clear_bot_difficulty_radiant() {
  bot_difficulty_radiant_ = 3;
  _has_bits_[2] &= ~0x00001000u;
}
inline ::proto::dota::DOTABotDifficulty CSODOTALobby::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.bot_difficulty_radiant)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_radiant_);
}
inline void CSODOTALobby::set_bot_difficulty_radiant(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  _has_bits_[2] |= 0x00001000u;
  bot_difficulty_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.bot_difficulty_radiant)
}

// optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
inline bool CSODOTALobby::has_game_version() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSODOTALobby::clear_game_version() {
  game_version_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::proto::dota::DOTAGameVersion CSODOTALobby::game_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_version)
  return static_cast< ::proto::dota::DOTAGameVersion >(game_version_);
}
inline void CSODOTALobby::set_game_version(::proto::dota::DOTAGameVersion value) {
  assert(::proto::dota::DOTAGameVersion_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  game_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_version)
}

// repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
inline int CSODOTALobby::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
inline void CSODOTALobby::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
inline ::proto::dota::CLobbyTimedRewardDetails* CSODOTALobby::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >*
CSODOTALobby::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.timed_reward_details)
  return &timed_reward_details_;
}
inline const ::proto::dota::CLobbyTimedRewardDetails& CSODOTALobby::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Get(index);
}
inline ::proto::dota::CLobbyTimedRewardDetails* CSODOTALobby::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >&
CSODOTALobby::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.timed_reward_details)
  return timed_reward_details_;
}

// optional string pass_key = 39;
inline bool CSODOTALobby::has_pass_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSODOTALobby::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CSODOTALobby::pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.pass_key)
  return pass_key_.GetNoArena();
}
inline void CSODOTALobby::set_pass_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.pass_key)
}
#if LANG_CXX11
inline void CSODOTALobby::set_pass_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.pass_key)
}
#endif
inline void CSODOTALobby::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.pass_key)
}
inline void CSODOTALobby::set_pass_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.pass_key)
}
inline ::std::string* CSODOTALobby::mutable_pass_key() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby::release_pass_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.pass_key)
  if (!has_pass_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return pass_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.pass_key)
}

// optional uint32 leagueid = 42;
inline bool CSODOTALobby::has_leagueid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSODOTALobby::clear_leagueid() {
  leagueid_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::leagueid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.leagueid)
  return leagueid_;
}
inline void CSODOTALobby::set_leagueid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.leagueid)
}

// optional uint32 penalty_level_radiant = 43 [default = 0];
inline bool CSODOTALobby::has_penalty_level_radiant() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSODOTALobby::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.penalty_level_radiant)
  return penalty_level_radiant_;
}
inline void CSODOTALobby::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  penalty_level_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 44 [default = 0];
inline bool CSODOTALobby::has_penalty_level_dire() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSODOTALobby::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.penalty_level_dire)
  return penalty_level_dire_;
}
inline void CSODOTALobby::set_penalty_level_dire(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  penalty_level_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.penalty_level_dire)
}

// optional uint32 load_game_id = 45;
inline bool CSODOTALobby::has_load_game_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSODOTALobby::clear_load_game_id() {
  load_game_id_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::load_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.load_game_id)
  return load_game_id_;
}
inline void CSODOTALobby::set_load_game_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  load_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.load_game_id)
}

// optional uint32 series_type = 46;
inline bool CSODOTALobby::has_series_type() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSODOTALobby::clear_series_type() {
  series_type_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_type)
  return series_type_;
}
inline void CSODOTALobby::set_series_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_type)
}

// optional uint32 radiant_series_wins = 47;
inline bool CSODOTALobby::has_radiant_series_wins() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSODOTALobby::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.radiant_series_wins)
  return radiant_series_wins_;
}
inline void CSODOTALobby::set_radiant_series_wins(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  radiant_series_wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.radiant_series_wins)
}

// optional uint32 dire_series_wins = 48;
inline bool CSODOTALobby::has_dire_series_wins() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSODOTALobby::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CSODOTALobby::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.dire_series_wins)
  return dire_series_wins_;
}
inline void CSODOTALobby::set_dire_series_wins(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  dire_series_wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.dire_series_wins)
}

// optional uint32 loot_generated = 49;
inline bool CSODOTALobby::has_loot_generated() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSODOTALobby::clear_loot_generated() {
  loot_generated_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_generated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.loot_generated)
  return loot_generated_;
}
inline void CSODOTALobby::set_loot_generated(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  loot_generated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.loot_generated)
}

// optional uint32 loot_awarded = 50;
inline bool CSODOTALobby::has_loot_awarded() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSODOTALobby::clear_loot_awarded() {
  loot_awarded_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CSODOTALobby::loot_awarded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.loot_awarded)
  return loot_awarded_;
}
inline void CSODOTALobby::set_loot_awarded(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  loot_awarded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.loot_awarded)
}

// optional bool allchat = 51 [default = false];
inline bool CSODOTALobby::has_allchat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSODOTALobby::clear_allchat() {
  allchat_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool CSODOTALobby::allchat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.allchat)
  return allchat_;
}
inline void CSODOTALobby::set_allchat(bool value) {
  _has_bits_[0] |= 0x00200000u;
  allchat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.allchat)
}

// optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
inline bool CSODOTALobby::has_dota_tv_delay() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSODOTALobby::clear_dota_tv_delay() {
  dota_tv_delay_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::proto::dota::LobbyDotaTVDelay CSODOTALobby::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.dota_tv_delay)
  return static_cast< ::proto::dota::LobbyDotaTVDelay >(dota_tv_delay_);
}
inline void CSODOTALobby::set_dota_tv_delay(::proto::dota::LobbyDotaTVDelay value) {
  assert(::proto::dota::LobbyDotaTVDelay_IsValid(value));
  _has_bits_[1] |= 0x00000008u;
  dota_tv_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.dota_tv_delay)
}

// optional string custom_game_mode = 54;
inline bool CSODOTALobby::has_custom_game_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSODOTALobby::clear_custom_game_mode() {
  custom_game_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CSODOTALobby::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_mode)
  return custom_game_mode_.GetNoArena();
}
inline void CSODOTALobby::set_custom_game_mode(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_mode)
}
#if LANG_CXX11
inline void CSODOTALobby::set_custom_game_mode(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  custom_game_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.custom_game_mode)
}
#endif
inline void CSODOTALobby::set_custom_game_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.custom_game_mode)
}
inline void CSODOTALobby::set_custom_game_mode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.custom_game_mode)
}
inline ::std::string* CSODOTALobby::mutable_custom_game_mode() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.custom_game_mode)
  return custom_game_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby::release_custom_game_mode() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.custom_game_mode)
  if (!has_custom_game_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return custom_game_mode_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  custom_game_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_game_mode);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.custom_game_mode)
}

// optional string custom_map_name = 55;
inline bool CSODOTALobby::has_custom_map_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSODOTALobby::clear_custom_map_name() {
  custom_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CSODOTALobby::custom_map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_map_name)
  return custom_map_name_.GetNoArena();
}
inline void CSODOTALobby::set_custom_map_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_map_name)
}
#if LANG_CXX11
inline void CSODOTALobby::set_custom_map_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  custom_map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.custom_map_name)
}
#endif
inline void CSODOTALobby::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.custom_map_name)
}
inline void CSODOTALobby::set_custom_map_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.custom_map_name)
}
inline ::std::string* CSODOTALobby::mutable_custom_map_name() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.custom_map_name)
  return custom_map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.custom_map_name)
  if (!has_custom_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return custom_map_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  custom_map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.custom_map_name)
}

// optional uint32 custom_difficulty = 56;
inline bool CSODOTALobby::has_custom_difficulty() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSODOTALobby::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_difficulty)
  return custom_difficulty_;
}
inline void CSODOTALobby::set_custom_difficulty(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  custom_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_difficulty)
}

// optional bool lan = 57;
inline bool CSODOTALobby::has_lan() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSODOTALobby::clear_lan() {
  lan_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool CSODOTALobby::lan() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lan)
  return lan_;
}
inline void CSODOTALobby::set_lan(bool value) {
  _has_bits_[1] |= 0x00000080u;
  lan_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lan)
}

// repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
inline int CSODOTALobby::broadcast_channel_info_size() const {
  return broadcast_channel_info_.size();
}
inline void CSODOTALobby::clear_broadcast_channel_info() {
  broadcast_channel_info_.Clear();
}
inline ::proto::dota::CLobbyBroadcastChannelInfo* CSODOTALobby::mutable_broadcast_channel_info(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyBroadcastChannelInfo >*
CSODOTALobby::mutable_broadcast_channel_info() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.broadcast_channel_info)
  return &broadcast_channel_info_;
}
inline const ::proto::dota::CLobbyBroadcastChannelInfo& CSODOTALobby::broadcast_channel_info(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Get(index);
}
inline ::proto::dota::CLobbyBroadcastChannelInfo* CSODOTALobby::add_broadcast_channel_info() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyBroadcastChannelInfo >&
CSODOTALobby::broadcast_channel_info() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_;
}

// optional uint32 first_leaver_accountid = 59;
inline bool CSODOTALobby::has_first_leaver_accountid() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSODOTALobby::clear_first_leaver_accountid() {
  first_leaver_accountid_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CSODOTALobby::first_leaver_accountid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.first_leaver_accountid)
  return first_leaver_accountid_;
}
inline void CSODOTALobby::set_first_leaver_accountid(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  first_leaver_accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.first_leaver_accountid)
}

// optional uint32 series_id = 60;
inline bool CSODOTALobby::has_series_id() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSODOTALobby::clear_series_id() {
  series_id_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSODOTALobby::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_id)
  return series_id_;
}
inline void CSODOTALobby::set_series_id(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_id)
}

// optional bool low_priority = 61;
inline bool CSODOTALobby::has_low_priority() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSODOTALobby::clear_low_priority() {
  low_priority_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool CSODOTALobby::low_priority() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.low_priority)
  return low_priority_;
}
inline void CSODOTALobby::set_low_priority(bool value) {
  _has_bits_[1] |= 0x00000100u;
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.low_priority)
}

// repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
inline int CSODOTALobby::extra_messages_size() const {
  return extra_messages_.size();
}
inline void CSODOTALobby::clear_extra_messages() {
  extra_messages_.Clear();
}
inline ::proto::dota::CSODOTALobby_CExtraMsg* CSODOTALobby::mutable_extra_messages(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.extra_messages)
  return extra_messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobby_CExtraMsg >*
CSODOTALobby::mutable_extra_messages() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.extra_messages)
  return &extra_messages_;
}
inline const ::proto::dota::CSODOTALobby_CExtraMsg& CSODOTALobby::extra_messages(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.extra_messages)
  return extra_messages_.Get(index);
}
inline ::proto::dota::CSODOTALobby_CExtraMsg* CSODOTALobby::add_extra_messages() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.extra_messages)
  return extra_messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobby_CExtraMsg >&
CSODOTALobby::extra_messages() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.extra_messages)
  return extra_messages_;
}

// optional .proto.dota.CDOTASaveGame save_game = 63;
inline bool CSODOTALobby::has_save_game() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::proto::dota::CDOTASaveGame& CSODOTALobby::save_game() const {
  const ::proto::dota::CDOTASaveGame* p = save_game_;
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.save_game)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CDOTASaveGame*>(
      &::proto::dota::_CDOTASaveGame_default_instance_);
}
inline ::proto::dota::CDOTASaveGame* CSODOTALobby::release_save_game() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.save_game)
  _has_bits_[0] &= ~0x00000040u;
  ::proto::dota::CDOTASaveGame* temp = save_game_;
  save_game_ = nullptr;
  return temp;
}
inline ::proto::dota::CDOTASaveGame* CSODOTALobby::mutable_save_game() {
  _has_bits_[0] |= 0x00000040u;
  if (save_game_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CDOTASaveGame>(GetArenaNoVirtual());
    save_game_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.save_game)
  return save_game_;
}
inline void CSODOTALobby::set_allocated_save_game(::proto::dota::CDOTASaveGame* save_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(save_game_);
  }
  if (save_game) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      save_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, save_game, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  save_game_ = save_game;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.save_game)
}

// optional bool first_blood_happened = 65;
inline bool CSODOTALobby::has_first_blood_happened() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSODOTALobby::clear_first_blood_happened() {
  first_blood_happened_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool CSODOTALobby::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.first_blood_happened)
  return first_blood_happened_;
}
inline void CSODOTALobby::set_first_blood_happened(bool value) {
  _has_bits_[1] |= 0x00000200u;
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.first_blood_happened)
}

// optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
inline bool CSODOTALobby::has_match_outcome() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CSODOTALobby::clear_match_outcome() {
  match_outcome_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::proto::dota::EMatchOutcome CSODOTALobby::match_outcome() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.match_outcome)
  return static_cast< ::proto::dota::EMatchOutcome >(match_outcome_);
}
inline void CSODOTALobby::set_match_outcome(::proto::dota::EMatchOutcome value) {
  assert(::proto::dota::EMatchOutcome_IsValid(value));
  _has_bits_[1] |= 0x00001000u;
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.match_outcome)
}

// optional bool mass_disconnect = 67;
inline bool CSODOTALobby::has_mass_disconnect() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CSODOTALobby::clear_mass_disconnect() {
  mass_disconnect_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool CSODOTALobby::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.mass_disconnect)
  return mass_disconnect_;
}
inline void CSODOTALobby::set_mass_disconnect(bool value) {
  _has_bits_[1] |= 0x00000400u;
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.mass_disconnect)
}

// optional uint64 custom_game_id = 68;
inline bool CSODOTALobby::has_custom_game_id() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CSODOTALobby::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000800u;
}
inline ::google::protobuf::uint64 CSODOTALobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_id)
  return custom_game_id_;
}
inline void CSODOTALobby::set_custom_game_id(::google::protobuf::uint64 value) {
  _has_bits_[1] |= 0x00000800u;
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_id)
}

// optional uint32 custom_min_players = 71;
inline bool CSODOTALobby::has_custom_min_players() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CSODOTALobby::clear_custom_min_players() {
  custom_min_players_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_min_players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_min_players)
  return custom_min_players_;
}
inline void CSODOTALobby::set_custom_min_players(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  custom_min_players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_min_players)
}

// optional uint32 custom_max_players = 72;
inline bool CSODOTALobby::has_custom_max_players() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CSODOTALobby::clear_custom_max_players() {
  custom_max_players_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_max_players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_max_players)
  return custom_max_players_;
}
inline void CSODOTALobby::set_custom_max_players(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  custom_max_players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_max_players)
}

// optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
inline bool CSODOTALobby::has_partner_type() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CSODOTALobby::clear_partner_type() {
  partner_type_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::proto::dota::PartnerAccountType CSODOTALobby::partner_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.partner_type)
  return static_cast< ::proto::dota::PartnerAccountType >(partner_type_);
}
inline void CSODOTALobby::set_partner_type(::proto::dota::PartnerAccountType value) {
  assert(::proto::dota::PartnerAccountType_IsValid(value));
  _has_bits_[1] |= 0x00008000u;
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.partner_type)
}

// optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
inline bool CSODOTALobby::has_visibility() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CSODOTALobby::clear_visibility() {
  visibility_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::proto::dota::DOTALobbyVisibility CSODOTALobby::visibility() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.visibility)
  return static_cast< ::proto::dota::DOTALobbyVisibility >(visibility_);
}
inline void CSODOTALobby::set_visibility(::proto::dota::DOTALobbyVisibility value) {
  assert(::proto::dota::DOTALobbyVisibility_IsValid(value));
  _has_bits_[1] |= 0x00020000u;
  visibility_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.visibility)
}

// optional fixed64 custom_game_crc = 76;
inline bool CSODOTALobby::has_custom_game_crc() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CSODOTALobby::clear_custom_game_crc() {
  custom_game_crc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00010000u;
}
inline ::google::protobuf::uint64 CSODOTALobby::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_crc)
  return custom_game_crc_;
}
inline void CSODOTALobby::set_custom_game_crc(::google::protobuf::uint64 value) {
  _has_bits_[1] |= 0x00010000u;
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_crc)
}

// optional bool custom_game_auto_created_lobby = 77;
inline bool CSODOTALobby::has_custom_game_auto_created_lobby() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CSODOTALobby::clear_custom_game_auto_created_lobby() {
  custom_game_auto_created_lobby_ = false;
  _has_bits_[1] &= ~0x02000000u;
}
inline bool CSODOTALobby::custom_game_auto_created_lobby() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_auto_created_lobby)
  return custom_game_auto_created_lobby_;
}
inline void CSODOTALobby::set_custom_game_auto_created_lobby(bool value) {
  _has_bits_[1] |= 0x02000000u;
  custom_game_auto_created_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_auto_created_lobby)
}

// optional fixed32 custom_game_timestamp = 80;
inline bool CSODOTALobby::has_custom_game_timestamp() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CSODOTALobby::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_timestamp)
  return custom_game_timestamp_;
}
inline void CSODOTALobby::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00040000u;
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_timestamp)
}

// repeated uint64 previous_series_matches = 81;
inline int CSODOTALobby::previous_series_matches_size() const {
  return previous_series_matches_.size();
}
inline void CSODOTALobby::clear_previous_series_matches() {
  previous_series_matches_.Clear();
}
inline ::google::protobuf::uint64 CSODOTALobby::previous_series_matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.previous_series_matches)
  return previous_series_matches_.Get(index);
}
inline void CSODOTALobby::set_previous_series_matches(int index, ::google::protobuf::uint64 value) {
  previous_series_matches_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.previous_series_matches)
}
inline void CSODOTALobby::add_previous_series_matches(::google::protobuf::uint64 value) {
  previous_series_matches_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.previous_series_matches)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::previous_series_matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.previous_series_matches)
  return previous_series_matches_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_previous_series_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.previous_series_matches)
  return &previous_series_matches_;
}

// optional uint64 previous_match_override = 82;
inline bool CSODOTALobby::has_previous_match_override() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CSODOTALobby::clear_previous_match_override() {
  previous_match_override_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00080000u;
}
inline ::google::protobuf::uint64 CSODOTALobby::previous_match_override() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.previous_match_override)
  return previous_match_override_;
}
inline void CSODOTALobby::set_previous_match_override(::google::protobuf::uint64 value) {
  _has_bits_[1] |= 0x00080000u;
  previous_match_override_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.previous_match_override)
}

// optional bool custom_game_uses_account_records = 83;
inline bool CSODOTALobby::has_custom_game_uses_account_records() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CSODOTALobby::clear_custom_game_uses_account_records() {
  custom_game_uses_account_records_ = false;
  _has_bits_[1] &= ~0x04000000u;
}
inline bool CSODOTALobby::custom_game_uses_account_records() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_uses_account_records)
  return custom_game_uses_account_records_;
}
inline void CSODOTALobby::set_custom_game_uses_account_records(bool value) {
  _has_bits_[1] |= 0x04000000u;
  custom_game_uses_account_records_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_uses_account_records)
}

// optional uint32 game_start_time = 87;
inline bool CSODOTALobby::has_game_start_time() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CSODOTALobby::clear_game_start_time() {
  game_start_time_ = 0u;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::game_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_start_time)
  return game_start_time_;
}
inline void CSODOTALobby::set_game_start_time(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00100000u;
  game_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_start_time)
}

// optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
inline bool CSODOTALobby::has_pause_setting() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CSODOTALobby::clear_pause_setting() {
  pause_setting_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::proto::dota::LobbyDotaPauseSetting CSODOTALobby::pause_setting() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.pause_setting)
  return static_cast< ::proto::dota::LobbyDotaPauseSetting >(pause_setting_);
}
inline void CSODOTALobby::set_pause_setting(::proto::dota::LobbyDotaPauseSetting value) {
  assert(::proto::dota::LobbyDotaPauseSetting_IsValid(value));
  _has_bits_[1] |= 0x00200000u;
  pause_setting_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.pause_setting)
}

// optional uint32 lobby_mvp_account_id = 89;
inline bool CSODOTALobby::has_lobby_mvp_account_id() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CSODOTALobby::clear_lobby_mvp_account_id() {
  lobby_mvp_account_id_ = 0u;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::lobby_mvp_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lobby_mvp_account_id)
  return lobby_mvp_account_id_;
}
inline void CSODOTALobby::set_lobby_mvp_account_id(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00400000u;
  lobby_mvp_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lobby_mvp_account_id)
}

// optional uint32 weekend_tourney_division_id = 90;
inline bool CSODOTALobby::has_weekend_tourney_division_id() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CSODOTALobby::clear_weekend_tourney_division_id() {
  weekend_tourney_division_id_ = 0u;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::weekend_tourney_division_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.weekend_tourney_division_id)
  return weekend_tourney_division_id_;
}
inline void CSODOTALobby::set_weekend_tourney_division_id(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00800000u;
  weekend_tourney_division_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.weekend_tourney_division_id)
}

// optional uint32 weekend_tourney_skill_level = 91;
inline bool CSODOTALobby::has_weekend_tourney_skill_level() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CSODOTALobby::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
inline void CSODOTALobby::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x01000000u;
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 92;
inline bool CSODOTALobby::has_weekend_tourney_bracket_round() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CSODOTALobby::clear_weekend_tourney_bracket_round() {
  weekend_tourney_bracket_round_ = 0u;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CSODOTALobby::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.weekend_tourney_bracket_round)
  return weekend_tourney_bracket_round_;
}
inline void CSODOTALobby::set_weekend_tourney_bracket_round(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x40000000u;
  weekend_tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.weekend_tourney_bracket_round)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::has_bot_difficulty_dire() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void CSODOTALobby::clear_bot_difficulty_dire() {
  bot_difficulty_dire_ = 3;
  _has_bits_[2] &= ~0x00002000u;
}
inline ::proto::dota::DOTABotDifficulty CSODOTALobby::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.bot_difficulty_dire)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_dire_);
}
inline void CSODOTALobby::set_bot_difficulty_dire(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  _has_bits_[2] |= 0x00002000u;
  bot_difficulty_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.bot_difficulty_dire)
}

// optional uint64 bot_radiant = 94;
inline bool CSODOTALobby::has_bot_radiant() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CSODOTALobby::clear_bot_radiant() {
  bot_radiant_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x20000000u;
}
inline ::google::protobuf::uint64 CSODOTALobby::bot_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.bot_radiant)
  return bot_radiant_;
}
inline void CSODOTALobby::set_bot_radiant(::google::protobuf::uint64 value) {
  _has_bits_[1] |= 0x20000000u;
  bot_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.bot_radiant)
}

// optional uint64 bot_dire = 95;
inline bool CSODOTALobby::has_bot_dire() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CSODOTALobby::clear_bot_dire() {
  bot_dire_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[2] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CSODOTALobby::bot_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.bot_dire)
  return bot_dire_;
}
inline void CSODOTALobby::set_bot_dire(::google::protobuf::uint64 value) {
  _has_bits_[2] |= 0x00000001u;
  bot_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.bot_dire)
}

// repeated .proto.dota.EEvent event_progression_enabled = 96;
inline int CSODOTALobby::event_progression_enabled_size() const {
  return event_progression_enabled_.size();
}
inline void CSODOTALobby::clear_event_progression_enabled() {
  event_progression_enabled_.Clear();
}
inline ::proto::dota::EEvent CSODOTALobby::event_progression_enabled(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.event_progression_enabled)
  return static_cast< ::proto::dota::EEvent >(event_progression_enabled_.Get(index));
}
inline void CSODOTALobby::set_event_progression_enabled(int index, ::proto::dota::EEvent value) {
  assert(::proto::dota::EEvent_IsValid(value));
  event_progression_enabled_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.event_progression_enabled)
}
inline void CSODOTALobby::add_event_progression_enabled(::proto::dota::EEvent value) {
  assert(::proto::dota::EEvent_IsValid(value));
  event_progression_enabled_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.event_progression_enabled)
}
inline const ::google::protobuf::RepeatedField<int>&
CSODOTALobby::event_progression_enabled() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.event_progression_enabled)
  return event_progression_enabled_;
}
inline ::google::protobuf::RepeatedField<int>*
CSODOTALobby::mutable_event_progression_enabled() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.event_progression_enabled)
  return &event_progression_enabled_;
}

// optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
inline bool CSODOTALobby::has_selection_priority_rules() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CSODOTALobby::clear_selection_priority_rules() {
  selection_priority_rules_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::proto::dota::DOTASelectionPriorityRules CSODOTALobby::selection_priority_rules() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.selection_priority_rules)
  return static_cast< ::proto::dota::DOTASelectionPriorityRules >(selection_priority_rules_);
}
inline void CSODOTALobby::set_selection_priority_rules(::proto::dota::DOTASelectionPriorityRules value) {
  assert(::proto::dota::DOTASelectionPriorityRules_IsValid(value));
  _has_bits_[1] |= 0x80000000u;
  selection_priority_rules_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.selection_priority_rules)
}

// optional uint32 series_previous_selection_priority_team_id = 98;
inline bool CSODOTALobby::has_series_previous_selection_priority_team_id() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CSODOTALobby::clear_series_previous_selection_priority_team_id() {
  series_previous_selection_priority_team_id_ = 0u;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CSODOTALobby::series_previous_selection_priority_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_previous_selection_priority_team_id)
  return series_previous_selection_priority_team_id_;
}
inline void CSODOTALobby::set_series_previous_selection_priority_team_id(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000002u;
  series_previous_selection_priority_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_previous_selection_priority_team_id)
}

// optional uint32 series_current_selection_priority_team_id = 99;
inline bool CSODOTALobby::has_series_current_selection_priority_team_id() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CSODOTALobby::clear_series_current_selection_priority_team_id() {
  series_current_selection_priority_team_id_ = 0u;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CSODOTALobby::series_current_selection_priority_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_current_selection_priority_team_id)
  return series_current_selection_priority_team_id_;
}
inline void CSODOTALobby::set_series_current_selection_priority_team_id(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000004u;
  series_current_selection_priority_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_current_selection_priority_team_id)
}

// optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
inline bool CSODOTALobby::has_series_current_priority_team_choice() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CSODOTALobby::clear_series_current_priority_team_choice() {
  series_current_priority_team_choice_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline ::proto::dota::DOTASelectionPriorityChoice CSODOTALobby::series_current_priority_team_choice() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_current_priority_team_choice)
  return static_cast< ::proto::dota::DOTASelectionPriorityChoice >(series_current_priority_team_choice_);
}
inline void CSODOTALobby::set_series_current_priority_team_choice(::proto::dota::DOTASelectionPriorityChoice value) {
  assert(::proto::dota::DOTASelectionPriorityChoice_IsValid(value));
  _has_bits_[2] |= 0x00000008u;
  series_current_priority_team_choice_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_current_priority_team_choice)
}

// optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
inline bool CSODOTALobby::has_series_current_non_priority_team_choice() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CSODOTALobby::clear_series_current_non_priority_team_choice() {
  series_current_non_priority_team_choice_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::proto::dota::DOTASelectionPriorityChoice CSODOTALobby::series_current_non_priority_team_choice() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_current_non_priority_team_choice)
  return static_cast< ::proto::dota::DOTASelectionPriorityChoice >(series_current_non_priority_team_choice_);
}
inline void CSODOTALobby::set_series_current_non_priority_team_choice(::proto::dota::DOTASelectionPriorityChoice value) {
  assert(::proto::dota::DOTASelectionPriorityChoice_IsValid(value));
  _has_bits_[2] |= 0x00000010u;
  series_current_non_priority_team_choice_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_current_non_priority_team_choice)
}

// optional bool series_current_selection_priority_used_coin_toss = 102;
inline bool CSODOTALobby::has_series_current_selection_priority_used_coin_toss() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CSODOTALobby::clear_series_current_selection_priority_used_coin_toss() {
  series_current_selection_priority_used_coin_toss_ = false;
  _has_bits_[1] &= ~0x08000000u;
}
inline bool CSODOTALobby::series_current_selection_priority_used_coin_toss() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_current_selection_priority_used_coin_toss)
  return series_current_selection_priority_used_coin_toss_;
}
inline void CSODOTALobby::set_series_current_selection_priority_used_coin_toss(bool value) {
  _has_bits_[1] |= 0x08000000u;
  series_current_selection_priority_used_coin_toss_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_current_selection_priority_used_coin_toss)
}

// optional .proto.dota.EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
inline bool CSODOTALobby::has_current_primary_event() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CSODOTALobby::clear_current_primary_event() {
  current_primary_event_ = 0;
  _has_bits_[2] &= ~0x00000020u;
}
inline ::proto::dota::EEvent CSODOTALobby::current_primary_event() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.current_primary_event)
  return static_cast< ::proto::dota::EEvent >(current_primary_event_);
}
inline void CSODOTALobby::set_current_primary_event(::proto::dota::EEvent value) {
  assert(::proto::dota::EEvent_IsValid(value));
  _has_bits_[2] |= 0x00000020u;
  current_primary_event_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.current_primary_event)
}

// optional bool lowpri_deprecated = 104;
inline bool CSODOTALobby::has_lowpri_deprecated() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CSODOTALobby::clear_lowpri_deprecated() {
  lowpri_deprecated_ = false;
  _has_bits_[1] &= ~0x10000000u;
}
inline bool CSODOTALobby::lowpri_deprecated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lowpri_deprecated)
  return lowpri_deprecated_;
}
inline void CSODOTALobby::set_lowpri_deprecated(bool value) {
  _has_bits_[1] |= 0x10000000u;
  lowpri_deprecated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lowpri_deprecated)
}

// repeated uint32 emergency_disabled_hero_ids = 105;
inline int CSODOTALobby::emergency_disabled_hero_ids_size() const {
  return emergency_disabled_hero_ids_.size();
}
inline void CSODOTALobby::clear_emergency_disabled_hero_ids() {
  emergency_disabled_hero_ids_.Clear();
}
inline ::google::protobuf::uint32 CSODOTALobby::emergency_disabled_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.emergency_disabled_hero_ids)
  return emergency_disabled_hero_ids_.Get(index);
}
inline void CSODOTALobby::set_emergency_disabled_hero_ids(int index, ::google::protobuf::uint32 value) {
  emergency_disabled_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.emergency_disabled_hero_ids)
}
inline void CSODOTALobby::add_emergency_disabled_hero_ids(::google::protobuf::uint32 value) {
  emergency_disabled_hero_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.emergency_disabled_hero_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTALobby::emergency_disabled_hero_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.emergency_disabled_hero_ids)
  return emergency_disabled_hero_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTALobby::mutable_emergency_disabled_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.emergency_disabled_hero_ids)
  return &emergency_disabled_hero_ids_;
}

// optional fixed64 custom_game_private_key = 106;
inline bool CSODOTALobby::has_custom_game_private_key() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void CSODOTALobby::clear_custom_game_private_key() {
  custom_game_private_key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[2] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 CSODOTALobby::custom_game_private_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_private_key)
  return custom_game_private_key_;
}
inline void CSODOTALobby::set_custom_game_private_key(::google::protobuf::uint64 value) {
  _has_bits_[2] |= 0x00000080u;
  custom_game_private_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_private_key)
}

// optional bool custom_game_penalties = 107;
inline bool CSODOTALobby::has_custom_game_penalties() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void CSODOTALobby::clear_custom_game_penalties() {
  custom_game_penalties_ = false;
  _has_bits_[2] &= ~0x00000040u;
}
inline bool CSODOTALobby::custom_game_penalties() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_penalties)
  return custom_game_penalties_;
}
inline void CSODOTALobby::set_custom_game_penalties(bool value) {
  _has_bits_[2] |= 0x00000040u;
  custom_game_penalties_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_penalties)
}

// repeated uint32 mutations = 108;
inline int CSODOTALobby::mutations_size() const {
  return mutations_.size();
}
inline void CSODOTALobby::clear_mutations() {
  mutations_.Clear();
}
inline ::google::protobuf::uint32 CSODOTALobby::mutations(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.mutations)
  return mutations_.Get(index);
}
inline void CSODOTALobby::set_mutations(int index, ::google::protobuf::uint32 value) {
  mutations_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.mutations)
}
inline void CSODOTALobby::add_mutations(::google::protobuf::uint32 value) {
  mutations_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.mutations)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTALobby::mutations() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.mutations)
  return mutations_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTALobby::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.mutations)
  return &mutations_;
}

// optional string lan_host_ping_location = 109;
inline bool CSODOTALobby::has_lan_host_ping_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSODOTALobby::clear_lan_host_ping_location() {
  lan_host_ping_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& CSODOTALobby::lan_host_ping_location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lan_host_ping_location)
  return lan_host_ping_location_.GetNoArena();
}
inline void CSODOTALobby::set_lan_host_ping_location(const ::std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  lan_host_ping_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lan_host_ping_location)
}
#if LANG_CXX11
inline void CSODOTALobby::set_lan_host_ping_location(::std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  lan_host_ping_location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.lan_host_ping_location)
}
#endif
inline void CSODOTALobby::set_lan_host_ping_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  lan_host_ping_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.lan_host_ping_location)
}
inline void CSODOTALobby::set_lan_host_ping_location(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  lan_host_ping_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.lan_host_ping_location)
}
inline ::std::string* CSODOTALobby::mutable_lan_host_ping_location() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.lan_host_ping_location)
  return lan_host_ping_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSODOTALobby::release_lan_host_ping_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.lan_host_ping_location)
  if (!has_lan_host_ping_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return lan_host_ping_location_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSODOTALobby::set_allocated_lan_host_ping_location(::std::string* lan_host_ping_location) {
  if (lan_host_ping_location != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  lan_host_ping_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lan_host_ping_location);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.lan_host_ping_location)
}

// optional uint32 league_node_id = 110;
inline bool CSODOTALobby::has_league_node_id() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void CSODOTALobby::clear_league_node_id() {
  league_node_id_ = 0u;
  _has_bits_[2] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CSODOTALobby::league_node_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.league_node_id)
  return league_node_id_;
}
inline void CSODOTALobby::set_league_node_id(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000100u;
  league_node_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.league_node_id)
}

// optional uint32 match_duration = 111;
inline bool CSODOTALobby::has_match_duration() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void CSODOTALobby::clear_match_duration() {
  match_duration_ = 0u;
  _has_bits_[2] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CSODOTALobby::match_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.match_duration)
  return match_duration_;
}
inline void CSODOTALobby::set_match_duration(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000200u;
  match_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.match_duration)
}

// -------------------------------------------------------------------

// CMsgLobbyPlaytestDetails

// optional string json = 1;
inline bool CMsgLobbyPlaytestDetails::has_json() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyPlaytestDetails::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgLobbyPlaytestDetails::json() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyPlaytestDetails.json)
  return json_.GetNoArena();
}
inline void CMsgLobbyPlaytestDetails::set_json(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyPlaytestDetails.json)
}
#if LANG_CXX11
inline void CMsgLobbyPlaytestDetails::set_json(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgLobbyPlaytestDetails.json)
}
#endif
inline void CMsgLobbyPlaytestDetails::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgLobbyPlaytestDetails.json)
}
inline void CMsgLobbyPlaytestDetails::set_json(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgLobbyPlaytestDetails.json)
}
inline ::std::string* CMsgLobbyPlaytestDetails::mutable_json() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyPlaytestDetails.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgLobbyPlaytestDetails::release_json() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLobbyPlaytestDetails.json)
  if (!has_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return json_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgLobbyPlaytestDetails::set_allocated_json(::std::string* json) {
  if (json != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLobbyPlaytestDetails.json)
}

// -------------------------------------------------------------------

// CMsgReadyCheckStatus_ReadyMember

// optional uint32 account_id = 1;
inline bool CMsgReadyCheckStatus_ReadyMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgReadyCheckStatus_ReadyMember::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgReadyCheckStatus_ReadyMember::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyCheckStatus.ReadyMember.account_id)
  return account_id_;
}
inline void CMsgReadyCheckStatus_ReadyMember::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyCheckStatus.ReadyMember.account_id)
}

// optional .proto.dota.EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
inline bool CMsgReadyCheckStatus_ReadyMember::has_ready_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgReadyCheckStatus_ReadyMember::clear_ready_status() {
  ready_status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::dota::EReadyCheckStatus CMsgReadyCheckStatus_ReadyMember::ready_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyCheckStatus.ReadyMember.ready_status)
  return static_cast< ::proto::dota::EReadyCheckStatus >(ready_status_);
}
inline void CMsgReadyCheckStatus_ReadyMember::set_ready_status(::proto::dota::EReadyCheckStatus value) {
  assert(::proto::dota::EReadyCheckStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ready_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyCheckStatus.ReadyMember.ready_status)
}

// -------------------------------------------------------------------

// CMsgReadyCheckStatus

// optional uint32 start_timestamp = 1;
inline bool CMsgReadyCheckStatus::has_start_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgReadyCheckStatus::clear_start_timestamp() {
  start_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgReadyCheckStatus::start_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyCheckStatus.start_timestamp)
  return start_timestamp_;
}
inline void CMsgReadyCheckStatus::set_start_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyCheckStatus.start_timestamp)
}

// optional uint32 finish_timestamp = 2;
inline bool CMsgReadyCheckStatus::has_finish_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgReadyCheckStatus::clear_finish_timestamp() {
  finish_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgReadyCheckStatus::finish_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyCheckStatus.finish_timestamp)
  return finish_timestamp_;
}
inline void CMsgReadyCheckStatus::set_finish_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  finish_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyCheckStatus.finish_timestamp)
}

// optional uint32 initiator_account_id = 3;
inline bool CMsgReadyCheckStatus::has_initiator_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgReadyCheckStatus::clear_initiator_account_id() {
  initiator_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgReadyCheckStatus::initiator_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyCheckStatus.initiator_account_id)
  return initiator_account_id_;
}
inline void CMsgReadyCheckStatus::set_initiator_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  initiator_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyCheckStatus.initiator_account_id)
}

// repeated .proto.dota.CMsgReadyCheckStatus.ReadyMember ready_members = 4;
inline int CMsgReadyCheckStatus::ready_members_size() const {
  return ready_members_.size();
}
inline void CMsgReadyCheckStatus::clear_ready_members() {
  ready_members_.Clear();
}
inline ::proto::dota::CMsgReadyCheckStatus_ReadyMember* CMsgReadyCheckStatus::mutable_ready_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgReadyCheckStatus.ready_members)
  return ready_members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgReadyCheckStatus_ReadyMember >*
CMsgReadyCheckStatus::mutable_ready_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgReadyCheckStatus.ready_members)
  return &ready_members_;
}
inline const ::proto::dota::CMsgReadyCheckStatus_ReadyMember& CMsgReadyCheckStatus::ready_members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyCheckStatus.ready_members)
  return ready_members_.Get(index);
}
inline ::proto::dota::CMsgReadyCheckStatus_ReadyMember* CMsgReadyCheckStatus::add_ready_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgReadyCheckStatus.ready_members)
  return ready_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgReadyCheckStatus_ReadyMember >&
CMsgReadyCheckStatus::ready_members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgReadyCheckStatus.ready_members)
  return ready_members_;
}

// -------------------------------------------------------------------

// CMsgPartyReadyCheckRequest

// -------------------------------------------------------------------

// CMsgPartyReadyCheckResponse

// optional .proto.dota.EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
inline bool CMsgPartyReadyCheckResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPartyReadyCheckResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::proto::dota::EReadyCheckRequestResult CMsgPartyReadyCheckResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyReadyCheckResponse.result)
  return static_cast< ::proto::dota::EReadyCheckRequestResult >(result_);
}
inline void CMsgPartyReadyCheckResponse::set_result(::proto::dota::EReadyCheckRequestResult value) {
  assert(::proto::dota::EReadyCheckRequestResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyReadyCheckResponse.result)
}

// -------------------------------------------------------------------

// CMsgPartyReadyCheckAcknowledge

// optional .proto.dota.EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
inline bool CMsgPartyReadyCheckAcknowledge::has_ready_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPartyReadyCheckAcknowledge::clear_ready_status() {
  ready_status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::proto::dota::EReadyCheckStatus CMsgPartyReadyCheckAcknowledge::ready_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyReadyCheckAcknowledge.ready_status)
  return static_cast< ::proto::dota::EReadyCheckStatus >(ready_status_);
}
inline void CMsgPartyReadyCheckAcknowledge::set_ready_status(::proto::dota::EReadyCheckStatus value) {
  assert(::proto::dota::EReadyCheckStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  ready_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyReadyCheckAcknowledge.ready_status)
}

// -------------------------------------------------------------------

// CMsgLobbyEventGameDetails

// optional bytes kv_data = 1;
inline bool CMsgLobbyEventGameDetails::has_kv_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgLobbyEventGameDetails::clear_kv_data() {
  kv_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgLobbyEventGameDetails::kv_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventGameDetails.kv_data)
  return kv_data_.GetNoArena();
}
inline void CMsgLobbyEventGameDetails::set_kv_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  kv_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventGameDetails.kv_data)
}
#if LANG_CXX11
inline void CMsgLobbyEventGameDetails::set_kv_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  kv_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgLobbyEventGameDetails.kv_data)
}
#endif
inline void CMsgLobbyEventGameDetails::set_kv_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  kv_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgLobbyEventGameDetails.kv_data)
}
inline void CMsgLobbyEventGameDetails::set_kv_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  kv_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgLobbyEventGameDetails.kv_data)
}
inline ::std::string* CMsgLobbyEventGameDetails::mutable_kv_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventGameDetails.kv_data)
  return kv_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgLobbyEventGameDetails::release_kv_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLobbyEventGameDetails.kv_data)
  if (!has_kv_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return kv_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgLobbyEventGameDetails::set_allocated_kv_data(::std::string* kv_data) {
  if (kv_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kv_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kv_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLobbyEventGameDetails.kv_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::dota::CSODOTAParty_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CSODOTAParty_State>() {
  return ::proto::dota::CSODOTAParty_State_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CSODOTALobby_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CSODOTALobby_State>() {
  return ::proto::dota::CSODOTALobby_State_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CSODOTALobby_LobbyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CSODOTALobby_LobbyType>() {
  return ::proto::dota::CSODOTALobby_LobbyType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELaneSelectionFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELaneSelectionFlags>() {
  return ::proto::dota::ELaneSelectionFlags_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::LobbyDotaTVDelay> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::LobbyDotaTVDelay>() {
  return ::proto::dota::LobbyDotaTVDelay_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::LobbyDotaPauseSetting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::LobbyDotaPauseSetting>() {
  return ::proto::dota::LobbyDotaPauseSetting_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EReadyCheckStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EReadyCheckStatus>() {
  return ::proto::dota::EReadyCheckStatus_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EReadyCheckRequestResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EReadyCheckRequestResult>() {
  return ::proto::dota::EReadyCheckRequestResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto
