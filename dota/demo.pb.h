// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef PROTOBUF_INCLUDED_demo_2eproto
#define PROTOBUF_INCLUDED_demo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_demo_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_demo_2eproto();
namespace proto {
namespace dota {
class CDemoClassInfo;
class CDemoClassInfoDefaultTypeInternal;
extern CDemoClassInfoDefaultTypeInternal _CDemoClassInfo_default_instance_;
class CDemoClassInfo_class_t;
class CDemoClassInfo_class_tDefaultTypeInternal;
extern CDemoClassInfo_class_tDefaultTypeInternal _CDemoClassInfo_class_t_default_instance_;
class CDemoConsoleCmd;
class CDemoConsoleCmdDefaultTypeInternal;
extern CDemoConsoleCmdDefaultTypeInternal _CDemoConsoleCmd_default_instance_;
class CDemoCustomData;
class CDemoCustomDataDefaultTypeInternal;
extern CDemoCustomDataDefaultTypeInternal _CDemoCustomData_default_instance_;
class CDemoCustomDataCallbacks;
class CDemoCustomDataCallbacksDefaultTypeInternal;
extern CDemoCustomDataCallbacksDefaultTypeInternal _CDemoCustomDataCallbacks_default_instance_;
class CDemoFileHeader;
class CDemoFileHeaderDefaultTypeInternal;
extern CDemoFileHeaderDefaultTypeInternal _CDemoFileHeader_default_instance_;
class CDemoFileInfo;
class CDemoFileInfoDefaultTypeInternal;
extern CDemoFileInfoDefaultTypeInternal _CDemoFileInfo_default_instance_;
class CDemoFullPacket;
class CDemoFullPacketDefaultTypeInternal;
extern CDemoFullPacketDefaultTypeInternal _CDemoFullPacket_default_instance_;
class CDemoPacket;
class CDemoPacketDefaultTypeInternal;
extern CDemoPacketDefaultTypeInternal _CDemoPacket_default_instance_;
class CDemoSaveGame;
class CDemoSaveGameDefaultTypeInternal;
extern CDemoSaveGameDefaultTypeInternal _CDemoSaveGame_default_instance_;
class CDemoSendTables;
class CDemoSendTablesDefaultTypeInternal;
extern CDemoSendTablesDefaultTypeInternal _CDemoSendTables_default_instance_;
class CDemoSpawnGroups;
class CDemoSpawnGroupsDefaultTypeInternal;
extern CDemoSpawnGroupsDefaultTypeInternal _CDemoSpawnGroups_default_instance_;
class CDemoStop;
class CDemoStopDefaultTypeInternal;
extern CDemoStopDefaultTypeInternal _CDemoStop_default_instance_;
class CDemoStringTables;
class CDemoStringTablesDefaultTypeInternal;
extern CDemoStringTablesDefaultTypeInternal _CDemoStringTables_default_instance_;
class CDemoStringTables_items_t;
class CDemoStringTables_items_tDefaultTypeInternal;
extern CDemoStringTables_items_tDefaultTypeInternal _CDemoStringTables_items_t_default_instance_;
class CDemoStringTables_table_t;
class CDemoStringTables_table_tDefaultTypeInternal;
extern CDemoStringTables_table_tDefaultTypeInternal _CDemoStringTables_table_t_default_instance_;
class CDemoSyncTick;
class CDemoSyncTickDefaultTypeInternal;
extern CDemoSyncTickDefaultTypeInternal _CDemoSyncTick_default_instance_;
class CDemoUserCmd;
class CDemoUserCmdDefaultTypeInternal;
extern CDemoUserCmdDefaultTypeInternal _CDemoUserCmd_default_instance_;
class CGameInfo;
class CGameInfoDefaultTypeInternal;
extern CGameInfoDefaultTypeInternal _CGameInfo_default_instance_;
class CGameInfo_CDotaGameInfo;
class CGameInfo_CDotaGameInfoDefaultTypeInternal;
extern CGameInfo_CDotaGameInfoDefaultTypeInternal _CGameInfo_CDotaGameInfo_default_instance_;
class CGameInfo_CDotaGameInfo_CHeroSelectEvent;
class CGameInfo_CDotaGameInfo_CHeroSelectEventDefaultTypeInternal;
extern CGameInfo_CDotaGameInfo_CHeroSelectEventDefaultTypeInternal _CGameInfo_CDotaGameInfo_CHeroSelectEvent_default_instance_;
class CGameInfo_CDotaGameInfo_CPlayerInfo;
class CGameInfo_CDotaGameInfo_CPlayerInfoDefaultTypeInternal;
extern CGameInfo_CDotaGameInfo_CPlayerInfoDefaultTypeInternal _CGameInfo_CDotaGameInfo_CPlayerInfo_default_instance_;
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::dota::CDemoClassInfo* Arena::CreateMaybeMessage<::proto::dota::CDemoClassInfo>(Arena*);
template<> ::proto::dota::CDemoClassInfo_class_t* Arena::CreateMaybeMessage<::proto::dota::CDemoClassInfo_class_t>(Arena*);
template<> ::proto::dota::CDemoConsoleCmd* Arena::CreateMaybeMessage<::proto::dota::CDemoConsoleCmd>(Arena*);
template<> ::proto::dota::CDemoCustomData* Arena::CreateMaybeMessage<::proto::dota::CDemoCustomData>(Arena*);
template<> ::proto::dota::CDemoCustomDataCallbacks* Arena::CreateMaybeMessage<::proto::dota::CDemoCustomDataCallbacks>(Arena*);
template<> ::proto::dota::CDemoFileHeader* Arena::CreateMaybeMessage<::proto::dota::CDemoFileHeader>(Arena*);
template<> ::proto::dota::CDemoFileInfo* Arena::CreateMaybeMessage<::proto::dota::CDemoFileInfo>(Arena*);
template<> ::proto::dota::CDemoFullPacket* Arena::CreateMaybeMessage<::proto::dota::CDemoFullPacket>(Arena*);
template<> ::proto::dota::CDemoPacket* Arena::CreateMaybeMessage<::proto::dota::CDemoPacket>(Arena*);
template<> ::proto::dota::CDemoSaveGame* Arena::CreateMaybeMessage<::proto::dota::CDemoSaveGame>(Arena*);
template<> ::proto::dota::CDemoSendTables* Arena::CreateMaybeMessage<::proto::dota::CDemoSendTables>(Arena*);
template<> ::proto::dota::CDemoSpawnGroups* Arena::CreateMaybeMessage<::proto::dota::CDemoSpawnGroups>(Arena*);
template<> ::proto::dota::CDemoStop* Arena::CreateMaybeMessage<::proto::dota::CDemoStop>(Arena*);
template<> ::proto::dota::CDemoStringTables* Arena::CreateMaybeMessage<::proto::dota::CDemoStringTables>(Arena*);
template<> ::proto::dota::CDemoStringTables_items_t* Arena::CreateMaybeMessage<::proto::dota::CDemoStringTables_items_t>(Arena*);
template<> ::proto::dota::CDemoStringTables_table_t* Arena::CreateMaybeMessage<::proto::dota::CDemoStringTables_table_t>(Arena*);
template<> ::proto::dota::CDemoSyncTick* Arena::CreateMaybeMessage<::proto::dota::CDemoSyncTick>(Arena*);
template<> ::proto::dota::CDemoUserCmd* Arena::CreateMaybeMessage<::proto::dota::CDemoUserCmd>(Arena*);
template<> ::proto::dota::CGameInfo* Arena::CreateMaybeMessage<::proto::dota::CGameInfo>(Arena*);
template<> ::proto::dota::CGameInfo_CDotaGameInfo* Arena::CreateMaybeMessage<::proto::dota::CGameInfo_CDotaGameInfo>(Arena*);
template<> ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent* Arena::CreateMaybeMessage<::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent>(Arena*);
template<> ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo* Arena::CreateMaybeMessage<::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace dota {

enum EDemoCommands {
  DEM_Error = -1,
  DEM_Stop = 0,
  DEM_FileHeader = 1,
  DEM_FileInfo = 2,
  DEM_SyncTick = 3,
  DEM_SendTables = 4,
  DEM_ClassInfo = 5,
  DEM_StringTables = 6,
  DEM_Packet = 7,
  DEM_SignonPacket = 8,
  DEM_ConsoleCmd = 9,
  DEM_CustomData = 10,
  DEM_CustomDataCallbacks = 11,
  DEM_UserCmd = 12,
  DEM_FullPacket = 13,
  DEM_SaveGame = 14,
  DEM_SpawnGroups = 15,
  DEM_Max = 16,
  DEM_IsCompressed = 64
};
bool EDemoCommands_IsValid(int value);
const EDemoCommands EDemoCommands_MIN = DEM_Error;
const EDemoCommands EDemoCommands_MAX = DEM_IsCompressed;
const int EDemoCommands_ARRAYSIZE = EDemoCommands_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDemoCommands_descriptor();
inline const ::std::string& EDemoCommands_Name(EDemoCommands value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDemoCommands_descriptor(), value);
}
inline bool EDemoCommands_Parse(
    const ::std::string& name, EDemoCommands* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDemoCommands>(
    EDemoCommands_descriptor(), name, value);
}
// ===================================================================

class CDemoFileHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoFileHeader) */ {
 public:
  CDemoFileHeader();
  virtual ~CDemoFileHeader();

  CDemoFileHeader(const CDemoFileHeader& from);

  inline CDemoFileHeader& operator=(const CDemoFileHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoFileHeader(CDemoFileHeader&& from) noexcept
    : CDemoFileHeader() {
    *this = ::std::move(from);
  }

  inline CDemoFileHeader& operator=(CDemoFileHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoFileHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoFileHeader* internal_default_instance() {
    return reinterpret_cast<const CDemoFileHeader*>(
               &_CDemoFileHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CDemoFileHeader* other);
  friend void swap(CDemoFileHeader& a, CDemoFileHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoFileHeader* New() const final {
    return CreateMaybeMessage<CDemoFileHeader>(nullptr);
  }

  CDemoFileHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoFileHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoFileHeader& from);
  void MergeFrom(const CDemoFileHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoFileHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string demo_file_stamp = 1;
  bool has_demo_file_stamp() const;
  void clear_demo_file_stamp();
  static const int kDemoFileStampFieldNumber = 1;
  const ::std::string& demo_file_stamp() const;
  void set_demo_file_stamp(const ::std::string& value);
  #if LANG_CXX11
  void set_demo_file_stamp(::std::string&& value);
  #endif
  void set_demo_file_stamp(const char* value);
  void set_demo_file_stamp(const char* value, size_t size);
  ::std::string* mutable_demo_file_stamp();
  ::std::string* release_demo_file_stamp();
  void set_allocated_demo_file_stamp(::std::string* demo_file_stamp);

  // optional string server_name = 3;
  bool has_server_name() const;
  void clear_server_name();
  static const int kServerNameFieldNumber = 3;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // optional string client_name = 4;
  bool has_client_name() const;
  void clear_client_name();
  static const int kClientNameFieldNumber = 4;
  const ::std::string& client_name() const;
  void set_client_name(const ::std::string& value);
  #if LANG_CXX11
  void set_client_name(::std::string&& value);
  #endif
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  ::std::string* mutable_client_name();
  ::std::string* release_client_name();
  void set_allocated_client_name(::std::string* client_name);

  // optional string map_name = 5;
  bool has_map_name() const;
  void clear_map_name();
  static const int kMapNameFieldNumber = 5;
  const ::std::string& map_name() const;
  void set_map_name(const ::std::string& value);
  #if LANG_CXX11
  void set_map_name(::std::string&& value);
  #endif
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  ::std::string* mutable_map_name();
  ::std::string* release_map_name();
  void set_allocated_map_name(::std::string* map_name);

  // optional string game_directory = 6;
  bool has_game_directory() const;
  void clear_game_directory();
  static const int kGameDirectoryFieldNumber = 6;
  const ::std::string& game_directory() const;
  void set_game_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_game_directory(::std::string&& value);
  #endif
  void set_game_directory(const char* value);
  void set_game_directory(const char* value, size_t size);
  ::std::string* mutable_game_directory();
  ::std::string* release_game_directory();
  void set_allocated_game_directory(::std::string* game_directory);

  // optional string addons = 10;
  bool has_addons() const;
  void clear_addons();
  static const int kAddonsFieldNumber = 10;
  const ::std::string& addons() const;
  void set_addons(const ::std::string& value);
  #if LANG_CXX11
  void set_addons(::std::string&& value);
  #endif
  void set_addons(const char* value);
  void set_addons(const char* value, size_t size);
  ::std::string* mutable_addons();
  ::std::string* release_addons();
  void set_allocated_addons(::std::string* addons);

  // optional int32 network_protocol = 2;
  bool has_network_protocol() const;
  void clear_network_protocol();
  static const int kNetworkProtocolFieldNumber = 2;
  ::google::protobuf::int32 network_protocol() const;
  void set_network_protocol(::google::protobuf::int32 value);

  // optional int32 fullpackets_version = 7;
  bool has_fullpackets_version() const;
  void clear_fullpackets_version();
  static const int kFullpacketsVersionFieldNumber = 7;
  ::google::protobuf::int32 fullpackets_version() const;
  void set_fullpackets_version(::google::protobuf::int32 value);

  // optional bool allow_clientside_entities = 8;
  bool has_allow_clientside_entities() const;
  void clear_allow_clientside_entities();
  static const int kAllowClientsideEntitiesFieldNumber = 8;
  bool allow_clientside_entities() const;
  void set_allow_clientside_entities(bool value);

  // optional bool allow_clientside_particles = 9;
  bool has_allow_clientside_particles() const;
  void clear_allow_clientside_particles();
  static const int kAllowClientsideParticlesFieldNumber = 9;
  bool allow_clientside_particles() const;
  void set_allow_clientside_particles(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoFileHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr demo_file_stamp_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr client_name_;
  ::google::protobuf::internal::ArenaStringPtr map_name_;
  ::google::protobuf::internal::ArenaStringPtr game_directory_;
  ::google::protobuf::internal::ArenaStringPtr addons_;
  ::google::protobuf::int32 network_protocol_;
  ::google::protobuf::int32 fullpackets_version_;
  bool allow_clientside_entities_;
  bool allow_clientside_particles_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CGameInfo_CDotaGameInfo_CPlayerInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo) */ {
 public:
  CGameInfo_CDotaGameInfo_CPlayerInfo();
  virtual ~CGameInfo_CDotaGameInfo_CPlayerInfo();

  CGameInfo_CDotaGameInfo_CPlayerInfo(const CGameInfo_CDotaGameInfo_CPlayerInfo& from);

  inline CGameInfo_CDotaGameInfo_CPlayerInfo& operator=(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameInfo_CDotaGameInfo_CPlayerInfo(CGameInfo_CDotaGameInfo_CPlayerInfo&& from) noexcept
    : CGameInfo_CDotaGameInfo_CPlayerInfo() {
    *this = ::std::move(from);
  }

  inline CGameInfo_CDotaGameInfo_CPlayerInfo& operator=(CGameInfo_CDotaGameInfo_CPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameInfo_CDotaGameInfo_CPlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameInfo_CDotaGameInfo_CPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const CGameInfo_CDotaGameInfo_CPlayerInfo*>(
               &_CGameInfo_CDotaGameInfo_CPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CGameInfo_CDotaGameInfo_CPlayerInfo* other);
  friend void swap(CGameInfo_CDotaGameInfo_CPlayerInfo& a, CGameInfo_CDotaGameInfo_CPlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameInfo_CDotaGameInfo_CPlayerInfo* New() const final {
    return CreateMaybeMessage<CGameInfo_CDotaGameInfo_CPlayerInfo>(nullptr);
  }

  CGameInfo_CDotaGameInfo_CPlayerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameInfo_CDotaGameInfo_CPlayerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from);
  void MergeFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameInfo_CDotaGameInfo_CPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hero_name = 1;
  bool has_hero_name() const;
  void clear_hero_name();
  static const int kHeroNameFieldNumber = 1;
  const ::std::string& hero_name() const;
  void set_hero_name(const ::std::string& value);
  #if LANG_CXX11
  void set_hero_name(::std::string&& value);
  #endif
  void set_hero_name(const char* value);
  void set_hero_name(const char* value, size_t size);
  ::std::string* mutable_hero_name();
  ::std::string* release_hero_name();
  void set_allocated_hero_name(::std::string* hero_name);

  // optional string player_name = 2;
  bool has_player_name() const;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  #if LANG_CXX11
  void set_player_name(::std::string&& value);
  #endif
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // optional uint64 steamid = 4;
  bool has_steamid() const;
  void clear_steamid();
  static const int kSteamidFieldNumber = 4;
  ::google::protobuf::uint64 steamid() const;
  void set_steamid(::google::protobuf::uint64 value);

  // optional bool is_fake_client = 3;
  bool has_is_fake_client() const;
  void clear_is_fake_client();
  static const int kIsFakeClientFieldNumber = 3;
  bool is_fake_client() const;
  void set_is_fake_client(bool value);

  // optional int32 game_team = 5;
  bool has_game_team() const;
  void clear_game_team();
  static const int kGameTeamFieldNumber = 5;
  ::google::protobuf::int32 game_team() const;
  void set_game_team(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hero_name_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  ::google::protobuf::uint64 steamid_;
  bool is_fake_client_;
  ::google::protobuf::int32 game_team_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CGameInfo_CDotaGameInfo_CHeroSelectEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent) */ {
 public:
  CGameInfo_CDotaGameInfo_CHeroSelectEvent();
  virtual ~CGameInfo_CDotaGameInfo_CHeroSelectEvent();

  CGameInfo_CDotaGameInfo_CHeroSelectEvent(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from);

  inline CGameInfo_CDotaGameInfo_CHeroSelectEvent& operator=(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameInfo_CDotaGameInfo_CHeroSelectEvent(CGameInfo_CDotaGameInfo_CHeroSelectEvent&& from) noexcept
    : CGameInfo_CDotaGameInfo_CHeroSelectEvent() {
    *this = ::std::move(from);
  }

  inline CGameInfo_CDotaGameInfo_CHeroSelectEvent& operator=(CGameInfo_CDotaGameInfo_CHeroSelectEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameInfo_CDotaGameInfo_CHeroSelectEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameInfo_CDotaGameInfo_CHeroSelectEvent* internal_default_instance() {
    return reinterpret_cast<const CGameInfo_CDotaGameInfo_CHeroSelectEvent*>(
               &_CGameInfo_CDotaGameInfo_CHeroSelectEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CGameInfo_CDotaGameInfo_CHeroSelectEvent* other);
  friend void swap(CGameInfo_CDotaGameInfo_CHeroSelectEvent& a, CGameInfo_CDotaGameInfo_CHeroSelectEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameInfo_CDotaGameInfo_CHeroSelectEvent* New() const final {
    return CreateMaybeMessage<CGameInfo_CDotaGameInfo_CHeroSelectEvent>(nullptr);
  }

  CGameInfo_CDotaGameInfo_CHeroSelectEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameInfo_CDotaGameInfo_CHeroSelectEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from);
  void MergeFrom(const CGameInfo_CDotaGameInfo_CHeroSelectEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameInfo_CDotaGameInfo_CHeroSelectEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_pick = 1;
  bool has_is_pick() const;
  void clear_is_pick();
  static const int kIsPickFieldNumber = 1;
  bool is_pick() const;
  void set_is_pick(bool value);

  // optional uint32 team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  ::google::protobuf::uint32 team() const;
  void set_team(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool is_pick_;
  ::google::protobuf::uint32 team_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CGameInfo_CDotaGameInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CGameInfo.CDotaGameInfo) */ {
 public:
  CGameInfo_CDotaGameInfo();
  virtual ~CGameInfo_CDotaGameInfo();

  CGameInfo_CDotaGameInfo(const CGameInfo_CDotaGameInfo& from);

  inline CGameInfo_CDotaGameInfo& operator=(const CGameInfo_CDotaGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameInfo_CDotaGameInfo(CGameInfo_CDotaGameInfo&& from) noexcept
    : CGameInfo_CDotaGameInfo() {
    *this = ::std::move(from);
  }

  inline CGameInfo_CDotaGameInfo& operator=(CGameInfo_CDotaGameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameInfo_CDotaGameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameInfo_CDotaGameInfo* internal_default_instance() {
    return reinterpret_cast<const CGameInfo_CDotaGameInfo*>(
               &_CGameInfo_CDotaGameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CGameInfo_CDotaGameInfo* other);
  friend void swap(CGameInfo_CDotaGameInfo& a, CGameInfo_CDotaGameInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameInfo_CDotaGameInfo* New() const final {
    return CreateMaybeMessage<CGameInfo_CDotaGameInfo>(nullptr);
  }

  CGameInfo_CDotaGameInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameInfo_CDotaGameInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameInfo_CDotaGameInfo& from);
  void MergeFrom(const CGameInfo_CDotaGameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameInfo_CDotaGameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGameInfo_CDotaGameInfo_CPlayerInfo CPlayerInfo;
  typedef CGameInfo_CDotaGameInfo_CHeroSelectEvent CHeroSelectEvent;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  int player_info_size() const;
  void clear_player_info();
  static const int kPlayerInfoFieldNumber = 4;
  ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo* mutable_player_info(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo >*
      mutable_player_info();
  const ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo& player_info(int index) const;
  ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo* add_player_info();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo >&
      player_info() const;

  // repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
  int picks_bans_size() const;
  void clear_picks_bans();
  static const int kPicksBansFieldNumber = 6;
  ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent* mutable_picks_bans(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent >*
      mutable_picks_bans();
  const ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent& picks_bans(int index) const;
  ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent* add_picks_bans();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent >&
      picks_bans() const;

  // optional string radiant_team_tag = 9;
  bool has_radiant_team_tag() const;
  void clear_radiant_team_tag();
  static const int kRadiantTeamTagFieldNumber = 9;
  const ::std::string& radiant_team_tag() const;
  void set_radiant_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_tag(::std::string&& value);
  #endif
  void set_radiant_team_tag(const char* value);
  void set_radiant_team_tag(const char* value, size_t size);
  ::std::string* mutable_radiant_team_tag();
  ::std::string* release_radiant_team_tag();
  void set_allocated_radiant_team_tag(::std::string* radiant_team_tag);

  // optional string dire_team_tag = 10;
  bool has_dire_team_tag() const;
  void clear_dire_team_tag();
  static const int kDireTeamTagFieldNumber = 10;
  const ::std::string& dire_team_tag() const;
  void set_dire_team_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_tag(::std::string&& value);
  #endif
  void set_dire_team_tag(const char* value);
  void set_dire_team_tag(const char* value, size_t size);
  ::std::string* mutable_dire_team_tag();
  ::std::string* release_dire_team_tag();
  void set_allocated_dire_team_tag(::std::string* dire_team_tag);

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional int32 game_mode = 2;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 2;
  ::google::protobuf::int32 game_mode() const;
  void set_game_mode(::google::protobuf::int32 value);

  // optional int32 game_winner = 3;
  bool has_game_winner() const;
  void clear_game_winner();
  static const int kGameWinnerFieldNumber = 3;
  ::google::protobuf::int32 game_winner() const;
  void set_game_winner(::google::protobuf::int32 value);

  // optional uint32 leagueid = 5;
  bool has_leagueid() const;
  void clear_leagueid();
  static const int kLeagueidFieldNumber = 5;
  ::google::protobuf::uint32 leagueid() const;
  void set_leagueid(::google::protobuf::uint32 value);

  // optional uint32 radiant_team_id = 7;
  bool has_radiant_team_id() const;
  void clear_radiant_team_id();
  static const int kRadiantTeamIdFieldNumber = 7;
  ::google::protobuf::uint32 radiant_team_id() const;
  void set_radiant_team_id(::google::protobuf::uint32 value);

  // optional uint32 dire_team_id = 8;
  bool has_dire_team_id() const;
  void clear_dire_team_id();
  static const int kDireTeamIdFieldNumber = 8;
  ::google::protobuf::uint32 dire_team_id() const;
  void set_dire_team_id(::google::protobuf::uint32 value);

  // optional uint32 end_time = 11;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 11;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CGameInfo.CDotaGameInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo > player_info_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent > picks_bans_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_tag_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_tag_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::int32 game_mode_;
  ::google::protobuf::int32 game_winner_;
  ::google::protobuf::uint32 leagueid_;
  ::google::protobuf::uint32 radiant_team_id_;
  ::google::protobuf::uint32 dire_team_id_;
  ::google::protobuf::uint32 end_time_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CGameInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CGameInfo) */ {
 public:
  CGameInfo();
  virtual ~CGameInfo();

  CGameInfo(const CGameInfo& from);

  inline CGameInfo& operator=(const CGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CGameInfo(CGameInfo&& from) noexcept
    : CGameInfo() {
    *this = ::std::move(from);
  }

  inline CGameInfo& operator=(CGameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CGameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameInfo* internal_default_instance() {
    return reinterpret_cast<const CGameInfo*>(
               &_CGameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CGameInfo* other);
  friend void swap(CGameInfo& a, CGameInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CGameInfo* New() const final {
    return CreateMaybeMessage<CGameInfo>(nullptr);
  }

  CGameInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CGameInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CGameInfo& from);
  void MergeFrom(const CGameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CGameInfo_CDotaGameInfo CDotaGameInfo;

  // accessors -------------------------------------------------------

  // optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
  bool has_dota() const;
  void clear_dota();
  static const int kDotaFieldNumber = 4;
  const ::proto::dota::CGameInfo_CDotaGameInfo& dota() const;
  ::proto::dota::CGameInfo_CDotaGameInfo* release_dota();
  ::proto::dota::CGameInfo_CDotaGameInfo* mutable_dota();
  void set_allocated_dota(::proto::dota::CGameInfo_CDotaGameInfo* dota);

  // @@protoc_insertion_point(class_scope:proto.dota.CGameInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::dota::CGameInfo_CDotaGameInfo* dota_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoFileInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoFileInfo) */ {
 public:
  CDemoFileInfo();
  virtual ~CDemoFileInfo();

  CDemoFileInfo(const CDemoFileInfo& from);

  inline CDemoFileInfo& operator=(const CDemoFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoFileInfo(CDemoFileInfo&& from) noexcept
    : CDemoFileInfo() {
    *this = ::std::move(from);
  }

  inline CDemoFileInfo& operator=(CDemoFileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoFileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoFileInfo* internal_default_instance() {
    return reinterpret_cast<const CDemoFileInfo*>(
               &_CDemoFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CDemoFileInfo* other);
  friend void swap(CDemoFileInfo& a, CDemoFileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoFileInfo* New() const final {
    return CreateMaybeMessage<CDemoFileInfo>(nullptr);
  }

  CDemoFileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoFileInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoFileInfo& from);
  void MergeFrom(const CDemoFileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoFileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CGameInfo game_info = 4;
  bool has_game_info() const;
  void clear_game_info();
  static const int kGameInfoFieldNumber = 4;
  const ::proto::dota::CGameInfo& game_info() const;
  ::proto::dota::CGameInfo* release_game_info();
  ::proto::dota::CGameInfo* mutable_game_info();
  void set_allocated_game_info(::proto::dota::CGameInfo* game_info);

  // optional float playback_time = 1;
  bool has_playback_time() const;
  void clear_playback_time();
  static const int kPlaybackTimeFieldNumber = 1;
  float playback_time() const;
  void set_playback_time(float value);

  // optional int32 playback_ticks = 2;
  bool has_playback_ticks() const;
  void clear_playback_ticks();
  static const int kPlaybackTicksFieldNumber = 2;
  ::google::protobuf::int32 playback_ticks() const;
  void set_playback_ticks(::google::protobuf::int32 value);

  // optional int32 playback_frames = 3;
  bool has_playback_frames() const;
  void clear_playback_frames();
  static const int kPlaybackFramesFieldNumber = 3;
  ::google::protobuf::int32 playback_frames() const;
  void set_playback_frames(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoFileInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::dota::CGameInfo* game_info_;
  float playback_time_;
  ::google::protobuf::int32 playback_ticks_;
  ::google::protobuf::int32 playback_frames_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoPacket final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoPacket) */ {
 public:
  CDemoPacket();
  virtual ~CDemoPacket();

  CDemoPacket(const CDemoPacket& from);

  inline CDemoPacket& operator=(const CDemoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoPacket(CDemoPacket&& from) noexcept
    : CDemoPacket() {
    *this = ::std::move(from);
  }

  inline CDemoPacket& operator=(CDemoPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoPacket* internal_default_instance() {
    return reinterpret_cast<const CDemoPacket*>(
               &_CDemoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CDemoPacket* other);
  friend void swap(CDemoPacket& a, CDemoPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoPacket* New() const final {
    return CreateMaybeMessage<CDemoPacket>(nullptr);
  }

  CDemoPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoPacket& from);
  void MergeFrom(const CDemoPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoPacket)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoFullPacket final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoFullPacket) */ {
 public:
  CDemoFullPacket();
  virtual ~CDemoFullPacket();

  CDemoFullPacket(const CDemoFullPacket& from);

  inline CDemoFullPacket& operator=(const CDemoFullPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoFullPacket(CDemoFullPacket&& from) noexcept
    : CDemoFullPacket() {
    *this = ::std::move(from);
  }

  inline CDemoFullPacket& operator=(CDemoFullPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoFullPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoFullPacket* internal_default_instance() {
    return reinterpret_cast<const CDemoFullPacket*>(
               &_CDemoFullPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CDemoFullPacket* other);
  friend void swap(CDemoFullPacket& a, CDemoFullPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoFullPacket* New() const final {
    return CreateMaybeMessage<CDemoFullPacket>(nullptr);
  }

  CDemoFullPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoFullPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoFullPacket& from);
  void MergeFrom(const CDemoFullPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoFullPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CDemoStringTables string_table = 1;
  bool has_string_table() const;
  void clear_string_table();
  static const int kStringTableFieldNumber = 1;
  const ::proto::dota::CDemoStringTables& string_table() const;
  ::proto::dota::CDemoStringTables* release_string_table();
  ::proto::dota::CDemoStringTables* mutable_string_table();
  void set_allocated_string_table(::proto::dota::CDemoStringTables* string_table);

  // optional .proto.dota.CDemoPacket packet = 2;
  bool has_packet() const;
  void clear_packet();
  static const int kPacketFieldNumber = 2;
  const ::proto::dota::CDemoPacket& packet() const;
  ::proto::dota::CDemoPacket* release_packet();
  ::proto::dota::CDemoPacket* mutable_packet();
  void set_allocated_packet(::proto::dota::CDemoPacket* packet);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoFullPacket)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::dota::CDemoStringTables* string_table_;
  ::proto::dota::CDemoPacket* packet_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoSaveGame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoSaveGame) */ {
 public:
  CDemoSaveGame();
  virtual ~CDemoSaveGame();

  CDemoSaveGame(const CDemoSaveGame& from);

  inline CDemoSaveGame& operator=(const CDemoSaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoSaveGame(CDemoSaveGame&& from) noexcept
    : CDemoSaveGame() {
    *this = ::std::move(from);
  }

  inline CDemoSaveGame& operator=(CDemoSaveGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoSaveGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoSaveGame* internal_default_instance() {
    return reinterpret_cast<const CDemoSaveGame*>(
               &_CDemoSaveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CDemoSaveGame* other);
  friend void swap(CDemoSaveGame& a, CDemoSaveGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoSaveGame* New() const final {
    return CreateMaybeMessage<CDemoSaveGame>(nullptr);
  }

  CDemoSaveGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoSaveGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoSaveGame& from);
  void MergeFrom(const CDemoSaveGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoSaveGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  ::google::protobuf::uint64 signature() const;
  void set_signature(::google::protobuf::uint64 value);

  // optional int32 version = 4;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoSaveGame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint64 signature_;
  ::google::protobuf::int32 version_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoSyncTick final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoSyncTick) */ {
 public:
  CDemoSyncTick();
  virtual ~CDemoSyncTick();

  CDemoSyncTick(const CDemoSyncTick& from);

  inline CDemoSyncTick& operator=(const CDemoSyncTick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoSyncTick(CDemoSyncTick&& from) noexcept
    : CDemoSyncTick() {
    *this = ::std::move(from);
  }

  inline CDemoSyncTick& operator=(CDemoSyncTick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoSyncTick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoSyncTick* internal_default_instance() {
    return reinterpret_cast<const CDemoSyncTick*>(
               &_CDemoSyncTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CDemoSyncTick* other);
  friend void swap(CDemoSyncTick& a, CDemoSyncTick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoSyncTick* New() const final {
    return CreateMaybeMessage<CDemoSyncTick>(nullptr);
  }

  CDemoSyncTick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoSyncTick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoSyncTick& from);
  void MergeFrom(const CDemoSyncTick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoSyncTick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoSyncTick)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoConsoleCmd final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoConsoleCmd) */ {
 public:
  CDemoConsoleCmd();
  virtual ~CDemoConsoleCmd();

  CDemoConsoleCmd(const CDemoConsoleCmd& from);

  inline CDemoConsoleCmd& operator=(const CDemoConsoleCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoConsoleCmd(CDemoConsoleCmd&& from) noexcept
    : CDemoConsoleCmd() {
    *this = ::std::move(from);
  }

  inline CDemoConsoleCmd& operator=(CDemoConsoleCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoConsoleCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoConsoleCmd* internal_default_instance() {
    return reinterpret_cast<const CDemoConsoleCmd*>(
               &_CDemoConsoleCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CDemoConsoleCmd* other);
  friend void swap(CDemoConsoleCmd& a, CDemoConsoleCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoConsoleCmd* New() const final {
    return CreateMaybeMessage<CDemoConsoleCmd>(nullptr);
  }

  CDemoConsoleCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoConsoleCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoConsoleCmd& from);
  void MergeFrom(const CDemoConsoleCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoConsoleCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cmdstring = 1;
  bool has_cmdstring() const;
  void clear_cmdstring();
  static const int kCmdstringFieldNumber = 1;
  const ::std::string& cmdstring() const;
  void set_cmdstring(const ::std::string& value);
  #if LANG_CXX11
  void set_cmdstring(::std::string&& value);
  #endif
  void set_cmdstring(const char* value);
  void set_cmdstring(const char* value, size_t size);
  ::std::string* mutable_cmdstring();
  ::std::string* release_cmdstring();
  void set_allocated_cmdstring(::std::string* cmdstring);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoConsoleCmd)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cmdstring_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoSendTables final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoSendTables) */ {
 public:
  CDemoSendTables();
  virtual ~CDemoSendTables();

  CDemoSendTables(const CDemoSendTables& from);

  inline CDemoSendTables& operator=(const CDemoSendTables& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoSendTables(CDemoSendTables&& from) noexcept
    : CDemoSendTables() {
    *this = ::std::move(from);
  }

  inline CDemoSendTables& operator=(CDemoSendTables&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoSendTables& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoSendTables* internal_default_instance() {
    return reinterpret_cast<const CDemoSendTables*>(
               &_CDemoSendTables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CDemoSendTables* other);
  friend void swap(CDemoSendTables& a, CDemoSendTables& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoSendTables* New() const final {
    return CreateMaybeMessage<CDemoSendTables>(nullptr);
  }

  CDemoSendTables* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoSendTables>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoSendTables& from);
  void MergeFrom(const CDemoSendTables& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoSendTables* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoSendTables)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoClassInfo_class_t final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoClassInfo.class_t) */ {
 public:
  CDemoClassInfo_class_t();
  virtual ~CDemoClassInfo_class_t();

  CDemoClassInfo_class_t(const CDemoClassInfo_class_t& from);

  inline CDemoClassInfo_class_t& operator=(const CDemoClassInfo_class_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoClassInfo_class_t(CDemoClassInfo_class_t&& from) noexcept
    : CDemoClassInfo_class_t() {
    *this = ::std::move(from);
  }

  inline CDemoClassInfo_class_t& operator=(CDemoClassInfo_class_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoClassInfo_class_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoClassInfo_class_t* internal_default_instance() {
    return reinterpret_cast<const CDemoClassInfo_class_t*>(
               &_CDemoClassInfo_class_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CDemoClassInfo_class_t* other);
  friend void swap(CDemoClassInfo_class_t& a, CDemoClassInfo_class_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoClassInfo_class_t* New() const final {
    return CreateMaybeMessage<CDemoClassInfo_class_t>(nullptr);
  }

  CDemoClassInfo_class_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoClassInfo_class_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoClassInfo_class_t& from);
  void MergeFrom(const CDemoClassInfo_class_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoClassInfo_class_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string network_name = 2;
  bool has_network_name() const;
  void clear_network_name();
  static const int kNetworkNameFieldNumber = 2;
  const ::std::string& network_name() const;
  void set_network_name(const ::std::string& value);
  #if LANG_CXX11
  void set_network_name(::std::string&& value);
  #endif
  void set_network_name(const char* value);
  void set_network_name(const char* value, size_t size);
  ::std::string* mutable_network_name();
  ::std::string* release_network_name();
  void set_allocated_network_name(::std::string* network_name);

  // optional string table_name = 3;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 3;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // optional int32 class_id = 1;
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  ::google::protobuf::int32 class_id() const;
  void set_class_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoClassInfo.class_t)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr network_name_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::int32 class_id_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoClassInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoClassInfo) */ {
 public:
  CDemoClassInfo();
  virtual ~CDemoClassInfo();

  CDemoClassInfo(const CDemoClassInfo& from);

  inline CDemoClassInfo& operator=(const CDemoClassInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoClassInfo(CDemoClassInfo&& from) noexcept
    : CDemoClassInfo() {
    *this = ::std::move(from);
  }

  inline CDemoClassInfo& operator=(CDemoClassInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoClassInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoClassInfo* internal_default_instance() {
    return reinterpret_cast<const CDemoClassInfo*>(
               &_CDemoClassInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CDemoClassInfo* other);
  friend void swap(CDemoClassInfo& a, CDemoClassInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoClassInfo* New() const final {
    return CreateMaybeMessage<CDemoClassInfo>(nullptr);
  }

  CDemoClassInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoClassInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoClassInfo& from);
  void MergeFrom(const CDemoClassInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoClassInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDemoClassInfo_class_t class_t;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
  int classes_size() const;
  void clear_classes();
  static const int kClassesFieldNumber = 1;
  ::proto::dota::CDemoClassInfo_class_t* mutable_classes(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoClassInfo_class_t >*
      mutable_classes();
  const ::proto::dota::CDemoClassInfo_class_t& classes(int index) const;
  ::proto::dota::CDemoClassInfo_class_t* add_classes();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoClassInfo_class_t >&
      classes() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoClassInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoClassInfo_class_t > classes_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoCustomData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoCustomData) */ {
 public:
  CDemoCustomData();
  virtual ~CDemoCustomData();

  CDemoCustomData(const CDemoCustomData& from);

  inline CDemoCustomData& operator=(const CDemoCustomData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoCustomData(CDemoCustomData&& from) noexcept
    : CDemoCustomData() {
    *this = ::std::move(from);
  }

  inline CDemoCustomData& operator=(CDemoCustomData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoCustomData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoCustomData* internal_default_instance() {
    return reinterpret_cast<const CDemoCustomData*>(
               &_CDemoCustomData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CDemoCustomData* other);
  friend void swap(CDemoCustomData& a, CDemoCustomData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoCustomData* New() const final {
    return CreateMaybeMessage<CDemoCustomData>(nullptr);
  }

  CDemoCustomData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoCustomData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoCustomData& from);
  void MergeFrom(const CDemoCustomData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoCustomData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 callback_index = 1;
  bool has_callback_index() const;
  void clear_callback_index();
  static const int kCallbackIndexFieldNumber = 1;
  ::google::protobuf::int32 callback_index() const;
  void set_callback_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoCustomData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 callback_index_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoCustomDataCallbacks final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoCustomDataCallbacks) */ {
 public:
  CDemoCustomDataCallbacks();
  virtual ~CDemoCustomDataCallbacks();

  CDemoCustomDataCallbacks(const CDemoCustomDataCallbacks& from);

  inline CDemoCustomDataCallbacks& operator=(const CDemoCustomDataCallbacks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoCustomDataCallbacks(CDemoCustomDataCallbacks&& from) noexcept
    : CDemoCustomDataCallbacks() {
    *this = ::std::move(from);
  }

  inline CDemoCustomDataCallbacks& operator=(CDemoCustomDataCallbacks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoCustomDataCallbacks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoCustomDataCallbacks* internal_default_instance() {
    return reinterpret_cast<const CDemoCustomDataCallbacks*>(
               &_CDemoCustomDataCallbacks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CDemoCustomDataCallbacks* other);
  friend void swap(CDemoCustomDataCallbacks& a, CDemoCustomDataCallbacks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoCustomDataCallbacks* New() const final {
    return CreateMaybeMessage<CDemoCustomDataCallbacks>(nullptr);
  }

  CDemoCustomDataCallbacks* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoCustomDataCallbacks>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoCustomDataCallbacks& from);
  void MergeFrom(const CDemoCustomDataCallbacks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoCustomDataCallbacks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string save_id = 1;
  int save_id_size() const;
  void clear_save_id();
  static const int kSaveIdFieldNumber = 1;
  const ::std::string& save_id(int index) const;
  ::std::string* mutable_save_id(int index);
  void set_save_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_save_id(int index, ::std::string&& value);
  #endif
  void set_save_id(int index, const char* value);
  void set_save_id(int index, const char* value, size_t size);
  ::std::string* add_save_id();
  void add_save_id(const ::std::string& value);
  #if LANG_CXX11
  void add_save_id(::std::string&& value);
  #endif
  void add_save_id(const char* value);
  void add_save_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& save_id() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_save_id();

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoCustomDataCallbacks)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> save_id_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoStringTables_items_t final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoStringTables.items_t) */ {
 public:
  CDemoStringTables_items_t();
  virtual ~CDemoStringTables_items_t();

  CDemoStringTables_items_t(const CDemoStringTables_items_t& from);

  inline CDemoStringTables_items_t& operator=(const CDemoStringTables_items_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoStringTables_items_t(CDemoStringTables_items_t&& from) noexcept
    : CDemoStringTables_items_t() {
    *this = ::std::move(from);
  }

  inline CDemoStringTables_items_t& operator=(CDemoStringTables_items_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoStringTables_items_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoStringTables_items_t* internal_default_instance() {
    return reinterpret_cast<const CDemoStringTables_items_t*>(
               &_CDemoStringTables_items_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CDemoStringTables_items_t* other);
  friend void swap(CDemoStringTables_items_t& a, CDemoStringTables_items_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoStringTables_items_t* New() const final {
    return CreateMaybeMessage<CDemoStringTables_items_t>(nullptr);
  }

  CDemoStringTables_items_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoStringTables_items_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoStringTables_items_t& from);
  void MergeFrom(const CDemoStringTables_items_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoStringTables_items_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string str = 1;
  bool has_str() const;
  void clear_str();
  static const int kStrFieldNumber = 1;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoStringTables.items_t)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoStringTables_table_t final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoStringTables.table_t) */ {
 public:
  CDemoStringTables_table_t();
  virtual ~CDemoStringTables_table_t();

  CDemoStringTables_table_t(const CDemoStringTables_table_t& from);

  inline CDemoStringTables_table_t& operator=(const CDemoStringTables_table_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoStringTables_table_t(CDemoStringTables_table_t&& from) noexcept
    : CDemoStringTables_table_t() {
    *this = ::std::move(from);
  }

  inline CDemoStringTables_table_t& operator=(CDemoStringTables_table_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoStringTables_table_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoStringTables_table_t* internal_default_instance() {
    return reinterpret_cast<const CDemoStringTables_table_t*>(
               &_CDemoStringTables_table_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CDemoStringTables_table_t* other);
  friend void swap(CDemoStringTables_table_t& a, CDemoStringTables_table_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoStringTables_table_t* New() const final {
    return CreateMaybeMessage<CDemoStringTables_table_t>(nullptr);
  }

  CDemoStringTables_table_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoStringTables_table_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoStringTables_table_t& from);
  void MergeFrom(const CDemoStringTables_table_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoStringTables_table_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDemoStringTables.items_t items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::proto::dota::CDemoStringTables_items_t* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >*
      mutable_items();
  const ::proto::dota::CDemoStringTables_items_t& items(int index) const;
  ::proto::dota::CDemoStringTables_items_t* add_items();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >&
      items() const;

  // repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
  int items_clientside_size() const;
  void clear_items_clientside();
  static const int kItemsClientsideFieldNumber = 3;
  ::proto::dota::CDemoStringTables_items_t* mutable_items_clientside(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >*
      mutable_items_clientside();
  const ::proto::dota::CDemoStringTables_items_t& items_clientside(int index) const;
  ::proto::dota::CDemoStringTables_items_t* add_items_clientside();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >&
      items_clientside() const;

  // optional string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // optional int32 table_flags = 4;
  bool has_table_flags() const;
  void clear_table_flags();
  static const int kTableFlagsFieldNumber = 4;
  ::google::protobuf::int32 table_flags() const;
  void set_table_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoStringTables.table_t)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t > items_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t > items_clientside_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::int32 table_flags_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoStringTables final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoStringTables) */ {
 public:
  CDemoStringTables();
  virtual ~CDemoStringTables();

  CDemoStringTables(const CDemoStringTables& from);

  inline CDemoStringTables& operator=(const CDemoStringTables& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoStringTables(CDemoStringTables&& from) noexcept
    : CDemoStringTables() {
    *this = ::std::move(from);
  }

  inline CDemoStringTables& operator=(CDemoStringTables&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoStringTables& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoStringTables* internal_default_instance() {
    return reinterpret_cast<const CDemoStringTables*>(
               &_CDemoStringTables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CDemoStringTables* other);
  friend void swap(CDemoStringTables& a, CDemoStringTables& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoStringTables* New() const final {
    return CreateMaybeMessage<CDemoStringTables>(nullptr);
  }

  CDemoStringTables* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoStringTables>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoStringTables& from);
  void MergeFrom(const CDemoStringTables& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoStringTables* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDemoStringTables_items_t items_t;
  typedef CDemoStringTables_table_t table_t;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDemoStringTables.table_t tables = 1;
  int tables_size() const;
  void clear_tables();
  static const int kTablesFieldNumber = 1;
  ::proto::dota::CDemoStringTables_table_t* mutable_tables(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_table_t >*
      mutable_tables();
  const ::proto::dota::CDemoStringTables_table_t& tables(int index) const;
  ::proto::dota::CDemoStringTables_table_t* add_tables();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_table_t >&
      tables() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoStringTables)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_table_t > tables_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoStop final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoStop) */ {
 public:
  CDemoStop();
  virtual ~CDemoStop();

  CDemoStop(const CDemoStop& from);

  inline CDemoStop& operator=(const CDemoStop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoStop(CDemoStop&& from) noexcept
    : CDemoStop() {
    *this = ::std::move(from);
  }

  inline CDemoStop& operator=(CDemoStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoStop* internal_default_instance() {
    return reinterpret_cast<const CDemoStop*>(
               &_CDemoStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CDemoStop* other);
  friend void swap(CDemoStop& a, CDemoStop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoStop* New() const final {
    return CreateMaybeMessage<CDemoStop>(nullptr);
  }

  CDemoStop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoStop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoStop& from);
  void MergeFrom(const CDemoStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoStop)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoUserCmd final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoUserCmd) */ {
 public:
  CDemoUserCmd();
  virtual ~CDemoUserCmd();

  CDemoUserCmd(const CDemoUserCmd& from);

  inline CDemoUserCmd& operator=(const CDemoUserCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoUserCmd(CDemoUserCmd&& from) noexcept
    : CDemoUserCmd() {
    *this = ::std::move(from);
  }

  inline CDemoUserCmd& operator=(CDemoUserCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoUserCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoUserCmd* internal_default_instance() {
    return reinterpret_cast<const CDemoUserCmd*>(
               &_CDemoUserCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CDemoUserCmd* other);
  friend void swap(CDemoUserCmd& a, CDemoUserCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoUserCmd* New() const final {
    return CreateMaybeMessage<CDemoUserCmd>(nullptr);
  }

  CDemoUserCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoUserCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoUserCmd& from);
  void MergeFrom(const CDemoUserCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoUserCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 cmd_number = 1;
  bool has_cmd_number() const;
  void clear_cmd_number();
  static const int kCmdNumberFieldNumber = 1;
  ::google::protobuf::int32 cmd_number() const;
  void set_cmd_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoUserCmd)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 cmd_number_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CDemoSpawnGroups final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDemoSpawnGroups) */ {
 public:
  CDemoSpawnGroups();
  virtual ~CDemoSpawnGroups();

  CDemoSpawnGroups(const CDemoSpawnGroups& from);

  inline CDemoSpawnGroups& operator=(const CDemoSpawnGroups& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDemoSpawnGroups(CDemoSpawnGroups&& from) noexcept
    : CDemoSpawnGroups() {
    *this = ::std::move(from);
  }

  inline CDemoSpawnGroups& operator=(CDemoSpawnGroups&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDemoSpawnGroups& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDemoSpawnGroups* internal_default_instance() {
    return reinterpret_cast<const CDemoSpawnGroups*>(
               &_CDemoSpawnGroups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CDemoSpawnGroups* other);
  friend void swap(CDemoSpawnGroups& a, CDemoSpawnGroups& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDemoSpawnGroups* New() const final {
    return CreateMaybeMessage<CDemoSpawnGroups>(nullptr);
  }

  CDemoSpawnGroups* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDemoSpawnGroups>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDemoSpawnGroups& from);
  void MergeFrom(const CDemoSpawnGroups& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDemoSpawnGroups* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes msgs = 3;
  int msgs_size() const;
  void clear_msgs();
  static const int kMsgsFieldNumber = 3;
  const ::std::string& msgs(int index) const;
  ::std::string* mutable_msgs(int index);
  void set_msgs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_msgs(int index, ::std::string&& value);
  #endif
  void set_msgs(int index, const char* value);
  void set_msgs(int index, const void* value, size_t size);
  ::std::string* add_msgs();
  void add_msgs(const ::std::string& value);
  #if LANG_CXX11
  void add_msgs(::std::string&& value);
  #endif
  void add_msgs(const char* value);
  void add_msgs(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& msgs() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_msgs();

  // @@protoc_insertion_point(class_scope:proto.dota.CDemoSpawnGroups)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> msgs_;
  friend struct ::TableStruct_demo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDemoFileHeader

// required string demo_file_stamp = 1;
inline bool CDemoFileHeader::has_demo_file_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoFileHeader::clear_demo_file_stamp() {
  demo_file_stamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoFileHeader::demo_file_stamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.demo_file_stamp)
  return demo_file_stamp_.GetNoArena();
}
inline void CDemoFileHeader::set_demo_file_stamp(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  demo_file_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.demo_file_stamp)
}
#if LANG_CXX11
inline void CDemoFileHeader::set_demo_file_stamp(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  demo_file_stamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.demo_file_stamp)
}
#endif
inline void CDemoFileHeader::set_demo_file_stamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  demo_file_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.demo_file_stamp)
}
inline void CDemoFileHeader::set_demo_file_stamp(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  demo_file_stamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.demo_file_stamp)
}
inline ::std::string* CDemoFileHeader::mutable_demo_file_stamp() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.demo_file_stamp)
  return demo_file_stamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoFileHeader::release_demo_file_stamp() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.demo_file_stamp)
  if (!has_demo_file_stamp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return demo_file_stamp_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoFileHeader::set_allocated_demo_file_stamp(::std::string* demo_file_stamp) {
  if (demo_file_stamp != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  demo_file_stamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), demo_file_stamp);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.demo_file_stamp)
}

// optional int32 network_protocol = 2;
inline bool CDemoFileHeader::has_network_protocol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDemoFileHeader::clear_network_protocol() {
  network_protocol_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 CDemoFileHeader::network_protocol() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.network_protocol)
  return network_protocol_;
}
inline void CDemoFileHeader::set_network_protocol(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  network_protocol_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.network_protocol)
}

// optional string server_name = 3;
inline bool CDemoFileHeader::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoFileHeader::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CDemoFileHeader::server_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.server_name)
  return server_name_.GetNoArena();
}
inline void CDemoFileHeader::set_server_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.server_name)
}
#if LANG_CXX11
inline void CDemoFileHeader::set_server_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.server_name)
}
#endif
inline void CDemoFileHeader::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.server_name)
}
inline void CDemoFileHeader::set_server_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.server_name)
}
inline ::std::string* CDemoFileHeader::mutable_server_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoFileHeader::release_server_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.server_name)
  if (!has_server_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return server_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoFileHeader::set_allocated_server_name(::std::string* server_name) {
  if (server_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.server_name)
}

// optional string client_name = 4;
inline bool CDemoFileHeader::has_client_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDemoFileHeader::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CDemoFileHeader::client_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.client_name)
  return client_name_.GetNoArena();
}
inline void CDemoFileHeader::set_client_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.client_name)
}
#if LANG_CXX11
inline void CDemoFileHeader::set_client_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.client_name)
}
#endif
inline void CDemoFileHeader::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.client_name)
}
inline void CDemoFileHeader::set_client_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.client_name)
}
inline ::std::string* CDemoFileHeader::mutable_client_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoFileHeader::release_client_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.client_name)
  if (!has_client_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return client_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoFileHeader::set_allocated_client_name(::std::string* client_name) {
  if (client_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.client_name)
}

// optional string map_name = 5;
inline bool CDemoFileHeader::has_map_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDemoFileHeader::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& CDemoFileHeader::map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.map_name)
  return map_name_.GetNoArena();
}
inline void CDemoFileHeader::set_map_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.map_name)
}
#if LANG_CXX11
inline void CDemoFileHeader::set_map_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.map_name)
}
#endif
inline void CDemoFileHeader::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.map_name)
}
inline void CDemoFileHeader::set_map_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.map_name)
}
inline ::std::string* CDemoFileHeader::mutable_map_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoFileHeader::release_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.map_name)
  if (!has_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return map_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoFileHeader::set_allocated_map_name(::std::string* map_name) {
  if (map_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.map_name)
}

// optional string game_directory = 6;
inline bool CDemoFileHeader::has_game_directory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDemoFileHeader::clear_game_directory() {
  game_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& CDemoFileHeader::game_directory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.game_directory)
  return game_directory_.GetNoArena();
}
inline void CDemoFileHeader::set_game_directory(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  game_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.game_directory)
}
#if LANG_CXX11
inline void CDemoFileHeader::set_game_directory(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  game_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.game_directory)
}
#endif
inline void CDemoFileHeader::set_game_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  game_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.game_directory)
}
inline void CDemoFileHeader::set_game_directory(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  game_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.game_directory)
}
inline ::std::string* CDemoFileHeader::mutable_game_directory() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.game_directory)
  return game_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoFileHeader::release_game_directory() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.game_directory)
  if (!has_game_directory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return game_directory_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoFileHeader::set_allocated_game_directory(::std::string* game_directory) {
  if (game_directory != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  game_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_directory);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.game_directory)
}

// optional int32 fullpackets_version = 7;
inline bool CDemoFileHeader::has_fullpackets_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDemoFileHeader::clear_fullpackets_version() {
  fullpackets_version_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 CDemoFileHeader::fullpackets_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.fullpackets_version)
  return fullpackets_version_;
}
inline void CDemoFileHeader::set_fullpackets_version(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  fullpackets_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.fullpackets_version)
}

// optional bool allow_clientside_entities = 8;
inline bool CDemoFileHeader::has_allow_clientside_entities() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDemoFileHeader::clear_allow_clientside_entities() {
  allow_clientside_entities_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CDemoFileHeader::allow_clientside_entities() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.allow_clientside_entities)
  return allow_clientside_entities_;
}
inline void CDemoFileHeader::set_allow_clientside_entities(bool value) {
  _has_bits_[0] |= 0x00000100u;
  allow_clientside_entities_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.allow_clientside_entities)
}

// optional bool allow_clientside_particles = 9;
inline bool CDemoFileHeader::has_allow_clientside_particles() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDemoFileHeader::clear_allow_clientside_particles() {
  allow_clientside_particles_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CDemoFileHeader::allow_clientside_particles() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.allow_clientside_particles)
  return allow_clientside_particles_;
}
inline void CDemoFileHeader::set_allow_clientside_particles(bool value) {
  _has_bits_[0] |= 0x00000200u;
  allow_clientside_particles_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.allow_clientside_particles)
}

// optional string addons = 10;
inline bool CDemoFileHeader::has_addons() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDemoFileHeader::clear_addons() {
  addons_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& CDemoFileHeader::addons() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileHeader.addons)
  return addons_.GetNoArena();
}
inline void CDemoFileHeader::set_addons(const ::std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  addons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileHeader.addons)
}
#if LANG_CXX11
inline void CDemoFileHeader::set_addons(::std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  addons_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoFileHeader.addons)
}
#endif
inline void CDemoFileHeader::set_addons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  addons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoFileHeader.addons)
}
inline void CDemoFileHeader::set_addons(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  addons_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoFileHeader.addons)
}
inline ::std::string* CDemoFileHeader::mutable_addons() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileHeader.addons)
  return addons_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoFileHeader::release_addons() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileHeader.addons)
  if (!has_addons()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return addons_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoFileHeader::set_allocated_addons(::std::string* addons) {
  if (addons != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  addons_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addons);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileHeader.addons)
}

// -------------------------------------------------------------------

// CGameInfo_CDotaGameInfo_CPlayerInfo

// optional string hero_name = 1;
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_hero_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_hero_name() {
  hero_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CGameInfo_CDotaGameInfo_CPlayerInfo::hero_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
  return hero_name_.GetNoArena();
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
#if LANG_CXX11
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hero_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
#endif
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}
inline ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::mutable_hero_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
  return hero_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::release_hero_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
  if (!has_hero_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hero_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_allocated_hero_name(::std::string* hero_name) {
  if (hero_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hero_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.hero_name)
}

// optional string player_name = 2;
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CGameInfo_CDotaGameInfo_CPlayerInfo::player_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
  return player_name_.GetNoArena();
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
#if LANG_CXX11
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
#endif
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}
inline ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::mutable_player_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
  if (!has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return player_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.player_name)
}

// optional bool is_fake_client = 3;
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_is_fake_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_is_fake_client() {
  is_fake_client_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::is_fake_client() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.is_fake_client)
  return is_fake_client_;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_is_fake_client(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_fake_client_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.is_fake_client)
}

// optional uint64 steamid = 4;
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CGameInfo_CDotaGameInfo_CPlayerInfo::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.steamid)
  return steamid_;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.steamid)
}

// optional int32 game_team = 5;
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_game_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_game_team() {
  game_team_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 CGameInfo_CDotaGameInfo_CPlayerInfo::game_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.game_team)
  return game_team_;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_game_team(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  game_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo.game_team)
}

// -------------------------------------------------------------------

// CGameInfo_CDotaGameInfo_CHeroSelectEvent

// optional bool is_pick = 1;
inline bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.is_pick)
  return is_pick_;
}
inline void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_is_pick(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
inline bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_team() {
  team_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CGameInfo_CDotaGameInfo_CHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.team)
  return team_;
}
inline void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
inline bool CGameInfo_CDotaGameInfo_CHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CGameInfo_CDotaGameInfo_CHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.hero_id)
  return hero_id_;
}
inline void CGameInfo_CDotaGameInfo_CHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent.hero_id)
}

// -------------------------------------------------------------------

// CGameInfo_CDotaGameInfo

// optional uint64 match_id = 1;
inline bool CGameInfo_CDotaGameInfo::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameInfo_CDotaGameInfo::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CGameInfo_CDotaGameInfo::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.match_id)
  return match_id_;
}
inline void CGameInfo_CDotaGameInfo::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.match_id)
}

// optional int32 game_mode = 2;
inline bool CGameInfo_CDotaGameInfo::has_game_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGameInfo_CDotaGameInfo::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CGameInfo_CDotaGameInfo::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.game_mode)
  return game_mode_;
}
inline void CGameInfo_CDotaGameInfo::set_game_mode(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.game_mode)
}

// optional int32 game_winner = 3;
inline bool CGameInfo_CDotaGameInfo::has_game_winner() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CGameInfo_CDotaGameInfo::clear_game_winner() {
  game_winner_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 CGameInfo_CDotaGameInfo::game_winner() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.game_winner)
  return game_winner_;
}
inline void CGameInfo_CDotaGameInfo::set_game_winner(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  game_winner_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.game_winner)
}

// repeated .proto.dota.CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
inline int CGameInfo_CDotaGameInfo::player_info_size() const {
  return player_info_.size();
}
inline void CGameInfo_CDotaGameInfo::clear_player_info() {
  player_info_.Clear();
}
inline ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo::mutable_player_info(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return player_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo >*
CGameInfo_CDotaGameInfo::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return &player_info_;
}
inline const ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo& CGameInfo_CDotaGameInfo::player_info(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return player_info_.Get(index);
}
inline ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo::add_player_info() {
  // @@protoc_insertion_point(field_add:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return player_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CPlayerInfo >&
CGameInfo_CDotaGameInfo::player_info() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGameInfo.CDotaGameInfo.player_info)
  return player_info_;
}

// optional uint32 leagueid = 5;
inline bool CGameInfo_CDotaGameInfo::has_leagueid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CGameInfo_CDotaGameInfo::clear_leagueid() {
  leagueid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::leagueid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.leagueid)
  return leagueid_;
}
inline void CGameInfo_CDotaGameInfo::set_leagueid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.leagueid)
}

// repeated .proto.dota.CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
inline int CGameInfo_CDotaGameInfo::picks_bans_size() const {
  return picks_bans_.size();
}
inline void CGameInfo_CDotaGameInfo::clear_picks_bans() {
  picks_bans_.Clear();
}
inline ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent* CGameInfo_CDotaGameInfo::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent >*
CGameInfo_CDotaGameInfo::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return &picks_bans_;
}
inline const ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent& CGameInfo_CDotaGameInfo::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_.Get(index);
}
inline ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent* CGameInfo_CDotaGameInfo::add_picks_bans() {
  // @@protoc_insertion_point(field_add:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGameInfo_CDotaGameInfo_CHeroSelectEvent >&
CGameInfo_CDotaGameInfo::picks_bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGameInfo.CDotaGameInfo.picks_bans)
  return picks_bans_;
}

// optional uint32 radiant_team_id = 7;
inline bool CGameInfo_CDotaGameInfo::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CGameInfo_CDotaGameInfo::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_id)
  return radiant_team_id_;
}
inline void CGameInfo_CDotaGameInfo::set_radiant_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_id)
}

// optional uint32 dire_team_id = 8;
inline bool CGameInfo_CDotaGameInfo::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CGameInfo_CDotaGameInfo::clear_dire_team_id() {
  dire_team_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::dire_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.dire_team_id)
  return dire_team_id_;
}
inline void CGameInfo_CDotaGameInfo::set_dire_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.dire_team_id)
}

// optional string radiant_team_tag = 9;
inline bool CGameInfo_CDotaGameInfo::has_radiant_team_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameInfo_CDotaGameInfo::clear_radiant_team_tag() {
  radiant_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CGameInfo_CDotaGameInfo::radiant_team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
  return radiant_team_tag_.GetNoArena();
}
inline void CGameInfo_CDotaGameInfo::set_radiant_team_tag(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}
#if LANG_CXX11
inline void CGameInfo_CDotaGameInfo::set_radiant_team_tag(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  radiant_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}
#endif
inline void CGameInfo_CDotaGameInfo::set_radiant_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}
inline void CGameInfo_CDotaGameInfo::set_radiant_team_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}
inline ::std::string* CGameInfo_CDotaGameInfo::mutable_radiant_team_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
  return radiant_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameInfo_CDotaGameInfo::release_radiant_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
  if (!has_radiant_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return radiant_team_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameInfo_CDotaGameInfo::set_allocated_radiant_team_tag(::std::string* radiant_team_tag) {
  if (radiant_team_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radiant_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.CDotaGameInfo.radiant_team_tag)
}

// optional string dire_team_tag = 10;
inline bool CGameInfo_CDotaGameInfo::has_dire_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameInfo_CDotaGameInfo::clear_dire_team_tag() {
  dire_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CGameInfo_CDotaGameInfo::dire_team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
  return dire_team_tag_.GetNoArena();
}
inline void CGameInfo_CDotaGameInfo::set_dire_team_tag(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}
#if LANG_CXX11
inline void CGameInfo_CDotaGameInfo::set_dire_team_tag(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dire_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}
#endif
inline void CGameInfo_CDotaGameInfo::set_dire_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}
inline void CGameInfo_CDotaGameInfo::set_dire_team_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}
inline ::std::string* CGameInfo_CDotaGameInfo::mutable_dire_team_tag() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
  return dire_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CGameInfo_CDotaGameInfo::release_dire_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
  if (!has_dire_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dire_team_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CGameInfo_CDotaGameInfo::set_allocated_dire_team_tag(::std::string* dire_team_tag) {
  if (dire_team_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dire_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.CDotaGameInfo.dire_team_tag)
}

// optional uint32 end_time = 11;
inline bool CGameInfo_CDotaGameInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CGameInfo_CDotaGameInfo::clear_end_time() {
  end_time_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.CDotaGameInfo.end_time)
  return end_time_;
}
inline void CGameInfo_CDotaGameInfo::set_end_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGameInfo.CDotaGameInfo.end_time)
}

// -------------------------------------------------------------------

// CGameInfo

// optional .proto.dota.CGameInfo.CDotaGameInfo dota = 4;
inline bool CGameInfo::has_dota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameInfo::clear_dota() {
  if (dota_ != nullptr) dota_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CGameInfo_CDotaGameInfo& CGameInfo::dota() const {
  const ::proto::dota::CGameInfo_CDotaGameInfo* p = dota_;
  // @@protoc_insertion_point(field_get:proto.dota.CGameInfo.dota)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CGameInfo_CDotaGameInfo*>(
      &::proto::dota::_CGameInfo_CDotaGameInfo_default_instance_);
}
inline ::proto::dota::CGameInfo_CDotaGameInfo* CGameInfo::release_dota() {
  // @@protoc_insertion_point(field_release:proto.dota.CGameInfo.dota)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CGameInfo_CDotaGameInfo* temp = dota_;
  dota_ = nullptr;
  return temp;
}
inline ::proto::dota::CGameInfo_CDotaGameInfo* CGameInfo::mutable_dota() {
  _has_bits_[0] |= 0x00000001u;
  if (dota_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CGameInfo_CDotaGameInfo>(GetArenaNoVirtual());
    dota_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CGameInfo.dota)
  return dota_;
}
inline void CGameInfo::set_allocated_dota(::proto::dota::CGameInfo_CDotaGameInfo* dota) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dota_;
  }
  if (dota) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dota = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dota, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dota_ = dota;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGameInfo.dota)
}

// -------------------------------------------------------------------

// CDemoFileInfo

// optional float playback_time = 1;
inline bool CDemoFileInfo::has_playback_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoFileInfo::clear_playback_time() {
  playback_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CDemoFileInfo::playback_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileInfo.playback_time)
  return playback_time_;
}
inline void CDemoFileInfo::set_playback_time(float value) {
  _has_bits_[0] |= 0x00000002u;
  playback_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileInfo.playback_time)
}

// optional int32 playback_ticks = 2;
inline bool CDemoFileInfo::has_playback_ticks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDemoFileInfo::clear_playback_ticks() {
  playback_ticks_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CDemoFileInfo::playback_ticks() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileInfo.playback_ticks)
  return playback_ticks_;
}
inline void CDemoFileInfo::set_playback_ticks(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  playback_ticks_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileInfo.playback_ticks)
}

// optional int32 playback_frames = 3;
inline bool CDemoFileInfo::has_playback_frames() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDemoFileInfo::clear_playback_frames() {
  playback_frames_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CDemoFileInfo::playback_frames() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileInfo.playback_frames)
  return playback_frames_;
}
inline void CDemoFileInfo::set_playback_frames(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  playback_frames_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoFileInfo.playback_frames)
}

// optional .proto.dota.CGameInfo game_info = 4;
inline bool CDemoFileInfo::has_game_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoFileInfo::clear_game_info() {
  if (game_info_ != nullptr) game_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CGameInfo& CDemoFileInfo::game_info() const {
  const ::proto::dota::CGameInfo* p = game_info_;
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFileInfo.game_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CGameInfo*>(
      &::proto::dota::_CGameInfo_default_instance_);
}
inline ::proto::dota::CGameInfo* CDemoFileInfo::release_game_info() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFileInfo.game_info)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CGameInfo* temp = game_info_;
  game_info_ = nullptr;
  return temp;
}
inline ::proto::dota::CGameInfo* CDemoFileInfo::mutable_game_info() {
  _has_bits_[0] |= 0x00000001u;
  if (game_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CGameInfo>(GetArenaNoVirtual());
    game_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFileInfo.game_info)
  return game_info_;
}
inline void CDemoFileInfo::set_allocated_game_info(::proto::dota::CGameInfo* game_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_info_;
  }
  if (game_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_info_ = game_info;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFileInfo.game_info)
}

// -------------------------------------------------------------------

// CDemoPacket

// optional bytes data = 3;
inline bool CDemoPacket::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoPacket::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoPacket.data)
  return data_.GetNoArena();
}
inline void CDemoPacket::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoPacket.data)
}
#if LANG_CXX11
inline void CDemoPacket::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoPacket.data)
}
#endif
inline void CDemoPacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoPacket.data)
}
inline void CDemoPacket::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoPacket.data)
}
inline ::std::string* CDemoPacket::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoPacket::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoPacket.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoPacket::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoPacket.data)
}

// -------------------------------------------------------------------

// CDemoFullPacket

// optional .proto.dota.CDemoStringTables string_table = 1;
inline bool CDemoFullPacket::has_string_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoFullPacket::clear_string_table() {
  if (string_table_ != nullptr) string_table_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CDemoStringTables& CDemoFullPacket::string_table() const {
  const ::proto::dota::CDemoStringTables* p = string_table_;
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFullPacket.string_table)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CDemoStringTables*>(
      &::proto::dota::_CDemoStringTables_default_instance_);
}
inline ::proto::dota::CDemoStringTables* CDemoFullPacket::release_string_table() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFullPacket.string_table)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CDemoStringTables* temp = string_table_;
  string_table_ = nullptr;
  return temp;
}
inline ::proto::dota::CDemoStringTables* CDemoFullPacket::mutable_string_table() {
  _has_bits_[0] |= 0x00000001u;
  if (string_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CDemoStringTables>(GetArenaNoVirtual());
    string_table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFullPacket.string_table)
  return string_table_;
}
inline void CDemoFullPacket::set_allocated_string_table(::proto::dota::CDemoStringTables* string_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete string_table_;
  }
  if (string_table) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      string_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_table_ = string_table;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFullPacket.string_table)
}

// optional .proto.dota.CDemoPacket packet = 2;
inline bool CDemoFullPacket::has_packet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoFullPacket::clear_packet() {
  if (packet_ != nullptr) packet_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CDemoPacket& CDemoFullPacket::packet() const {
  const ::proto::dota::CDemoPacket* p = packet_;
  // @@protoc_insertion_point(field_get:proto.dota.CDemoFullPacket.packet)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CDemoPacket*>(
      &::proto::dota::_CDemoPacket_default_instance_);
}
inline ::proto::dota::CDemoPacket* CDemoFullPacket::release_packet() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoFullPacket.packet)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CDemoPacket* temp = packet_;
  packet_ = nullptr;
  return temp;
}
inline ::proto::dota::CDemoPacket* CDemoFullPacket::mutable_packet() {
  _has_bits_[0] |= 0x00000002u;
  if (packet_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CDemoPacket>(GetArenaNoVirtual());
    packet_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoFullPacket.packet)
  return packet_;
}
inline void CDemoFullPacket::set_allocated_packet(::proto::dota::CDemoPacket* packet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete packet_;
  }
  if (packet) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packet = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  packet_ = packet;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoFullPacket.packet)
}

// -------------------------------------------------------------------

// CDemoSaveGame

// optional bytes data = 1;
inline bool CDemoSaveGame::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoSaveGame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoSaveGame::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSaveGame.data)
  return data_.GetNoArena();
}
inline void CDemoSaveGame::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSaveGame.data)
}
#if LANG_CXX11
inline void CDemoSaveGame::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoSaveGame.data)
}
#endif
inline void CDemoSaveGame::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoSaveGame.data)
}
inline void CDemoSaveGame::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoSaveGame.data)
}
inline ::std::string* CDemoSaveGame::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoSaveGame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoSaveGame::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoSaveGame.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoSaveGame::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoSaveGame.data)
}

// optional fixed64 steam_id = 2;
inline bool CDemoSaveGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoSaveGame::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CDemoSaveGame::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSaveGame.steam_id)
  return steam_id_;
}
inline void CDemoSaveGame::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSaveGame.steam_id)
}

// optional fixed64 signature = 3;
inline bool CDemoSaveGame::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDemoSaveGame::clear_signature() {
  signature_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CDemoSaveGame::signature() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSaveGame.signature)
  return signature_;
}
inline void CDemoSaveGame::set_signature(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  signature_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSaveGame.signature)
}

// optional int32 version = 4;
inline bool CDemoSaveGame::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDemoSaveGame::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 CDemoSaveGame::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSaveGame.version)
  return version_;
}
inline void CDemoSaveGame::set_version(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSaveGame.version)
}

// -------------------------------------------------------------------

// CDemoSyncTick

// -------------------------------------------------------------------

// CDemoConsoleCmd

// optional string cmdstring = 1;
inline bool CDemoConsoleCmd::has_cmdstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoConsoleCmd::clear_cmdstring() {
  cmdstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoConsoleCmd::cmdstring() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoConsoleCmd.cmdstring)
  return cmdstring_.GetNoArena();
}
inline void CDemoConsoleCmd::set_cmdstring(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cmdstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoConsoleCmd.cmdstring)
}
#if LANG_CXX11
inline void CDemoConsoleCmd::set_cmdstring(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cmdstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoConsoleCmd.cmdstring)
}
#endif
inline void CDemoConsoleCmd::set_cmdstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cmdstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoConsoleCmd.cmdstring)
}
inline void CDemoConsoleCmd::set_cmdstring(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cmdstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoConsoleCmd.cmdstring)
}
inline ::std::string* CDemoConsoleCmd::mutable_cmdstring() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoConsoleCmd.cmdstring)
  return cmdstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoConsoleCmd::release_cmdstring() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoConsoleCmd.cmdstring)
  if (!has_cmdstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cmdstring_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoConsoleCmd::set_allocated_cmdstring(::std::string* cmdstring) {
  if (cmdstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cmdstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdstring);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoConsoleCmd.cmdstring)
}

// -------------------------------------------------------------------

// CDemoSendTables

// optional bytes data = 1;
inline bool CDemoSendTables::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoSendTables::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoSendTables::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSendTables.data)
  return data_.GetNoArena();
}
inline void CDemoSendTables::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSendTables.data)
}
#if LANG_CXX11
inline void CDemoSendTables::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoSendTables.data)
}
#endif
inline void CDemoSendTables::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoSendTables.data)
}
inline void CDemoSendTables::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoSendTables.data)
}
inline ::std::string* CDemoSendTables::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoSendTables.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoSendTables::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoSendTables.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoSendTables::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoSendTables.data)
}

// -------------------------------------------------------------------

// CDemoClassInfo_class_t

// optional int32 class_id = 1;
inline bool CDemoClassInfo_class_t::has_class_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDemoClassInfo_class_t::clear_class_id() {
  class_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 CDemoClassInfo_class_t::class_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoClassInfo.class_t.class_id)
  return class_id_;
}
inline void CDemoClassInfo_class_t::set_class_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  class_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoClassInfo.class_t.class_id)
}

// optional string network_name = 2;
inline bool CDemoClassInfo_class_t::has_network_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoClassInfo_class_t::clear_network_name() {
  network_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoClassInfo_class_t::network_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoClassInfo.class_t.network_name)
  return network_name_.GetNoArena();
}
inline void CDemoClassInfo_class_t::set_network_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoClassInfo.class_t.network_name)
}
#if LANG_CXX11
inline void CDemoClassInfo_class_t::set_network_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  network_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoClassInfo.class_t.network_name)
}
#endif
inline void CDemoClassInfo_class_t::set_network_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoClassInfo.class_t.network_name)
}
inline void CDemoClassInfo_class_t::set_network_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoClassInfo.class_t.network_name)
}
inline ::std::string* CDemoClassInfo_class_t::mutable_network_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoClassInfo.class_t.network_name)
  return network_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoClassInfo_class_t::release_network_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoClassInfo.class_t.network_name)
  if (!has_network_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return network_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoClassInfo_class_t::set_allocated_network_name(::std::string* network_name) {
  if (network_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  network_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoClassInfo.class_t.network_name)
}

// optional string table_name = 3;
inline bool CDemoClassInfo_class_t::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoClassInfo_class_t::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CDemoClassInfo_class_t::table_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoClassInfo.class_t.table_name)
  return table_name_.GetNoArena();
}
inline void CDemoClassInfo_class_t::set_table_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoClassInfo.class_t.table_name)
}
#if LANG_CXX11
inline void CDemoClassInfo_class_t::set_table_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoClassInfo.class_t.table_name)
}
#endif
inline void CDemoClassInfo_class_t::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoClassInfo.class_t.table_name)
}
inline void CDemoClassInfo_class_t::set_table_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoClassInfo.class_t.table_name)
}
inline ::std::string* CDemoClassInfo_class_t::mutable_table_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoClassInfo.class_t.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoClassInfo_class_t::release_table_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoClassInfo.class_t.table_name)
  if (!has_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return table_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoClassInfo_class_t::set_allocated_table_name(::std::string* table_name) {
  if (table_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoClassInfo.class_t.table_name)
}

// -------------------------------------------------------------------

// CDemoClassInfo

// repeated .proto.dota.CDemoClassInfo.class_t classes = 1;
inline int CDemoClassInfo::classes_size() const {
  return classes_.size();
}
inline void CDemoClassInfo::clear_classes() {
  classes_.Clear();
}
inline ::proto::dota::CDemoClassInfo_class_t* CDemoClassInfo::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoClassInfo.classes)
  return classes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoClassInfo_class_t >*
CDemoClassInfo::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoClassInfo.classes)
  return &classes_;
}
inline const ::proto::dota::CDemoClassInfo_class_t& CDemoClassInfo::classes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoClassInfo.classes)
  return classes_.Get(index);
}
inline ::proto::dota::CDemoClassInfo_class_t* CDemoClassInfo::add_classes() {
  // @@protoc_insertion_point(field_add:proto.dota.CDemoClassInfo.classes)
  return classes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoClassInfo_class_t >&
CDemoClassInfo::classes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoClassInfo.classes)
  return classes_;
}

// -------------------------------------------------------------------

// CDemoCustomData

// optional int32 callback_index = 1;
inline bool CDemoCustomData::has_callback_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoCustomData::clear_callback_index() {
  callback_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CDemoCustomData::callback_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoCustomData.callback_index)
  return callback_index_;
}
inline void CDemoCustomData::set_callback_index(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  callback_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoCustomData.callback_index)
}

// optional bytes data = 2;
inline bool CDemoCustomData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoCustomData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoCustomData::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoCustomData.data)
  return data_.GetNoArena();
}
inline void CDemoCustomData::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoCustomData.data)
}
#if LANG_CXX11
inline void CDemoCustomData::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoCustomData.data)
}
#endif
inline void CDemoCustomData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoCustomData.data)
}
inline void CDemoCustomData::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoCustomData.data)
}
inline ::std::string* CDemoCustomData::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoCustomData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoCustomData::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoCustomData.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoCustomData::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoCustomData.data)
}

// -------------------------------------------------------------------

// CDemoCustomDataCallbacks

// repeated string save_id = 1;
inline int CDemoCustomDataCallbacks::save_id_size() const {
  return save_id_.size();
}
inline void CDemoCustomDataCallbacks::clear_save_id() {
  save_id_.Clear();
}
inline const ::std::string& CDemoCustomDataCallbacks::save_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoCustomDataCallbacks.save_id)
  return save_id_.Get(index);
}
inline ::std::string* CDemoCustomDataCallbacks::mutable_save_id(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoCustomDataCallbacks.save_id)
  return save_id_.Mutable(index);
}
inline void CDemoCustomDataCallbacks::set_save_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDemoCustomDataCallbacks.save_id)
  save_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CDemoCustomDataCallbacks::set_save_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDemoCustomDataCallbacks.save_id)
  save_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CDemoCustomDataCallbacks::set_save_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  save_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoCustomDataCallbacks.save_id)
}
inline void CDemoCustomDataCallbacks::set_save_id(int index, const char* value, size_t size) {
  save_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoCustomDataCallbacks.save_id)
}
inline ::std::string* CDemoCustomDataCallbacks::add_save_id() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDemoCustomDataCallbacks.save_id)
  return save_id_.Add();
}
inline void CDemoCustomDataCallbacks::add_save_id(const ::std::string& value) {
  save_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDemoCustomDataCallbacks.save_id)
}
#if LANG_CXX11
inline void CDemoCustomDataCallbacks::add_save_id(::std::string&& value) {
  save_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDemoCustomDataCallbacks.save_id)
}
#endif
inline void CDemoCustomDataCallbacks::add_save_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  save_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDemoCustomDataCallbacks.save_id)
}
inline void CDemoCustomDataCallbacks::add_save_id(const char* value, size_t size) {
  save_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDemoCustomDataCallbacks.save_id)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CDemoCustomDataCallbacks::save_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoCustomDataCallbacks.save_id)
  return save_id_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CDemoCustomDataCallbacks::mutable_save_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoCustomDataCallbacks.save_id)
  return &save_id_;
}

// -------------------------------------------------------------------

// CDemoStringTables_items_t

// optional string str = 1;
inline bool CDemoStringTables_items_t::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoStringTables_items_t::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoStringTables_items_t::str() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.items_t.str)
  return str_.GetNoArena();
}
inline void CDemoStringTables_items_t::set_str(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoStringTables.items_t.str)
}
#if LANG_CXX11
inline void CDemoStringTables_items_t::set_str(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoStringTables.items_t.str)
}
#endif
inline void CDemoStringTables_items_t::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoStringTables.items_t.str)
}
inline void CDemoStringTables_items_t::set_str(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoStringTables.items_t.str)
}
inline ::std::string* CDemoStringTables_items_t::mutable_str() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.items_t.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoStringTables_items_t::release_str() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoStringTables.items_t.str)
  if (!has_str()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoStringTables_items_t::set_allocated_str(::std::string* str) {
  if (str != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoStringTables.items_t.str)
}

// optional bytes data = 2;
inline bool CDemoStringTables_items_t::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoStringTables_items_t::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CDemoStringTables_items_t::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.items_t.data)
  return data_.GetNoArena();
}
inline void CDemoStringTables_items_t::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoStringTables.items_t.data)
}
#if LANG_CXX11
inline void CDemoStringTables_items_t::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoStringTables.items_t.data)
}
#endif
inline void CDemoStringTables_items_t::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoStringTables.items_t.data)
}
inline void CDemoStringTables_items_t::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoStringTables.items_t.data)
}
inline ::std::string* CDemoStringTables_items_t::mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.items_t.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoStringTables_items_t::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoStringTables.items_t.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoStringTables_items_t::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoStringTables.items_t.data)
}

// -------------------------------------------------------------------

// CDemoStringTables_table_t

// optional string table_name = 1;
inline bool CDemoStringTables_table_t::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoStringTables_table_t::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoStringTables_table_t::table_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.table_t.table_name)
  return table_name_.GetNoArena();
}
inline void CDemoStringTables_table_t::set_table_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoStringTables.table_t.table_name)
}
#if LANG_CXX11
inline void CDemoStringTables_table_t::set_table_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoStringTables.table_t.table_name)
}
#endif
inline void CDemoStringTables_table_t::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoStringTables.table_t.table_name)
}
inline void CDemoStringTables_table_t::set_table_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoStringTables.table_t.table_name)
}
inline ::std::string* CDemoStringTables_table_t::mutable_table_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.table_t.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoStringTables_table_t::release_table_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoStringTables.table_t.table_name)
  if (!has_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return table_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoStringTables_table_t::set_allocated_table_name(::std::string* table_name) {
  if (table_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoStringTables.table_t.table_name)
}

// repeated .proto.dota.CDemoStringTables.items_t items = 2;
inline int CDemoStringTables_table_t::items_size() const {
  return items_.size();
}
inline void CDemoStringTables_table_t::clear_items() {
  items_.Clear();
}
inline ::proto::dota::CDemoStringTables_items_t* CDemoStringTables_table_t::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.table_t.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >*
CDemoStringTables_table_t::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoStringTables.table_t.items)
  return &items_;
}
inline const ::proto::dota::CDemoStringTables_items_t& CDemoStringTables_table_t::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.table_t.items)
  return items_.Get(index);
}
inline ::proto::dota::CDemoStringTables_items_t* CDemoStringTables_table_t::add_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CDemoStringTables.table_t.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >&
CDemoStringTables_table_t::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoStringTables.table_t.items)
  return items_;
}

// repeated .proto.dota.CDemoStringTables.items_t items_clientside = 3;
inline int CDemoStringTables_table_t::items_clientside_size() const {
  return items_clientside_.size();
}
inline void CDemoStringTables_table_t::clear_items_clientside() {
  items_clientside_.Clear();
}
inline ::proto::dota::CDemoStringTables_items_t* CDemoStringTables_table_t::mutable_items_clientside(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.table_t.items_clientside)
  return items_clientside_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >*
CDemoStringTables_table_t::mutable_items_clientside() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoStringTables.table_t.items_clientside)
  return &items_clientside_;
}
inline const ::proto::dota::CDemoStringTables_items_t& CDemoStringTables_table_t::items_clientside(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.table_t.items_clientside)
  return items_clientside_.Get(index);
}
inline ::proto::dota::CDemoStringTables_items_t* CDemoStringTables_table_t::add_items_clientside() {
  // @@protoc_insertion_point(field_add:proto.dota.CDemoStringTables.table_t.items_clientside)
  return items_clientside_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_items_t >&
CDemoStringTables_table_t::items_clientside() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoStringTables.table_t.items_clientside)
  return items_clientside_;
}

// optional int32 table_flags = 4;
inline bool CDemoStringTables_table_t::has_table_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoStringTables_table_t::clear_table_flags() {
  table_flags_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CDemoStringTables_table_t::table_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.table_t.table_flags)
  return table_flags_;
}
inline void CDemoStringTables_table_t::set_table_flags(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  table_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoStringTables.table_t.table_flags)
}

// -------------------------------------------------------------------

// CDemoStringTables

// repeated .proto.dota.CDemoStringTables.table_t tables = 1;
inline int CDemoStringTables::tables_size() const {
  return tables_.size();
}
inline void CDemoStringTables::clear_tables() {
  tables_.Clear();
}
inline ::proto::dota::CDemoStringTables_table_t* CDemoStringTables::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoStringTables.tables)
  return tables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_table_t >*
CDemoStringTables::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoStringTables.tables)
  return &tables_;
}
inline const ::proto::dota::CDemoStringTables_table_t& CDemoStringTables::tables(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoStringTables.tables)
  return tables_.Get(index);
}
inline ::proto::dota::CDemoStringTables_table_t* CDemoStringTables::add_tables() {
  // @@protoc_insertion_point(field_add:proto.dota.CDemoStringTables.tables)
  return tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDemoStringTables_table_t >&
CDemoStringTables::tables() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoStringTables.tables)
  return tables_;
}

// -------------------------------------------------------------------

// CDemoStop

// -------------------------------------------------------------------

// CDemoUserCmd

// optional int32 cmd_number = 1;
inline bool CDemoUserCmd::has_cmd_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoUserCmd::clear_cmd_number() {
  cmd_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 CDemoUserCmd::cmd_number() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoUserCmd.cmd_number)
  return cmd_number_;
}
inline void CDemoUserCmd::set_cmd_number(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_number_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDemoUserCmd.cmd_number)
}

// optional bytes data = 2;
inline bool CDemoUserCmd::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoUserCmd::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDemoUserCmd::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoUserCmd.data)
  return data_.GetNoArena();
}
inline void CDemoUserCmd::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDemoUserCmd.data)
}
#if LANG_CXX11
inline void CDemoUserCmd::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDemoUserCmd.data)
}
#endif
inline void CDemoUserCmd::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoUserCmd.data)
}
inline void CDemoUserCmd::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoUserCmd.data)
}
inline ::std::string* CDemoUserCmd::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoUserCmd.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDemoUserCmd::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDemoUserCmd.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDemoUserCmd::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDemoUserCmd.data)
}

// -------------------------------------------------------------------

// CDemoSpawnGroups

// repeated bytes msgs = 3;
inline int CDemoSpawnGroups::msgs_size() const {
  return msgs_.size();
}
inline void CDemoSpawnGroups::clear_msgs() {
  msgs_.Clear();
}
inline const ::std::string& CDemoSpawnGroups::msgs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDemoSpawnGroups.msgs)
  return msgs_.Get(index);
}
inline ::std::string* CDemoSpawnGroups::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDemoSpawnGroups.msgs)
  return msgs_.Mutable(index);
}
inline void CDemoSpawnGroups::set_msgs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSpawnGroups.msgs)
  msgs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CDemoSpawnGroups::set_msgs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDemoSpawnGroups.msgs)
  msgs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CDemoSpawnGroups::set_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDemoSpawnGroups.msgs)
}
inline void CDemoSpawnGroups::set_msgs(int index, const void* value, size_t size) {
  msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDemoSpawnGroups.msgs)
}
inline ::std::string* CDemoSpawnGroups::add_msgs() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDemoSpawnGroups.msgs)
  return msgs_.Add();
}
inline void CDemoSpawnGroups::add_msgs(const ::std::string& value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDemoSpawnGroups.msgs)
}
#if LANG_CXX11
inline void CDemoSpawnGroups::add_msgs(::std::string&& value) {
  msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDemoSpawnGroups.msgs)
}
#endif
inline void CDemoSpawnGroups::add_msgs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDemoSpawnGroups.msgs)
}
inline void CDemoSpawnGroups::add_msgs(const void* value, size_t size) {
  msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDemoSpawnGroups.msgs)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CDemoSpawnGroups::msgs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDemoSpawnGroups.msgs)
  return msgs_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CDemoSpawnGroups::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDemoSpawnGroups.msgs)
  return &msgs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::dota::EDemoCommands> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EDemoCommands>() {
  return ::proto::dota::EDemoCommands_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_demo_2eproto
