// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gametoolevents.proto

#include "gametoolevents.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_networkbasetypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgVector_networkbasetypes_2eproto;
namespace proto {
namespace dota {
class ChangeMapToolEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeMapToolEvent> _instance;
} _ChangeMapToolEvent_default_instance_;
class TraceRayServerToolEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraceRayServerToolEvent> _instance;
} _TraceRayServerToolEvent_default_instance_;
class ToolTraceRayResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToolTraceRayResult> _instance;
} _ToolTraceRayResult_default_instance_;
class SpawnEntityToolEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpawnEntityToolEvent> _instance;
} _SpawnEntityToolEvent_default_instance_;
class SpawnEntityToolEventResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpawnEntityToolEventResult> _instance;
} _SpawnEntityToolEventResult_default_instance_;
class DestroyEntityToolEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DestroyEntityToolEvent> _instance;
} _DestroyEntityToolEvent_default_instance_;
class DestroyAllEntitiesToolEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DestroyAllEntitiesToolEvent> _instance;
} _DestroyAllEntitiesToolEvent_default_instance_;
class RestartMapToolEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RestartMapToolEvent> _instance;
} _RestartMapToolEvent_default_instance_;
class ToolEvent_GetEntityInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_GetEntityInfo> _instance;
} _ToolEvent_GetEntityInfo_default_instance_;
class ToolEvent_GetEntityInfoResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_GetEntityInfoResult> _instance;
} _ToolEvent_GetEntityInfoResult_default_instance_;
class ToolEvent_GetEntityInputsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_GetEntityInputs> _instance;
} _ToolEvent_GetEntityInputs_default_instance_;
class ToolEvent_GetEntityInputsResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_GetEntityInputsResult> _instance;
} _ToolEvent_GetEntityInputsResult_default_instance_;
class ToolEvent_FireEntityInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_FireEntityInput> _instance;
} _ToolEvent_FireEntityInput_default_instance_;
class ToolEvent_SFMRecordingStateChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_SFMRecordingStateChanged> _instance;
} _ToolEvent_SFMRecordingStateChanged_default_instance_;
class ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_SFMToolActiveStateChanged> _instance;
} _ToolEvent_SFMToolActiveStateChanged_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsChangeMapToolEvent_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_ChangeMapToolEvent_default_instance_;
    new (ptr) ::proto::dota::ChangeMapToolEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::ChangeMapToolEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChangeMapToolEvent_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChangeMapToolEvent_gametoolevents_2eproto}, {}};

static void InitDefaultsTraceRayServerToolEvent_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_TraceRayServerToolEvent_default_instance_;
    new (ptr) ::proto::dota::TraceRayServerToolEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::TraceRayServerToolEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TraceRayServerToolEvent_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTraceRayServerToolEvent_gametoolevents_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsToolTraceRayResult_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_ToolTraceRayResult_default_instance_;
    new (ptr) ::proto::dota::ToolTraceRayResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::ToolTraceRayResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ToolTraceRayResult_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsToolTraceRayResult_gametoolevents_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsSpawnEntityToolEvent_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_SpawnEntityToolEvent_default_instance_;
    new (ptr) ::proto::dota::SpawnEntityToolEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::SpawnEntityToolEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpawnEntityToolEvent_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpawnEntityToolEvent_gametoolevents_2eproto}, {}};

static void InitDefaultsSpawnEntityToolEventResult_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_SpawnEntityToolEventResult_default_instance_;
    new (ptr) ::proto::dota::SpawnEntityToolEventResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::SpawnEntityToolEventResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpawnEntityToolEventResult_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpawnEntityToolEventResult_gametoolevents_2eproto}, {}};

static void InitDefaultsDestroyEntityToolEvent_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_DestroyEntityToolEvent_default_instance_;
    new (ptr) ::proto::dota::DestroyEntityToolEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::DestroyEntityToolEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DestroyEntityToolEvent_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDestroyEntityToolEvent_gametoolevents_2eproto}, {}};

static void InitDefaultsDestroyAllEntitiesToolEvent_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_DestroyAllEntitiesToolEvent_default_instance_;
    new (ptr) ::proto::dota::DestroyAllEntitiesToolEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::DestroyAllEntitiesToolEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DestroyAllEntitiesToolEvent_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDestroyAllEntitiesToolEvent_gametoolevents_2eproto}, {}};

static void InitDefaultsRestartMapToolEvent_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_RestartMapToolEvent_default_instance_;
    new (ptr) ::proto::dota::RestartMapToolEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::RestartMapToolEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RestartMapToolEvent_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRestartMapToolEvent_gametoolevents_2eproto}, {}};

static void InitDefaultsToolEvent_GetEntityInfo_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_ToolEvent_GetEntityInfo_default_instance_;
    new (ptr) ::proto::dota::ToolEvent_GetEntityInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::ToolEvent_GetEntityInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ToolEvent_GetEntityInfo_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsToolEvent_GetEntityInfo_gametoolevents_2eproto}, {}};

static void InitDefaultsToolEvent_GetEntityInfoResult_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.DefaultConstruct();
  *::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.get_mutable() = ::std::string("shithead", 8);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.get_mutable());
  {
    void* ptr = &::proto::dota::_ToolEvent_GetEntityInfoResult_default_instance_;
    new (ptr) ::proto::dota::ToolEvent_GetEntityInfoResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::ToolEvent_GetEntityInfoResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ToolEvent_GetEntityInfoResult_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsToolEvent_GetEntityInfoResult_gametoolevents_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsToolEvent_GetEntityInputs_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_ToolEvent_GetEntityInputs_default_instance_;
    new (ptr) ::proto::dota::ToolEvent_GetEntityInputs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::ToolEvent_GetEntityInputs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ToolEvent_GetEntityInputs_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsToolEvent_GetEntityInputs_gametoolevents_2eproto}, {}};

static void InitDefaultsToolEvent_GetEntityInputsResult_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_ToolEvent_GetEntityInputsResult_default_instance_;
    new (ptr) ::proto::dota::ToolEvent_GetEntityInputsResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::ToolEvent_GetEntityInputsResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ToolEvent_GetEntityInputsResult_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsToolEvent_GetEntityInputsResult_gametoolevents_2eproto}, {}};

static void InitDefaultsToolEvent_FireEntityInput_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_ToolEvent_FireEntityInput_default_instance_;
    new (ptr) ::proto::dota::ToolEvent_FireEntityInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::ToolEvent_FireEntityInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ToolEvent_FireEntityInput_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsToolEvent_FireEntityInput_gametoolevents_2eproto}, {}};

static void InitDefaultsToolEvent_SFMRecordingStateChanged_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_ToolEvent_SFMRecordingStateChanged_default_instance_;
    new (ptr) ::proto::dota::ToolEvent_SFMRecordingStateChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::ToolEvent_SFMRecordingStateChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ToolEvent_SFMRecordingStateChanged_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsToolEvent_SFMRecordingStateChanged_gametoolevents_2eproto}, {}};

static void InitDefaultsToolEvent_SFMToolActiveStateChanged_gametoolevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_ToolEvent_SFMToolActiveStateChanged_default_instance_;
    new (ptr) ::proto::dota::ToolEvent_SFMToolActiveStateChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::ToolEvent_SFMToolActiveStateChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ToolEvent_SFMToolActiveStateChanged_gametoolevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsToolEvent_SFMToolActiveStateChanged_gametoolevents_2eproto}, {}};

void InitDefaults_gametoolevents_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeMapToolEvent_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TraceRayServerToolEvent_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToolTraceRayResult_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpawnEntityToolEvent_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpawnEntityToolEventResult_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DestroyEntityToolEvent_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DestroyAllEntitiesToolEvent_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RestartMapToolEvent_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToolEvent_GetEntityInfo_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToolEvent_GetEntityInfoResult_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToolEvent_GetEntityInputs_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToolEvent_GetEntityInputsResult_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToolEvent_FireEntityInput_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToolEvent_SFMRecordingStateChanged_gametoolevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToolEvent_SFMToolActiveStateChanged_gametoolevents_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_gametoolevents_2eproto[15];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_gametoolevents_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_gametoolevents_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_gametoolevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::ChangeMapToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ChangeMapToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ChangeMapToolEvent, mapname_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::TraceRayServerToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::TraceRayServerToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::TraceRayServerToolEvent, start_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::TraceRayServerToolEvent, end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolTraceRayResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolTraceRayResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolTraceRayResult, hit_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolTraceRayResult, impact_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolTraceRayResult, normal_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolTraceRayResult, distance_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolTraceRayResult, fraction_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolTraceRayResult, ehandle_),
  2,
  0,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::SpawnEntityToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::SpawnEntityToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::SpawnEntityToolEvent, entity_keyvalues_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::SpawnEntityToolEvent, clientsideentity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::SpawnEntityToolEventResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::SpawnEntityToolEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::SpawnEntityToolEventResult, ehandle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::DestroyEntityToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::DestroyEntityToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::DestroyEntityToolEvent, ehandle_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::DestroyAllEntitiesToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::DestroyAllEntitiesToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::RestartMapToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::RestartMapToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfo, ehandle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfo, clientsideentity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfoResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfoResult, cppclass_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfoResult, classname_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfoResult, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfoResult, origin_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfoResult, mins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInfoResult, maxs_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInputs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInputs, ehandle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInputs, clientsideentity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInputsResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInputsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_GetEntityInputsResult, input_list_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_FireEntityInput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_FireEntityInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_FireEntityInput, ehandle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_FireEntityInput, clientsideentity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_FireEntityInput, input_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_FireEntityInput, input_param_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_SFMRecordingStateChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_SFMRecordingStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_SFMRecordingStateChanged, isrecording_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_SFMToolActiveStateChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_SFMToolActiveStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::ToolEvent_SFMToolActiveStateChanged, isactive_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::dota::ChangeMapToolEvent)},
  { 7, 14, sizeof(::proto::dota::TraceRayServerToolEvent)},
  { 16, 27, sizeof(::proto::dota::ToolTraceRayResult)},
  { 33, 40, sizeof(::proto::dota::SpawnEntityToolEvent)},
  { 42, 48, sizeof(::proto::dota::SpawnEntityToolEventResult)},
  { 49, 55, sizeof(::proto::dota::DestroyEntityToolEvent)},
  { 56, 61, sizeof(::proto::dota::DestroyAllEntitiesToolEvent)},
  { 61, 66, sizeof(::proto::dota::RestartMapToolEvent)},
  { 66, 73, sizeof(::proto::dota::ToolEvent_GetEntityInfo)},
  { 75, 86, sizeof(::proto::dota::ToolEvent_GetEntityInfoResult)},
  { 92, 99, sizeof(::proto::dota::ToolEvent_GetEntityInputs)},
  { 101, 107, sizeof(::proto::dota::ToolEvent_GetEntityInputsResult)},
  { 108, 117, sizeof(::proto::dota::ToolEvent_FireEntityInput)},
  { 121, 127, sizeof(::proto::dota::ToolEvent_SFMRecordingStateChanged)},
  { 128, 134, sizeof(::proto::dota::ToolEvent_SFMToolActiveStateChanged)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_ChangeMapToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_TraceRayServerToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_ToolTraceRayResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_SpawnEntityToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_SpawnEntityToolEventResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_DestroyEntityToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_DestroyAllEntitiesToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_RestartMapToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_ToolEvent_GetEntityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_ToolEvent_GetEntityInfoResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_ToolEvent_GetEntityInputs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_ToolEvent_GetEntityInputsResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_ToolEvent_FireEntityInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_ToolEvent_SFMRecordingStateChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_ToolEvent_SFMToolActiveStateChanged_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_gametoolevents_2eproto = {
  {}, AddDescriptors_gametoolevents_2eproto, "gametoolevents.proto", schemas,
  file_default_instances, TableStruct_gametoolevents_2eproto::offsets,
  file_level_metadata_gametoolevents_2eproto, 15, file_level_enum_descriptors_gametoolevents_2eproto, file_level_service_descriptors_gametoolevents_2eproto,
};

const char descriptor_table_protodef_gametoolevents_2eproto[] =
  "\n\024gametoolevents.proto\022\nproto.dota\032\026netw"
  "orkbasetypes.proto\"%\n\022ChangeMapToolEvent"
  "\022\017\n\007mapname\030\001 \001(\t\"e\n\027TraceRayServerToolE"
  "vent\022%\n\005start\030\001 \001(\0132\026.proto.dota.CMsgVec"
  "tor\022#\n\003end\030\002 \001(\0132\026.proto.dota.CMsgVector"
  "\"\246\001\n\022ToolTraceRayResult\022\013\n\003hit\030\001 \001(\010\022&\n\006"
  "impact\030\002 \001(\0132\026.proto.dota.CMsgVector\022&\n\006"
  "normal\030\003 \001(\0132\026.proto.dota.CMsgVector\022\020\n\010"
  "distance\030\004 \001(\002\022\020\n\010fraction\030\005 \001(\002\022\017\n\007ehan"
  "dle\030\006 \001(\005\"J\n\024SpawnEntityToolEvent\022\030\n\020ent"
  "ity_keyvalues\030\001 \001(\014\022\030\n\020clientsideentity\030"
  "\002 \001(\010\"-\n\032SpawnEntityToolEventResult\022\017\n\007e"
  "handle\030\001 \001(\005\")\n\026DestroyEntityToolEvent\022\017"
  "\n\007ehandle\030\001 \001(\005\"\035\n\033DestroyAllEntitiesToo"
  "lEvent\"\025\n\023RestartMapToolEvent\"D\n\027ToolEve"
  "nt_GetEntityInfo\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020cli"
  "entsideentity\030\002 \001(\010\"\320\001\n\035ToolEvent_GetEnt"
  "ityInfoResult\022\032\n\010cppclass\030\001 \001(\t:\010shithea"
  "d\022\021\n\tclassname\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022&\n\006or"
  "igin\030\004 \001(\0132\026.proto.dota.CMsgVector\022$\n\004mi"
  "ns\030\005 \001(\0132\026.proto.dota.CMsgVector\022$\n\004maxs"
  "\030\006 \001(\0132\026.proto.dota.CMsgVector\"F\n\031ToolEv"
  "ent_GetEntityInputs\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020"
  "clientsideentity\030\002 \001(\010\"5\n\037ToolEvent_GetE"
  "ntityInputsResult\022\022\n\ninput_list\030\001 \003(\t\"o\n"
  "\031ToolEvent_FireEntityInput\022\017\n\007ehandle\030\001 "
  "\001(\005\022\030\n\020clientsideentity\030\002 \001(\010\022\022\n\ninput_n"
  "ame\030\003 \001(\t\022\023\n\013input_param\030\004 \001(\t\"9\n\"ToolEv"
  "ent_SFMRecordingStateChanged\022\023\n\013isrecord"
  "ing\030\001 \001(\010\"7\n#ToolEvent_SFMToolActiveStat"
  "eChanged\022\020\n\010isactive\030\001 \001(\010B\003\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_gametoolevents_2eproto = {
  false, InitDefaults_gametoolevents_2eproto, 
  descriptor_table_protodef_gametoolevents_2eproto,
  "gametoolevents.proto", &assign_descriptors_table_gametoolevents_2eproto, 1231,
};

void AddDescriptors_gametoolevents_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_networkbasetypes_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_gametoolevents_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gametoolevents_2eproto = []() { AddDescriptors_gametoolevents_2eproto(); return true; }();
namespace proto {
namespace dota {

// ===================================================================

void ChangeMapToolEvent::InitAsDefaultInstance() {
}
class ChangeMapToolEvent::HasBitSetters {
 public:
  static void set_has_mapname(ChangeMapToolEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeMapToolEvent::kMapnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeMapToolEvent::ChangeMapToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ChangeMapToolEvent)
}
ChangeMapToolEvent::ChangeMapToolEvent(const ChangeMapToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mapname()) {
    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.ChangeMapToolEvent)
}

void ChangeMapToolEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChangeMapToolEvent_gametoolevents_2eproto.base);
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChangeMapToolEvent::~ChangeMapToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.ChangeMapToolEvent)
  SharedDtor();
}

void ChangeMapToolEvent::SharedDtor() {
  mapname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChangeMapToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeMapToolEvent& ChangeMapToolEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChangeMapToolEvent_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void ChangeMapToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ChangeMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mapname_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangeMapToolEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChangeMapToolEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string mapname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.ChangeMapToolEvent.mapname");
        object = msg->mutable_mapname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangeMapToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ChangeMapToolEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mapname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), static_cast<int>(this->mapname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ChangeMapToolEvent.mapname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ChangeMapToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ChangeMapToolEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangeMapToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ChangeMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mapname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), static_cast<int>(this->mapname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ChangeMapToolEvent.mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ChangeMapToolEvent)
}

::google::protobuf::uint8* ChangeMapToolEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ChangeMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mapname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), static_cast<int>(this->mapname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ChangeMapToolEvent.mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ChangeMapToolEvent)
  return target;
}

size_t ChangeMapToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ChangeMapToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string mapname = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mapname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeMapToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ChangeMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeMapToolEvent* source =
      ::google::protobuf::DynamicCastToGenerated<ChangeMapToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ChangeMapToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ChangeMapToolEvent)
    MergeFrom(*source);
  }
}

void ChangeMapToolEvent::MergeFrom(const ChangeMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ChangeMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mapname()) {
    _has_bits_[0] |= 0x00000001u;
    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
}

void ChangeMapToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ChangeMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMapToolEvent::CopyFrom(const ChangeMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ChangeMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMapToolEvent::IsInitialized() const {
  return true;
}

void ChangeMapToolEvent::Swap(ChangeMapToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeMapToolEvent::InternalSwap(ChangeMapToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mapname_.Swap(&other->mapname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ChangeMapToolEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TraceRayServerToolEvent::InitAsDefaultInstance() {
  ::proto::dota::_TraceRayServerToolEvent_default_instance_._instance.get_mutable()->start_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_TraceRayServerToolEvent_default_instance_._instance.get_mutable()->end_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class TraceRayServerToolEvent::HasBitSetters {
 public:
  static const ::proto::dota::CMsgVector& start(const TraceRayServerToolEvent* msg);
  static void set_has_start(TraceRayServerToolEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgVector& end(const TraceRayServerToolEvent* msg);
  static void set_has_end(TraceRayServerToolEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgVector&
TraceRayServerToolEvent::HasBitSetters::start(const TraceRayServerToolEvent* msg) {
  return *msg->start_;
}
const ::proto::dota::CMsgVector&
TraceRayServerToolEvent::HasBitSetters::end(const TraceRayServerToolEvent* msg) {
  return *msg->end_;
}
void TraceRayServerToolEvent::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TraceRayServerToolEvent::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceRayServerToolEvent::kStartFieldNumber;
const int TraceRayServerToolEvent::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceRayServerToolEvent::TraceRayServerToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.TraceRayServerToolEvent)
}
TraceRayServerToolEvent::TraceRayServerToolEvent(const TraceRayServerToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::proto::dota::CMsgVector(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::proto::dota::CMsgVector(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.TraceRayServerToolEvent)
}

void TraceRayServerToolEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TraceRayServerToolEvent_gametoolevents_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

TraceRayServerToolEvent::~TraceRayServerToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.TraceRayServerToolEvent)
  SharedDtor();
}

void TraceRayServerToolEvent::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void TraceRayServerToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceRayServerToolEvent& TraceRayServerToolEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TraceRayServerToolEvent_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void TraceRayServerToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.TraceRayServerToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceRayServerToolEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TraceRayServerToolEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgVector start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_start();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgVector end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_end();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceRayServerToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.TraceRayServerToolEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.TraceRayServerToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.TraceRayServerToolEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceRayServerToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.TraceRayServerToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::start(this), output);
  }

  // optional .proto.dota.CMsgVector end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::end(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.TraceRayServerToolEvent)
}

::google::protobuf::uint8* TraceRayServerToolEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.TraceRayServerToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::start(this), target);
  }

  // optional .proto.dota.CMsgVector end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::end(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.TraceRayServerToolEvent)
  return target;
}

size_t TraceRayServerToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.TraceRayServerToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgVector start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .proto.dota.CMsgVector end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceRayServerToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.TraceRayServerToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceRayServerToolEvent* source =
      ::google::protobuf::DynamicCastToGenerated<TraceRayServerToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.TraceRayServerToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.TraceRayServerToolEvent)
    MergeFrom(*source);
  }
}

void TraceRayServerToolEvent::MergeFrom(const TraceRayServerToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.TraceRayServerToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start()->::proto::dota::CMsgVector::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_end()->::proto::dota::CMsgVector::MergeFrom(from.end());
    }
  }
}

void TraceRayServerToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.TraceRayServerToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceRayServerToolEvent::CopyFrom(const TraceRayServerToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.TraceRayServerToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceRayServerToolEvent::IsInitialized() const {
  return true;
}

void TraceRayServerToolEvent::Swap(TraceRayServerToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceRayServerToolEvent::InternalSwap(TraceRayServerToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::google::protobuf::Metadata TraceRayServerToolEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ToolTraceRayResult::InitAsDefaultInstance() {
  ::proto::dota::_ToolTraceRayResult_default_instance_._instance.get_mutable()->impact_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_ToolTraceRayResult_default_instance_._instance.get_mutable()->normal_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class ToolTraceRayResult::HasBitSetters {
 public:
  static void set_has_hit(ToolTraceRayResult* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgVector& impact(const ToolTraceRayResult* msg);
  static void set_has_impact(ToolTraceRayResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgVector& normal(const ToolTraceRayResult* msg);
  static void set_has_normal(ToolTraceRayResult* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_distance(ToolTraceRayResult* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_fraction(ToolTraceRayResult* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_ehandle(ToolTraceRayResult* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::proto::dota::CMsgVector&
ToolTraceRayResult::HasBitSetters::impact(const ToolTraceRayResult* msg) {
  return *msg->impact_;
}
const ::proto::dota::CMsgVector&
ToolTraceRayResult::HasBitSetters::normal(const ToolTraceRayResult* msg) {
  return *msg->normal_;
}
void ToolTraceRayResult::clear_impact() {
  if (impact_ != nullptr) impact_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ToolTraceRayResult::clear_normal() {
  if (normal_ != nullptr) normal_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolTraceRayResult::kHitFieldNumber;
const int ToolTraceRayResult::kImpactFieldNumber;
const int ToolTraceRayResult::kNormalFieldNumber;
const int ToolTraceRayResult::kDistanceFieldNumber;
const int ToolTraceRayResult::kFractionFieldNumber;
const int ToolTraceRayResult::kEhandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolTraceRayResult::ToolTraceRayResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolTraceRayResult)
}
ToolTraceRayResult::ToolTraceRayResult(const ToolTraceRayResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_impact()) {
    impact_ = new ::proto::dota::CMsgVector(*from.impact_);
  } else {
    impact_ = nullptr;
  }
  if (from.has_normal()) {
    normal_ = new ::proto::dota::CMsgVector(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  ::memcpy(&hit_, &from.hit_,
    static_cast<size_t>(reinterpret_cast<char*>(&ehandle_) -
    reinterpret_cast<char*>(&hit_)) + sizeof(ehandle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolTraceRayResult)
}

void ToolTraceRayResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ToolTraceRayResult_gametoolevents_2eproto.base);
  ::memset(&impact_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ehandle_) -
      reinterpret_cast<char*>(&impact_)) + sizeof(ehandle_));
}

ToolTraceRayResult::~ToolTraceRayResult() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolTraceRayResult)
  SharedDtor();
}

void ToolTraceRayResult::SharedDtor() {
  if (this != internal_default_instance()) delete impact_;
  if (this != internal_default_instance()) delete normal_;
}

void ToolTraceRayResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolTraceRayResult& ToolTraceRayResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ToolTraceRayResult_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void ToolTraceRayResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolTraceRayResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(impact_ != nullptr);
      impact_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(normal_ != nullptr);
      normal_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&hit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ehandle_) -
        reinterpret_cast<char*>(&hit_)) + sizeof(ehandle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ToolTraceRayResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ToolTraceRayResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool hit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgVector impact = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_impact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgVector normal = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_normal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional float distance = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_distance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float fraction = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_fraction(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int32 ehandle = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_ehandle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ToolTraceRayResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolTraceRayResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector impact = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_impact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector normal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_distance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fraction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_fraction(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ehandle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_ehandle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolTraceRayResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolTraceRayResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ToolTraceRayResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolTraceRayResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hit = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hit(), output);
  }

  // optional .proto.dota.CMsgVector impact = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::impact(this), output);
  }

  // optional .proto.dota.CMsgVector normal = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::normal(this), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  // optional float fraction = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fraction(), output);
  }

  // optional int32 ehandle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ehandle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolTraceRayResult)
}

::google::protobuf::uint8* ToolTraceRayResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolTraceRayResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hit = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hit(), target);
  }

  // optional .proto.dota.CMsgVector impact = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::impact(this), target);
  }

  // optional .proto.dota.CMsgVector normal = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::normal(this), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  // optional float fraction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fraction(), target);
  }

  // optional int32 ehandle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ehandle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolTraceRayResult)
  return target;
}

size_t ToolTraceRayResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolTraceRayResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .proto.dota.CMsgVector impact = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *impact_);
    }

    // optional .proto.dota.CMsgVector normal = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *normal_);
    }

    // optional bool hit = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float fraction = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 ehandle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolTraceRayResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolTraceRayResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolTraceRayResult* source =
      ::google::protobuf::DynamicCastToGenerated<ToolTraceRayResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolTraceRayResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolTraceRayResult)
    MergeFrom(*source);
  }
}

void ToolTraceRayResult::MergeFrom(const ToolTraceRayResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolTraceRayResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_impact()->::proto::dota::CMsgVector::MergeFrom(from.impact());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_normal()->::proto::dota::CMsgVector::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000004u) {
      hit_ = from.hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      fraction_ = from.fraction_;
    }
    if (cached_has_bits & 0x00000020u) {
      ehandle_ = from.ehandle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolTraceRayResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolTraceRayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolTraceRayResult::CopyFrom(const ToolTraceRayResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolTraceRayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolTraceRayResult::IsInitialized() const {
  return true;
}

void ToolTraceRayResult::Swap(ToolTraceRayResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolTraceRayResult::InternalSwap(ToolTraceRayResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(impact_, other->impact_);
  swap(normal_, other->normal_);
  swap(hit_, other->hit_);
  swap(distance_, other->distance_);
  swap(fraction_, other->fraction_);
  swap(ehandle_, other->ehandle_);
}

::google::protobuf::Metadata ToolTraceRayResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SpawnEntityToolEvent::InitAsDefaultInstance() {
}
class SpawnEntityToolEvent::HasBitSetters {
 public:
  static void set_has_entity_keyvalues(SpawnEntityToolEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_clientsideentity(SpawnEntityToolEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpawnEntityToolEvent::kEntityKeyvaluesFieldNumber;
const int SpawnEntityToolEvent::kClientsideentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpawnEntityToolEvent::SpawnEntityToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.SpawnEntityToolEvent)
}
SpawnEntityToolEvent::SpawnEntityToolEvent(const SpawnEntityToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entity_keyvalues()) {
    entity_keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_keyvalues_);
  }
  clientsideentity_ = from.clientsideentity_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.SpawnEntityToolEvent)
}

void SpawnEntityToolEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SpawnEntityToolEvent_gametoolevents_2eproto.base);
  entity_keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientsideentity_ = false;
}

SpawnEntityToolEvent::~SpawnEntityToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.SpawnEntityToolEvent)
  SharedDtor();
}

void SpawnEntityToolEvent::SharedDtor() {
  entity_keyvalues_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpawnEntityToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpawnEntityToolEvent& SpawnEntityToolEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpawnEntityToolEvent_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void SpawnEntityToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.SpawnEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    entity_keyvalues_.ClearNonDefaultToEmptyNoArena();
  }
  clientsideentity_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpawnEntityToolEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpawnEntityToolEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes entity_keyvalues = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_entity_keyvalues();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_clientsideentity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpawnEntityToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.SpawnEntityToolEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes entity_keyvalues = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entity_keyvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_clientsideentity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.SpawnEntityToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.SpawnEntityToolEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpawnEntityToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.SpawnEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes entity_keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entity_keyvalues(), output);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.SpawnEntityToolEvent)
}

::google::protobuf::uint8* SpawnEntityToolEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.SpawnEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes entity_keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entity_keyvalues(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.SpawnEntityToolEvent)
  return target;
}

size_t SpawnEntityToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.SpawnEntityToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes entity_keyvalues = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entity_keyvalues());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpawnEntityToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.SpawnEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SpawnEntityToolEvent* source =
      ::google::protobuf::DynamicCastToGenerated<SpawnEntityToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.SpawnEntityToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.SpawnEntityToolEvent)
    MergeFrom(*source);
  }
}

void SpawnEntityToolEvent::MergeFrom(const SpawnEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.SpawnEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      entity_keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_keyvalues_);
    }
    if (cached_has_bits & 0x00000002u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpawnEntityToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.SpawnEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnEntityToolEvent::CopyFrom(const SpawnEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.SpawnEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEvent::IsInitialized() const {
  return true;
}

void SpawnEntityToolEvent::Swap(SpawnEntityToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpawnEntityToolEvent::InternalSwap(SpawnEntityToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_keyvalues_.Swap(&other->entity_keyvalues_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clientsideentity_, other->clientsideentity_);
}

::google::protobuf::Metadata SpawnEntityToolEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SpawnEntityToolEventResult::InitAsDefaultInstance() {
}
class SpawnEntityToolEventResult::HasBitSetters {
 public:
  static void set_has_ehandle(SpawnEntityToolEventResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpawnEntityToolEventResult::kEhandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpawnEntityToolEventResult::SpawnEntityToolEventResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.SpawnEntityToolEventResult)
}
SpawnEntityToolEventResult::SpawnEntityToolEventResult(const SpawnEntityToolEventResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ehandle_ = from.ehandle_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.SpawnEntityToolEventResult)
}

void SpawnEntityToolEventResult::SharedCtor() {
  ehandle_ = 0;
}

SpawnEntityToolEventResult::~SpawnEntityToolEventResult() {
  // @@protoc_insertion_point(destructor:proto.dota.SpawnEntityToolEventResult)
  SharedDtor();
}

void SpawnEntityToolEventResult::SharedDtor() {
}

void SpawnEntityToolEventResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpawnEntityToolEventResult& SpawnEntityToolEventResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpawnEntityToolEventResult_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void SpawnEntityToolEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.SpawnEntityToolEventResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ehandle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpawnEntityToolEventResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpawnEntityToolEventResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ehandle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpawnEntityToolEventResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.SpawnEntityToolEventResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ehandle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.SpawnEntityToolEventResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.SpawnEntityToolEventResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpawnEntityToolEventResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.SpawnEntityToolEventResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.SpawnEntityToolEventResult)
}

::google::protobuf::uint8* SpawnEntityToolEventResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.SpawnEntityToolEventResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.SpawnEntityToolEventResult)
  return target;
}

size_t SpawnEntityToolEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.SpawnEntityToolEventResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ehandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ehandle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpawnEntityToolEventResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.SpawnEntityToolEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpawnEntityToolEventResult* source =
      ::google::protobuf::DynamicCastToGenerated<SpawnEntityToolEventResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.SpawnEntityToolEventResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.SpawnEntityToolEventResult)
    MergeFrom(*source);
  }
}

void SpawnEntityToolEventResult::MergeFrom(const SpawnEntityToolEventResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.SpawnEntityToolEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ehandle()) {
    set_ehandle(from.ehandle());
  }
}

void SpawnEntityToolEventResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.SpawnEntityToolEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnEntityToolEventResult::CopyFrom(const SpawnEntityToolEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.SpawnEntityToolEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEventResult::IsInitialized() const {
  return true;
}

void SpawnEntityToolEventResult::Swap(SpawnEntityToolEventResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpawnEntityToolEventResult::InternalSwap(SpawnEntityToolEventResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ehandle_, other->ehandle_);
}

::google::protobuf::Metadata SpawnEntityToolEventResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DestroyEntityToolEvent::InitAsDefaultInstance() {
}
class DestroyEntityToolEvent::HasBitSetters {
 public:
  static void set_has_ehandle(DestroyEntityToolEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyEntityToolEvent::kEhandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyEntityToolEvent::DestroyEntityToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.DestroyEntityToolEvent)
}
DestroyEntityToolEvent::DestroyEntityToolEvent(const DestroyEntityToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ehandle_ = from.ehandle_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.DestroyEntityToolEvent)
}

void DestroyEntityToolEvent::SharedCtor() {
  ehandle_ = 0;
}

DestroyEntityToolEvent::~DestroyEntityToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.DestroyEntityToolEvent)
  SharedDtor();
}

void DestroyEntityToolEvent::SharedDtor() {
}

void DestroyEntityToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroyEntityToolEvent& DestroyEntityToolEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DestroyEntityToolEvent_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void DestroyEntityToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.DestroyEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ehandle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DestroyEntityToolEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DestroyEntityToolEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ehandle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DestroyEntityToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.DestroyEntityToolEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ehandle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.DestroyEntityToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.DestroyEntityToolEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DestroyEntityToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.DestroyEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.DestroyEntityToolEvent)
}

::google::protobuf::uint8* DestroyEntityToolEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.DestroyEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.DestroyEntityToolEvent)
  return target;
}

size_t DestroyEntityToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.DestroyEntityToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ehandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ehandle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyEntityToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.DestroyEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyEntityToolEvent* source =
      ::google::protobuf::DynamicCastToGenerated<DestroyEntityToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.DestroyEntityToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.DestroyEntityToolEvent)
    MergeFrom(*source);
  }
}

void DestroyEntityToolEvent::MergeFrom(const DestroyEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.DestroyEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ehandle()) {
    set_ehandle(from.ehandle());
  }
}

void DestroyEntityToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.DestroyEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyEntityToolEvent::CopyFrom(const DestroyEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.DestroyEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyEntityToolEvent::IsInitialized() const {
  return true;
}

void DestroyEntityToolEvent::Swap(DestroyEntityToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyEntityToolEvent::InternalSwap(DestroyEntityToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ehandle_, other->ehandle_);
}

::google::protobuf::Metadata DestroyEntityToolEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DestroyAllEntitiesToolEvent::InitAsDefaultInstance() {
}
class DestroyAllEntitiesToolEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.DestroyAllEntitiesToolEvent)
}
DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent(const DestroyAllEntitiesToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.DestroyAllEntitiesToolEvent)
}

void DestroyAllEntitiesToolEvent::SharedCtor() {
}

DestroyAllEntitiesToolEvent::~DestroyAllEntitiesToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.DestroyAllEntitiesToolEvent)
  SharedDtor();
}

void DestroyAllEntitiesToolEvent::SharedDtor() {
}

void DestroyAllEntitiesToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestroyAllEntitiesToolEvent& DestroyAllEntitiesToolEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DestroyAllEntitiesToolEvent_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void DestroyAllEntitiesToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.DestroyAllEntitiesToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DestroyAllEntitiesToolEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DestroyAllEntitiesToolEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DestroyAllEntitiesToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.DestroyAllEntitiesToolEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.DestroyAllEntitiesToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.DestroyAllEntitiesToolEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DestroyAllEntitiesToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.DestroyAllEntitiesToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.DestroyAllEntitiesToolEvent)
}

::google::protobuf::uint8* DestroyAllEntitiesToolEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.DestroyAllEntitiesToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.DestroyAllEntitiesToolEvent)
  return target;
}

size_t DestroyAllEntitiesToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.DestroyAllEntitiesToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyAllEntitiesToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.DestroyAllEntitiesToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyAllEntitiesToolEvent* source =
      ::google::protobuf::DynamicCastToGenerated<DestroyAllEntitiesToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.DestroyAllEntitiesToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.DestroyAllEntitiesToolEvent)
    MergeFrom(*source);
  }
}

void DestroyAllEntitiesToolEvent::MergeFrom(const DestroyAllEntitiesToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.DestroyAllEntitiesToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DestroyAllEntitiesToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.DestroyAllEntitiesToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyAllEntitiesToolEvent::CopyFrom(const DestroyAllEntitiesToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.DestroyAllEntitiesToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyAllEntitiesToolEvent::IsInitialized() const {
  return true;
}

void DestroyAllEntitiesToolEvent::Swap(DestroyAllEntitiesToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyAllEntitiesToolEvent::InternalSwap(DestroyAllEntitiesToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata DestroyAllEntitiesToolEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RestartMapToolEvent::InitAsDefaultInstance() {
}
class RestartMapToolEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestartMapToolEvent::RestartMapToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.RestartMapToolEvent)
}
RestartMapToolEvent::RestartMapToolEvent(const RestartMapToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.RestartMapToolEvent)
}

void RestartMapToolEvent::SharedCtor() {
}

RestartMapToolEvent::~RestartMapToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.RestartMapToolEvent)
  SharedDtor();
}

void RestartMapToolEvent::SharedDtor() {
}

void RestartMapToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestartMapToolEvent& RestartMapToolEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RestartMapToolEvent_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void RestartMapToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.RestartMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RestartMapToolEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RestartMapToolEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RestartMapToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.RestartMapToolEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.RestartMapToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.RestartMapToolEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RestartMapToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.RestartMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.RestartMapToolEvent)
}

::google::protobuf::uint8* RestartMapToolEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.RestartMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.RestartMapToolEvent)
  return target;
}

size_t RestartMapToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.RestartMapToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestartMapToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.RestartMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartMapToolEvent* source =
      ::google::protobuf::DynamicCastToGenerated<RestartMapToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.RestartMapToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.RestartMapToolEvent)
    MergeFrom(*source);
  }
}

void RestartMapToolEvent::MergeFrom(const RestartMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.RestartMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RestartMapToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.RestartMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartMapToolEvent::CopyFrom(const RestartMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.RestartMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartMapToolEvent::IsInitialized() const {
  return true;
}

void RestartMapToolEvent::Swap(RestartMapToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestartMapToolEvent::InternalSwap(RestartMapToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata RestartMapToolEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ToolEvent_GetEntityInfo::InitAsDefaultInstance() {
}
class ToolEvent_GetEntityInfo::HasBitSetters {
 public:
  static void set_has_ehandle(ToolEvent_GetEntityInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_clientsideentity(ToolEvent_GetEntityInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_GetEntityInfo::kEhandleFieldNumber;
const int ToolEvent_GetEntityInfo::kClientsideentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_GetEntityInfo)
}
ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo(const ToolEvent_GetEntityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_GetEntityInfo)
}

void ToolEvent_GetEntityInfo::SharedCtor() {
  ::memset(&ehandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientsideentity_) -
      reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
}

ToolEvent_GetEntityInfo::~ToolEvent_GetEntityInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_GetEntityInfo)
  SharedDtor();
}

void ToolEvent_GetEntityInfo::SharedDtor() {
}

void ToolEvent_GetEntityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolEvent_GetEntityInfo& ToolEvent_GetEntityInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ToolEvent_GetEntityInfo_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void ToolEvent_GetEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_GetEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientsideentity_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ToolEvent_GetEntityInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ToolEvent_GetEntityInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ehandle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_clientsideentity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ToolEvent_GetEntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_GetEntityInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ehandle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_clientsideentity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_GetEntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_GetEntityInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ToolEvent_GetEntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_GetEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_GetEntityInfo)
}

::google::protobuf::uint8* ToolEvent_GetEntityInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_GetEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_GetEntityInfo)
  return target;
}

size_t ToolEvent_GetEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_GetEntityInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_GetEntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_GetEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInfo* source =
      ::google::protobuf::DynamicCastToGenerated<ToolEvent_GetEntityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_GetEntityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_GetEntityInfo)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInfo::MergeFrom(const ToolEvent_GetEntityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_GetEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolEvent_GetEntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_GetEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInfo::CopyFrom(const ToolEvent_GetEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_GetEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfo::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInfo::Swap(ToolEvent_GetEntityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_GetEntityInfo::InternalSwap(ToolEvent_GetEntityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ehandle_, other->ehandle_);
  swap(clientsideentity_, other->clientsideentity_);
}

::google::protobuf::Metadata ToolEvent_GetEntityInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ToolEvent_GetEntityInfoResult::InitAsDefaultInstance() {
  ::proto::dota::_ToolEvent_GetEntityInfoResult_default_instance_._instance.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_ToolEvent_GetEntityInfoResult_default_instance_._instance.get_mutable()->mins_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_ToolEvent_GetEntityInfoResult_default_instance_._instance.get_mutable()->maxs_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class ToolEvent_GetEntityInfoResult::HasBitSetters {
 public:
  static void set_has_cppclass(ToolEvent_GetEntityInfoResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_classname(ToolEvent_GetEntityInfoResult* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(ToolEvent_GetEntityInfoResult* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgVector& origin(const ToolEvent_GetEntityInfoResult* msg);
  static void set_has_origin(ToolEvent_GetEntityInfoResult* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::dota::CMsgVector& mins(const ToolEvent_GetEntityInfoResult* msg);
  static void set_has_mins(ToolEvent_GetEntityInfoResult* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgVector& maxs(const ToolEvent_GetEntityInfoResult* msg);
  static void set_has_maxs(ToolEvent_GetEntityInfoResult* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::proto::dota::CMsgVector&
ToolEvent_GetEntityInfoResult::HasBitSetters::origin(const ToolEvent_GetEntityInfoResult* msg) {
  return *msg->origin_;
}
const ::proto::dota::CMsgVector&
ToolEvent_GetEntityInfoResult::HasBitSetters::mins(const ToolEvent_GetEntityInfoResult* msg) {
  return *msg->mins_;
}
const ::proto::dota::CMsgVector&
ToolEvent_GetEntityInfoResult::HasBitSetters::maxs(const ToolEvent_GetEntityInfoResult* msg) {
  return *msg->maxs_;
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_;
void ToolEvent_GetEntityInfoResult::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ToolEvent_GetEntityInfoResult::clear_mins() {
  if (mins_ != nullptr) mins_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ToolEvent_GetEntityInfoResult::clear_maxs() {
  if (maxs_ != nullptr) maxs_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_GetEntityInfoResult::kCppclassFieldNumber;
const int ToolEvent_GetEntityInfoResult::kClassnameFieldNumber;
const int ToolEvent_GetEntityInfoResult::kNameFieldNumber;
const int ToolEvent_GetEntityInfoResult::kOriginFieldNumber;
const int ToolEvent_GetEntityInfoResult::kMinsFieldNumber;
const int ToolEvent_GetEntityInfoResult::kMaxsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_GetEntityInfoResult)
}
ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult(const ToolEvent_GetEntityInfoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cppclass_.UnsafeSetDefault(&::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.get());
  if (from.has_cppclass()) {
    cppclass_.AssignWithDefault(&::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.get(), from.cppclass_);
  }
  classname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_classname()) {
    classname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classname_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from.has_mins()) {
    mins_ = new ::proto::dota::CMsgVector(*from.mins_);
  } else {
    mins_ = nullptr;
  }
  if (from.has_maxs()) {
    maxs_ = new ::proto::dota::CMsgVector(*from.maxs_);
  } else {
    maxs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_GetEntityInfoResult)
}

void ToolEvent_GetEntityInfoResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ToolEvent_GetEntityInfoResult_gametoolevents_2eproto.base);
  cppclass_.UnsafeSetDefault(&::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.get());
  classname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxs_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(maxs_));
}

ToolEvent_GetEntityInfoResult::~ToolEvent_GetEntityInfoResult() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_GetEntityInfoResult)
  SharedDtor();
}

void ToolEvent_GetEntityInfoResult::SharedDtor() {
  cppclass_.DestroyNoArena(&::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.get());
  classname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete mins_;
  if (this != internal_default_instance()) delete maxs_;
}

void ToolEvent_GetEntityInfoResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolEvent_GetEntityInfoResult& ToolEvent_GetEntityInfoResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ToolEvent_GetEntityInfoResult_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void ToolEvent_GetEntityInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_GetEntityInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      cppclass_.UnsafeMutablePointer()->assign(*&::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      classname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(mins_ != nullptr);
      mins_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(maxs_ != nullptr);
      maxs_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ToolEvent_GetEntityInfoResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ToolEvent_GetEntityInfoResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string cppclass = 1 [default = "shithead"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.ToolEvent_GetEntityInfoResult.cppclass");
        object = msg->mutable_cppclass();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string classname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.ToolEvent_GetEntityInfoResult.classname");
        object = msg->mutable_classname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.ToolEvent_GetEntityInfoResult.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.CMsgVector origin = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_origin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgVector mins = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_mins();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgVector maxs = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_maxs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ToolEvent_GetEntityInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_GetEntityInfoResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cppclass = 1 [default = "shithead"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cppclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cppclass().data(), static_cast<int>(this->cppclass().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_GetEntityInfoResult.cppclass");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classname().data(), static_cast<int>(this->classname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_GetEntityInfoResult.classname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_GetEntityInfoResult.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector origin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector mins = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector maxs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_maxs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_GetEntityInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_GetEntityInfoResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ToolEvent_GetEntityInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_GetEntityInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cppclass = 1 [default = "shithead"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cppclass().data(), static_cast<int>(this->cppclass().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.cppclass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cppclass(), output);
  }

  // optional string classname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), static_cast<int>(this->classname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.classname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->classname(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .proto.dota.CMsgVector origin = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::origin(this), output);
  }

  // optional .proto.dota.CMsgVector mins = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::mins(this), output);
  }

  // optional .proto.dota.CMsgVector maxs = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::maxs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_GetEntityInfoResult)
}

::google::protobuf::uint8* ToolEvent_GetEntityInfoResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_GetEntityInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cppclass = 1 [default = "shithead"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cppclass().data(), static_cast<int>(this->cppclass().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.cppclass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cppclass(), target);
  }

  // optional string classname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), static_cast<int>(this->classname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.classname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->classname(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .proto.dota.CMsgVector origin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::origin(this), target);
  }

  // optional .proto.dota.CMsgVector mins = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::mins(this), target);
  }

  // optional .proto.dota.CMsgVector maxs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::maxs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_GetEntityInfoResult)
  return target;
}

size_t ToolEvent_GetEntityInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_GetEntityInfoResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cppclass = 1 [default = "shithead"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cppclass());
    }

    // optional string classname = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .proto.dota.CMsgVector origin = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional .proto.dota.CMsgVector mins = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mins_);
    }

    // optional .proto.dota.CMsgVector maxs = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *maxs_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_GetEntityInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_GetEntityInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInfoResult* source =
      ::google::protobuf::DynamicCastToGenerated<ToolEvent_GetEntityInfoResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_GetEntityInfoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_GetEntityInfoResult)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInfoResult::MergeFrom(const ToolEvent_GetEntityInfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_GetEntityInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cppclass_.AssignWithDefault(&::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.get(), from.cppclass_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      classname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classname_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_mins()->::proto::dota::CMsgVector::MergeFrom(from.mins());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_maxs()->::proto::dota::CMsgVector::MergeFrom(from.maxs());
    }
  }
}

void ToolEvent_GetEntityInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_GetEntityInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInfoResult::CopyFrom(const ToolEvent_GetEntityInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_GetEntityInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfoResult::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInfoResult::Swap(ToolEvent_GetEntityInfoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_GetEntityInfoResult::InternalSwap(ToolEvent_GetEntityInfoResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cppclass_.Swap(&other->cppclass_, &::proto::dota::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_.get(),
    GetArenaNoVirtual());
  classname_.Swap(&other->classname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(origin_, other->origin_);
  swap(mins_, other->mins_);
  swap(maxs_, other->maxs_);
}

::google::protobuf::Metadata ToolEvent_GetEntityInfoResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ToolEvent_GetEntityInputs::InitAsDefaultInstance() {
}
class ToolEvent_GetEntityInputs::HasBitSetters {
 public:
  static void set_has_ehandle(ToolEvent_GetEntityInputs* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_clientsideentity(ToolEvent_GetEntityInputs* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_GetEntityInputs::kEhandleFieldNumber;
const int ToolEvent_GetEntityInputs::kClientsideentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_GetEntityInputs)
}
ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs(const ToolEvent_GetEntityInputs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_GetEntityInputs)
}

void ToolEvent_GetEntityInputs::SharedCtor() {
  ::memset(&ehandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientsideentity_) -
      reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
}

ToolEvent_GetEntityInputs::~ToolEvent_GetEntityInputs() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_GetEntityInputs)
  SharedDtor();
}

void ToolEvent_GetEntityInputs::SharedDtor() {
}

void ToolEvent_GetEntityInputs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolEvent_GetEntityInputs& ToolEvent_GetEntityInputs::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ToolEvent_GetEntityInputs_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void ToolEvent_GetEntityInputs::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_GetEntityInputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientsideentity_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ToolEvent_GetEntityInputs::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ToolEvent_GetEntityInputs*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ehandle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_clientsideentity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ToolEvent_GetEntityInputs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_GetEntityInputs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ehandle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_clientsideentity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_GetEntityInputs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_GetEntityInputs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ToolEvent_GetEntityInputs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_GetEntityInputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_GetEntityInputs)
}

::google::protobuf::uint8* ToolEvent_GetEntityInputs::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_GetEntityInputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_GetEntityInputs)
  return target;
}

size_t ToolEvent_GetEntityInputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_GetEntityInputs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_GetEntityInputs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_GetEntityInputs)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInputs* source =
      ::google::protobuf::DynamicCastToGenerated<ToolEvent_GetEntityInputs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_GetEntityInputs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_GetEntityInputs)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInputs::MergeFrom(const ToolEvent_GetEntityInputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_GetEntityInputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolEvent_GetEntityInputs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_GetEntityInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInputs::CopyFrom(const ToolEvent_GetEntityInputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_GetEntityInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputs::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInputs::Swap(ToolEvent_GetEntityInputs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_GetEntityInputs::InternalSwap(ToolEvent_GetEntityInputs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ehandle_, other->ehandle_);
  swap(clientsideentity_, other->clientsideentity_);
}

::google::protobuf::Metadata ToolEvent_GetEntityInputs::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ToolEvent_GetEntityInputsResult::InitAsDefaultInstance() {
}
class ToolEvent_GetEntityInputsResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_GetEntityInputsResult::kInputListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_GetEntityInputsResult)
}
ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult(const ToolEvent_GetEntityInputsResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      input_list_(from.input_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_GetEntityInputsResult)
}

void ToolEvent_GetEntityInputsResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ToolEvent_GetEntityInputsResult_gametoolevents_2eproto.base);
}

ToolEvent_GetEntityInputsResult::~ToolEvent_GetEntityInputsResult() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_GetEntityInputsResult)
  SharedDtor();
}

void ToolEvent_GetEntityInputsResult::SharedDtor() {
}

void ToolEvent_GetEntityInputsResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolEvent_GetEntityInputsResult& ToolEvent_GetEntityInputsResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ToolEvent_GetEntityInputsResult_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void ToolEvent_GetEntityInputsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_GetEntityInputsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ToolEvent_GetEntityInputsResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ToolEvent_GetEntityInputsResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string input_list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.ToolEvent_GetEntityInputsResult.input_list");
          object = msg->add_input_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ToolEvent_GetEntityInputsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_GetEntityInputsResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_list(this->input_list_size() - 1).data(),
            static_cast<int>(this->input_list(this->input_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_GetEntityInputsResult.input_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_GetEntityInputsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_GetEntityInputsResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ToolEvent_GetEntityInputsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_GetEntityInputsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_list = 1;
  for (int i = 0, n = this->input_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_list(i).data(), static_cast<int>(this->input_list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInputsResult.input_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_GetEntityInputsResult)
}

::google::protobuf::uint8* ToolEvent_GetEntityInputsResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_GetEntityInputsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_list = 1;
  for (int i = 0, n = this->input_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_list(i).data(), static_cast<int>(this->input_list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInputsResult.input_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->input_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_GetEntityInputsResult)
  return target;
}

size_t ToolEvent_GetEntityInputsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_GetEntityInputsResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_list_size());
  for (int i = 0, n = this->input_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input_list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_GetEntityInputsResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_GetEntityInputsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInputsResult* source =
      ::google::protobuf::DynamicCastToGenerated<ToolEvent_GetEntityInputsResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_GetEntityInputsResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_GetEntityInputsResult)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInputsResult::MergeFrom(const ToolEvent_GetEntityInputsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_GetEntityInputsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_list_.MergeFrom(from.input_list_);
}

void ToolEvent_GetEntityInputsResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_GetEntityInputsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInputsResult::CopyFrom(const ToolEvent_GetEntityInputsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_GetEntityInputsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputsResult::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInputsResult::Swap(ToolEvent_GetEntityInputsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_GetEntityInputsResult::InternalSwap(ToolEvent_GetEntityInputsResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_list_.InternalSwap(CastToBase(&other->input_list_));
}

::google::protobuf::Metadata ToolEvent_GetEntityInputsResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ToolEvent_FireEntityInput::InitAsDefaultInstance() {
}
class ToolEvent_FireEntityInput::HasBitSetters {
 public:
  static void set_has_ehandle(ToolEvent_FireEntityInput* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_clientsideentity(ToolEvent_FireEntityInput* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_input_name(ToolEvent_FireEntityInput* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_input_param(ToolEvent_FireEntityInput* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_FireEntityInput::kEhandleFieldNumber;
const int ToolEvent_FireEntityInput::kClientsideentityFieldNumber;
const int ToolEvent_FireEntityInput::kInputNameFieldNumber;
const int ToolEvent_FireEntityInput::kInputParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_FireEntityInput::ToolEvent_FireEntityInput()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_FireEntityInput)
}
ToolEvent_FireEntityInput::ToolEvent_FireEntityInput(const ToolEvent_FireEntityInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_input_name()) {
    input_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_name_);
  }
  input_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_input_param()) {
    input_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_param_);
  }
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_FireEntityInput)
}

void ToolEvent_FireEntityInput::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ToolEvent_FireEntityInput_gametoolevents_2eproto.base);
  input_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ehandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientsideentity_) -
      reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
}

ToolEvent_FireEntityInput::~ToolEvent_FireEntityInput() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_FireEntityInput)
  SharedDtor();
}

void ToolEvent_FireEntityInput::SharedDtor() {
  input_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ToolEvent_FireEntityInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolEvent_FireEntityInput& ToolEvent_FireEntityInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ToolEvent_FireEntityInput_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void ToolEvent_FireEntityInput::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_FireEntityInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      input_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      input_param_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientsideentity_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ToolEvent_FireEntityInput::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ToolEvent_FireEntityInput*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ehandle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_clientsideentity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string input_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.ToolEvent_FireEntityInput.input_name");
        object = msg->mutable_input_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string input_param = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.ToolEvent_FireEntityInput.input_param");
        object = msg->mutable_input_param();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ToolEvent_FireEntityInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_FireEntityInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ehandle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_clientsideentity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string input_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_name().data(), static_cast<int>(this->input_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_FireEntityInput.input_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string input_param = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_param().data(), static_cast<int>(this->input_param().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_FireEntityInput.input_param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_FireEntityInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_FireEntityInput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ToolEvent_FireEntityInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_FireEntityInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  // optional string input_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), static_cast<int>(this->input_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_FireEntityInput.input_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->input_name(), output);
  }

  // optional string input_param = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_param().data(), static_cast<int>(this->input_param().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_FireEntityInput.input_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->input_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_FireEntityInput)
}

::google::protobuf::uint8* ToolEvent_FireEntityInput::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_FireEntityInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  // optional string input_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), static_cast<int>(this->input_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_FireEntityInput.input_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_name(), target);
  }

  // optional string input_param = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_param().data(), static_cast<int>(this->input_param().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_FireEntityInput.input_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->input_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_FireEntityInput)
  return target;
}

size_t ToolEvent_FireEntityInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_FireEntityInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string input_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_name());
    }

    // optional string input_param = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_param());
    }

    // optional int32 ehandle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_FireEntityInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_FireEntityInput)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_FireEntityInput* source =
      ::google::protobuf::DynamicCastToGenerated<ToolEvent_FireEntityInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_FireEntityInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_FireEntityInput)
    MergeFrom(*source);
  }
}

void ToolEvent_FireEntityInput::MergeFrom(const ToolEvent_FireEntityInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_FireEntityInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      input_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      input_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_param_);
    }
    if (cached_has_bits & 0x00000004u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000008u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolEvent_FireEntityInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_FireEntityInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_FireEntityInput::CopyFrom(const ToolEvent_FireEntityInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_FireEntityInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_FireEntityInput::IsInitialized() const {
  return true;
}

void ToolEvent_FireEntityInput::Swap(ToolEvent_FireEntityInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_FireEntityInput::InternalSwap(ToolEvent_FireEntityInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_name_.Swap(&other->input_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_param_.Swap(&other->input_param_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ehandle_, other->ehandle_);
  swap(clientsideentity_, other->clientsideentity_);
}

::google::protobuf::Metadata ToolEvent_FireEntityInput::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ToolEvent_SFMRecordingStateChanged::InitAsDefaultInstance() {
}
class ToolEvent_SFMRecordingStateChanged::HasBitSetters {
 public:
  static void set_has_isrecording(ToolEvent_SFMRecordingStateChanged* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_SFMRecordingStateChanged::kIsrecordingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_SFMRecordingStateChanged)
}
ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged(const ToolEvent_SFMRecordingStateChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isrecording_ = from.isrecording_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_SFMRecordingStateChanged)
}

void ToolEvent_SFMRecordingStateChanged::SharedCtor() {
  isrecording_ = false;
}

ToolEvent_SFMRecordingStateChanged::~ToolEvent_SFMRecordingStateChanged() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_SFMRecordingStateChanged)
  SharedDtor();
}

void ToolEvent_SFMRecordingStateChanged::SharedDtor() {
}

void ToolEvent_SFMRecordingStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolEvent_SFMRecordingStateChanged& ToolEvent_SFMRecordingStateChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ToolEvent_SFMRecordingStateChanged_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void ToolEvent_SFMRecordingStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isrecording_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ToolEvent_SFMRecordingStateChanged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ToolEvent_SFMRecordingStateChanged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool isrecording = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_isrecording(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ToolEvent_SFMRecordingStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isrecording = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_isrecording(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_SFMRecordingStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_SFMRecordingStateChanged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ToolEvent_SFMRecordingStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isrecording = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isrecording(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_SFMRecordingStateChanged)
}

::google::protobuf::uint8* ToolEvent_SFMRecordingStateChanged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isrecording = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isrecording(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_SFMRecordingStateChanged)
  return target;
}

size_t ToolEvent_SFMRecordingStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isrecording = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_SFMRecordingStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_SFMRecordingStateChanged* source =
      ::google::protobuf::DynamicCastToGenerated<ToolEvent_SFMRecordingStateChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_SFMRecordingStateChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_SFMRecordingStateChanged)
    MergeFrom(*source);
  }
}

void ToolEvent_SFMRecordingStateChanged::MergeFrom(const ToolEvent_SFMRecordingStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_isrecording()) {
    set_isrecording(from.isrecording());
  }
}

void ToolEvent_SFMRecordingStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_SFMRecordingStateChanged::CopyFrom(const ToolEvent_SFMRecordingStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMRecordingStateChanged::IsInitialized() const {
  return true;
}

void ToolEvent_SFMRecordingStateChanged::Swap(ToolEvent_SFMRecordingStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_SFMRecordingStateChanged::InternalSwap(ToolEvent_SFMRecordingStateChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(isrecording_, other->isrecording_);
}

::google::protobuf::Metadata ToolEvent_SFMRecordingStateChanged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ToolEvent_SFMToolActiveStateChanged::InitAsDefaultInstance() {
}
class ToolEvent_SFMToolActiveStateChanged::HasBitSetters {
 public:
  static void set_has_isactive(ToolEvent_SFMToolActiveStateChanged* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_SFMToolActiveStateChanged::kIsactiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_SFMToolActiveStateChanged)
}
ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged(const ToolEvent_SFMToolActiveStateChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isactive_ = from.isactive_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_SFMToolActiveStateChanged)
}

void ToolEvent_SFMToolActiveStateChanged::SharedCtor() {
  isactive_ = false;
}

ToolEvent_SFMToolActiveStateChanged::~ToolEvent_SFMToolActiveStateChanged() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  SharedDtor();
}

void ToolEvent_SFMToolActiveStateChanged::SharedDtor() {
}

void ToolEvent_SFMToolActiveStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolEvent_SFMToolActiveStateChanged& ToolEvent_SFMToolActiveStateChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ToolEvent_SFMToolActiveStateChanged_gametoolevents_2eproto.base);
  return *internal_default_instance();
}


void ToolEvent_SFMToolActiveStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isactive_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ToolEvent_SFMToolActiveStateChanged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ToolEvent_SFMToolActiveStateChanged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool isactive = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_isactive(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ToolEvent_SFMToolActiveStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isactive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_isactive(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ToolEvent_SFMToolActiveStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isactive = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isactive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_SFMToolActiveStateChanged)
}

::google::protobuf::uint8* ToolEvent_SFMToolActiveStateChanged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isactive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isactive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  return target;
}

size_t ToolEvent_SFMToolActiveStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isactive = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_SFMToolActiveStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_SFMToolActiveStateChanged* source =
      ::google::protobuf::DynamicCastToGenerated<ToolEvent_SFMToolActiveStateChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_SFMToolActiveStateChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_SFMToolActiveStateChanged)
    MergeFrom(*source);
  }
}

void ToolEvent_SFMToolActiveStateChanged::MergeFrom(const ToolEvent_SFMToolActiveStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_isactive()) {
    set_isactive(from.isactive());
  }
}

void ToolEvent_SFMToolActiveStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_SFMToolActiveStateChanged::CopyFrom(const ToolEvent_SFMToolActiveStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMToolActiveStateChanged::IsInitialized() const {
  return true;
}

void ToolEvent_SFMToolActiveStateChanged::Swap(ToolEvent_SFMToolActiveStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_SFMToolActiveStateChanged::InternalSwap(ToolEvent_SFMToolActiveStateChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(isactive_, other->isactive_);
}

::google::protobuf::Metadata ToolEvent_SFMToolActiveStateChanged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gametoolevents_2eproto);
  return ::file_level_metadata_gametoolevents_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::ChangeMapToolEvent* Arena::CreateMaybeMessage< ::proto::dota::ChangeMapToolEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::ChangeMapToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::TraceRayServerToolEvent* Arena::CreateMaybeMessage< ::proto::dota::TraceRayServerToolEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::TraceRayServerToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::ToolTraceRayResult* Arena::CreateMaybeMessage< ::proto::dota::ToolTraceRayResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::ToolTraceRayResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::SpawnEntityToolEvent* Arena::CreateMaybeMessage< ::proto::dota::SpawnEntityToolEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::SpawnEntityToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::SpawnEntityToolEventResult* Arena::CreateMaybeMessage< ::proto::dota::SpawnEntityToolEventResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::SpawnEntityToolEventResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::DestroyEntityToolEvent* Arena::CreateMaybeMessage< ::proto::dota::DestroyEntityToolEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::DestroyEntityToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::DestroyAllEntitiesToolEvent* Arena::CreateMaybeMessage< ::proto::dota::DestroyAllEntitiesToolEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::DestroyAllEntitiesToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::RestartMapToolEvent* Arena::CreateMaybeMessage< ::proto::dota::RestartMapToolEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::RestartMapToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::ToolEvent_GetEntityInfo* Arena::CreateMaybeMessage< ::proto::dota::ToolEvent_GetEntityInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::ToolEvent_GetEntityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::ToolEvent_GetEntityInfoResult* Arena::CreateMaybeMessage< ::proto::dota::ToolEvent_GetEntityInfoResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::ToolEvent_GetEntityInfoResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::ToolEvent_GetEntityInputs* Arena::CreateMaybeMessage< ::proto::dota::ToolEvent_GetEntityInputs >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::ToolEvent_GetEntityInputs >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::ToolEvent_GetEntityInputsResult* Arena::CreateMaybeMessage< ::proto::dota::ToolEvent_GetEntityInputsResult >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::ToolEvent_GetEntityInputsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::ToolEvent_FireEntityInput* Arena::CreateMaybeMessage< ::proto::dota::ToolEvent_FireEntityInput >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::ToolEvent_FireEntityInput >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::ToolEvent_SFMRecordingStateChanged* Arena::CreateMaybeMessage< ::proto::dota::ToolEvent_SFMRecordingStateChanged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::ToolEvent_SFMRecordingStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::ToolEvent_SFMToolActiveStateChanged* Arena::CreateMaybeMessage< ::proto::dota::ToolEvent_SFMToolActiveStateChanged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::ToolEvent_SFMToolActiveStateChanged >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
