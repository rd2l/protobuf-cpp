// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_watch.proto

#ifndef PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fwatch_2eproto
#define PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fwatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_gcmessages_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fwatch_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto();
namespace proto {
namespace dota {
class CDOTABroadcasterInfo;
class CDOTABroadcasterInfoDefaultTypeInternal;
extern CDOTABroadcasterInfoDefaultTypeInternal _CDOTABroadcasterInfo_default_instance_;
class CDOTAReplayDownloadInfo;
class CDOTAReplayDownloadInfoDefaultTypeInternal;
extern CDOTAReplayDownloadInfoDefaultTypeInternal _CDOTAReplayDownloadInfo_default_instance_;
class CDOTAReplayDownloadInfo_Highlight;
class CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal;
extern CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal _CDOTAReplayDownloadInfo_Highlight_default_instance_;
class CMsgCancelWatchGame;
class CMsgCancelWatchGameDefaultTypeInternal;
extern CMsgCancelWatchGameDefaultTypeInternal _CMsgCancelWatchGame_default_instance_;
class CMsgClientToGCFindTopMatches;
class CMsgClientToGCFindTopMatchesDefaultTypeInternal;
extern CMsgClientToGCFindTopMatchesDefaultTypeInternal _CMsgClientToGCFindTopMatches_default_instance_;
class CMsgClientToGCFindTopSourceTVGames;
class CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal;
extern CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal _CMsgClientToGCFindTopSourceTVGames_default_instance_;
class CMsgClientToGCMatchesMinimalRequest;
class CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal;
extern CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal _CMsgClientToGCMatchesMinimalRequest_default_instance_;
class CMsgClientToGCMatchesMinimalResponse;
class CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal;
extern CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal _CMsgClientToGCMatchesMinimalResponse_default_instance_;
class CMsgClientToGCTopFriendMatchesRequest;
class CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal;
extern CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal _CMsgClientToGCTopFriendMatchesRequest_default_instance_;
class CMsgClientToGCTopLeagueMatchesRequest;
class CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal;
extern CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal _CMsgClientToGCTopLeagueMatchesRequest_default_instance_;
class CMsgClientToGCTopMatchesRequest;
class CMsgClientToGCTopMatchesRequestDefaultTypeInternal;
extern CMsgClientToGCTopMatchesRequestDefaultTypeInternal _CMsgClientToGCTopMatchesRequest_default_instance_;
class CMsgDOTASeries;
class CMsgDOTASeriesDefaultTypeInternal;
extern CMsgDOTASeriesDefaultTypeInternal _CMsgDOTASeries_default_instance_;
class CMsgDOTASeries_LiveGame;
class CMsgDOTASeries_LiveGameDefaultTypeInternal;
extern CMsgDOTASeries_LiveGameDefaultTypeInternal _CMsgDOTASeries_LiveGame_default_instance_;
class CMsgDOTASeries_TeamInfo;
class CMsgDOTASeries_TeamInfoDefaultTypeInternal;
extern CMsgDOTASeries_TeamInfoDefaultTypeInternal _CMsgDOTASeries_TeamInfo_default_instance_;
class CMsgGCToClientFindTopLeagueMatchesResponse;
class CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal;
extern CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal _CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_;
class CMsgGCToClientFindTopSourceTVGamesResponse;
class CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal;
extern CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_;
class CMsgGCToClientTopFriendMatchesResponse;
class CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal;
extern CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal _CMsgGCToClientTopFriendMatchesResponse_default_instance_;
class CMsgGCToClientTopLeagueMatchesResponse;
class CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal;
extern CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal _CMsgGCToClientTopLeagueMatchesResponse_default_instance_;
class CMsgGCToClientTopWeekendTourneyGames;
class CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal;
extern CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal _CMsgGCToClientTopWeekendTourneyGames_default_instance_;
class CMsgPartyLeaderWatchGamePrompt;
class CMsgPartyLeaderWatchGamePromptDefaultTypeInternal;
extern CMsgPartyLeaderWatchGamePromptDefaultTypeInternal _CMsgPartyLeaderWatchGamePrompt_default_instance_;
class CMsgSpectateFriendGame;
class CMsgSpectateFriendGameDefaultTypeInternal;
extern CMsgSpectateFriendGameDefaultTypeInternal _CMsgSpectateFriendGame_default_instance_;
class CMsgSpectateFriendGameResponse;
class CMsgSpectateFriendGameResponseDefaultTypeInternal;
extern CMsgSpectateFriendGameResponseDefaultTypeInternal _CMsgSpectateFriendGameResponse_default_instance_;
class CMsgWatchGame;
class CMsgWatchGameDefaultTypeInternal;
extern CMsgWatchGameDefaultTypeInternal _CMsgWatchGame_default_instance_;
class CMsgWatchGameResponse;
class CMsgWatchGameResponseDefaultTypeInternal;
extern CMsgWatchGameResponseDefaultTypeInternal _CMsgWatchGameResponse_default_instance_;
class CSourceTVGameSmall;
class CSourceTVGameSmallDefaultTypeInternal;
extern CSourceTVGameSmallDefaultTypeInternal _CSourceTVGameSmall_default_instance_;
class CSourceTVGameSmall_Player;
class CSourceTVGameSmall_PlayerDefaultTypeInternal;
extern CSourceTVGameSmall_PlayerDefaultTypeInternal _CSourceTVGameSmall_Player_default_instance_;
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::dota::CDOTABroadcasterInfo* Arena::CreateMaybeMessage<::proto::dota::CDOTABroadcasterInfo>(Arena*);
template<> ::proto::dota::CDOTAReplayDownloadInfo* Arena::CreateMaybeMessage<::proto::dota::CDOTAReplayDownloadInfo>(Arena*);
template<> ::proto::dota::CDOTAReplayDownloadInfo_Highlight* Arena::CreateMaybeMessage<::proto::dota::CDOTAReplayDownloadInfo_Highlight>(Arena*);
template<> ::proto::dota::CMsgCancelWatchGame* Arena::CreateMaybeMessage<::proto::dota::CMsgCancelWatchGame>(Arena*);
template<> ::proto::dota::CMsgClientToGCFindTopMatches* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCFindTopMatches>(Arena*);
template<> ::proto::dota::CMsgClientToGCFindTopSourceTVGames* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCFindTopSourceTVGames>(Arena*);
template<> ::proto::dota::CMsgClientToGCMatchesMinimalRequest* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCMatchesMinimalRequest>(Arena*);
template<> ::proto::dota::CMsgClientToGCMatchesMinimalResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCMatchesMinimalResponse>(Arena*);
template<> ::proto::dota::CMsgClientToGCTopFriendMatchesRequest* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCTopFriendMatchesRequest>(Arena*);
template<> ::proto::dota::CMsgClientToGCTopLeagueMatchesRequest* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCTopLeagueMatchesRequest>(Arena*);
template<> ::proto::dota::CMsgClientToGCTopMatchesRequest* Arena::CreateMaybeMessage<::proto::dota::CMsgClientToGCTopMatchesRequest>(Arena*);
template<> ::proto::dota::CMsgDOTASeries* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeries>(Arena*);
template<> ::proto::dota::CMsgDOTASeries_LiveGame* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeries_LiveGame>(Arena*);
template<> ::proto::dota::CMsgDOTASeries_TeamInfo* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTASeries_TeamInfo>(Arena*);
template<> ::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse>(Arena*);
template<> ::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse>(Arena*);
template<> ::proto::dota::CMsgGCToClientTopFriendMatchesResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToClientTopFriendMatchesResponse>(Arena*);
template<> ::proto::dota::CMsgGCToClientTopLeagueMatchesResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToClientTopLeagueMatchesResponse>(Arena*);
template<> ::proto::dota::CMsgGCToClientTopWeekendTourneyGames* Arena::CreateMaybeMessage<::proto::dota::CMsgGCToClientTopWeekendTourneyGames>(Arena*);
template<> ::proto::dota::CMsgPartyLeaderWatchGamePrompt* Arena::CreateMaybeMessage<::proto::dota::CMsgPartyLeaderWatchGamePrompt>(Arena*);
template<> ::proto::dota::CMsgSpectateFriendGame* Arena::CreateMaybeMessage<::proto::dota::CMsgSpectateFriendGame>(Arena*);
template<> ::proto::dota::CMsgSpectateFriendGameResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgSpectateFriendGameResponse>(Arena*);
template<> ::proto::dota::CMsgWatchGame* Arena::CreateMaybeMessage<::proto::dota::CMsgWatchGame>(Arena*);
template<> ::proto::dota::CMsgWatchGameResponse* Arena::CreateMaybeMessage<::proto::dota::CMsgWatchGameResponse>(Arena*);
template<> ::proto::dota::CSourceTVGameSmall* Arena::CreateMaybeMessage<::proto::dota::CSourceTVGameSmall>(Arena*);
template<> ::proto::dota::CSourceTVGameSmall_Player* Arena::CreateMaybeMessage<::proto::dota::CSourceTVGameSmall_Player>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace dota {

enum CMsgSpectateFriendGameResponse_EWatchLiveResult {
  CMsgSpectateFriendGameResponse_EWatchLiveResult_SUCCESS = 0,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_GENERIC = 1,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_NO_PLUS = 2,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_NOT_FRIENDS = 3,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_NOT_FOUND = 4,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_IN_A_LOBBY = 5,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_IS_LAN = 6,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_WRONG_LOBBY_TYPE = 7,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_WRONG_LOBBY_STATE = 8,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_PLAYER_NOT_PLAYER = 9,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_TOO_MANY_SPECTATORS = 10,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_SWITCHED_TEAMS = 11,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_FRIENDS_ON_BOTH_SIDES = 12,
  CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_IN_THIS_LOBBY = 13
};
bool CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(int value);
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MIN = CMsgSpectateFriendGameResponse_EWatchLiveResult_SUCCESS;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MAX = CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_IN_THIS_LOBBY;
const int CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_ARRAYSIZE = CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor();
inline const ::std::string& CMsgSpectateFriendGameResponse_EWatchLiveResult_Name(CMsgSpectateFriendGameResponse_EWatchLiveResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor(), value);
}
inline bool CMsgSpectateFriendGameResponse_EWatchLiveResult_Parse(
    const ::std::string& name, CMsgSpectateFriendGameResponse_EWatchLiveResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSpectateFriendGameResponse_EWatchLiveResult>(
    CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor(), name, value);
}
enum CMsgWatchGameResponse_WatchGameResult {
  CMsgWatchGameResponse_WatchGameResult_PENDING = 0,
  CMsgWatchGameResponse_WatchGameResult_READY = 1,
  CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND = 2,
  CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE = 3,
  CMsgWatchGameResponse_WatchGameResult_CANCELLED = 4,
  CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION = 5,
  CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION = 6,
  CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND = 7
};
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value);
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN = CMsgWatchGameResponse_WatchGameResult_PENDING;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX = CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
const int CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE = CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor();
inline const ::std::string& CMsgWatchGameResponse_WatchGameResult_Name(CMsgWatchGameResponse_WatchGameResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), value);
}
inline bool CMsgWatchGameResponse_WatchGameResult_Parse(
    const ::std::string& name, CMsgWatchGameResponse_WatchGameResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgWatchGameResponse_WatchGameResult>(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), name, value);
}
// ===================================================================

class CSourceTVGameSmall_Player final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSourceTVGameSmall.Player) */ {
 public:
  CSourceTVGameSmall_Player();
  virtual ~CSourceTVGameSmall_Player();

  CSourceTVGameSmall_Player(const CSourceTVGameSmall_Player& from);

  inline CSourceTVGameSmall_Player& operator=(const CSourceTVGameSmall_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSourceTVGameSmall_Player(CSourceTVGameSmall_Player&& from) noexcept
    : CSourceTVGameSmall_Player() {
    *this = ::std::move(from);
  }

  inline CSourceTVGameSmall_Player& operator=(CSourceTVGameSmall_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSourceTVGameSmall_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSourceTVGameSmall_Player* internal_default_instance() {
    return reinterpret_cast<const CSourceTVGameSmall_Player*>(
               &_CSourceTVGameSmall_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CSourceTVGameSmall_Player* other);
  friend void swap(CSourceTVGameSmall_Player& a, CSourceTVGameSmall_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSourceTVGameSmall_Player* New() const final {
    return CreateMaybeMessage<CSourceTVGameSmall_Player>(nullptr);
  }

  CSourceTVGameSmall_Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSourceTVGameSmall_Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSourceTVGameSmall_Player& from);
  void MergeFrom(const CSourceTVGameSmall_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSourceTVGameSmall_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSourceTVGameSmall.Player)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CSourceTVGameSmall final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSourceTVGameSmall) */ {
 public:
  CSourceTVGameSmall();
  virtual ~CSourceTVGameSmall();

  CSourceTVGameSmall(const CSourceTVGameSmall& from);

  inline CSourceTVGameSmall& operator=(const CSourceTVGameSmall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSourceTVGameSmall(CSourceTVGameSmall&& from) noexcept
    : CSourceTVGameSmall() {
    *this = ::std::move(from);
  }

  inline CSourceTVGameSmall& operator=(CSourceTVGameSmall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSourceTVGameSmall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSourceTVGameSmall* internal_default_instance() {
    return reinterpret_cast<const CSourceTVGameSmall*>(
               &_CSourceTVGameSmall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CSourceTVGameSmall* other);
  friend void swap(CSourceTVGameSmall& a, CSourceTVGameSmall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSourceTVGameSmall* New() const final {
    return CreateMaybeMessage<CSourceTVGameSmall>(nullptr);
  }

  CSourceTVGameSmall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSourceTVGameSmall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSourceTVGameSmall& from);
  void MergeFrom(const CSourceTVGameSmall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSourceTVGameSmall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSourceTVGameSmall_Player Player;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 22;
  ::proto::dota::CSourceTVGameSmall_Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >*
      mutable_players();
  const ::proto::dota::CSourceTVGameSmall_Player& players(int index) const;
  ::proto::dota::CSourceTVGameSmall_Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >&
      players() const;

  // optional string team_name_radiant = 15;
  bool has_team_name_radiant() const;
  void clear_team_name_radiant();
  static const int kTeamNameRadiantFieldNumber = 15;
  const ::std::string& team_name_radiant() const;
  void set_team_name_radiant(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name_radiant(::std::string&& value);
  #endif
  void set_team_name_radiant(const char* value);
  void set_team_name_radiant(const char* value, size_t size);
  ::std::string* mutable_team_name_radiant();
  ::std::string* release_team_name_radiant();
  void set_allocated_team_name_radiant(::std::string* team_name_radiant);

  // optional string team_name_dire = 16;
  bool has_team_name_dire() const;
  void clear_team_name_dire();
  static const int kTeamNameDireFieldNumber = 16;
  const ::std::string& team_name_dire() const;
  void set_team_name_dire(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name_dire(::std::string&& value);
  #endif
  void set_team_name_dire(const char* value);
  void set_team_name_dire(const char* value, size_t size);
  ::std::string* mutable_team_name_dire();
  ::std::string* release_team_name_dire();
  void set_allocated_team_name_dire(::std::string* team_name_dire);

  // optional uint32 activate_time = 1;
  bool has_activate_time() const;
  void clear_activate_time();
  static const int kActivateTimeFieldNumber = 1;
  ::google::protobuf::uint32 activate_time() const;
  void set_activate_time(::google::protobuf::uint32 value);

  // optional uint32 deactivate_time = 2;
  bool has_deactivate_time() const;
  void clear_deactivate_time();
  static const int kDeactivateTimeFieldNumber = 2;
  ::google::protobuf::uint32 deactivate_time() const;
  void set_deactivate_time(::google::protobuf::uint32 value);

  // optional uint64 server_steam_id = 3;
  bool has_server_steam_id() const;
  void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 server_steam_id() const;
  void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint64 lobby_id = 4;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 4;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 league_id = 5;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 5;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 lobby_type = 6;
  bool has_lobby_type() const;
  void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 6;
  ::google::protobuf::uint32 lobby_type() const;
  void set_lobby_type(::google::protobuf::uint32 value);

  // optional int32 game_time = 7;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 7;
  ::google::protobuf::int32 game_time() const;
  void set_game_time(::google::protobuf::int32 value);

  // optional uint32 delay = 8;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 8;
  ::google::protobuf::uint32 delay() const;
  void set_delay(::google::protobuf::uint32 value);

  // optional uint32 spectators = 9;
  bool has_spectators() const;
  void clear_spectators();
  static const int kSpectatorsFieldNumber = 9;
  ::google::protobuf::uint32 spectators() const;
  void set_spectators(::google::protobuf::uint32 value);

  // optional uint32 game_mode = 10;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 10;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // optional uint64 match_id = 12;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 12;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 average_mmr = 11;
  bool has_average_mmr() const;
  void clear_average_mmr();
  static const int kAverageMmrFieldNumber = 11;
  ::google::protobuf::uint32 average_mmr() const;
  void set_average_mmr(::google::protobuf::uint32 value);

  // optional uint32 series_id = 13;
  bool has_series_id() const;
  void clear_series_id();
  static const int kSeriesIdFieldNumber = 13;
  ::google::protobuf::uint32 series_id() const;
  void set_series_id(::google::protobuf::uint32 value);

  // optional uint32 sort_score = 17;
  bool has_sort_score() const;
  void clear_sort_score();
  static const int kSortScoreFieldNumber = 17;
  ::google::protobuf::uint32 sort_score() const;
  void set_sort_score(::google::protobuf::uint32 value);

  // optional float last_update_time = 18;
  bool has_last_update_time() const;
  void clear_last_update_time();
  static const int kLastUpdateTimeFieldNumber = 18;
  float last_update_time() const;
  void set_last_update_time(float value);

  // optional int32 radiant_lead = 19;
  bool has_radiant_lead() const;
  void clear_radiant_lead();
  static const int kRadiantLeadFieldNumber = 19;
  ::google::protobuf::int32 radiant_lead() const;
  void set_radiant_lead(::google::protobuf::int32 value);

  // optional uint32 radiant_score = 20;
  bool has_radiant_score() const;
  void clear_radiant_score();
  static const int kRadiantScoreFieldNumber = 20;
  ::google::protobuf::uint32 radiant_score() const;
  void set_radiant_score(::google::protobuf::uint32 value);

  // optional uint32 dire_score = 21;
  bool has_dire_score() const;
  void clear_dire_score();
  static const int kDireScoreFieldNumber = 21;
  ::google::protobuf::uint32 dire_score() const;
  void set_dire_score(::google::protobuf::uint32 value);

  // optional fixed32 building_state = 23;
  bool has_building_state() const;
  void clear_building_state();
  static const int kBuildingStateFieldNumber = 23;
  ::google::protobuf::uint32 building_state() const;
  void set_building_state(::google::protobuf::uint32 value);

  // optional fixed64 team_logo_radiant = 24;
  bool has_team_logo_radiant() const;
  void clear_team_logo_radiant();
  static const int kTeamLogoRadiantFieldNumber = 24;
  ::google::protobuf::uint64 team_logo_radiant() const;
  void set_team_logo_radiant(::google::protobuf::uint64 value);

  // optional fixed64 team_logo_dire = 25;
  bool has_team_logo_dire() const;
  void clear_team_logo_dire();
  static const int kTeamLogoDireFieldNumber = 25;
  ::google::protobuf::uint64 team_logo_dire() const;
  void set_team_logo_dire(::google::protobuf::uint64 value);

  // optional uint32 weekend_tourney_tournament_id = 26;
  bool has_weekend_tourney_tournament_id() const;
  void clear_weekend_tourney_tournament_id();
  static const int kWeekendTourneyTournamentIdFieldNumber = 26;
  ::google::protobuf::uint32 weekend_tourney_tournament_id() const;
  void set_weekend_tourney_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_division = 27;
  bool has_weekend_tourney_division() const;
  void clear_weekend_tourney_division();
  static const int kWeekendTourneyDivisionFieldNumber = 27;
  ::google::protobuf::uint32 weekend_tourney_division() const;
  void set_weekend_tourney_division(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_skill_level = 28;
  bool has_weekend_tourney_skill_level() const;
  void clear_weekend_tourney_skill_level();
  static const int kWeekendTourneySkillLevelFieldNumber = 28;
  ::google::protobuf::uint32 weekend_tourney_skill_level() const;
  void set_weekend_tourney_skill_level(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_bracket_round = 29;
  bool has_weekend_tourney_bracket_round() const;
  void clear_weekend_tourney_bracket_round();
  static const int kWeekendTourneyBracketRoundFieldNumber = 29;
  ::google::protobuf::uint32 weekend_tourney_bracket_round() const;
  void set_weekend_tourney_bracket_round(::google::protobuf::uint32 value);

  // optional uint32 team_id_radiant = 30;
  bool has_team_id_radiant() const;
  void clear_team_id_radiant();
  static const int kTeamIdRadiantFieldNumber = 30;
  ::google::protobuf::uint32 team_id_radiant() const;
  void set_team_id_radiant(::google::protobuf::uint32 value);

  // optional uint32 team_id_dire = 31;
  bool has_team_id_dire() const;
  void clear_team_id_dire();
  static const int kTeamIdDireFieldNumber = 31;
  ::google::protobuf::uint32 team_id_dire() const;
  void set_team_id_dire(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSourceTVGameSmall)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player > players_;
  ::google::protobuf::internal::ArenaStringPtr team_name_radiant_;
  ::google::protobuf::internal::ArenaStringPtr team_name_dire_;
  ::google::protobuf::uint32 activate_time_;
  ::google::protobuf::uint32 deactivate_time_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 lobby_type_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint32 spectators_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 average_mmr_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::uint32 sort_score_;
  float last_update_time_;
  ::google::protobuf::int32 radiant_lead_;
  ::google::protobuf::uint32 radiant_score_;
  ::google::protobuf::uint32 dire_score_;
  ::google::protobuf::uint32 building_state_;
  ::google::protobuf::uint64 team_logo_radiant_;
  ::google::protobuf::uint64 team_logo_dire_;
  ::google::protobuf::uint32 weekend_tourney_tournament_id_;
  ::google::protobuf::uint32 weekend_tourney_division_;
  ::google::protobuf::uint32 weekend_tourney_skill_level_;
  ::google::protobuf::uint32 weekend_tourney_bracket_round_;
  ::google::protobuf::uint32 team_id_radiant_;
  ::google::protobuf::uint32 team_id_dire_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFindTopSourceTVGames final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCFindTopSourceTVGames) */ {
 public:
  CMsgClientToGCFindTopSourceTVGames();
  virtual ~CMsgClientToGCFindTopSourceTVGames();

  CMsgClientToGCFindTopSourceTVGames(const CMsgClientToGCFindTopSourceTVGames& from);

  inline CMsgClientToGCFindTopSourceTVGames& operator=(const CMsgClientToGCFindTopSourceTVGames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCFindTopSourceTVGames(CMsgClientToGCFindTopSourceTVGames&& from) noexcept
    : CMsgClientToGCFindTopSourceTVGames() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFindTopSourceTVGames& operator=(CMsgClientToGCFindTopSourceTVGames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCFindTopSourceTVGames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCFindTopSourceTVGames* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFindTopSourceTVGames*>(
               &_CMsgClientToGCFindTopSourceTVGames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgClientToGCFindTopSourceTVGames* other);
  friend void swap(CMsgClientToGCFindTopSourceTVGames& a, CMsgClientToGCFindTopSourceTVGames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCFindTopSourceTVGames* New() const final {
    return CreateMaybeMessage<CMsgClientToGCFindTopSourceTVGames>(nullptr);
  }

  CMsgClientToGCFindTopSourceTVGames* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCFindTopSourceTVGames>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCFindTopSourceTVGames& from);
  void MergeFrom(const CMsgClientToGCFindTopSourceTVGames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFindTopSourceTVGames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 lobby_ids = 6;
  int lobby_ids_size() const;
  void clear_lobby_ids();
  static const int kLobbyIdsFieldNumber = 6;
  ::google::protobuf::uint64 lobby_ids(int index) const;
  void set_lobby_ids(int index, ::google::protobuf::uint64 value);
  void add_lobby_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      lobby_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_lobby_ids();

  // optional string search_key = 1;
  bool has_search_key() const;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 start_game = 4;
  bool has_start_game() const;
  void clear_start_game();
  static const int kStartGameFieldNumber = 4;
  ::google::protobuf::uint32 start_game() const;
  void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 game_list_index = 5;
  bool has_game_list_index() const;
  void clear_game_list_index();
  static const int kGameListIndexFieldNumber = 5;
  ::google::protobuf::uint32 game_list_index() const;
  void set_game_list_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCFindTopSourceTVGames)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > lobby_ids_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 game_list_index_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientFindTopSourceTVGamesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse) */ {
 public:
  CMsgGCToClientFindTopSourceTVGamesResponse();
  virtual ~CMsgGCToClientFindTopSourceTVGamesResponse();

  CMsgGCToClientFindTopSourceTVGamesResponse(const CMsgGCToClientFindTopSourceTVGamesResponse& from);

  inline CMsgGCToClientFindTopSourceTVGamesResponse& operator=(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToClientFindTopSourceTVGamesResponse(CMsgGCToClientFindTopSourceTVGamesResponse&& from) noexcept
    : CMsgGCToClientFindTopSourceTVGamesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientFindTopSourceTVGamesResponse& operator=(CMsgGCToClientFindTopSourceTVGamesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToClientFindTopSourceTVGamesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToClientFindTopSourceTVGamesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientFindTopSourceTVGamesResponse*>(
               &_CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgGCToClientFindTopSourceTVGamesResponse* other);
  friend void swap(CMsgGCToClientFindTopSourceTVGamesResponse& a, CMsgGCToClientFindTopSourceTVGamesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientFindTopSourceTVGamesResponse* New() const final {
    return CreateMaybeMessage<CMsgGCToClientFindTopSourceTVGamesResponse>(nullptr);
  }

  CMsgGCToClientFindTopSourceTVGamesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientFindTopSourceTVGamesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from);
  void MergeFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientFindTopSourceTVGamesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
  int game_list_size() const;
  void clear_game_list();
  static const int kGameListFieldNumber = 7;
  ::proto::dota::CSourceTVGameSmall* mutable_game_list(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
      mutable_game_list();
  const ::proto::dota::CSourceTVGameSmall& game_list(int index) const;
  ::proto::dota::CSourceTVGameSmall* add_game_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
      game_list() const;

  // optional string search_key = 1;
  bool has_search_key() const;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
  bool has_bot_game() const;
  void clear_bot_game();
  static const int kBotGameFieldNumber = 9;
  const ::proto::dota::CSourceTVGameSmall& bot_game() const;
  ::proto::dota::CSourceTVGameSmall* release_bot_game();
  ::proto::dota::CSourceTVGameSmall* mutable_bot_game();
  void set_allocated_bot_game(::proto::dota::CSourceTVGameSmall* bot_game);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 start_game = 4;
  bool has_start_game() const;
  void clear_start_game();
  static const int kStartGameFieldNumber = 4;
  ::google::protobuf::uint32 start_game() const;
  void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 num_games = 5;
  bool has_num_games() const;
  void clear_num_games();
  static const int kNumGamesFieldNumber = 5;
  ::google::protobuf::uint32 num_games() const;
  void set_num_games(::google::protobuf::uint32 value);

  // optional uint32 game_list_index = 6;
  bool has_game_list_index() const;
  void clear_game_list_index();
  static const int kGameListIndexFieldNumber = 6;
  ::google::protobuf::uint32 game_list_index() const;
  void set_game_list_index(::google::protobuf::uint32 value);

  // optional bool specific_games = 8;
  bool has_specific_games() const;
  void clear_specific_games();
  static const int kSpecificGamesFieldNumber = 8;
  bool specific_games() const;
  void set_specific_games(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall > game_list_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::proto::dota::CSourceTVGameSmall* bot_game_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 num_games_;
  ::google::protobuf::uint32 game_list_index_;
  bool specific_games_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopWeekendTourneyGames final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientTopWeekendTourneyGames) */ {
 public:
  CMsgGCToClientTopWeekendTourneyGames();
  virtual ~CMsgGCToClientTopWeekendTourneyGames();

  CMsgGCToClientTopWeekendTourneyGames(const CMsgGCToClientTopWeekendTourneyGames& from);

  inline CMsgGCToClientTopWeekendTourneyGames& operator=(const CMsgGCToClientTopWeekendTourneyGames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToClientTopWeekendTourneyGames(CMsgGCToClientTopWeekendTourneyGames&& from) noexcept
    : CMsgGCToClientTopWeekendTourneyGames() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientTopWeekendTourneyGames& operator=(CMsgGCToClientTopWeekendTourneyGames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToClientTopWeekendTourneyGames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToClientTopWeekendTourneyGames* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientTopWeekendTourneyGames*>(
               &_CMsgGCToClientTopWeekendTourneyGames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMsgGCToClientTopWeekendTourneyGames* other);
  friend void swap(CMsgGCToClientTopWeekendTourneyGames& a, CMsgGCToClientTopWeekendTourneyGames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientTopWeekendTourneyGames* New() const final {
    return CreateMaybeMessage<CMsgGCToClientTopWeekendTourneyGames>(nullptr);
  }

  CMsgGCToClientTopWeekendTourneyGames* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientTopWeekendTourneyGames>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToClientTopWeekendTourneyGames& from);
  void MergeFrom(const CMsgGCToClientTopWeekendTourneyGames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientTopWeekendTourneyGames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
  int live_games_size() const;
  void clear_live_games();
  static const int kLiveGamesFieldNumber = 1;
  ::proto::dota::CSourceTVGameSmall* mutable_live_games(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
      mutable_live_games();
  const ::proto::dota::CSourceTVGameSmall& live_games(int index) const;
  ::proto::dota::CSourceTVGameSmall* add_live_games();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
      live_games() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall > live_games_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopMatchesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCTopMatchesRequest) */ {
 public:
  CMsgClientToGCTopMatchesRequest();
  virtual ~CMsgClientToGCTopMatchesRequest();

  CMsgClientToGCTopMatchesRequest(const CMsgClientToGCTopMatchesRequest& from);

  inline CMsgClientToGCTopMatchesRequest& operator=(const CMsgClientToGCTopMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCTopMatchesRequest(CMsgClientToGCTopMatchesRequest&& from) noexcept
    : CMsgClientToGCTopMatchesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCTopMatchesRequest& operator=(CMsgClientToGCTopMatchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCTopMatchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCTopMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCTopMatchesRequest*>(
               &_CMsgClientToGCTopMatchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgClientToGCTopMatchesRequest* other);
  friend void swap(CMsgClientToGCTopMatchesRequest& a, CMsgClientToGCTopMatchesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCTopMatchesRequest* New() const final {
    return CreateMaybeMessage<CMsgClientToGCTopMatchesRequest>(nullptr);
  }

  CMsgClientToGCTopMatchesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCTopMatchesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCTopMatchesRequest& from);
  void MergeFrom(const CMsgClientToGCTopMatchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCTopMatchesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 player_account_id = 2;
  bool has_player_account_id() const;
  void clear_player_account_id();
  static const int kPlayerAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 player_account_id() const;
  void set_player_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 3;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCTopMatchesRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 player_account_id_;
  ::google::protobuf::uint32 team_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopLeagueMatchesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCTopLeagueMatchesRequest) */ {
 public:
  CMsgClientToGCTopLeagueMatchesRequest();
  virtual ~CMsgClientToGCTopLeagueMatchesRequest();

  CMsgClientToGCTopLeagueMatchesRequest(const CMsgClientToGCTopLeagueMatchesRequest& from);

  inline CMsgClientToGCTopLeagueMatchesRequest& operator=(const CMsgClientToGCTopLeagueMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCTopLeagueMatchesRequest(CMsgClientToGCTopLeagueMatchesRequest&& from) noexcept
    : CMsgClientToGCTopLeagueMatchesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCTopLeagueMatchesRequest& operator=(CMsgClientToGCTopLeagueMatchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCTopLeagueMatchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCTopLeagueMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCTopLeagueMatchesRequest*>(
               &_CMsgClientToGCTopLeagueMatchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMsgClientToGCTopLeagueMatchesRequest* other);
  friend void swap(CMsgClientToGCTopLeagueMatchesRequest& a, CMsgClientToGCTopLeagueMatchesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCTopLeagueMatchesRequest* New() const final {
    return CreateMaybeMessage<CMsgClientToGCTopLeagueMatchesRequest>(nullptr);
  }

  CMsgClientToGCTopLeagueMatchesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCTopLeagueMatchesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCTopLeagueMatchesRequest& from);
  void MergeFrom(const CMsgClientToGCTopLeagueMatchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCTopLeagueMatchesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopFriendMatchesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCTopFriendMatchesRequest) */ {
 public:
  CMsgClientToGCTopFriendMatchesRequest();
  virtual ~CMsgClientToGCTopFriendMatchesRequest();

  CMsgClientToGCTopFriendMatchesRequest(const CMsgClientToGCTopFriendMatchesRequest& from);

  inline CMsgClientToGCTopFriendMatchesRequest& operator=(const CMsgClientToGCTopFriendMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCTopFriendMatchesRequest(CMsgClientToGCTopFriendMatchesRequest&& from) noexcept
    : CMsgClientToGCTopFriendMatchesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCTopFriendMatchesRequest& operator=(CMsgClientToGCTopFriendMatchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCTopFriendMatchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCTopFriendMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCTopFriendMatchesRequest*>(
               &_CMsgClientToGCTopFriendMatchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CMsgClientToGCTopFriendMatchesRequest* other);
  friend void swap(CMsgClientToGCTopFriendMatchesRequest& a, CMsgClientToGCTopFriendMatchesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCTopFriendMatchesRequest* New() const final {
    return CreateMaybeMessage<CMsgClientToGCTopFriendMatchesRequest>(nullptr);
  }

  CMsgClientToGCTopFriendMatchesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCTopFriendMatchesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCTopFriendMatchesRequest& from);
  void MergeFrom(const CMsgClientToGCTopFriendMatchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCTopFriendMatchesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCMatchesMinimalRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCMatchesMinimalRequest) */ {
 public:
  CMsgClientToGCMatchesMinimalRequest();
  virtual ~CMsgClientToGCMatchesMinimalRequest();

  CMsgClientToGCMatchesMinimalRequest(const CMsgClientToGCMatchesMinimalRequest& from);

  inline CMsgClientToGCMatchesMinimalRequest& operator=(const CMsgClientToGCMatchesMinimalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCMatchesMinimalRequest(CMsgClientToGCMatchesMinimalRequest&& from) noexcept
    : CMsgClientToGCMatchesMinimalRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCMatchesMinimalRequest& operator=(CMsgClientToGCMatchesMinimalRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCMatchesMinimalRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCMatchesMinimalRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCMatchesMinimalRequest*>(
               &_CMsgClientToGCMatchesMinimalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CMsgClientToGCMatchesMinimalRequest* other);
  friend void swap(CMsgClientToGCMatchesMinimalRequest& a, CMsgClientToGCMatchesMinimalRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCMatchesMinimalRequest* New() const final {
    return CreateMaybeMessage<CMsgClientToGCMatchesMinimalRequest>(nullptr);
  }

  CMsgClientToGCMatchesMinimalRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCMatchesMinimalRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCMatchesMinimalRequest& from);
  void MergeFrom(const CMsgClientToGCMatchesMinimalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCMatchesMinimalRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 match_ids = 1;
  int match_ids_size() const;
  void clear_match_ids();
  static const int kMatchIdsFieldNumber = 1;
  ::google::protobuf::uint64 match_ids(int index) const;
  void set_match_ids(int index, ::google::protobuf::uint64 value);
  void add_match_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_match_ids();

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCMatchesMinimalRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > match_ids_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCMatchesMinimalResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCMatchesMinimalResponse) */ {
 public:
  CMsgClientToGCMatchesMinimalResponse();
  virtual ~CMsgClientToGCMatchesMinimalResponse();

  CMsgClientToGCMatchesMinimalResponse(const CMsgClientToGCMatchesMinimalResponse& from);

  inline CMsgClientToGCMatchesMinimalResponse& operator=(const CMsgClientToGCMatchesMinimalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCMatchesMinimalResponse(CMsgClientToGCMatchesMinimalResponse&& from) noexcept
    : CMsgClientToGCMatchesMinimalResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCMatchesMinimalResponse& operator=(CMsgClientToGCMatchesMinimalResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCMatchesMinimalResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCMatchesMinimalResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCMatchesMinimalResponse*>(
               &_CMsgClientToGCMatchesMinimalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CMsgClientToGCMatchesMinimalResponse* other);
  friend void swap(CMsgClientToGCMatchesMinimalResponse& a, CMsgClientToGCMatchesMinimalResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCMatchesMinimalResponse* New() const final {
    return CreateMaybeMessage<CMsgClientToGCMatchesMinimalResponse>(nullptr);
  }

  CMsgClientToGCMatchesMinimalResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCMatchesMinimalResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCMatchesMinimalResponse& from);
  void MergeFrom(const CMsgClientToGCMatchesMinimalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCMatchesMinimalResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 1;
  ::proto::dota::CMsgDOTAMatchMinimal* mutable_matches(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
      mutable_matches();
  const ::proto::dota::CMsgDOTAMatchMinimal& matches(int index) const;
  ::proto::dota::CMsgDOTAMatchMinimal* add_matches();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
      matches() const;

  // optional bool last_match = 2;
  bool has_last_match() const;
  void clear_last_match();
  static const int kLastMatchFieldNumber = 2;
  bool last_match() const;
  void set_last_match(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCMatchesMinimalResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal > matches_;
  bool last_match_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopLeagueMatchesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientTopLeagueMatchesResponse) */ {
 public:
  CMsgGCToClientTopLeagueMatchesResponse();
  virtual ~CMsgGCToClientTopLeagueMatchesResponse();

  CMsgGCToClientTopLeagueMatchesResponse(const CMsgGCToClientTopLeagueMatchesResponse& from);

  inline CMsgGCToClientTopLeagueMatchesResponse& operator=(const CMsgGCToClientTopLeagueMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToClientTopLeagueMatchesResponse(CMsgGCToClientTopLeagueMatchesResponse&& from) noexcept
    : CMsgGCToClientTopLeagueMatchesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientTopLeagueMatchesResponse& operator=(CMsgGCToClientTopLeagueMatchesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToClientTopLeagueMatchesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToClientTopLeagueMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientTopLeagueMatchesResponse*>(
               &_CMsgGCToClientTopLeagueMatchesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CMsgGCToClientTopLeagueMatchesResponse* other);
  friend void swap(CMsgGCToClientTopLeagueMatchesResponse& a, CMsgGCToClientTopLeagueMatchesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientTopLeagueMatchesResponse* New() const final {
    return CreateMaybeMessage<CMsgGCToClientTopLeagueMatchesResponse>(nullptr);
  }

  CMsgGCToClientTopLeagueMatchesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientTopLeagueMatchesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToClientTopLeagueMatchesResponse& from);
  void MergeFrom(const CMsgGCToClientTopLeagueMatchesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientTopLeagueMatchesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 2;
  ::proto::dota::CMsgDOTAMatchMinimal* mutable_matches(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
      mutable_matches();
  const ::proto::dota::CMsgDOTAMatchMinimal& matches(int index) const;
  ::proto::dota::CMsgDOTAMatchMinimal* add_matches();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
      matches() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal > matches_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopFriendMatchesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientTopFriendMatchesResponse) */ {
 public:
  CMsgGCToClientTopFriendMatchesResponse();
  virtual ~CMsgGCToClientTopFriendMatchesResponse();

  CMsgGCToClientTopFriendMatchesResponse(const CMsgGCToClientTopFriendMatchesResponse& from);

  inline CMsgGCToClientTopFriendMatchesResponse& operator=(const CMsgGCToClientTopFriendMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToClientTopFriendMatchesResponse(CMsgGCToClientTopFriendMatchesResponse&& from) noexcept
    : CMsgGCToClientTopFriendMatchesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientTopFriendMatchesResponse& operator=(CMsgGCToClientTopFriendMatchesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToClientTopFriendMatchesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToClientTopFriendMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientTopFriendMatchesResponse*>(
               &_CMsgGCToClientTopFriendMatchesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CMsgGCToClientTopFriendMatchesResponse* other);
  friend void swap(CMsgGCToClientTopFriendMatchesResponse& a, CMsgGCToClientTopFriendMatchesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientTopFriendMatchesResponse* New() const final {
    return CreateMaybeMessage<CMsgGCToClientTopFriendMatchesResponse>(nullptr);
  }

  CMsgGCToClientTopFriendMatchesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientTopFriendMatchesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToClientTopFriendMatchesResponse& from);
  void MergeFrom(const CMsgGCToClientTopFriendMatchesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientTopFriendMatchesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 1;
  ::proto::dota::CMsgDOTAMatchMinimal* mutable_matches(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
      mutable_matches();
  const ::proto::dota::CMsgDOTAMatchMinimal& matches(int index) const;
  ::proto::dota::CMsgDOTAMatchMinimal* add_matches();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
      matches() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal > matches_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFindTopMatches final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCFindTopMatches) */ {
 public:
  CMsgClientToGCFindTopMatches();
  virtual ~CMsgClientToGCFindTopMatches();

  CMsgClientToGCFindTopMatches(const CMsgClientToGCFindTopMatches& from);

  inline CMsgClientToGCFindTopMatches& operator=(const CMsgClientToGCFindTopMatches& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgClientToGCFindTopMatches(CMsgClientToGCFindTopMatches&& from) noexcept
    : CMsgClientToGCFindTopMatches() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFindTopMatches& operator=(CMsgClientToGCFindTopMatches&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgClientToGCFindTopMatches& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgClientToGCFindTopMatches* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFindTopMatches*>(
               &_CMsgClientToGCFindTopMatches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CMsgClientToGCFindTopMatches* other);
  friend void swap(CMsgClientToGCFindTopMatches& a, CMsgClientToGCFindTopMatches& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCFindTopMatches* New() const final {
    return CreateMaybeMessage<CMsgClientToGCFindTopMatches>(nullptr);
  }

  CMsgClientToGCFindTopMatches* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCFindTopMatches>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgClientToGCFindTopMatches& from);
  void MergeFrom(const CMsgClientToGCFindTopMatches& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFindTopMatches* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 start_game = 1;
  bool has_start_game() const;
  void clear_start_game();
  static const int kStartGameFieldNumber = 1;
  ::google::protobuf::uint32 start_game() const;
  void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 friend_id = 4;
  bool has_friend_id() const;
  void clear_friend_id();
  static const int kFriendIdFieldNumber = 4;
  ::google::protobuf::uint32 friend_id() const;
  void set_friend_id(::google::protobuf::uint32 value);

  // optional bool friend_list = 5;
  bool has_friend_list() const;
  void clear_friend_list();
  static const int kFriendListFieldNumber = 5;
  bool friend_list() const;
  void set_friend_list(bool value);

  // optional bool league_list = 6;
  bool has_league_list() const;
  void clear_league_list();
  static const int kLeagueListFieldNumber = 6;
  bool league_list() const;
  void set_league_list(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCFindTopMatches)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 friend_id_;
  bool friend_list_;
  bool league_list_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientFindTopLeagueMatchesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse) */ {
 public:
  CMsgGCToClientFindTopLeagueMatchesResponse();
  virtual ~CMsgGCToClientFindTopLeagueMatchesResponse();

  CMsgGCToClientFindTopLeagueMatchesResponse(const CMsgGCToClientFindTopLeagueMatchesResponse& from);

  inline CMsgGCToClientFindTopLeagueMatchesResponse& operator=(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgGCToClientFindTopLeagueMatchesResponse(CMsgGCToClientFindTopLeagueMatchesResponse&& from) noexcept
    : CMsgGCToClientFindTopLeagueMatchesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientFindTopLeagueMatchesResponse& operator=(CMsgGCToClientFindTopLeagueMatchesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgGCToClientFindTopLeagueMatchesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgGCToClientFindTopLeagueMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientFindTopLeagueMatchesResponse*>(
               &_CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CMsgGCToClientFindTopLeagueMatchesResponse* other);
  friend void swap(CMsgGCToClientFindTopLeagueMatchesResponse& a, CMsgGCToClientFindTopLeagueMatchesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientFindTopLeagueMatchesResponse* New() const final {
    return CreateMaybeMessage<CMsgGCToClientFindTopLeagueMatchesResponse>(nullptr);
  }

  CMsgGCToClientFindTopLeagueMatchesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientFindTopLeagueMatchesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from);
  void MergeFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientFindTopLeagueMatchesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 match_ids = 4;
  int match_ids_size() const;
  void clear_match_ids();
  static const int kMatchIdsFieldNumber = 4;
  ::google::protobuf::uint32 match_ids(int index) const;
  void set_match_ids(int index, ::google::protobuf::uint32 value);
  void add_match_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_match_ids();

  // repeated .proto.dota.CMsgDOTAMatch matches = 5;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 5;
  ::proto::dota::CMsgDOTAMatch* mutable_matches(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >*
      mutable_matches();
  const ::proto::dota::CMsgDOTAMatch& matches(int index) const;
  ::proto::dota::CMsgDOTAMatch* add_matches();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >&
      matches() const;

  // optional uint32 start_game = 1;
  bool has_start_game() const;
  void clear_start_game();
  static const int kStartGameFieldNumber = 1;
  ::google::protobuf::uint32 start_game() const;
  void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > match_ids_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch > matches_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgSpectateFriendGame) */ {
 public:
  CMsgSpectateFriendGame();
  virtual ~CMsgSpectateFriendGame();

  CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from);

  inline CMsgSpectateFriendGame& operator=(const CMsgSpectateFriendGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSpectateFriendGame(CMsgSpectateFriendGame&& from) noexcept
    : CMsgSpectateFriendGame() {
    *this = ::std::move(from);
  }

  inline CMsgSpectateFriendGame& operator=(CMsgSpectateFriendGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSpectateFriendGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSpectateFriendGame* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectateFriendGame*>(
               &_CMsgSpectateFriendGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CMsgSpectateFriendGame* other);
  friend void swap(CMsgSpectateFriendGame& a, CMsgSpectateFriendGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectateFriendGame* New() const final {
    return CreateMaybeMessage<CMsgSpectateFriendGame>(nullptr);
  }

  CMsgSpectateFriendGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSpectateFriendGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSpectateFriendGame& from);
  void MergeFrom(const CMsgSpectateFriendGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpectateFriendGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // optional bool live = 2;
  bool has_live() const;
  void clear_live();
  static const int kLiveFieldNumber = 2;
  bool live() const;
  void set_live(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgSpectateFriendGame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  bool live_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGameResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgSpectateFriendGameResponse) */ {
 public:
  CMsgSpectateFriendGameResponse();
  virtual ~CMsgSpectateFriendGameResponse();

  CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from);

  inline CMsgSpectateFriendGameResponse& operator=(const CMsgSpectateFriendGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgSpectateFriendGameResponse(CMsgSpectateFriendGameResponse&& from) noexcept
    : CMsgSpectateFriendGameResponse() {
    *this = ::std::move(from);
  }

  inline CMsgSpectateFriendGameResponse& operator=(CMsgSpectateFriendGameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgSpectateFriendGameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSpectateFriendGameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectateFriendGameResponse*>(
               &_CMsgSpectateFriendGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CMsgSpectateFriendGameResponse* other);
  friend void swap(CMsgSpectateFriendGameResponse& a, CMsgSpectateFriendGameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectateFriendGameResponse* New() const final {
    return CreateMaybeMessage<CMsgSpectateFriendGameResponse>(nullptr);
  }

  CMsgSpectateFriendGameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSpectateFriendGameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgSpectateFriendGameResponse& from);
  void MergeFrom(const CMsgSpectateFriendGameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpectateFriendGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSpectateFriendGameResponse_EWatchLiveResult EWatchLiveResult;
  static const EWatchLiveResult SUCCESS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_SUCCESS;
  static const EWatchLiveResult ERROR_GENERIC =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_GENERIC;
  static const EWatchLiveResult ERROR_NO_PLUS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_NO_PLUS;
  static const EWatchLiveResult ERROR_NOT_FRIENDS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_NOT_FRIENDS;
  static const EWatchLiveResult ERROR_LOBBY_NOT_FOUND =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_NOT_FOUND;
  static const EWatchLiveResult ERROR_SPECTATOR_IN_A_LOBBY =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_IN_A_LOBBY;
  static const EWatchLiveResult ERROR_LOBBY_IS_LAN =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_LOBBY_IS_LAN;
  static const EWatchLiveResult ERROR_WRONG_LOBBY_TYPE =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_WRONG_LOBBY_TYPE;
  static const EWatchLiveResult ERROR_WRONG_LOBBY_STATE =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_WRONG_LOBBY_STATE;
  static const EWatchLiveResult ERROR_PLAYER_NOT_PLAYER =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_PLAYER_NOT_PLAYER;
  static const EWatchLiveResult ERROR_TOO_MANY_SPECTATORS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_TOO_MANY_SPECTATORS;
  static const EWatchLiveResult ERROR_SPECTATOR_SWITCHED_TEAMS =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_SWITCHED_TEAMS;
  static const EWatchLiveResult ERROR_FRIENDS_ON_BOTH_SIDES =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_FRIENDS_ON_BOTH_SIDES;
  static const EWatchLiveResult ERROR_SPECTATOR_IN_THIS_LOBBY =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_ERROR_SPECTATOR_IN_THIS_LOBBY;
  static inline bool EWatchLiveResult_IsValid(int value) {
    return CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(value);
  }
  static const EWatchLiveResult EWatchLiveResult_MIN =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MIN;
  static const EWatchLiveResult EWatchLiveResult_MAX =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_MAX;
  static const int EWatchLiveResult_ARRAYSIZE =
    CMsgSpectateFriendGameResponse_EWatchLiveResult_EWatchLiveResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EWatchLiveResult_descriptor() {
    return CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor();
  }
  static inline const ::std::string& EWatchLiveResult_Name(EWatchLiveResult value) {
    return CMsgSpectateFriendGameResponse_EWatchLiveResult_Name(value);
  }
  static inline bool EWatchLiveResult_Parse(const ::std::string& name,
      EWatchLiveResult* value) {
    return CMsgSpectateFriendGameResponse_EWatchLiveResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
  bool has_watch_live_result() const;
  void clear_watch_live_result();
  static const int kWatchLiveResultFieldNumber = 5;
  ::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult watch_live_result() const;
  void set_watch_live_result(::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult value);

  // optional fixed64 server_steamid = 4;
  bool has_server_steamid() const;
  void clear_server_steamid();
  static const int kServerSteamidFieldNumber = 4;
  ::google::protobuf::uint64 server_steamid() const;
  void set_server_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgSpectateFriendGameResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int watch_live_result_;
  ::google::protobuf::uint64 server_steamid_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CDOTAReplayDownloadInfo_Highlight final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAReplayDownloadInfo.Highlight) */ {
 public:
  CDOTAReplayDownloadInfo_Highlight();
  virtual ~CDOTAReplayDownloadInfo_Highlight();

  CDOTAReplayDownloadInfo_Highlight(const CDOTAReplayDownloadInfo_Highlight& from);

  inline CDOTAReplayDownloadInfo_Highlight& operator=(const CDOTAReplayDownloadInfo_Highlight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAReplayDownloadInfo_Highlight(CDOTAReplayDownloadInfo_Highlight&& from) noexcept
    : CDOTAReplayDownloadInfo_Highlight() {
    *this = ::std::move(from);
  }

  inline CDOTAReplayDownloadInfo_Highlight& operator=(CDOTAReplayDownloadInfo_Highlight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAReplayDownloadInfo_Highlight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAReplayDownloadInfo_Highlight* internal_default_instance() {
    return reinterpret_cast<const CDOTAReplayDownloadInfo_Highlight*>(
               &_CDOTAReplayDownloadInfo_Highlight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CDOTAReplayDownloadInfo_Highlight* other);
  friend void swap(CDOTAReplayDownloadInfo_Highlight& a, CDOTAReplayDownloadInfo_Highlight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAReplayDownloadInfo_Highlight* New() const final {
    return CreateMaybeMessage<CDOTAReplayDownloadInfo_Highlight>(nullptr);
  }

  CDOTAReplayDownloadInfo_Highlight* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAReplayDownloadInfo_Highlight>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAReplayDownloadInfo_Highlight& from);
  void MergeFrom(const CDOTAReplayDownloadInfo_Highlight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAReplayDownloadInfo_Highlight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint32 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAReplayDownloadInfo.Highlight)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint32 timestamp_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CDOTAReplayDownloadInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAReplayDownloadInfo) */ {
 public:
  CDOTAReplayDownloadInfo();
  virtual ~CDOTAReplayDownloadInfo();

  CDOTAReplayDownloadInfo(const CDOTAReplayDownloadInfo& from);

  inline CDOTAReplayDownloadInfo& operator=(const CDOTAReplayDownloadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAReplayDownloadInfo(CDOTAReplayDownloadInfo&& from) noexcept
    : CDOTAReplayDownloadInfo() {
    *this = ::std::move(from);
  }

  inline CDOTAReplayDownloadInfo& operator=(CDOTAReplayDownloadInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAReplayDownloadInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAReplayDownloadInfo* internal_default_instance() {
    return reinterpret_cast<const CDOTAReplayDownloadInfo*>(
               &_CDOTAReplayDownloadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CDOTAReplayDownloadInfo* other);
  friend void swap(CDOTAReplayDownloadInfo& a, CDOTAReplayDownloadInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAReplayDownloadInfo* New() const final {
    return CreateMaybeMessage<CDOTAReplayDownloadInfo>(nullptr);
  }

  CDOTAReplayDownloadInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAReplayDownloadInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAReplayDownloadInfo& from);
  void MergeFrom(const CDOTAReplayDownloadInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAReplayDownloadInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAReplayDownloadInfo_Highlight Highlight;

  // accessors -------------------------------------------------------

  // repeated string tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::proto::dota::CMsgDOTAMatchMinimal& match() const;
  ::proto::dota::CMsgDOTAMatchMinimal* release_match();
  ::proto::dota::CMsgDOTAMatchMinimal* mutable_match();
  void set_allocated_match(::proto::dota::CMsgDOTAMatchMinimal* match);

  // optional uint32 size = 4;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // optional bool exists_on_disk = 6;
  bool has_exists_on_disk() const;
  void clear_exists_on_disk();
  static const int kExistsOnDiskFieldNumber = 6;
  bool exists_on_disk() const;
  void set_exists_on_disk(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAReplayDownloadInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::proto::dota::CMsgDOTAMatchMinimal* match_;
  ::google::protobuf::uint32 size_;
  bool exists_on_disk_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgWatchGame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgWatchGame) */ {
 public:
  CMsgWatchGame();
  virtual ~CMsgWatchGame();

  CMsgWatchGame(const CMsgWatchGame& from);

  inline CMsgWatchGame& operator=(const CMsgWatchGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgWatchGame(CMsgWatchGame&& from) noexcept
    : CMsgWatchGame() {
    *this = ::std::move(from);
  }

  inline CMsgWatchGame& operator=(CMsgWatchGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgWatchGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgWatchGame* internal_default_instance() {
    return reinterpret_cast<const CMsgWatchGame*>(
               &_CMsgWatchGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CMsgWatchGame* other);
  friend void swap(CMsgWatchGame& a, CMsgWatchGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgWatchGame* New() const final {
    return CreateMaybeMessage<CMsgWatchGame>(nullptr);
  }

  CMsgWatchGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgWatchGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgWatchGame& from);
  void MergeFrom(const CMsgWatchGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWatchGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 regions = 5;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 5;
  ::google::protobuf::uint32 regions(int index) const;
  void set_regions(int index, ::google::protobuf::uint32 value);
  void add_regions(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      regions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_regions();

  // optional fixed64 server_steamid = 1;
  bool has_server_steamid() const;
  void clear_server_steamid();
  static const int kServerSteamidFieldNumber = 1;
  ::google::protobuf::uint64 server_steamid() const;
  void set_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_server_steamid = 3;
  bool has_watch_server_steamid() const;
  void clear_watch_server_steamid();
  static const int kWatchServerSteamidFieldNumber = 3;
  ::google::protobuf::uint64 watch_server_steamid() const;
  void set_watch_server_steamid(::google::protobuf::uint64 value);

  // optional uint64 lobby_id = 4;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 4;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  ::google::protobuf::uint32 client_version() const;
  void set_client_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgWatchGame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > regions_;
  ::google::protobuf::uint64 server_steamid_;
  ::google::protobuf::uint64 watch_server_steamid_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 client_version_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgCancelWatchGame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgCancelWatchGame) */ {
 public:
  CMsgCancelWatchGame();
  virtual ~CMsgCancelWatchGame();

  CMsgCancelWatchGame(const CMsgCancelWatchGame& from);

  inline CMsgCancelWatchGame& operator=(const CMsgCancelWatchGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgCancelWatchGame(CMsgCancelWatchGame&& from) noexcept
    : CMsgCancelWatchGame() {
    *this = ::std::move(from);
  }

  inline CMsgCancelWatchGame& operator=(CMsgCancelWatchGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgCancelWatchGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgCancelWatchGame* internal_default_instance() {
    return reinterpret_cast<const CMsgCancelWatchGame*>(
               &_CMsgCancelWatchGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CMsgCancelWatchGame* other);
  friend void swap(CMsgCancelWatchGame& a, CMsgCancelWatchGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgCancelWatchGame* New() const final {
    return CreateMaybeMessage<CMsgCancelWatchGame>(nullptr);
  }

  CMsgCancelWatchGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgCancelWatchGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgCancelWatchGame& from);
  void MergeFrom(const CMsgCancelWatchGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCancelWatchGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgCancelWatchGame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgWatchGameResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgWatchGameResponse) */ {
 public:
  CMsgWatchGameResponse();
  virtual ~CMsgWatchGameResponse();

  CMsgWatchGameResponse(const CMsgWatchGameResponse& from);

  inline CMsgWatchGameResponse& operator=(const CMsgWatchGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgWatchGameResponse(CMsgWatchGameResponse&& from) noexcept
    : CMsgWatchGameResponse() {
    *this = ::std::move(from);
  }

  inline CMsgWatchGameResponse& operator=(CMsgWatchGameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgWatchGameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgWatchGameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgWatchGameResponse*>(
               &_CMsgWatchGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CMsgWatchGameResponse* other);
  friend void swap(CMsgWatchGameResponse& a, CMsgWatchGameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgWatchGameResponse* New() const final {
    return CreateMaybeMessage<CMsgWatchGameResponse>(nullptr);
  }

  CMsgWatchGameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgWatchGameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgWatchGameResponse& from);
  void MergeFrom(const CMsgWatchGameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWatchGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgWatchGameResponse_WatchGameResult WatchGameResult;
  static const WatchGameResult PENDING =
    CMsgWatchGameResponse_WatchGameResult_PENDING;
  static const WatchGameResult READY =
    CMsgWatchGameResponse_WatchGameResult_READY;
  static const WatchGameResult GAMESERVERNOTFOUND =
    CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND;
  static const WatchGameResult UNAVAILABLE =
    CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE;
  static const WatchGameResult CANCELLED =
    CMsgWatchGameResponse_WatchGameResult_CANCELLED;
  static const WatchGameResult INCOMPATIBLEVERSION =
    CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION;
  static const WatchGameResult MISSINGLEAGUESUBSCRIPTION =
    CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION;
  static const WatchGameResult LOBBYNOTFOUND =
    CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
  static inline bool WatchGameResult_IsValid(int value) {
    return CMsgWatchGameResponse_WatchGameResult_IsValid(value);
  }
  static const WatchGameResult WatchGameResult_MIN =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN;
  static const WatchGameResult WatchGameResult_MAX =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX;
  static const int WatchGameResult_ARRAYSIZE =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WatchGameResult_descriptor() {
    return CMsgWatchGameResponse_WatchGameResult_descriptor();
  }
  static inline const ::std::string& WatchGameResult_Name(WatchGameResult value) {
    return CMsgWatchGameResponse_WatchGameResult_Name(value);
  }
  static inline bool WatchGameResult_Parse(const ::std::string& name,
      WatchGameResult* value) {
    return CMsgWatchGameResponse_WatchGameResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  bool has_watch_game_result() const;
  void clear_watch_game_result();
  static const int kWatchGameResultFieldNumber = 1;
  ::proto::dota::CMsgWatchGameResponse_WatchGameResult watch_game_result() const;
  void set_watch_game_result(::proto::dota::CMsgWatchGameResponse_WatchGameResult value);

  // optional uint32 source_tv_public_addr = 2;
  bool has_source_tv_public_addr() const;
  void clear_source_tv_public_addr();
  static const int kSourceTvPublicAddrFieldNumber = 2;
  ::google::protobuf::uint32 source_tv_public_addr() const;
  void set_source_tv_public_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_private_addr = 3;
  bool has_source_tv_private_addr() const;
  void clear_source_tv_private_addr();
  static const int kSourceTvPrivateAddrFieldNumber = 3;
  ::google::protobuf::uint32 source_tv_private_addr() const;
  void set_source_tv_private_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_port = 4;
  bool has_source_tv_port() const;
  void clear_source_tv_port();
  static const int kSourceTvPortFieldNumber = 4;
  ::google::protobuf::uint32 source_tv_port() const;
  void set_source_tv_port(::google::protobuf::uint32 value);

  // optional fixed64 game_server_steamid = 5;
  bool has_game_server_steamid() const;
  void clear_game_server_steamid();
  static const int kGameServerSteamidFieldNumber = 5;
  ::google::protobuf::uint64 game_server_steamid() const;
  void set_game_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_server_steamid = 6;
  bool has_watch_server_steamid() const;
  void clear_watch_server_steamid();
  static const int kWatchServerSteamidFieldNumber = 6;
  ::google::protobuf::uint64 watch_server_steamid() const;
  void set_watch_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_tv_unique_secret_code = 7;
  bool has_watch_tv_unique_secret_code() const;
  void clear_watch_tv_unique_secret_code();
  static const int kWatchTvUniqueSecretCodeFieldNumber = 7;
  ::google::protobuf::uint64 watch_tv_unique_secret_code() const;
  void set_watch_tv_unique_secret_code(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgWatchGameResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int watch_game_result_;
  ::google::protobuf::uint32 source_tv_public_addr_;
  ::google::protobuf::uint32 source_tv_private_addr_;
  ::google::protobuf::uint32 source_tv_port_;
  ::google::protobuf::uint64 game_server_steamid_;
  ::google::protobuf::uint64 watch_server_steamid_;
  ::google::protobuf::uint64 watch_tv_unique_secret_code_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyLeaderWatchGamePrompt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgPartyLeaderWatchGamePrompt) */ {
 public:
  CMsgPartyLeaderWatchGamePrompt();
  virtual ~CMsgPartyLeaderWatchGamePrompt();

  CMsgPartyLeaderWatchGamePrompt(const CMsgPartyLeaderWatchGamePrompt& from);

  inline CMsgPartyLeaderWatchGamePrompt& operator=(const CMsgPartyLeaderWatchGamePrompt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgPartyLeaderWatchGamePrompt(CMsgPartyLeaderWatchGamePrompt&& from) noexcept
    : CMsgPartyLeaderWatchGamePrompt() {
    *this = ::std::move(from);
  }

  inline CMsgPartyLeaderWatchGamePrompt& operator=(CMsgPartyLeaderWatchGamePrompt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgPartyLeaderWatchGamePrompt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgPartyLeaderWatchGamePrompt* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyLeaderWatchGamePrompt*>(
               &_CMsgPartyLeaderWatchGamePrompt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CMsgPartyLeaderWatchGamePrompt* other);
  friend void swap(CMsgPartyLeaderWatchGamePrompt& a, CMsgPartyLeaderWatchGamePrompt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyLeaderWatchGamePrompt* New() const final {
    return CreateMaybeMessage<CMsgPartyLeaderWatchGamePrompt>(nullptr);
  }

  CMsgPartyLeaderWatchGamePrompt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyLeaderWatchGamePrompt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgPartyLeaderWatchGamePrompt& from);
  void MergeFrom(const CMsgPartyLeaderWatchGamePrompt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyLeaderWatchGamePrompt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 game_server_steamid = 5;
  bool has_game_server_steamid() const;
  void clear_game_server_steamid();
  static const int kGameServerSteamidFieldNumber = 5;
  ::google::protobuf::uint64 game_server_steamid() const;
  void set_game_server_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgPartyLeaderWatchGamePrompt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 game_server_steamid_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CDOTABroadcasterInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTABroadcasterInfo) */ {
 public:
  CDOTABroadcasterInfo();
  virtual ~CDOTABroadcasterInfo();

  CDOTABroadcasterInfo(const CDOTABroadcasterInfo& from);

  inline CDOTABroadcasterInfo& operator=(const CDOTABroadcasterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTABroadcasterInfo(CDOTABroadcasterInfo&& from) noexcept
    : CDOTABroadcasterInfo() {
    *this = ::std::move(from);
  }

  inline CDOTABroadcasterInfo& operator=(CDOTABroadcasterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTABroadcasterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTABroadcasterInfo* internal_default_instance() {
    return reinterpret_cast<const CDOTABroadcasterInfo*>(
               &_CDOTABroadcasterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CDOTABroadcasterInfo* other);
  friend void swap(CDOTABroadcasterInfo& a, CDOTABroadcasterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTABroadcasterInfo* New() const final {
    return CreateMaybeMessage<CDOTABroadcasterInfo>(nullptr);
  }

  CDOTABroadcasterInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTABroadcasterInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTABroadcasterInfo& from);
  void MergeFrom(const CDOTABroadcasterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTABroadcasterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name_radiant = 4;
  bool has_team_name_radiant() const;
  void clear_team_name_radiant();
  static const int kTeamNameRadiantFieldNumber = 4;
  const ::std::string& team_name_radiant() const;
  void set_team_name_radiant(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name_radiant(::std::string&& value);
  #endif
  void set_team_name_radiant(const char* value);
  void set_team_name_radiant(const char* value, size_t size);
  ::std::string* mutable_team_name_radiant();
  ::std::string* release_team_name_radiant();
  void set_allocated_team_name_radiant(::std::string* team_name_radiant);

  // optional string team_name_dire = 5;
  bool has_team_name_dire() const;
  void clear_team_name_dire();
  static const int kTeamNameDireFieldNumber = 5;
  const ::std::string& team_name_dire() const;
  void set_team_name_dire(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name_dire(::std::string&& value);
  #endif
  void set_team_name_dire(const char* value);
  void set_team_name_dire(const char* value, size_t size);
  ::std::string* mutable_team_name_dire();
  ::std::string* release_team_name_dire();
  void set_allocated_team_name_dire(::std::string* team_name_dire);

  // optional string node_name = 12;
  bool has_node_name() const;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 12;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // optional fixed64 server_steam_id = 2;
  bool has_server_steam_id() const;
  void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 server_steam_id() const;
  void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional bool live = 3;
  bool has_live() const;
  void clear_live();
  static const int kLiveFieldNumber = 3;
  bool live() const;
  void set_live(bool value);

  // optional bool allow_live_video = 10;
  bool has_allow_live_video() const;
  void clear_allow_live_video();
  static const int kAllowLiveVideoFieldNumber = 10;
  bool allow_live_video() const;
  void set_allow_live_video(bool value);

  // optional uint32 series_game = 7;
  bool has_series_game() const;
  void clear_series_game();
  static const int kSeriesGameFieldNumber = 7;
  ::google::protobuf::uint32 series_game() const;
  void set_series_game(::google::protobuf::uint32 value);

  // optional uint32 upcoming_broadcast_timestamp = 9;
  bool has_upcoming_broadcast_timestamp() const;
  void clear_upcoming_broadcast_timestamp();
  static const int kUpcomingBroadcastTimestampFieldNumber = 9;
  ::google::protobuf::uint32 upcoming_broadcast_timestamp() const;
  void set_upcoming_broadcast_timestamp(::google::protobuf::uint32 value);

  // optional uint32 node_type = 11;
  bool has_node_type() const;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 11;
  ::google::protobuf::uint32 node_type() const;
  void set_node_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTABroadcasterInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_radiant_;
  ::google::protobuf::internal::ArenaStringPtr team_name_dire_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint32 account_id_;
  bool live_;
  bool allow_live_video_;
  ::google::protobuf::uint32 series_game_;
  ::google::protobuf::uint32 upcoming_broadcast_timestamp_;
  ::google::protobuf::uint32 node_type_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeries_TeamInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeries.TeamInfo) */ {
 public:
  CMsgDOTASeries_TeamInfo();
  virtual ~CMsgDOTASeries_TeamInfo();

  CMsgDOTASeries_TeamInfo(const CMsgDOTASeries_TeamInfo& from);

  inline CMsgDOTASeries_TeamInfo& operator=(const CMsgDOTASeries_TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeries_TeamInfo(CMsgDOTASeries_TeamInfo&& from) noexcept
    : CMsgDOTASeries_TeamInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeries_TeamInfo& operator=(CMsgDOTASeries_TeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeries_TeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeries_TeamInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeries_TeamInfo*>(
               &_CMsgDOTASeries_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CMsgDOTASeries_TeamInfo* other);
  friend void swap(CMsgDOTASeries_TeamInfo& a, CMsgDOTASeries_TeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeries_TeamInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTASeries_TeamInfo>(nullptr);
  }

  CMsgDOTASeries_TeamInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeries_TeamInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeries_TeamInfo& from);
  void MergeFrom(const CMsgDOTASeries_TeamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeries_TeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name = 2;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 2;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // optional string team_logo_url = 3;
  bool has_team_logo_url() const;
  void clear_team_logo_url();
  static const int kTeamLogoUrlFieldNumber = 3;
  const ::std::string& team_logo_url() const;
  void set_team_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_team_logo_url(::std::string&& value);
  #endif
  void set_team_logo_url(const char* value);
  void set_team_logo_url(const char* value, size_t size);
  ::std::string* mutable_team_logo_url();
  ::std::string* release_team_logo_url();
  void set_allocated_team_logo_url(::std::string* team_logo_url);

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 wager_count = 4;
  bool has_wager_count() const;
  void clear_wager_count();
  static const int kWagerCountFieldNumber = 4;
  ::google::protobuf::uint32 wager_count() const;
  void set_wager_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeries.TeamInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr team_logo_url_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 wager_count_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeries_LiveGame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeries.LiveGame) */ {
 public:
  CMsgDOTASeries_LiveGame();
  virtual ~CMsgDOTASeries_LiveGame();

  CMsgDOTASeries_LiveGame(const CMsgDOTASeries_LiveGame& from);

  inline CMsgDOTASeries_LiveGame& operator=(const CMsgDOTASeries_LiveGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeries_LiveGame(CMsgDOTASeries_LiveGame&& from) noexcept
    : CMsgDOTASeries_LiveGame() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeries_LiveGame& operator=(CMsgDOTASeries_LiveGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeries_LiveGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeries_LiveGame* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeries_LiveGame*>(
               &_CMsgDOTASeries_LiveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CMsgDOTASeries_LiveGame* other);
  friend void swap(CMsgDOTASeries_LiveGame& a, CMsgDOTASeries_LiveGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeries_LiveGame* New() const final {
    return CreateMaybeMessage<CMsgDOTASeries_LiveGame>(nullptr);
  }

  CMsgDOTASeries_LiveGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeries_LiveGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeries_LiveGame& from);
  void MergeFrom(const CMsgDOTASeries_LiveGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeries_LiveGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_radiant = 2;
  bool has_team_radiant() const;
  void clear_team_radiant();
  static const int kTeamRadiantFieldNumber = 2;
  const ::proto::dota::CMsgDOTASeries_TeamInfo& team_radiant() const;
  ::proto::dota::CMsgDOTASeries_TeamInfo* release_team_radiant();
  ::proto::dota::CMsgDOTASeries_TeamInfo* mutable_team_radiant();
  void set_allocated_team_radiant(::proto::dota::CMsgDOTASeries_TeamInfo* team_radiant);

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_dire = 3;
  bool has_team_dire() const;
  void clear_team_dire();
  static const int kTeamDireFieldNumber = 3;
  const ::proto::dota::CMsgDOTASeries_TeamInfo& team_dire() const;
  ::proto::dota::CMsgDOTASeries_TeamInfo* release_team_dire();
  ::proto::dota::CMsgDOTASeries_TeamInfo* mutable_team_dire();
  void set_allocated_team_dire(::proto::dota::CMsgDOTASeries_TeamInfo* team_dire);

  // optional fixed64 server_steam_id = 1;
  bool has_server_steam_id() const;
  void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 server_steam_id() const;
  void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint32 team_radiant_score = 4;
  bool has_team_radiant_score() const;
  void clear_team_radiant_score();
  static const int kTeamRadiantScoreFieldNumber = 4;
  ::google::protobuf::uint32 team_radiant_score() const;
  void set_team_radiant_score(::google::protobuf::uint32 value);

  // optional uint32 team_dire_score = 5;
  bool has_team_dire_score() const;
  void clear_team_dire_score();
  static const int kTeamDireScoreFieldNumber = 5;
  ::google::protobuf::uint32 team_dire_score() const;
  void set_team_dire_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeries.LiveGame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::proto::dota::CMsgDOTASeries_TeamInfo* team_radiant_;
  ::proto::dota::CMsgDOTASeries_TeamInfo* team_dire_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint32 team_radiant_score_;
  ::google::protobuf::uint32 team_dire_score_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASeries final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTASeries) */ {
 public:
  CMsgDOTASeries();
  virtual ~CMsgDOTASeries();

  CMsgDOTASeries(const CMsgDOTASeries& from);

  inline CMsgDOTASeries& operator=(const CMsgDOTASeries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTASeries(CMsgDOTASeries&& from) noexcept
    : CMsgDOTASeries() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASeries& operator=(CMsgDOTASeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTASeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTASeries* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASeries*>(
               &_CMsgDOTASeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CMsgDOTASeries* other);
  friend void swap(CMsgDOTASeries& a, CMsgDOTASeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASeries* New() const final {
    return CreateMaybeMessage<CMsgDOTASeries>(nullptr);
  }

  CMsgDOTASeries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASeries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTASeries& from);
  void MergeFrom(const CMsgDOTASeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASeries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTASeries_TeamInfo TeamInfo;
  typedef CMsgDOTASeries_LiveGame LiveGame;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatchMinimal match_minimal = 5;
  int match_minimal_size() const;
  void clear_match_minimal();
  static const int kMatchMinimalFieldNumber = 5;
  ::proto::dota::CMsgDOTAMatchMinimal* mutable_match_minimal(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
      mutable_match_minimal();
  const ::proto::dota::CMsgDOTAMatchMinimal& match_minimal(int index) const;
  ::proto::dota::CMsgDOTAMatchMinimal* add_match_minimal();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
      match_minimal() const;

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_1 = 3;
  bool has_team_1() const;
  void clear_team_1();
  static const int kTeam1FieldNumber = 3;
  const ::proto::dota::CMsgDOTASeries_TeamInfo& team_1() const;
  ::proto::dota::CMsgDOTASeries_TeamInfo* release_team_1();
  ::proto::dota::CMsgDOTASeries_TeamInfo* mutable_team_1();
  void set_allocated_team_1(::proto::dota::CMsgDOTASeries_TeamInfo* team_1);

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_2 = 4;
  bool has_team_2() const;
  void clear_team_2();
  static const int kTeam2FieldNumber = 4;
  const ::proto::dota::CMsgDOTASeries_TeamInfo& team_2() const;
  ::proto::dota::CMsgDOTASeries_TeamInfo* release_team_2();
  ::proto::dota::CMsgDOTASeries_TeamInfo* mutable_team_2();
  void set_allocated_team_2(::proto::dota::CMsgDOTASeries_TeamInfo* team_2);

  // optional .proto.dota.CMsgDOTASeries.LiveGame live_game = 6;
  bool has_live_game() const;
  void clear_live_game();
  static const int kLiveGameFieldNumber = 6;
  const ::proto::dota::CMsgDOTASeries_LiveGame& live_game() const;
  ::proto::dota::CMsgDOTASeries_LiveGame* release_live_game();
  ::proto::dota::CMsgDOTASeries_LiveGame* mutable_live_game();
  void set_allocated_live_game(::proto::dota::CMsgDOTASeries_LiveGame* live_game);

  // optional uint32 series_id = 1;
  bool has_series_id() const;
  void clear_series_id();
  static const int kSeriesIdFieldNumber = 1;
  ::google::protobuf::uint32 series_id() const;
  void set_series_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 2;
  bool has_series_type() const;
  void clear_series_type();
  static const int kSeriesTypeFieldNumber = 2;
  ::google::protobuf::uint32 series_type() const;
  void set_series_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTASeries)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal > match_minimal_;
  ::proto::dota::CMsgDOTASeries_TeamInfo* team_1_;
  ::proto::dota::CMsgDOTASeries_TeamInfo* team_2_;
  ::proto::dota::CMsgDOTASeries_LiveGame* live_game_;
  ::google::protobuf::uint32 series_id_;
  ::google::protobuf::uint32 series_type_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSourceTVGameSmall_Player

// optional uint32 account_id = 1;
inline bool CSourceTVGameSmall_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSourceTVGameSmall_Player::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.Player.account_id)
  return account_id_;
}
inline void CSourceTVGameSmall_Player::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.Player.account_id)
}

// optional uint32 hero_id = 2;
inline bool CSourceTVGameSmall_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSourceTVGameSmall_Player::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.Player.hero_id)
  return hero_id_;
}
inline void CSourceTVGameSmall_Player::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.Player.hero_id)
}

// -------------------------------------------------------------------

// CSourceTVGameSmall

// optional uint32 activate_time = 1;
inline bool CSourceTVGameSmall::has_activate_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSourceTVGameSmall::clear_activate_time() {
  activate_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::activate_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.activate_time)
  return activate_time_;
}
inline void CSourceTVGameSmall::set_activate_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  activate_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.activate_time)
}

// optional uint32 deactivate_time = 2;
inline bool CSourceTVGameSmall::has_deactivate_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSourceTVGameSmall::clear_deactivate_time() {
  deactivate_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::deactivate_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.deactivate_time)
  return deactivate_time_;
}
inline void CSourceTVGameSmall::set_deactivate_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  deactivate_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.deactivate_time)
}

// optional uint64 server_steam_id = 3;
inline bool CSourceTVGameSmall::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSourceTVGameSmall::clear_server_steam_id() {
  server_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.server_steam_id)
  return server_steam_id_;
}
inline void CSourceTVGameSmall::set_server_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.server_steam_id)
}

// optional uint64 lobby_id = 4;
inline bool CSourceTVGameSmall::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSourceTVGameSmall::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.lobby_id)
  return lobby_id_;
}
inline void CSourceTVGameSmall::set_lobby_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.lobby_id)
}

// optional uint32 league_id = 5;
inline bool CSourceTVGameSmall::has_league_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSourceTVGameSmall::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.league_id)
  return league_id_;
}
inline void CSourceTVGameSmall::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.league_id)
}

// optional uint32 lobby_type = 6;
inline bool CSourceTVGameSmall::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSourceTVGameSmall::clear_lobby_type() {
  lobby_type_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.lobby_type)
  return lobby_type_;
}
inline void CSourceTVGameSmall::set_lobby_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.lobby_type)
}

// optional int32 game_time = 7;
inline bool CSourceTVGameSmall::has_game_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSourceTVGameSmall::clear_game_time() {
  game_time_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 CSourceTVGameSmall::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.game_time)
  return game_time_;
}
inline void CSourceTVGameSmall::set_game_time(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.game_time)
}

// optional uint32 delay = 8;
inline bool CSourceTVGameSmall::has_delay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSourceTVGameSmall::clear_delay() {
  delay_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.delay)
  return delay_;
}
inline void CSourceTVGameSmall::set_delay(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.delay)
}

// optional uint32 spectators = 9;
inline bool CSourceTVGameSmall::has_spectators() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSourceTVGameSmall::clear_spectators() {
  spectators_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::spectators() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.spectators)
  return spectators_;
}
inline void CSourceTVGameSmall::set_spectators(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  spectators_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.spectators)
}

// optional uint32 game_mode = 10;
inline bool CSourceTVGameSmall::has_game_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSourceTVGameSmall::clear_game_mode() {
  game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.game_mode)
  return game_mode_;
}
inline void CSourceTVGameSmall::set_game_mode(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.game_mode)
}

// optional uint32 average_mmr = 11;
inline bool CSourceTVGameSmall::has_average_mmr() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSourceTVGameSmall::clear_average_mmr() {
  average_mmr_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::average_mmr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.average_mmr)
  return average_mmr_;
}
inline void CSourceTVGameSmall::set_average_mmr(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  average_mmr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.average_mmr)
}

// optional uint64 match_id = 12;
inline bool CSourceTVGameSmall::has_match_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSourceTVGameSmall::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.match_id)
  return match_id_;
}
inline void CSourceTVGameSmall::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.match_id)
}

// optional uint32 series_id = 13;
inline bool CSourceTVGameSmall::has_series_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSourceTVGameSmall::clear_series_id() {
  series_id_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.series_id)
  return series_id_;
}
inline void CSourceTVGameSmall::set_series_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.series_id)
}

// optional string team_name_radiant = 15;
inline bool CSourceTVGameSmall::has_team_name_radiant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSourceTVGameSmall::clear_team_name_radiant() {
  team_name_radiant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CSourceTVGameSmall::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_name_radiant)
  return team_name_radiant_.GetNoArena();
}
inline void CSourceTVGameSmall::set_team_name_radiant(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
#if LANG_CXX11
inline void CSourceTVGameSmall::set_team_name_radiant(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_radiant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
#endif
inline void CSourceTVGameSmall::set_team_name_radiant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
inline void CSourceTVGameSmall::set_team_name_radiant(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
inline ::std::string* CSourceTVGameSmall::mutable_team_name_radiant() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSourceTVGameSmall.team_name_radiant)
  return team_name_radiant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSourceTVGameSmall::release_team_name_radiant() {
  // @@protoc_insertion_point(field_release:proto.dota.CSourceTVGameSmall.team_name_radiant)
  if (!has_team_name_radiant()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_radiant_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSourceTVGameSmall::set_allocated_team_name_radiant(::std::string* team_name_radiant) {
  if (team_name_radiant != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_radiant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_radiant);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSourceTVGameSmall.team_name_radiant)
}

// optional string team_name_dire = 16;
inline bool CSourceTVGameSmall::has_team_name_dire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSourceTVGameSmall::clear_team_name_dire() {
  team_name_dire_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CSourceTVGameSmall::team_name_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_name_dire)
  return team_name_dire_.GetNoArena();
}
inline void CSourceTVGameSmall::set_team_name_dire(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_name_dire)
}
#if LANG_CXX11
inline void CSourceTVGameSmall::set_team_name_dire(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_name_dire_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSourceTVGameSmall.team_name_dire)
}
#endif
inline void CSourceTVGameSmall::set_team_name_dire(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSourceTVGameSmall.team_name_dire)
}
inline void CSourceTVGameSmall::set_team_name_dire(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSourceTVGameSmall.team_name_dire)
}
inline ::std::string* CSourceTVGameSmall::mutable_team_name_dire() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CSourceTVGameSmall.team_name_dire)
  return team_name_dire_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSourceTVGameSmall::release_team_name_dire() {
  // @@protoc_insertion_point(field_release:proto.dota.CSourceTVGameSmall.team_name_dire)
  if (!has_team_name_dire()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_name_dire_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSourceTVGameSmall::set_allocated_team_name_dire(::std::string* team_name_dire) {
  if (team_name_dire != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_name_dire_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_dire);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSourceTVGameSmall.team_name_dire)
}

// optional fixed64 team_logo_radiant = 24;
inline bool CSourceTVGameSmall::has_team_logo_radiant() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSourceTVGameSmall::clear_team_logo_radiant() {
  team_logo_radiant_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::team_logo_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_logo_radiant)
  return team_logo_radiant_;
}
inline void CSourceTVGameSmall::set_team_logo_radiant(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  team_logo_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_logo_radiant)
}

// optional fixed64 team_logo_dire = 25;
inline bool CSourceTVGameSmall::has_team_logo_dire() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSourceTVGameSmall::clear_team_logo_dire() {
  team_logo_dire_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::team_logo_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_logo_dire)
  return team_logo_dire_;
}
inline void CSourceTVGameSmall::set_team_logo_dire(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00400000u;
  team_logo_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_logo_dire)
}

// optional uint32 team_id_radiant = 30;
inline bool CSourceTVGameSmall::has_team_id_radiant() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSourceTVGameSmall::clear_team_id_radiant() {
  team_id_radiant_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::team_id_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_id_radiant)
  return team_id_radiant_;
}
inline void CSourceTVGameSmall::set_team_id_radiant(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  team_id_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_id_radiant)
}

// optional uint32 team_id_dire = 31;
inline bool CSourceTVGameSmall::has_team_id_dire() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSourceTVGameSmall::clear_team_id_dire() {
  team_id_dire_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::team_id_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_id_dire)
  return team_id_dire_;
}
inline void CSourceTVGameSmall::set_team_id_dire(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  team_id_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_id_dire)
}

// optional uint32 sort_score = 17;
inline bool CSourceTVGameSmall::has_sort_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSourceTVGameSmall::clear_sort_score() {
  sort_score_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::sort_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.sort_score)
  return sort_score_;
}
inline void CSourceTVGameSmall::set_sort_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  sort_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.sort_score)
}

// optional float last_update_time = 18;
inline bool CSourceTVGameSmall::has_last_update_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSourceTVGameSmall::clear_last_update_time() {
  last_update_time_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float CSourceTVGameSmall::last_update_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.last_update_time)
  return last_update_time_;
}
inline void CSourceTVGameSmall::set_last_update_time(float value) {
  _has_bits_[0] |= 0x00010000u;
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.last_update_time)
}

// optional int32 radiant_lead = 19;
inline bool CSourceTVGameSmall::has_radiant_lead() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSourceTVGameSmall::clear_radiant_lead() {
  radiant_lead_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::int32 CSourceTVGameSmall::radiant_lead() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.radiant_lead)
  return radiant_lead_;
}
inline void CSourceTVGameSmall::set_radiant_lead(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  radiant_lead_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.radiant_lead)
}

// optional uint32 radiant_score = 20;
inline bool CSourceTVGameSmall::has_radiant_score() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSourceTVGameSmall::clear_radiant_score() {
  radiant_score_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::radiant_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.radiant_score)
  return radiant_score_;
}
inline void CSourceTVGameSmall::set_radiant_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  radiant_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.radiant_score)
}

// optional uint32 dire_score = 21;
inline bool CSourceTVGameSmall::has_dire_score() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSourceTVGameSmall::clear_dire_score() {
  dire_score_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::dire_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.dire_score)
  return dire_score_;
}
inline void CSourceTVGameSmall::set_dire_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  dire_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.dire_score)
}

// repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
inline int CSourceTVGameSmall::players_size() const {
  return players_.size();
}
inline void CSourceTVGameSmall::clear_players() {
  players_.Clear();
}
inline ::proto::dota::CSourceTVGameSmall_Player* CSourceTVGameSmall::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSourceTVGameSmall.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >*
CSourceTVGameSmall::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSourceTVGameSmall.players)
  return &players_;
}
inline const ::proto::dota::CSourceTVGameSmall_Player& CSourceTVGameSmall::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.players)
  return players_.Get(index);
}
inline ::proto::dota::CSourceTVGameSmall_Player* CSourceTVGameSmall::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CSourceTVGameSmall.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >&
CSourceTVGameSmall::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSourceTVGameSmall.players)
  return players_;
}

// optional fixed32 building_state = 23;
inline bool CSourceTVGameSmall::has_building_state() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSourceTVGameSmall::clear_building_state() {
  building_state_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::building_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.building_state)
  return building_state_;
}
inline void CSourceTVGameSmall::set_building_state(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  building_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.building_state)
}

// optional uint32 weekend_tourney_tournament_id = 26;
inline bool CSourceTVGameSmall::has_weekend_tourney_tournament_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_tournament_id() {
  weekend_tourney_tournament_id_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_tournament_id)
  return weekend_tourney_tournament_id_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_tournament_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  weekend_tourney_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_division = 27;
inline bool CSourceTVGameSmall::has_weekend_tourney_division() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_division() {
  weekend_tourney_division_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_division)
  return weekend_tourney_division_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_division(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  weekend_tourney_division_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 28;
inline bool CSourceTVGameSmall::has_weekend_tourney_skill_level() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 29;
inline bool CSourceTVGameSmall::has_weekend_tourney_bracket_round() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_bracket_round() {
  weekend_tourney_bracket_round_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_bracket_round)
  return weekend_tourney_bracket_round_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_bracket_round(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  weekend_tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_bracket_round)
}

// -------------------------------------------------------------------

// CMsgClientToGCFindTopSourceTVGames

// optional string search_key = 1;
inline bool CMsgClientToGCFindTopSourceTVGames::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgClientToGCFindTopSourceTVGames::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
  return search_key_.GetNoArena();
}
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
#if LANG_CXX11
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
#endif
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
inline ::std::string* CMsgClientToGCFindTopSourceTVGames::mutable_search_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientToGCFindTopSourceTVGames::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
  if (!has_search_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return search_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientToGCFindTopSourceTVGames::set_allocated_search_key(::std::string* search_key) {
  if (search_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}

// optional uint32 league_id = 2;
inline bool CMsgClientToGCFindTopSourceTVGames::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.league_id)
  return league_id_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgClientToGCFindTopSourceTVGames::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.hero_id)
}

// optional uint32 start_game = 4;
inline bool CMsgClientToGCFindTopSourceTVGames::has_start_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_start_game() {
  start_game_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.start_game)
  return start_game_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_start_game(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.start_game)
}

// optional uint32 game_list_index = 5;
inline bool CMsgClientToGCFindTopSourceTVGames::has_game_list_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_game_list_index() {
  game_list_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::game_list_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.game_list_index)
  return game_list_index_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_game_list_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  game_list_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.game_list_index)
}

// repeated uint64 lobby_ids = 6;
inline int CMsgClientToGCFindTopSourceTVGames::lobby_ids_size() const {
  return lobby_ids_.size();
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_lobby_ids() {
  lobby_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientToGCFindTopSourceTVGames::lobby_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return lobby_ids_.Get(index);
}
inline void CMsgClientToGCFindTopSourceTVGames::set_lobby_ids(int index, ::google::protobuf::uint64 value) {
  lobby_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
inline void CMsgClientToGCFindTopSourceTVGames::add_lobby_ids(::google::protobuf::uint64 value) {
  lobby_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientToGCFindTopSourceTVGames::lobby_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return lobby_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientToGCFindTopSourceTVGames::mutable_lobby_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return &lobby_ids_;
}

// -------------------------------------------------------------------

// CMsgGCToClientFindTopSourceTVGamesResponse

// optional string search_key = 1;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgGCToClientFindTopSourceTVGamesResponse::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return search_key_.GetNoArena();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
#if LANG_CXX11
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
#endif
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
inline ::std::string* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_search_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCToClientFindTopSourceTVGamesResponse::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  if (!has_search_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return search_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_allocated_search_key(::std::string* search_key) {
  if (search_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
  return league_id_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
  return hero_id_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
}

// optional uint32 start_game = 4;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_start_game() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_start_game() {
  start_game_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
  return start_game_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_start_game(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
}

// optional uint32 num_games = 5;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_num_games() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_num_games() {
  num_games_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::num_games() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
  return num_games_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_num_games(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_games_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
}

// optional uint32 game_list_index = 6;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_game_list_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list_index() {
  game_list_index_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::game_list_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
  return game_list_index_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_game_list_index(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  game_list_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
}

// repeated .proto.dota.CSourceTVGameSmall game_list = 7;
inline int CMsgGCToClientFindTopSourceTVGamesResponse::game_list_size() const {
  return game_list_.size();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list() {
  game_list_.Clear();
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return &game_list_;
}
inline const ::proto::dota::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::game_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Get(index);
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::add_game_list() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
CMsgGCToClientFindTopSourceTVGamesResponse::game_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_;
}

// optional bool specific_games = 8;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_specific_games() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_specific_games() {
  specific_games_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::specific_games() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
  return specific_games_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_specific_games(bool value) {
  _has_bits_[0] |= 0x00000080u;
  specific_games_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
}

// optional .proto.dota.CSourceTVGameSmall bot_game = 9;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_bot_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_bot_game() {
  if (bot_game_ != nullptr) bot_game_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::bot_game() const {
  const ::proto::dota::CSourceTVGameSmall* p = bot_game_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CSourceTVGameSmall*>(
      &::proto::dota::_CSourceTVGameSmall_default_instance_);
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::release_bot_game() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CSourceTVGameSmall* temp = bot_game_;
  bot_game_ = nullptr;
  return temp;
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_bot_game() {
  _has_bits_[0] |= 0x00000002u;
  if (bot_game_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CSourceTVGameSmall>(GetArenaNoVirtual());
    bot_game_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
  return bot_game_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_allocated_bot_game(::proto::dota::CSourceTVGameSmall* bot_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bot_game_;
  }
  if (bot_game) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bot_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bot_game, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bot_game_ = bot_game;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
}

// -------------------------------------------------------------------

// CMsgGCToClientTopWeekendTourneyGames

// repeated .proto.dota.CSourceTVGameSmall live_games = 1;
inline int CMsgGCToClientTopWeekendTourneyGames::live_games_size() const {
  return live_games_.size();
}
inline void CMsgGCToClientTopWeekendTourneyGames::clear_live_games() {
  live_games_.Clear();
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::mutable_live_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
CMsgGCToClientTopWeekendTourneyGames::mutable_live_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return &live_games_;
}
inline const ::proto::dota::CSourceTVGameSmall& CMsgGCToClientTopWeekendTourneyGames::live_games(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Get(index);
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::add_live_games() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
CMsgGCToClientTopWeekendTourneyGames::live_games() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_;
}

// -------------------------------------------------------------------

// CMsgClientToGCTopMatchesRequest

// optional uint32 hero_id = 1;
inline bool CMsgClientToGCTopMatchesRequest::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCTopMatchesRequest::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCTopMatchesRequest.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCTopMatchesRequest::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCTopMatchesRequest.hero_id)
}

// optional uint32 player_account_id = 2;
inline bool CMsgClientToGCTopMatchesRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCTopMatchesRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCTopMatchesRequest.player_account_id)
  return player_account_id_;
}
inline void CMsgClientToGCTopMatchesRequest::set_player_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCTopMatchesRequest.player_account_id)
}

// optional uint32 team_id = 3;
inline bool CMsgClientToGCTopMatchesRequest::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCTopMatchesRequest::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCTopMatchesRequest.team_id)
  return team_id_;
}
inline void CMsgClientToGCTopMatchesRequest::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCTopMatchesRequest.team_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCTopLeagueMatchesRequest

// -------------------------------------------------------------------

// CMsgClientToGCTopFriendMatchesRequest

// -------------------------------------------------------------------

// CMsgClientToGCMatchesMinimalRequest

// repeated uint64 match_ids = 1;
inline int CMsgClientToGCMatchesMinimalRequest::match_ids_size() const {
  return match_ids_.size();
}
inline void CMsgClientToGCMatchesMinimalRequest::clear_match_ids() {
  match_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientToGCMatchesMinimalRequest::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
  return match_ids_.Get(index);
}
inline void CMsgClientToGCMatchesMinimalRequest::set_match_ids(int index, ::google::protobuf::uint64 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
}
inline void CMsgClientToGCMatchesMinimalRequest::add_match_ids(::google::protobuf::uint64 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientToGCMatchesMinimalRequest::match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
  return match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientToGCMatchesMinimalRequest::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
  return &match_ids_;
}

// -------------------------------------------------------------------

// CMsgClientToGCMatchesMinimalResponse

// repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
inline int CMsgClientToGCMatchesMinimalResponse::matches_size() const {
  return matches_.size();
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgClientToGCMatchesMinimalResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return &matches_;
}
inline const ::proto::dota::CMsgDOTAMatchMinimal& CMsgClientToGCMatchesMinimalResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgClientToGCMatchesMinimalResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_;
}

// optional bool last_match = 2;
inline bool CMsgClientToGCMatchesMinimalResponse::has_last_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCMatchesMinimalResponse::clear_last_match() {
  last_match_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgClientToGCMatchesMinimalResponse::last_match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCMatchesMinimalResponse.last_match)
  return last_match_;
}
inline void CMsgClientToGCMatchesMinimalResponse::set_last_match(bool value) {
  _has_bits_[0] |= 0x00000001u;
  last_match_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCMatchesMinimalResponse.last_match)
}

// -------------------------------------------------------------------

// CMsgGCToClientTopLeagueMatchesResponse

// repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
inline int CMsgGCToClientTopLeagueMatchesResponse::matches_size() const {
  return matches_.size();
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopLeagueMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return &matches_;
}
inline const ::proto::dota::CMsgDOTAMatchMinimal& CMsgGCToClientTopLeagueMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopLeagueMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_;
}

// -------------------------------------------------------------------

// CMsgGCToClientTopFriendMatchesResponse

// repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
inline int CMsgGCToClientTopFriendMatchesResponse::matches_size() const {
  return matches_.size();
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopFriendMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return &matches_;
}
inline const ::proto::dota::CMsgDOTAMatchMinimal& CMsgGCToClientTopFriendMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopFriendMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_;
}

// -------------------------------------------------------------------

// CMsgClientToGCFindTopMatches

// optional uint32 start_game = 1;
inline bool CMsgClientToGCFindTopMatches::has_start_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCFindTopMatches::clear_start_game() {
  start_game_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.start_game)
  return start_game_;
}
inline void CMsgClientToGCFindTopMatches::set_start_game(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.start_game)
}

// optional uint32 league_id = 2;
inline bool CMsgClientToGCFindTopMatches::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCFindTopMatches::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.league_id)
  return league_id_;
}
inline void CMsgClientToGCFindTopMatches::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgClientToGCFindTopMatches::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCFindTopMatches::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCFindTopMatches::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.hero_id)
}

// optional uint32 friend_id = 4;
inline bool CMsgClientToGCFindTopMatches::has_friend_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientToGCFindTopMatches::clear_friend_id() {
  friend_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::friend_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.friend_id)
  return friend_id_;
}
inline void CMsgClientToGCFindTopMatches::set_friend_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.friend_id)
}

// optional bool friend_list = 5;
inline bool CMsgClientToGCFindTopMatches::has_friend_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientToGCFindTopMatches::clear_friend_list() {
  friend_list_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgClientToGCFindTopMatches::friend_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.friend_list)
  return friend_list_;
}
inline void CMsgClientToGCFindTopMatches::set_friend_list(bool value) {
  _has_bits_[0] |= 0x00000010u;
  friend_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.friend_list)
}

// optional bool league_list = 6;
inline bool CMsgClientToGCFindTopMatches::has_league_list() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientToGCFindTopMatches::clear_league_list() {
  league_list_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgClientToGCFindTopMatches::league_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.league_list)
  return league_list_;
}
inline void CMsgClientToGCFindTopMatches::set_league_list(bool value) {
  _has_bits_[0] |= 0x00000020u;
  league_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.league_list)
}

// -------------------------------------------------------------------

// CMsgGCToClientFindTopLeagueMatchesResponse

// optional uint32 start_game = 1;
inline bool CMsgGCToClientFindTopLeagueMatchesResponse::has_start_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_start_game() {
  start_game_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.start_game)
  return start_game_;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_start_game(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.start_game)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToClientFindTopLeagueMatchesResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.league_id)
  return league_id_;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_league_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgGCToClientFindTopLeagueMatchesResponse::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.hero_id)
  return hero_id_;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_hero_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.hero_id)
}

// repeated uint32 match_ids = 4;
inline int CMsgGCToClientFindTopLeagueMatchesResponse::match_ids_size() const {
  return match_ids_.size();
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_match_ids() {
  match_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return match_ids_.Get(index);
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_match_ids(int index, ::google::protobuf::uint32 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::add_match_ids(::google::protobuf::uint32 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCToClientFindTopLeagueMatchesResponse::match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCToClientFindTopLeagueMatchesResponse::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return &match_ids_;
}

// repeated .proto.dota.CMsgDOTAMatch matches = 5;
inline int CMsgGCToClientFindTopLeagueMatchesResponse::matches_size() const {
  return matches_.size();
}
inline ::proto::dota::CMsgDOTAMatch* CMsgGCToClientFindTopLeagueMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >*
CMsgGCToClientFindTopLeagueMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return &matches_;
}
inline const ::proto::dota::CMsgDOTAMatch& CMsgGCToClientFindTopLeagueMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatch* CMsgGCToClientFindTopLeagueMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >&
CMsgGCToClientFindTopLeagueMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_;
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGame

// optional fixed64 steam_id = 1;
inline bool CMsgSpectateFriendGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectateFriendGame::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgSpectateFriendGame::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectateFriendGame.steam_id)
  return steam_id_;
}
inline void CMsgSpectateFriendGame::set_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectateFriendGame.steam_id)
}

// optional bool live = 2;
inline bool CMsgSpectateFriendGame::has_live() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSpectateFriendGame::clear_live() {
  live_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSpectateFriendGame::live() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectateFriendGame.live)
  return live_;
}
inline void CMsgSpectateFriendGame::set_live(bool value) {
  _has_bits_[0] |= 0x00000002u;
  live_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectateFriendGame.live)
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGameResponse

// optional fixed64 server_steamid = 4;
inline bool CMsgSpectateFriendGameResponse::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSpectateFriendGameResponse::clear_server_steamid() {
  server_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgSpectateFriendGameResponse::server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectateFriendGameResponse.server_steamid)
  return server_steamid_;
}
inline void CMsgSpectateFriendGameResponse::set_server_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectateFriendGameResponse.server_steamid)
}

// optional .proto.dota.CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
inline bool CMsgSpectateFriendGameResponse::has_watch_live_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectateFriendGameResponse::clear_watch_live_result() {
  watch_live_result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::watch_live_result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectateFriendGameResponse.watch_live_result)
  return static_cast< ::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult >(watch_live_result_);
}
inline void CMsgSpectateFriendGameResponse::set_watch_live_result(::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult value) {
  assert(::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  watch_live_result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectateFriendGameResponse.watch_live_result)
}

// -------------------------------------------------------------------

// CDOTAReplayDownloadInfo_Highlight

// optional uint32 timestamp = 1;
inline bool CDOTAReplayDownloadInfo_Highlight::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTAReplayDownloadInfo_Highlight::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.Highlight.timestamp)
  return timestamp_;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.Highlight.timestamp)
}

// optional string description = 2;
inline bool CDOTAReplayDownloadInfo_Highlight::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTAReplayDownloadInfo_Highlight::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
  return description_.GetNoArena();
}
inline void CDOTAReplayDownloadInfo_Highlight::set_description(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo_Highlight::set_description(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
#endif
inline void CDOTAReplayDownloadInfo_Highlight::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
inline void CDOTAReplayDownloadInfo_Highlight::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
inline ::std::string* CDOTAReplayDownloadInfo_Highlight::mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAReplayDownloadInfo_Highlight::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAReplayDownloadInfo_Highlight::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}

// -------------------------------------------------------------------

// CDOTAReplayDownloadInfo

// optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
inline bool CDOTAReplayDownloadInfo::has_match() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::proto::dota::CMsgDOTAMatchMinimal& CDOTAReplayDownloadInfo::match() const {
  const ::proto::dota::CMsgDOTAMatchMinimal* p = match_;
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.match)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTAMatchMinimal*>(
      &::proto::dota::_CMsgDOTAMatchMinimal_default_instance_);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::release_match() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.match)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::dota::CMsgDOTAMatchMinimal* temp = match_;
  match_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::mutable_match() {
  _has_bits_[0] |= 0x00000004u;
  if (match_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTAMatchMinimal>(GetArenaNoVirtual());
    match_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.match)
  return match_;
}
inline void CDOTAReplayDownloadInfo::set_allocated_match(::proto::dota::CMsgDOTAMatchMinimal* match) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(match_);
  }
  if (match) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      match = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.match)
}

// optional string title = 2;
inline bool CDOTAReplayDownloadInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAReplayDownloadInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTAReplayDownloadInfo::title() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.title)
  return title_.GetNoArena();
}
inline void CDOTAReplayDownloadInfo::set_title(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.title)
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo::set_title(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAReplayDownloadInfo.title)
}
#endif
inline void CDOTAReplayDownloadInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.title)
}
inline void CDOTAReplayDownloadInfo::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.title)
}
inline ::std::string* CDOTAReplayDownloadInfo::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAReplayDownloadInfo::release_title() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAReplayDownloadInfo::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.title)
}

// optional string description = 3;
inline bool CDOTAReplayDownloadInfo::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAReplayDownloadInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CDOTAReplayDownloadInfo::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.description)
  return description_.GetNoArena();
}
inline void CDOTAReplayDownloadInfo::set_description(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.description)
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo::set_description(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAReplayDownloadInfo.description)
}
#endif
inline void CDOTAReplayDownloadInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.description)
}
inline void CDOTAReplayDownloadInfo::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.description)
}
inline ::std::string* CDOTAReplayDownloadInfo::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAReplayDownloadInfo::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAReplayDownloadInfo::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.description)
}

// optional uint32 size = 4;
inline bool CDOTAReplayDownloadInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAReplayDownloadInfo::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDOTAReplayDownloadInfo::size() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.size)
  return size_;
}
inline void CDOTAReplayDownloadInfo::set_size(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.size)
}

// repeated string tags = 5;
inline int CDOTAReplayDownloadInfo::tags_size() const {
  return tags_.size();
}
inline void CDOTAReplayDownloadInfo::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CDOTAReplayDownloadInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_.Get(index);
}
inline ::std::string* CDOTAReplayDownloadInfo::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_.Mutable(index);
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CDOTAReplayDownloadInfo::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.tags)
}
inline ::std::string* CDOTAReplayDownloadInfo::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_.Add();
}
inline void CDOTAReplayDownloadInfo::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAReplayDownloadInfo.tags)
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAReplayDownloadInfo.tags)
}
#endif
inline void CDOTAReplayDownloadInfo::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDOTAReplayDownloadInfo.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CDOTAReplayDownloadInfo::tags() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CDOTAReplayDownloadInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAReplayDownloadInfo.tags)
  return &tags_;
}

// optional bool exists_on_disk = 6;
inline bool CDOTAReplayDownloadInfo::has_exists_on_disk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAReplayDownloadInfo::clear_exists_on_disk() {
  exists_on_disk_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CDOTAReplayDownloadInfo::exists_on_disk() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.exists_on_disk)
  return exists_on_disk_;
}
inline void CDOTAReplayDownloadInfo::set_exists_on_disk(bool value) {
  _has_bits_[0] |= 0x00000010u;
  exists_on_disk_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.exists_on_disk)
}

// -------------------------------------------------------------------

// CMsgWatchGame

// optional fixed64 server_steamid = 1;
inline bool CMsgWatchGame::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWatchGame::clear_server_steamid() {
  server_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgWatchGame::server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.server_steamid)
  return server_steamid_;
}
inline void CMsgWatchGame::set_server_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.server_steamid)
}

// optional uint32 client_version = 2;
inline bool CMsgWatchGame::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWatchGame::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgWatchGame::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.client_version)
  return client_version_;
}
inline void CMsgWatchGame::set_client_version(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.client_version)
}

// optional fixed64 watch_server_steamid = 3;
inline bool CMsgWatchGame::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWatchGame::clear_watch_server_steamid() {
  watch_server_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CMsgWatchGame::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.watch_server_steamid)
  return watch_server_steamid_;
}
inline void CMsgWatchGame::set_watch_server_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.watch_server_steamid)
}

// optional uint64 lobby_id = 4;
inline bool CMsgWatchGame::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWatchGame::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CMsgWatchGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.lobby_id)
  return lobby_id_;
}
inline void CMsgWatchGame::set_lobby_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.lobby_id)
}

// repeated uint32 regions = 5;
inline int CMsgWatchGame::regions_size() const {
  return regions_.size();
}
inline void CMsgWatchGame::clear_regions() {
  regions_.Clear();
}
inline ::google::protobuf::uint32 CMsgWatchGame::regions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.regions)
  return regions_.Get(index);
}
inline void CMsgWatchGame::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.regions)
}
inline void CMsgWatchGame::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgWatchGame.regions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgWatchGame::regions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgWatchGame.regions)
  return regions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgWatchGame::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgWatchGame.regions)
  return &regions_;
}

// -------------------------------------------------------------------

// CMsgCancelWatchGame

// -------------------------------------------------------------------

// CMsgWatchGameResponse

// optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
inline bool CMsgWatchGameResponse::has_watch_game_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWatchGameResponse::clear_watch_game_result() {
  watch_game_result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::proto::dota::CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::watch_game_result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.watch_game_result)
  return static_cast< ::proto::dota::CMsgWatchGameResponse_WatchGameResult >(watch_game_result_);
}
inline void CMsgWatchGameResponse::set_watch_game_result(::proto::dota::CMsgWatchGameResponse_WatchGameResult value) {
  assert(::proto::dota::CMsgWatchGameResponse_WatchGameResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  watch_game_result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.watch_game_result)
}

// optional uint32 source_tv_public_addr = 2;
inline bool CMsgWatchGameResponse::has_source_tv_public_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWatchGameResponse::clear_source_tv_public_addr() {
  source_tv_public_addr_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.source_tv_public_addr)
  return source_tv_public_addr_;
}
inline void CMsgWatchGameResponse::set_source_tv_public_addr(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  source_tv_public_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 3;
inline bool CMsgWatchGameResponse::has_source_tv_private_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWatchGameResponse::clear_source_tv_private_addr() {
  source_tv_private_addr_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.source_tv_private_addr)
  return source_tv_private_addr_;
}
inline void CMsgWatchGameResponse::set_source_tv_private_addr(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  source_tv_private_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.source_tv_private_addr)
}

// optional uint32 source_tv_port = 4;
inline bool CMsgWatchGameResponse::has_source_tv_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWatchGameResponse::clear_source_tv_port() {
  source_tv_port_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.source_tv_port)
  return source_tv_port_;
}
inline void CMsgWatchGameResponse::set_source_tv_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  source_tv_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.source_tv_port)
}

// optional fixed64 game_server_steamid = 5;
inline bool CMsgWatchGameResponse::has_game_server_steamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgWatchGameResponse::clear_game_server_steamid() {
  game_server_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.game_server_steamid)
  return game_server_steamid_;
}
inline void CMsgWatchGameResponse::set_game_server_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  game_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.game_server_steamid)
}

// optional fixed64 watch_server_steamid = 6;
inline bool CMsgWatchGameResponse::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgWatchGameResponse::clear_watch_server_steamid() {
  watch_server_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.watch_server_steamid)
  return watch_server_steamid_;
}
inline void CMsgWatchGameResponse::set_watch_server_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.watch_server_steamid)
}

// optional fixed64 watch_tv_unique_secret_code = 7;
inline bool CMsgWatchGameResponse::has_watch_tv_unique_secret_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgWatchGameResponse::clear_watch_tv_unique_secret_code() {
  watch_tv_unique_secret_code_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::watch_tv_unique_secret_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.watch_tv_unique_secret_code)
  return watch_tv_unique_secret_code_;
}
inline void CMsgWatchGameResponse::set_watch_tv_unique_secret_code(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  watch_tv_unique_secret_code_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.watch_tv_unique_secret_code)
}

// -------------------------------------------------------------------

// CMsgPartyLeaderWatchGamePrompt

// optional fixed64 game_server_steamid = 5;
inline bool CMsgPartyLeaderWatchGamePrompt::has_game_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPartyLeaderWatchGamePrompt::clear_game_server_steamid() {
  game_server_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CMsgPartyLeaderWatchGamePrompt::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
  return game_server_steamid_;
}
inline void CMsgPartyLeaderWatchGamePrompt::set_game_server_steamid(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  game_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
}

// -------------------------------------------------------------------

// CDOTABroadcasterInfo

// optional uint32 account_id = 1;
inline bool CDOTABroadcasterInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTABroadcasterInfo::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.account_id)
  return account_id_;
}
inline void CDOTABroadcasterInfo::set_account_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.account_id)
}

// optional fixed64 server_steam_id = 2;
inline bool CDOTABroadcasterInfo::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTABroadcasterInfo::clear_server_steam_id() {
  server_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 CDOTABroadcasterInfo::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.server_steam_id)
  return server_steam_id_;
}
inline void CDOTABroadcasterInfo::set_server_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.server_steam_id)
}

// optional bool live = 3;
inline bool CDOTABroadcasterInfo::has_live() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTABroadcasterInfo::clear_live() {
  live_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CDOTABroadcasterInfo::live() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.live)
  return live_;
}
inline void CDOTABroadcasterInfo::set_live(bool value) {
  _has_bits_[0] |= 0x00000020u;
  live_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.live)
}

// optional string team_name_radiant = 4;
inline bool CDOTABroadcasterInfo::has_team_name_radiant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTABroadcasterInfo::clear_team_name_radiant() {
  team_name_radiant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTABroadcasterInfo::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
  return team_name_radiant_.GetNoArena();
}
inline void CDOTABroadcasterInfo::set_team_name_radiant(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
#if LANG_CXX11
inline void CDOTABroadcasterInfo::set_team_name_radiant(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_radiant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
#endif
inline void CDOTABroadcasterInfo::set_team_name_radiant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
inline void CDOTABroadcasterInfo::set_team_name_radiant(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
inline ::std::string* CDOTABroadcasterInfo::mutable_team_name_radiant() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
  return team_name_radiant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTABroadcasterInfo::release_team_name_radiant() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
  if (!has_team_name_radiant()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_radiant_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTABroadcasterInfo::set_allocated_team_name_radiant(::std::string* team_name_radiant) {
  if (team_name_radiant != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_radiant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_radiant);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}

// optional string team_name_dire = 5;
inline bool CDOTABroadcasterInfo::has_team_name_dire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTABroadcasterInfo::clear_team_name_dire() {
  team_name_dire_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CDOTABroadcasterInfo::team_name_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.team_name_dire)
  return team_name_dire_.GetNoArena();
}
inline void CDOTABroadcasterInfo::set_team_name_dire(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
#if LANG_CXX11
inline void CDOTABroadcasterInfo::set_team_name_dire(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_name_dire_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
#endif
inline void CDOTABroadcasterInfo::set_team_name_dire(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
inline void CDOTABroadcasterInfo::set_team_name_dire(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
inline ::std::string* CDOTABroadcasterInfo::mutable_team_name_dire() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcasterInfo.team_name_dire)
  return team_name_dire_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTABroadcasterInfo::release_team_name_dire() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcasterInfo.team_name_dire)
  if (!has_team_name_dire()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_name_dire_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTABroadcasterInfo::set_allocated_team_name_dire(::std::string* team_name_dire) {
  if (team_name_dire != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_name_dire_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_dire);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}

// optional uint32 series_game = 7;
inline bool CDOTABroadcasterInfo::has_series_game() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTABroadcasterInfo::clear_series_game() {
  series_game_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::series_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.series_game)
  return series_game_;
}
inline void CDOTABroadcasterInfo::set_series_game(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  series_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.series_game)
}

// optional uint32 upcoming_broadcast_timestamp = 9;
inline bool CDOTABroadcasterInfo::has_upcoming_broadcast_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTABroadcasterInfo::clear_upcoming_broadcast_timestamp() {
  upcoming_broadcast_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::upcoming_broadcast_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
  return upcoming_broadcast_timestamp_;
}
inline void CDOTABroadcasterInfo::set_upcoming_broadcast_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  upcoming_broadcast_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
}

// optional bool allow_live_video = 10;
inline bool CDOTABroadcasterInfo::has_allow_live_video() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTABroadcasterInfo::clear_allow_live_video() {
  allow_live_video_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CDOTABroadcasterInfo::allow_live_video() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.allow_live_video)
  return allow_live_video_;
}
inline void CDOTABroadcasterInfo::set_allow_live_video(bool value) {
  _has_bits_[0] |= 0x00000040u;
  allow_live_video_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.allow_live_video)
}

// optional uint32 node_type = 11;
inline bool CDOTABroadcasterInfo::has_node_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTABroadcasterInfo::clear_node_type() {
  node_type_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::node_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.node_type)
  return node_type_;
}
inline void CDOTABroadcasterInfo::set_node_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  node_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.node_type)
}

// optional string node_name = 12;
inline bool CDOTABroadcasterInfo::has_node_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTABroadcasterInfo::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& CDOTABroadcasterInfo::node_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.node_name)
  return node_name_.GetNoArena();
}
inline void CDOTABroadcasterInfo::set_node_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.node_name)
}
#if LANG_CXX11
inline void CDOTABroadcasterInfo::set_node_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcasterInfo.node_name)
}
#endif
inline void CDOTABroadcasterInfo::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcasterInfo.node_name)
}
inline void CDOTABroadcasterInfo::set_node_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcasterInfo.node_name)
}
inline ::std::string* CDOTABroadcasterInfo::mutable_node_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcasterInfo.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTABroadcasterInfo::release_node_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcasterInfo.node_name)
  if (!has_node_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return node_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTABroadcasterInfo::set_allocated_node_name(::std::string* node_name) {
  if (node_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcasterInfo.node_name)
}

// -------------------------------------------------------------------

// CMsgDOTASeries_TeamInfo

// optional uint32 team_id = 1;
inline bool CMsgDOTASeries_TeamInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeries_TeamInfo::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTASeries_TeamInfo::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.TeamInfo.team_id)
  return team_id_;
}
inline void CMsgDOTASeries_TeamInfo::set_team_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeries.TeamInfo.team_id)
}

// optional string team_name = 2;
inline bool CMsgDOTASeries_TeamInfo::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeries_TeamInfo::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CMsgDOTASeries_TeamInfo::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.TeamInfo.team_name)
  return team_name_.GetNoArena();
}
inline void CMsgDOTASeries_TeamInfo::set_team_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeries.TeamInfo.team_name)
}
#if LANG_CXX11
inline void CMsgDOTASeries_TeamInfo::set_team_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeries.TeamInfo.team_name)
}
#endif
inline void CMsgDOTASeries_TeamInfo::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeries.TeamInfo.team_name)
}
inline void CMsgDOTASeries_TeamInfo::set_team_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeries.TeamInfo.team_name)
}
inline ::std::string* CMsgDOTASeries_TeamInfo::mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeries.TeamInfo.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeries_TeamInfo::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeries.TeamInfo.team_name)
  if (!has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeries_TeamInfo::set_allocated_team_name(::std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeries.TeamInfo.team_name)
}

// optional string team_logo_url = 3;
inline bool CMsgDOTASeries_TeamInfo::has_team_logo_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeries_TeamInfo::clear_team_logo_url() {
  team_logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CMsgDOTASeries_TeamInfo::team_logo_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url)
  return team_logo_url_.GetNoArena();
}
inline void CMsgDOTASeries_TeamInfo::set_team_logo_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url)
}
#if LANG_CXX11
inline void CMsgDOTASeries_TeamInfo::set_team_logo_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url)
}
#endif
inline void CMsgDOTASeries_TeamInfo::set_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url)
}
inline void CMsgDOTASeries_TeamInfo::set_team_logo_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url)
}
inline ::std::string* CMsgDOTASeries_TeamInfo::mutable_team_logo_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url)
  return team_logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTASeries_TeamInfo::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url)
  if (!has_team_logo_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_logo_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTASeries_TeamInfo::set_allocated_team_logo_url(::std::string* team_logo_url) {
  if (team_logo_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_logo_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url)
}

// optional uint32 wager_count = 4;
inline bool CMsgDOTASeries_TeamInfo::has_wager_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeries_TeamInfo::clear_wager_count() {
  wager_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTASeries_TeamInfo::wager_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.TeamInfo.wager_count)
  return wager_count_;
}
inline void CMsgDOTASeries_TeamInfo::set_wager_count(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  wager_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeries.TeamInfo.wager_count)
}

// -------------------------------------------------------------------

// CMsgDOTASeries_LiveGame

// optional fixed64 server_steam_id = 1;
inline bool CMsgDOTASeries_LiveGame::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeries_LiveGame::clear_server_steam_id() {
  server_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 CMsgDOTASeries_LiveGame::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.LiveGame.server_steam_id)
  return server_steam_id_;
}
inline void CMsgDOTASeries_LiveGame::set_server_steam_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeries.LiveGame.server_steam_id)
}

// optional .proto.dota.CMsgDOTASeries.TeamInfo team_radiant = 2;
inline bool CMsgDOTASeries_LiveGame::has_team_radiant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeries_LiveGame::clear_team_radiant() {
  if (team_radiant_ != nullptr) team_radiant_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CMsgDOTASeries_TeamInfo& CMsgDOTASeries_LiveGame::team_radiant() const {
  const ::proto::dota::CMsgDOTASeries_TeamInfo* p = team_radiant_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.LiveGame.team_radiant)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTASeries_TeamInfo*>(
      &::proto::dota::_CMsgDOTASeries_TeamInfo_default_instance_);
}
inline ::proto::dota::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::release_team_radiant() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeries.LiveGame.team_radiant)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgDOTASeries_TeamInfo* temp = team_radiant_;
  team_radiant_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::mutable_team_radiant() {
  _has_bits_[0] |= 0x00000001u;
  if (team_radiant_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTASeries_TeamInfo>(GetArenaNoVirtual());
    team_radiant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeries.LiveGame.team_radiant)
  return team_radiant_;
}
inline void CMsgDOTASeries_LiveGame::set_allocated_team_radiant(::proto::dota::CMsgDOTASeries_TeamInfo* team_radiant) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_radiant_;
  }
  if (team_radiant) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team_radiant = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_radiant, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_radiant_ = team_radiant;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeries.LiveGame.team_radiant)
}

// optional .proto.dota.CMsgDOTASeries.TeamInfo team_dire = 3;
inline bool CMsgDOTASeries_LiveGame::has_team_dire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeries_LiveGame::clear_team_dire() {
  if (team_dire_ != nullptr) team_dire_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CMsgDOTASeries_TeamInfo& CMsgDOTASeries_LiveGame::team_dire() const {
  const ::proto::dota::CMsgDOTASeries_TeamInfo* p = team_dire_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.LiveGame.team_dire)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTASeries_TeamInfo*>(
      &::proto::dota::_CMsgDOTASeries_TeamInfo_default_instance_);
}
inline ::proto::dota::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::release_team_dire() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeries.LiveGame.team_dire)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CMsgDOTASeries_TeamInfo* temp = team_dire_;
  team_dire_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTASeries_TeamInfo* CMsgDOTASeries_LiveGame::mutable_team_dire() {
  _has_bits_[0] |= 0x00000002u;
  if (team_dire_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTASeries_TeamInfo>(GetArenaNoVirtual());
    team_dire_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeries.LiveGame.team_dire)
  return team_dire_;
}
inline void CMsgDOTASeries_LiveGame::set_allocated_team_dire(::proto::dota::CMsgDOTASeries_TeamInfo* team_dire) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_dire_;
  }
  if (team_dire) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team_dire = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_dire, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_dire_ = team_dire;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeries.LiveGame.team_dire)
}

// optional uint32 team_radiant_score = 4;
inline bool CMsgDOTASeries_LiveGame::has_team_radiant_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeries_LiveGame::clear_team_radiant_score() {
  team_radiant_score_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTASeries_LiveGame::team_radiant_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.LiveGame.team_radiant_score)
  return team_radiant_score_;
}
inline void CMsgDOTASeries_LiveGame::set_team_radiant_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_radiant_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeries.LiveGame.team_radiant_score)
}

// optional uint32 team_dire_score = 5;
inline bool CMsgDOTASeries_LiveGame::has_team_dire_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeries_LiveGame::clear_team_dire_score() {
  team_dire_score_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTASeries_LiveGame::team_dire_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.LiveGame.team_dire_score)
  return team_dire_score_;
}
inline void CMsgDOTASeries_LiveGame::set_team_dire_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  team_dire_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeries.LiveGame.team_dire_score)
}

// -------------------------------------------------------------------

// CMsgDOTASeries

// optional uint32 series_id = 1;
inline bool CMsgDOTASeries::has_series_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTASeries::clear_series_id() {
  series_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTASeries::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.series_id)
  return series_id_;
}
inline void CMsgDOTASeries::set_series_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeries.series_id)
}

// optional uint32 series_type = 2;
inline bool CMsgDOTASeries::has_series_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTASeries::clear_series_type() {
  series_type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTASeries::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.series_type)
  return series_type_;
}
inline void CMsgDOTASeries::set_series_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeries.series_type)
}

// optional .proto.dota.CMsgDOTASeries.TeamInfo team_1 = 3;
inline bool CMsgDOTASeries::has_team_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTASeries::clear_team_1() {
  if (team_1_ != nullptr) team_1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::dota::CMsgDOTASeries_TeamInfo& CMsgDOTASeries::team_1() const {
  const ::proto::dota::CMsgDOTASeries_TeamInfo* p = team_1_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.team_1)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTASeries_TeamInfo*>(
      &::proto::dota::_CMsgDOTASeries_TeamInfo_default_instance_);
}
inline ::proto::dota::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::release_team_1() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeries.team_1)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::dota::CMsgDOTASeries_TeamInfo* temp = team_1_;
  team_1_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::mutable_team_1() {
  _has_bits_[0] |= 0x00000001u;
  if (team_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTASeries_TeamInfo>(GetArenaNoVirtual());
    team_1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeries.team_1)
  return team_1_;
}
inline void CMsgDOTASeries::set_allocated_team_1(::proto::dota::CMsgDOTASeries_TeamInfo* team_1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_1_;
  }
  if (team_1) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team_1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_1_ = team_1;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeries.team_1)
}

// optional .proto.dota.CMsgDOTASeries.TeamInfo team_2 = 4;
inline bool CMsgDOTASeries::has_team_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTASeries::clear_team_2() {
  if (team_2_ != nullptr) team_2_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::dota::CMsgDOTASeries_TeamInfo& CMsgDOTASeries::team_2() const {
  const ::proto::dota::CMsgDOTASeries_TeamInfo* p = team_2_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.team_2)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTASeries_TeamInfo*>(
      &::proto::dota::_CMsgDOTASeries_TeamInfo_default_instance_);
}
inline ::proto::dota::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::release_team_2() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeries.team_2)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::dota::CMsgDOTASeries_TeamInfo* temp = team_2_;
  team_2_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTASeries_TeamInfo* CMsgDOTASeries::mutable_team_2() {
  _has_bits_[0] |= 0x00000002u;
  if (team_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTASeries_TeamInfo>(GetArenaNoVirtual());
    team_2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeries.team_2)
  return team_2_;
}
inline void CMsgDOTASeries::set_allocated_team_2(::proto::dota::CMsgDOTASeries_TeamInfo* team_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_2_;
  }
  if (team_2) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team_2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_2_ = team_2;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeries.team_2)
}

// repeated .proto.dota.CMsgDOTAMatchMinimal match_minimal = 5;
inline int CMsgDOTASeries::match_minimal_size() const {
  return match_minimal_.size();
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgDOTASeries::mutable_match_minimal(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeries.match_minimal)
  return match_minimal_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgDOTASeries::mutable_match_minimal() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeries.match_minimal)
  return &match_minimal_;
}
inline const ::proto::dota::CMsgDOTAMatchMinimal& CMsgDOTASeries::match_minimal(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.match_minimal)
  return match_minimal_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgDOTASeries::add_match_minimal() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeries.match_minimal)
  return match_minimal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgDOTASeries::match_minimal() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeries.match_minimal)
  return match_minimal_;
}

// optional .proto.dota.CMsgDOTASeries.LiveGame live_game = 6;
inline bool CMsgDOTASeries::has_live_game() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTASeries::clear_live_game() {
  if (live_game_ != nullptr) live_game_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::proto::dota::CMsgDOTASeries_LiveGame& CMsgDOTASeries::live_game() const {
  const ::proto::dota::CMsgDOTASeries_LiveGame* p = live_game_;
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeries.live_game)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::dota::CMsgDOTASeries_LiveGame*>(
      &::proto::dota::_CMsgDOTASeries_LiveGame_default_instance_);
}
inline ::proto::dota::CMsgDOTASeries_LiveGame* CMsgDOTASeries::release_live_game() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeries.live_game)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::dota::CMsgDOTASeries_LiveGame* temp = live_game_;
  live_game_ = nullptr;
  return temp;
}
inline ::proto::dota::CMsgDOTASeries_LiveGame* CMsgDOTASeries::mutable_live_game() {
  _has_bits_[0] |= 0x00000004u;
  if (live_game_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::dota::CMsgDOTASeries_LiveGame>(GetArenaNoVirtual());
    live_game_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeries.live_game)
  return live_game_;
}
inline void CMsgDOTASeries::set_allocated_live_game(::proto::dota::CMsgDOTASeries_LiveGame* live_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete live_game_;
  }
  if (live_game) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      live_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, live_game, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  live_game_ = live_game;
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeries.live_game)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult>() {
  return ::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::CMsgWatchGameResponse_WatchGameResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgWatchGameResponse_WatchGameResult>() {
  return ::proto::dota::CMsgWatchGameResponse_WatchGameResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fwatch_2eproto
